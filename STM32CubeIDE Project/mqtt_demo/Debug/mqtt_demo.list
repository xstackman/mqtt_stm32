
mqtt_demo.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000172b0  08000200  08000200  00010200  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000039dc  080174b0  080174b0  000274b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801ae8c  0801ae8c  000301d4  2**0
                  CONTENTS
  4 .ARM          00000008  0801ae8c  0801ae8c  0002ae8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801ae94  0801ae94  000301d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801ae94  0801ae94  0002ae94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801ae98  0801ae98  0002ae98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000094  20000000  0801ae9c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20000094  0801af30  00030094  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000134  0801afd0  00030134  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0000d0d4  200001d4  0801b070  000301d4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  2000d2a8  0801b070  0003d2a8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000301d4  2**0
                  CONTENTS, READONLY
 14 .debug_info   00034448  00000000  00000000  00030202  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007931  00000000  00000000  0006464a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002418  00000000  00000000  0006bf80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00002328  00000000  00000000  0006e398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003953e  00000000  00000000  000706c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037c4e  00000000  00000000  000a9bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001224ff  00000000  00000000  000e184c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000050  00000000  00000000  00203d4b  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00009dec  00000000  00000000  00203d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <__do_global_dtors_aux>:
 8000200:	b510      	push	{r4, lr}
 8000202:	4c05      	ldr	r4, [pc, #20]	; (8000218 <__do_global_dtors_aux+0x18>)
 8000204:	7823      	ldrb	r3, [r4, #0]
 8000206:	b933      	cbnz	r3, 8000216 <__do_global_dtors_aux+0x16>
 8000208:	4b04      	ldr	r3, [pc, #16]	; (800021c <__do_global_dtors_aux+0x1c>)
 800020a:	b113      	cbz	r3, 8000212 <__do_global_dtors_aux+0x12>
 800020c:	4804      	ldr	r0, [pc, #16]	; (8000220 <__do_global_dtors_aux+0x20>)
 800020e:	f3af 8000 	nop.w
 8000212:	2301      	movs	r3, #1
 8000214:	7023      	strb	r3, [r4, #0]
 8000216:	bd10      	pop	{r4, pc}
 8000218:	200001d4 	.word	0x200001d4
 800021c:	00000000 	.word	0x00000000
 8000220:	08017498 	.word	0x08017498

08000224 <frame_dummy>:
 8000224:	b508      	push	{r3, lr}
 8000226:	4b03      	ldr	r3, [pc, #12]	; (8000234 <frame_dummy+0x10>)
 8000228:	b11b      	cbz	r3, 8000232 <frame_dummy+0xe>
 800022a:	4903      	ldr	r1, [pc, #12]	; (8000238 <frame_dummy+0x14>)
 800022c:	4803      	ldr	r0, [pc, #12]	; (800023c <frame_dummy+0x18>)
 800022e:	f3af 8000 	nop.w
 8000232:	bd08      	pop	{r3, pc}
 8000234:	00000000 	.word	0x00000000
 8000238:	200001d8 	.word	0x200001d8
 800023c:	08017498 	.word	0x08017498

08000240 <strlen>:
 8000240:	4603      	mov	r3, r0
 8000242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000246:	2a00      	cmp	r2, #0
 8000248:	d1fb      	bne.n	8000242 <strlen+0x2>
 800024a:	1a18      	subs	r0, r3, r0
 800024c:	3801      	subs	r0, #1
 800024e:	4770      	bx	lr

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b974 	b.w	80005f0 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	4604      	mov	r4, r0
 8000328:	468e      	mov	lr, r1
 800032a:	2b00      	cmp	r3, #0
 800032c:	d14d      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032e:	428a      	cmp	r2, r1
 8000330:	4694      	mov	ip, r2
 8000332:	d969      	bls.n	8000408 <__udivmoddi4+0xe8>
 8000334:	fab2 f282 	clz	r2, r2
 8000338:	b152      	cbz	r2, 8000350 <__udivmoddi4+0x30>
 800033a:	fa01 f302 	lsl.w	r3, r1, r2
 800033e:	f1c2 0120 	rsb	r1, r2, #32
 8000342:	fa20 f101 	lsr.w	r1, r0, r1
 8000346:	fa0c fc02 	lsl.w	ip, ip, r2
 800034a:	ea41 0e03 	orr.w	lr, r1, r3
 800034e:	4094      	lsls	r4, r2
 8000350:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000354:	0c21      	lsrs	r1, r4, #16
 8000356:	fbbe f6f8 	udiv	r6, lr, r8
 800035a:	fa1f f78c 	uxth.w	r7, ip
 800035e:	fb08 e316 	mls	r3, r8, r6, lr
 8000362:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000366:	fb06 f107 	mul.w	r1, r6, r7
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f106 30ff 	add.w	r0, r6, #4294967295
 8000376:	f080 811f 	bcs.w	80005b8 <__udivmoddi4+0x298>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 811c 	bls.w	80005b8 <__udivmoddi4+0x298>
 8000380:	3e02      	subs	r6, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a5b      	subs	r3, r3, r1
 8000386:	b2a4      	uxth	r4, r4
 8000388:	fbb3 f0f8 	udiv	r0, r3, r8
 800038c:	fb08 3310 	mls	r3, r8, r0, r3
 8000390:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000394:	fb00 f707 	mul.w	r7, r0, r7
 8000398:	42a7      	cmp	r7, r4
 800039a:	d90a      	bls.n	80003b2 <__udivmoddi4+0x92>
 800039c:	eb1c 0404 	adds.w	r4, ip, r4
 80003a0:	f100 33ff 	add.w	r3, r0, #4294967295
 80003a4:	f080 810a 	bcs.w	80005bc <__udivmoddi4+0x29c>
 80003a8:	42a7      	cmp	r7, r4
 80003aa:	f240 8107 	bls.w	80005bc <__udivmoddi4+0x29c>
 80003ae:	4464      	add	r4, ip
 80003b0:	3802      	subs	r0, #2
 80003b2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003b6:	1be4      	subs	r4, r4, r7
 80003b8:	2600      	movs	r6, #0
 80003ba:	b11d      	cbz	r5, 80003c4 <__udivmoddi4+0xa4>
 80003bc:	40d4      	lsrs	r4, r2
 80003be:	2300      	movs	r3, #0
 80003c0:	e9c5 4300 	strd	r4, r3, [r5]
 80003c4:	4631      	mov	r1, r6
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d909      	bls.n	80003e2 <__udivmoddi4+0xc2>
 80003ce:	2d00      	cmp	r5, #0
 80003d0:	f000 80ef 	beq.w	80005b2 <__udivmoddi4+0x292>
 80003d4:	2600      	movs	r6, #0
 80003d6:	e9c5 0100 	strd	r0, r1, [r5]
 80003da:	4630      	mov	r0, r6
 80003dc:	4631      	mov	r1, r6
 80003de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003e2:	fab3 f683 	clz	r6, r3
 80003e6:	2e00      	cmp	r6, #0
 80003e8:	d14a      	bne.n	8000480 <__udivmoddi4+0x160>
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d302      	bcc.n	80003f4 <__udivmoddi4+0xd4>
 80003ee:	4282      	cmp	r2, r0
 80003f0:	f200 80f9 	bhi.w	80005e6 <__udivmoddi4+0x2c6>
 80003f4:	1a84      	subs	r4, r0, r2
 80003f6:	eb61 0303 	sbc.w	r3, r1, r3
 80003fa:	2001      	movs	r0, #1
 80003fc:	469e      	mov	lr, r3
 80003fe:	2d00      	cmp	r5, #0
 8000400:	d0e0      	beq.n	80003c4 <__udivmoddi4+0xa4>
 8000402:	e9c5 4e00 	strd	r4, lr, [r5]
 8000406:	e7dd      	b.n	80003c4 <__udivmoddi4+0xa4>
 8000408:	b902      	cbnz	r2, 800040c <__udivmoddi4+0xec>
 800040a:	deff      	udf	#255	; 0xff
 800040c:	fab2 f282 	clz	r2, r2
 8000410:	2a00      	cmp	r2, #0
 8000412:	f040 8092 	bne.w	800053a <__udivmoddi4+0x21a>
 8000416:	eba1 010c 	sub.w	r1, r1, ip
 800041a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800041e:	fa1f fe8c 	uxth.w	lr, ip
 8000422:	2601      	movs	r6, #1
 8000424:	0c20      	lsrs	r0, r4, #16
 8000426:	fbb1 f3f7 	udiv	r3, r1, r7
 800042a:	fb07 1113 	mls	r1, r7, r3, r1
 800042e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000432:	fb0e f003 	mul.w	r0, lr, r3
 8000436:	4288      	cmp	r0, r1
 8000438:	d908      	bls.n	800044c <__udivmoddi4+0x12c>
 800043a:	eb1c 0101 	adds.w	r1, ip, r1
 800043e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000442:	d202      	bcs.n	800044a <__udivmoddi4+0x12a>
 8000444:	4288      	cmp	r0, r1
 8000446:	f200 80cb 	bhi.w	80005e0 <__udivmoddi4+0x2c0>
 800044a:	4643      	mov	r3, r8
 800044c:	1a09      	subs	r1, r1, r0
 800044e:	b2a4      	uxth	r4, r4
 8000450:	fbb1 f0f7 	udiv	r0, r1, r7
 8000454:	fb07 1110 	mls	r1, r7, r0, r1
 8000458:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800045c:	fb0e fe00 	mul.w	lr, lr, r0
 8000460:	45a6      	cmp	lr, r4
 8000462:	d908      	bls.n	8000476 <__udivmoddi4+0x156>
 8000464:	eb1c 0404 	adds.w	r4, ip, r4
 8000468:	f100 31ff 	add.w	r1, r0, #4294967295
 800046c:	d202      	bcs.n	8000474 <__udivmoddi4+0x154>
 800046e:	45a6      	cmp	lr, r4
 8000470:	f200 80bb 	bhi.w	80005ea <__udivmoddi4+0x2ca>
 8000474:	4608      	mov	r0, r1
 8000476:	eba4 040e 	sub.w	r4, r4, lr
 800047a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800047e:	e79c      	b.n	80003ba <__udivmoddi4+0x9a>
 8000480:	f1c6 0720 	rsb	r7, r6, #32
 8000484:	40b3      	lsls	r3, r6
 8000486:	fa22 fc07 	lsr.w	ip, r2, r7
 800048a:	ea4c 0c03 	orr.w	ip, ip, r3
 800048e:	fa20 f407 	lsr.w	r4, r0, r7
 8000492:	fa01 f306 	lsl.w	r3, r1, r6
 8000496:	431c      	orrs	r4, r3
 8000498:	40f9      	lsrs	r1, r7
 800049a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800049e:	fa00 f306 	lsl.w	r3, r0, r6
 80004a2:	fbb1 f8f9 	udiv	r8, r1, r9
 80004a6:	0c20      	lsrs	r0, r4, #16
 80004a8:	fa1f fe8c 	uxth.w	lr, ip
 80004ac:	fb09 1118 	mls	r1, r9, r8, r1
 80004b0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80004b4:	fb08 f00e 	mul.w	r0, r8, lr
 80004b8:	4288      	cmp	r0, r1
 80004ba:	fa02 f206 	lsl.w	r2, r2, r6
 80004be:	d90b      	bls.n	80004d8 <__udivmoddi4+0x1b8>
 80004c0:	eb1c 0101 	adds.w	r1, ip, r1
 80004c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c8:	f080 8088 	bcs.w	80005dc <__udivmoddi4+0x2bc>
 80004cc:	4288      	cmp	r0, r1
 80004ce:	f240 8085 	bls.w	80005dc <__udivmoddi4+0x2bc>
 80004d2:	f1a8 0802 	sub.w	r8, r8, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	1a09      	subs	r1, r1, r0
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb1 f0f9 	udiv	r0, r1, r9
 80004e0:	fb09 1110 	mls	r1, r9, r0, r1
 80004e4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004e8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ec:	458e      	cmp	lr, r1
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x1e2>
 80004f0:	eb1c 0101 	adds.w	r1, ip, r1
 80004f4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004f8:	d26c      	bcs.n	80005d4 <__udivmoddi4+0x2b4>
 80004fa:	458e      	cmp	lr, r1
 80004fc:	d96a      	bls.n	80005d4 <__udivmoddi4+0x2b4>
 80004fe:	3802      	subs	r0, #2
 8000500:	4461      	add	r1, ip
 8000502:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000506:	fba0 9402 	umull	r9, r4, r0, r2
 800050a:	eba1 010e 	sub.w	r1, r1, lr
 800050e:	42a1      	cmp	r1, r4
 8000510:	46c8      	mov	r8, r9
 8000512:	46a6      	mov	lr, r4
 8000514:	d356      	bcc.n	80005c4 <__udivmoddi4+0x2a4>
 8000516:	d053      	beq.n	80005c0 <__udivmoddi4+0x2a0>
 8000518:	b15d      	cbz	r5, 8000532 <__udivmoddi4+0x212>
 800051a:	ebb3 0208 	subs.w	r2, r3, r8
 800051e:	eb61 010e 	sbc.w	r1, r1, lr
 8000522:	fa01 f707 	lsl.w	r7, r1, r7
 8000526:	fa22 f306 	lsr.w	r3, r2, r6
 800052a:	40f1      	lsrs	r1, r6
 800052c:	431f      	orrs	r7, r3
 800052e:	e9c5 7100 	strd	r7, r1, [r5]
 8000532:	2600      	movs	r6, #0
 8000534:	4631      	mov	r1, r6
 8000536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	40d8      	lsrs	r0, r3
 8000540:	fa0c fc02 	lsl.w	ip, ip, r2
 8000544:	fa21 f303 	lsr.w	r3, r1, r3
 8000548:	4091      	lsls	r1, r2
 800054a:	4301      	orrs	r1, r0
 800054c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000550:	fa1f fe8c 	uxth.w	lr, ip
 8000554:	fbb3 f0f7 	udiv	r0, r3, r7
 8000558:	fb07 3610 	mls	r6, r7, r0, r3
 800055c:	0c0b      	lsrs	r3, r1, #16
 800055e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000562:	fb00 f60e 	mul.w	r6, r0, lr
 8000566:	429e      	cmp	r6, r3
 8000568:	fa04 f402 	lsl.w	r4, r4, r2
 800056c:	d908      	bls.n	8000580 <__udivmoddi4+0x260>
 800056e:	eb1c 0303 	adds.w	r3, ip, r3
 8000572:	f100 38ff 	add.w	r8, r0, #4294967295
 8000576:	d22f      	bcs.n	80005d8 <__udivmoddi4+0x2b8>
 8000578:	429e      	cmp	r6, r3
 800057a:	d92d      	bls.n	80005d8 <__udivmoddi4+0x2b8>
 800057c:	3802      	subs	r0, #2
 800057e:	4463      	add	r3, ip
 8000580:	1b9b      	subs	r3, r3, r6
 8000582:	b289      	uxth	r1, r1
 8000584:	fbb3 f6f7 	udiv	r6, r3, r7
 8000588:	fb07 3316 	mls	r3, r7, r6, r3
 800058c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000590:	fb06 f30e 	mul.w	r3, r6, lr
 8000594:	428b      	cmp	r3, r1
 8000596:	d908      	bls.n	80005aa <__udivmoddi4+0x28a>
 8000598:	eb1c 0101 	adds.w	r1, ip, r1
 800059c:	f106 38ff 	add.w	r8, r6, #4294967295
 80005a0:	d216      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 80005a2:	428b      	cmp	r3, r1
 80005a4:	d914      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 80005a6:	3e02      	subs	r6, #2
 80005a8:	4461      	add	r1, ip
 80005aa:	1ac9      	subs	r1, r1, r3
 80005ac:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80005b0:	e738      	b.n	8000424 <__udivmoddi4+0x104>
 80005b2:	462e      	mov	r6, r5
 80005b4:	4628      	mov	r0, r5
 80005b6:	e705      	b.n	80003c4 <__udivmoddi4+0xa4>
 80005b8:	4606      	mov	r6, r0
 80005ba:	e6e3      	b.n	8000384 <__udivmoddi4+0x64>
 80005bc:	4618      	mov	r0, r3
 80005be:	e6f8      	b.n	80003b2 <__udivmoddi4+0x92>
 80005c0:	454b      	cmp	r3, r9
 80005c2:	d2a9      	bcs.n	8000518 <__udivmoddi4+0x1f8>
 80005c4:	ebb9 0802 	subs.w	r8, r9, r2
 80005c8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80005cc:	3801      	subs	r0, #1
 80005ce:	e7a3      	b.n	8000518 <__udivmoddi4+0x1f8>
 80005d0:	4646      	mov	r6, r8
 80005d2:	e7ea      	b.n	80005aa <__udivmoddi4+0x28a>
 80005d4:	4620      	mov	r0, r4
 80005d6:	e794      	b.n	8000502 <__udivmoddi4+0x1e2>
 80005d8:	4640      	mov	r0, r8
 80005da:	e7d1      	b.n	8000580 <__udivmoddi4+0x260>
 80005dc:	46d0      	mov	r8, sl
 80005de:	e77b      	b.n	80004d8 <__udivmoddi4+0x1b8>
 80005e0:	3b02      	subs	r3, #2
 80005e2:	4461      	add	r1, ip
 80005e4:	e732      	b.n	800044c <__udivmoddi4+0x12c>
 80005e6:	4630      	mov	r0, r6
 80005e8:	e709      	b.n	80003fe <__udivmoddi4+0xde>
 80005ea:	4464      	add	r4, ip
 80005ec:	3802      	subs	r0, #2
 80005ee:	e742      	b.n	8000476 <__udivmoddi4+0x156>

080005f0 <__aeabi_idiv0>:
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop

080005f4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80005f4:	b480      	push	{r7}
 80005f6:	b085      	sub	sp, #20
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	60f8      	str	r0, [r7, #12]
 80005fc:	60b9      	str	r1, [r7, #8]
 80005fe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	4a07      	ldr	r2, [pc, #28]	; (8000620 <vApplicationGetIdleTaskMemory+0x2c>)
 8000604:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	4a06      	ldr	r2, [pc, #24]	; (8000624 <vApplicationGetIdleTaskMemory+0x30>)
 800060a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	2280      	movs	r2, #128	; 0x80
 8000610:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	200001f0 	.word	0x200001f0
 8000624:	200002a4 	.word	0x200002a4

08000628 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000628:	b5b0      	push	{r4, r5, r7, lr}
 800062a:	b088      	sub	sp, #32
 800062c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800062e:	f000 fe13 	bl	8001258 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000632:	f000 f821 	bl	8000678 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000636:	f000 f8c1 	bl	80007bc <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800063a:	f000 f88f 	bl	800075c <MX_USART3_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of mqttTask */
  osThreadDef(mqttTask, mqtt_manager, osPriorityNormal, 0, 256);
 800063e:	4b0b      	ldr	r3, [pc, #44]	; (800066c <main+0x44>)
 8000640:	1d3c      	adds	r4, r7, #4
 8000642:	461d      	mov	r5, r3
 8000644:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000646:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000648:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800064c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mqttTaskHandle = osThreadCreate(osThread(mqttTask), NULL);
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 f9fd 	bl	8005a54 <osThreadCreate>
 800065a:	4603      	mov	r3, r0
 800065c:	4a04      	ldr	r2, [pc, #16]	; (8000670 <main+0x48>)
 800065e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8000660:	f005 f9e1 	bl	8005a26 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("[main.c] FreeRTOS Started\r\n");
 8000664:	4803      	ldr	r0, [pc, #12]	; (8000674 <main+0x4c>)
 8000666:	f015 fff9 	bl	801665c <puts>
  while (1)
 800066a:	e7fe      	b.n	800066a <main+0x42>
 800066c:	080174e0 	.word	0x080174e0
 8000670:	2000052c 	.word	0x2000052c
 8000674:	080174c4 	.word	0x080174c4

08000678 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b094      	sub	sp, #80	; 0x50
 800067c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800067e:	f107 031c 	add.w	r3, r7, #28
 8000682:	2234      	movs	r2, #52	; 0x34
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f015 fec5 	bl	8016416 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068c:	f107 0308 	add.w	r3, r7, #8
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800069c:	f002 fabe 	bl	8002c1c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	4b2c      	ldr	r3, [pc, #176]	; (8000754 <SystemClock_Config+0xdc>)
 80006a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006a4:	4a2b      	ldr	r2, [pc, #172]	; (8000754 <SystemClock_Config+0xdc>)
 80006a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006aa:	6413      	str	r3, [r2, #64]	; 0x40
 80006ac:	4b29      	ldr	r3, [pc, #164]	; (8000754 <SystemClock_Config+0xdc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006b4:	607b      	str	r3, [r7, #4]
 80006b6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80006b8:	4b27      	ldr	r3, [pc, #156]	; (8000758 <SystemClock_Config+0xe0>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <SystemClock_Config+0xe0>)
 80006c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006c6:	6013      	str	r3, [r2, #0]
 80006c8:	4b23      	ldr	r3, [pc, #140]	; (8000758 <SystemClock_Config+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006d0:	603b      	str	r3, [r7, #0]
 80006d2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006d4:	2301      	movs	r3, #1
 80006d6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80006d8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80006dc:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006de:	2302      	movs	r3, #2
 80006e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006e2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 80006e8:	2304      	movs	r3, #4
 80006ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006ec:	2360      	movs	r3, #96	; 0x60
 80006ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f0:	2302      	movs	r3, #2
 80006f2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006f4:	2304      	movs	r3, #4
 80006f6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006f8:	2302      	movs	r3, #2
 80006fa:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 031c 	add.w	r3, r7, #28
 8000700:	4618      	mov	r0, r3
 8000702:	f002 faeb 	bl	8002cdc <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800070c:	f000 fa10 	bl	8000b30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000710:	f002 fa94 	bl	8002c3c <HAL_PWREx_EnableOverDrive>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xa6>
  {
    Error_Handler();
 800071a:	f000 fa09 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2302      	movs	r3, #2
 8000724:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800072a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800072e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000730:	2300      	movs	r3, #0
 8000732:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000734:	f107 0308 	add.w	r3, r7, #8
 8000738:	2103      	movs	r1, #3
 800073a:	4618      	mov	r0, r3
 800073c:	f002 fd7c 	bl	8003238 <HAL_RCC_ClockConfig>
 8000740:	4603      	mov	r3, r0
 8000742:	2b00      	cmp	r3, #0
 8000744:	d001      	beq.n	800074a <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000746:	f000 f9f3 	bl	8000b30 <Error_Handler>
  }
}
 800074a:	bf00      	nop
 800074c:	3750      	adds	r7, #80	; 0x50
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000760:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000762:	4a15      	ldr	r2, [pc, #84]	; (80007b8 <MX_USART3_UART_Init+0x5c>)
 8000764:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000766:	4b13      	ldr	r3, [pc, #76]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000768:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800076c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000774:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 800077c:	2200      	movs	r2, #0
 800077e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000780:	4b0c      	ldr	r3, [pc, #48]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000782:	220c      	movs	r2, #12
 8000784:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000786:	4b0b      	ldr	r3, [pc, #44]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800078c:	4b09      	ldr	r3, [pc, #36]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 800078e:	2200      	movs	r2, #0
 8000790:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000792:	4b08      	ldr	r3, [pc, #32]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 8000794:	2200      	movs	r2, #0
 8000796:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000798:	4b06      	ldr	r3, [pc, #24]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 800079a:	2200      	movs	r2, #0
 800079c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800079e:	4805      	ldr	r0, [pc, #20]	; (80007b4 <MX_USART3_UART_Init+0x58>)
 80007a0:	f003 feaa 	bl	80044f8 <HAL_UART_Init>
 80007a4:	4603      	mov	r3, r0
 80007a6:	2b00      	cmp	r3, #0
 80007a8:	d001      	beq.n	80007ae <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80007aa:	f000 f9c1 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80007ae:	bf00      	nop
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	200004a4 	.word	0x200004a4
 80007b8:	40004800 	.word	0x40004800

080007bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08c      	sub	sp, #48	; 0x30
 80007c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007c2:	f107 031c 	add.w	r3, r7, #28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
 80007d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d2:	4b56      	ldr	r3, [pc, #344]	; (800092c <MX_GPIO_Init+0x170>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a55      	ldr	r2, [pc, #340]	; (800092c <MX_GPIO_Init+0x170>)
 80007d8:	f043 0304 	orr.w	r3, r3, #4
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b53      	ldr	r3, [pc, #332]	; (800092c <MX_GPIO_Init+0x170>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0304 	and.w	r3, r3, #4
 80007e6:	61bb      	str	r3, [r7, #24]
 80007e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007ea:	4b50      	ldr	r3, [pc, #320]	; (800092c <MX_GPIO_Init+0x170>)
 80007ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ee:	4a4f      	ldr	r2, [pc, #316]	; (800092c <MX_GPIO_Init+0x170>)
 80007f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80007f4:	6313      	str	r3, [r2, #48]	; 0x30
 80007f6:	4b4d      	ldr	r3, [pc, #308]	; (800092c <MX_GPIO_Init+0x170>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007fe:	617b      	str	r3, [r7, #20]
 8000800:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000802:	4b4a      	ldr	r3, [pc, #296]	; (800092c <MX_GPIO_Init+0x170>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000806:	4a49      	ldr	r2, [pc, #292]	; (800092c <MX_GPIO_Init+0x170>)
 8000808:	f043 0301 	orr.w	r3, r3, #1
 800080c:	6313      	str	r3, [r2, #48]	; 0x30
 800080e:	4b47      	ldr	r3, [pc, #284]	; (800092c <MX_GPIO_Init+0x170>)
 8000810:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000812:	f003 0301 	and.w	r3, r3, #1
 8000816:	613b      	str	r3, [r7, #16]
 8000818:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800081a:	4b44      	ldr	r3, [pc, #272]	; (800092c <MX_GPIO_Init+0x170>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800081e:	4a43      	ldr	r2, [pc, #268]	; (800092c <MX_GPIO_Init+0x170>)
 8000820:	f043 0302 	orr.w	r3, r3, #2
 8000824:	6313      	str	r3, [r2, #48]	; 0x30
 8000826:	4b41      	ldr	r3, [pc, #260]	; (800092c <MX_GPIO_Init+0x170>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	f003 0302 	and.w	r3, r3, #2
 800082e:	60fb      	str	r3, [r7, #12]
 8000830:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000832:	4b3e      	ldr	r3, [pc, #248]	; (800092c <MX_GPIO_Init+0x170>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	4a3d      	ldr	r2, [pc, #244]	; (800092c <MX_GPIO_Init+0x170>)
 8000838:	f043 0308 	orr.w	r3, r3, #8
 800083c:	6313      	str	r3, [r2, #48]	; 0x30
 800083e:	4b3b      	ldr	r3, [pc, #236]	; (800092c <MX_GPIO_Init+0x170>)
 8000840:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000842:	f003 0308 	and.w	r3, r3, #8
 8000846:	60bb      	str	r3, [r7, #8]
 8000848:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800084a:	4b38      	ldr	r3, [pc, #224]	; (800092c <MX_GPIO_Init+0x170>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800084e:	4a37      	ldr	r2, [pc, #220]	; (800092c <MX_GPIO_Init+0x170>)
 8000850:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000854:	6313      	str	r3, [r2, #48]	; 0x30
 8000856:	4b35      	ldr	r3, [pc, #212]	; (800092c <MX_GPIO_Init+0x170>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	f244 0181 	movw	r1, #16513	; 0x4081
 8000868:	4831      	ldr	r0, [pc, #196]	; (8000930 <MX_GPIO_Init+0x174>)
 800086a:	f002 f9a3 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800086e:	2200      	movs	r2, #0
 8000870:	2140      	movs	r1, #64	; 0x40
 8000872:	4830      	ldr	r0, [pc, #192]	; (8000934 <MX_GPIO_Init+0x178>)
 8000874:	f002 f99e 	bl	8002bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000878:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800087c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800087e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000888:	f107 031c 	add.w	r3, r7, #28
 800088c:	4619      	mov	r1, r3
 800088e:	482a      	ldr	r0, [pc, #168]	; (8000938 <MX_GPIO_Init+0x17c>)
 8000890:	f001 ffe4 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000894:	f244 0381 	movw	r3, #16513	; 0x4081
 8000898:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800089a:	2301      	movs	r3, #1
 800089c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	4619      	mov	r1, r3
 80008ac:	4820      	ldr	r0, [pc, #128]	; (8000930 <MX_GPIO_Init+0x174>)
 80008ae:	f001 ffd5 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008b2:	2340      	movs	r3, #64	; 0x40
 80008b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008b6:	2301      	movs	r3, #1
 80008b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008be:	2300      	movs	r3, #0
 80008c0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008c2:	f107 031c 	add.w	r3, r7, #28
 80008c6:	4619      	mov	r1, r3
 80008c8:	481a      	ldr	r0, [pc, #104]	; (8000934 <MX_GPIO_Init+0x178>)
 80008ca:	f001 ffc7 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008ce:	2380      	movs	r3, #128	; 0x80
 80008d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008d2:	2300      	movs	r3, #0
 80008d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d6:	2300      	movs	r3, #0
 80008d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008da:	f107 031c 	add.w	r3, r7, #28
 80008de:	4619      	mov	r1, r3
 80008e0:	4814      	ldr	r0, [pc, #80]	; (8000934 <MX_GPIO_Init+0x178>)
 80008e2:	f001 ffbb 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin USB_ID_Pin USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 80008e6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 80008ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ec:	2302      	movs	r3, #2
 80008ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f0:	2300      	movs	r3, #0
 80008f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f4:	2303      	movs	r3, #3
 80008f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80008f8:	230a      	movs	r3, #10
 80008fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008fc:	f107 031c 	add.w	r3, r7, #28
 8000900:	4619      	mov	r1, r3
 8000902:	480e      	ldr	r0, [pc, #56]	; (800093c <MX_GPIO_Init+0x180>)
 8000904:	f001 ffaa 	bl	800285c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000908:	f44f 7300 	mov.w	r3, #512	; 0x200
 800090c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800090e:	2300      	movs	r3, #0
 8000910:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 031c 	add.w	r3, r7, #28
 800091a:	4619      	mov	r1, r3
 800091c:	4807      	ldr	r0, [pc, #28]	; (800093c <MX_GPIO_Init+0x180>)
 800091e:	f001 ff9d 	bl	800285c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000922:	bf00      	nop
 8000924:	3730      	adds	r7, #48	; 0x30
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	40023800 	.word	0x40023800
 8000930:	40020400 	.word	0x40020400
 8000934:	40021800 	.word	0x40021800
 8000938:	40020800 	.word	0x40020800
 800093c:	40020000 	.word	0x40020000

08000940 <__io_putchar>:
  * @brief  Retargets the C library printf function to the USART.
  * @param  None
  * @retval None
  */
PUTCHAR_PROTOTYPE
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 0xFFFF);
 8000948:	1d39      	adds	r1, r7, #4
 800094a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800094e:	2201      	movs	r2, #1
 8000950:	4803      	ldr	r0, [pc, #12]	; (8000960 <__io_putchar+0x20>)
 8000952:	f003 fe1f 	bl	8004594 <HAL_UART_Transmit>
  return ch;
 8000956:	687b      	ldr	r3, [r7, #4]
}
 8000958:	4618      	mov	r0, r3
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}
 8000960:	200004a4 	.word	0x200004a4

08000964 <mqtt_publish_cb_t>:
static void mqtt_publish_cb_t(void *arg, err_t err){
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	460b      	mov	r3, r1
 800096e:	70fb      	strb	r3, [r7, #3]
	printf("[main.c] Message sended with error code: %d\r\n",err);
 8000970:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000974:	4619      	mov	r1, r3
 8000976:	4803      	ldr	r0, [pc, #12]	; (8000984 <mqtt_publish_cb_t+0x20>)
 8000978:	f015 fdea 	bl	8016550 <iprintf>
}
 800097c:	bf00      	nop
 800097e:	3708      	adds	r7, #8
 8000980:	46bd      	mov	sp, r7
 8000982:	bd80      	pop	{r7, pc}
 8000984:	080174fc 	.word	0x080174fc

08000988 <mqtt_incoming_publish_cb>:
  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
  LWIP_PLATFORM_DIAG(("MQTT SUB callback client \"%s\" request cb: err %d\r\n", client_info->client_id, (int)err));
}

static void mqtt_incoming_publish_cb(void *arg, const char *topic, u32_t tot_len)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b086      	sub	sp, #24
 800098c:	af00      	add	r7, sp, #0
 800098e:	60f8      	str	r0, [r7, #12]
 8000990:	60b9      	str	r1, [r7, #8]
 8000992:	607a      	str	r2, [r7, #4]
  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	617b      	str	r3, [r7, #20]
  LWIP_PLATFORM_DIAG(("MQTT client \"%s\" publish cb: topic %s, len %d\r\n", client_info->client_id,
 8000998:	697b      	ldr	r3, [r7, #20]
 800099a:	6819      	ldr	r1, [r3, #0]
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	68ba      	ldr	r2, [r7, #8]
 80009a0:	4803      	ldr	r0, [pc, #12]	; (80009b0 <mqtt_incoming_publish_cb+0x28>)
 80009a2:	f015 fdd5 	bl	8016550 <iprintf>
          topic, (int)tot_len));
}
 80009a6:	bf00      	nop
 80009a8:	3718      	adds	r7, #24
 80009aa:	46bd      	mov	sp, r7
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	08017560 	.word	0x08017560

080009b4 <mqtt_incoming_data_cb>:

static void mqtt_incoming_data_cb(void *arg, const u8_t *data, u16_t len, u8_t flags)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b086      	sub	sp, #24
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4611      	mov	r1, r2
 80009c0:	461a      	mov	r2, r3
 80009c2:	460b      	mov	r3, r1
 80009c4:	80fb      	strh	r3, [r7, #6]
 80009c6:	4613      	mov	r3, r2
 80009c8:	717b      	strb	r3, [r7, #5]
  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 80009ca:	68fb      	ldr	r3, [r7, #12]
 80009cc:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(data);
  LWIP_PLATFORM_DIAG(("MQTT client \"%s\" data cb: len %d, flags %d\r\n", client_info->client_id,
 80009ce:	697b      	ldr	r3, [r7, #20]
 80009d0:	6819      	ldr	r1, [r3, #0]
 80009d2:	88fa      	ldrh	r2, [r7, #6]
 80009d4:	797b      	ldrb	r3, [r7, #5]
 80009d6:	4803      	ldr	r0, [pc, #12]	; (80009e4 <mqtt_incoming_data_cb+0x30>)
 80009d8:	f015 fdba 	bl	8016550 <iprintf>
          (int)len, (int)flags));
}
 80009dc:	bf00      	nop
 80009de:	3718      	adds	r7, #24
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}
 80009e4:	08017590 	.word	0x08017590

080009e8 <mqtt_connection_cb>:

static void mqtt_connection_cb(mqtt_client_t *client, void *arg, mqtt_connection_status_t status)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	4613      	mov	r3, r2
 80009f4:	80fb      	strh	r3, [r7, #6]
  const struct mqtt_connect_client_info_t* client_info = (const struct mqtt_connect_client_info_t*)arg;
 80009f6:	68bb      	ldr	r3, [r7, #8]
 80009f8:	617b      	str	r3, [r7, #20]
  LWIP_UNUSED_ARG(client);
  LWIP_PLATFORM_DIAG(("MQTT client \"%s\" connection cb: status %d\r\n", client_info->client_id, (int)status));
 80009fa:	697b      	ldr	r3, [r7, #20]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	88fa      	ldrh	r2, [r7, #6]
 8000a00:	4619      	mov	r1, r3
 8000a02:	4806      	ldr	r0, [pc, #24]	; (8000a1c <mqtt_connection_cb+0x34>)
 8000a04:	f015 fda4 	bl	8016550 <iprintf>

  if (status == MQTT_CONNECT_ACCEPTED) {
 8000a08:	88fb      	ldrh	r3, [r7, #6]
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d102      	bne.n	8000a14 <mqtt_connection_cb+0x2c>
            mqtt_request_cb, LWIP_CONST_CAST(void*, client_info));
    mqtt_sub_unsub(client,
            "test", 0,
            mqtt_request_cb, LWIP_CONST_CAST(void*, client_info),
            1);*/
	  printf("[main.c] MQTT connected correctly\r\n");
 8000a0e:	4804      	ldr	r0, [pc, #16]	; (8000a20 <mqtt_connection_cb+0x38>)
 8000a10:	f015 fe24 	bl	801665c <puts>
  }
}
 8000a14:	bf00      	nop
 8000a16:	3718      	adds	r7, #24
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	080175c0 	.word	0x080175c0
 8000a20:	080175ec 	.word	0x080175ec

08000a24 <mqtt_manager>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_mqtt_manager */
void mqtt_manager(void const * argument)
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000a2c:	f004 fa50 	bl	8004ed0 <MX_LWIP_Init>
  /* USER CODE BEGIN 5 */
  printf("[main.c] LWIP Init\r\n");
 8000a30:	4827      	ldr	r0, [pc, #156]	; (8000ad0 <mqtt_manager+0xac>)
 8000a32:	f015 fe13 	bl	801665c <puts>
  printf("[main.c] Setting MQTT connection\r\n");
 8000a36:	4827      	ldr	r0, [pc, #156]	; (8000ad4 <mqtt_manager+0xb0>)
 8000a38:	f015 fe10 	bl	801665c <puts>
  uint16_t mqttPort = 1883;
 8000a3c:	f240 735b 	movw	r3, #1883	; 0x75b
 8000a40:	81fb      	strh	r3, [r7, #14]
  uint8_t flag = ipaddr_aton("192.168.1.219",&MQTT_SERVER);
 8000a42:	4925      	ldr	r1, [pc, #148]	; (8000ad8 <mqtt_manager+0xb4>)
 8000a44:	4825      	ldr	r0, [pc, #148]	; (8000adc <mqtt_manager+0xb8>)
 8000a46:	f014 fa57 	bl	8014ef8 <ip4addr_aton>
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	737b      	strb	r3, [r7, #13]
  if(flag){
 8000a4e:	7b7b      	ldrb	r3, [r7, #13]
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	d003      	beq.n	8000a5c <mqtt_manager+0x38>
	  printf("[main.c] IP server converted correctly\r\n");
 8000a54:	4822      	ldr	r0, [pc, #136]	; (8000ae0 <mqtt_manager+0xbc>)
 8000a56:	f015 fe01 	bl	801665c <puts>
 8000a5a:	e002      	b.n	8000a62 <mqtt_manager+0x3e>
  }else{
	  printf("[main.c] Something go wrong converting the IP\r\n");
 8000a5c:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <mqtt_manager+0xc0>)
 8000a5e:	f015 fdfd 	bl	801665c <puts>
  }
  mqtt_client = mqtt_client_new();
 8000a62:	f009 fa73 	bl	8009f4c <mqtt_client_new>
 8000a66:	4603      	mov	r3, r0
 8000a68:	4a1f      	ldr	r2, [pc, #124]	; (8000ae8 <mqtt_manager+0xc4>)
 8000a6a:	6013      	str	r3, [r2, #0]
  mqtt_set_inpub_callback(mqtt_client,
 8000a6c:	4b1e      	ldr	r3, [pc, #120]	; (8000ae8 <mqtt_manager+0xc4>)
 8000a6e:	6818      	ldr	r0, [r3, #0]
 8000a70:	4b1e      	ldr	r3, [pc, #120]	; (8000aec <mqtt_manager+0xc8>)
 8000a72:	4a1f      	ldr	r2, [pc, #124]	; (8000af0 <mqtt_manager+0xcc>)
 8000a74:	491f      	ldr	r1, [pc, #124]	; (8000af4 <mqtt_manager+0xd0>)
 8000a76:	f009 fa45 	bl	8009f04 <mqtt_set_inpub_callback>
          mqtt_incoming_publish_cb,
          mqtt_incoming_data_cb,
          LWIP_CONST_CAST(void*, &mqtt_client_info));
  mqtt_client_connect(mqtt_client,
 8000a7a:	4b1b      	ldr	r3, [pc, #108]	; (8000ae8 <mqtt_manager+0xc4>)
 8000a7c:	6818      	ldr	r0, [r3, #0]
 8000a7e:	89fa      	ldrh	r2, [r7, #14]
 8000a80:	4b1a      	ldr	r3, [pc, #104]	; (8000aec <mqtt_manager+0xc8>)
 8000a82:	9301      	str	r3, [sp, #4]
 8000a84:	4b19      	ldr	r3, [pc, #100]	; (8000aec <mqtt_manager+0xc8>)
 8000a86:	9300      	str	r3, [sp, #0]
 8000a88:	4b1b      	ldr	r3, [pc, #108]	; (8000af8 <mqtt_manager+0xd4>)
 8000a8a:	4913      	ldr	r1, [pc, #76]	; (8000ad8 <mqtt_manager+0xb4>)
 8000a8c:	f009 fa68 	bl	8009f60 <mqtt_client_connect>

  //Subscribe to topic test

  //mqtt_subscribe(mqtt_client,"test",1,mqtt_sub_request_cb,NULL);
  /* Infinite loop */
  int8_t ret=100;
 8000a90:	2364      	movs	r3, #100	; 0x64
 8000a92:	733b      	strb	r3, [r7, #12]
  char *msg = "Hello from STM32";
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <mqtt_manager+0xd8>)
 8000a96:	60bb      	str	r3, [r7, #8]
  for(;;)
  {
	  ret = mqtt_publish(mqtt_client,"test",msg,16,0,0,mqtt_publish_cb_t,NULL);
 8000a98:	4b13      	ldr	r3, [pc, #76]	; (8000ae8 <mqtt_manager+0xc4>)
 8000a9a:	6818      	ldr	r0, [r3, #0]
 8000a9c:	2300      	movs	r3, #0
 8000a9e:	9303      	str	r3, [sp, #12]
 8000aa0:	4b17      	ldr	r3, [pc, #92]	; (8000b00 <mqtt_manager+0xdc>)
 8000aa2:	9302      	str	r3, [sp, #8]
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	9301      	str	r3, [sp, #4]
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	9300      	str	r3, [sp, #0]
 8000aac:	2310      	movs	r3, #16
 8000aae:	68ba      	ldr	r2, [r7, #8]
 8000ab0:	4914      	ldr	r1, [pc, #80]	; (8000b04 <mqtt_manager+0xe0>)
 8000ab2:	f009 f953 	bl	8009d5c <mqtt_publish>
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	733b      	strb	r3, [r7, #12]
	  printf("[main.c] Publication flag is %d\r\n",ret);
 8000aba:	f997 300c 	ldrsb.w	r3, [r7, #12]
 8000abe:	4619      	mov	r1, r3
 8000ac0:	4811      	ldr	r0, [pc, #68]	; (8000b08 <mqtt_manager+0xe4>)
 8000ac2:	f015 fd45 	bl	8016550 <iprintf>
	  osDelay(1000);
 8000ac6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000aca:	f005 f80f 	bl	8005aec <osDelay>
	  ret = mqtt_publish(mqtt_client,"test",msg,16,0,0,mqtt_publish_cb_t,NULL);
 8000ace:	e7e3      	b.n	8000a98 <mqtt_manager+0x74>
 8000ad0:	08017610 	.word	0x08017610
 8000ad4:	08017624 	.word	0x08017624
 8000ad8:	20000534 	.word	0x20000534
 8000adc:	08017648 	.word	0x08017648
 8000ae0:	08017658 	.word	0x08017658
 8000ae4:	08017680 	.word	0x08017680
 8000ae8:	20000530 	.word	0x20000530
 8000aec:	0801aabc 	.word	0x0801aabc
 8000af0:	080009b5 	.word	0x080009b5
 8000af4:	08000989 	.word	0x08000989
 8000af8:	080009e9 	.word	0x080009e9
 8000afc:	080176b0 	.word	0x080176b0
 8000b00:	08000965 	.word	0x08000965
 8000b04:	080174bc 	.word	0x080174bc
 8000b08:	080176c4 	.word	0x080176c4

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f000 fba9 	bl	8001274 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40010000 	.word	0x40010000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0);
 8000b38:	2101      	movs	r1, #1
 8000b3a:	4802      	ldr	r0, [pc, #8]	; (8000b44 <Error_Handler+0x14>)
 8000b3c:	f002 f853 	bl	8002be6 <HAL_GPIO_TogglePin>
  while (1){}
 8000b40:	e7fe      	b.n	8000b40 <Error_Handler+0x10>
 8000b42:	bf00      	nop
 8000b44:	40020400 	.word	0x40020400

08000b48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000b4e:	4b11      	ldr	r3, [pc, #68]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b52:	4a10      	ldr	r2, [pc, #64]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b58:	6413      	str	r3, [r2, #64]	; 0x40
 8000b5a:	4b0e      	ldr	r3, [pc, #56]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b62:	607b      	str	r3, [r7, #4]
 8000b64:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	4b0b      	ldr	r3, [pc, #44]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6a:	4a0a      	ldr	r2, [pc, #40]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b6c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b70:	6453      	str	r3, [r2, #68]	; 0x44
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <HAL_MspInit+0x4c>)
 8000b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b76:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7a:	603b      	str	r3, [r7, #0]
 8000b7c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b7e:	2200      	movs	r2, #0
 8000b80:	210f      	movs	r1, #15
 8000b82:	f06f 0001 	mvn.w	r0, #1
 8000b86:	f000 fc71 	bl	800146c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b8a:	bf00      	nop
 8000b8c:	3708      	adds	r7, #8
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40023800 	.word	0x40023800

08000b98 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b0ae      	sub	sp, #184	; 0xb8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	601a      	str	r2, [r3, #0]
 8000ba8:	605a      	str	r2, [r3, #4]
 8000baa:	609a      	str	r2, [r3, #8]
 8000bac:	60da      	str	r2, [r3, #12]
 8000bae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bb0:	f107 0314 	add.w	r3, r7, #20
 8000bb4:	2290      	movs	r2, #144	; 0x90
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f015 fc2c 	bl	8016416 <memset>
  if(huart->Instance==USART3)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a22      	ldr	r2, [pc, #136]	; (8000c4c <HAL_UART_MspInit+0xb4>)
 8000bc4:	4293      	cmp	r3, r2
 8000bc6:	d13c      	bne.n	8000c42 <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000bc8:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bcc:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	663b      	str	r3, [r7, #96]	; 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000bd2:	f107 0314 	add.w	r3, r7, #20
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	f002 fd86 	bl	80036e8 <HAL_RCCEx_PeriphCLKConfig>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d001      	beq.n	8000be6 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000be2:	f7ff ffa5 	bl	8000b30 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000be6:	4b1a      	ldr	r3, [pc, #104]	; (8000c50 <HAL_UART_MspInit+0xb8>)
 8000be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <HAL_UART_MspInit+0xb8>)
 8000bec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bf2:	4b17      	ldr	r3, [pc, #92]	; (8000c50 <HAL_UART_MspInit+0xb8>)
 8000bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bf6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000bfa:	613b      	str	r3, [r7, #16]
 8000bfc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000bfe:	4b14      	ldr	r3, [pc, #80]	; (8000c50 <HAL_UART_MspInit+0xb8>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a13      	ldr	r2, [pc, #76]	; (8000c50 <HAL_UART_MspInit+0xb8>)
 8000c04:	f043 0308 	orr.w	r3, r3, #8
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b11      	ldr	r3, [pc, #68]	; (8000c50 <HAL_UART_MspInit+0xb8>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0308 	and.w	r3, r3, #8
 8000c12:	60fb      	str	r3, [r7, #12]
 8000c14:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000c16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c2a:	2303      	movs	r3, #3
 8000c2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000c30:	2307      	movs	r3, #7
 8000c32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c36:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4805      	ldr	r0, [pc, #20]	; (8000c54 <HAL_UART_MspInit+0xbc>)
 8000c3e:	f001 fe0d 	bl	800285c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000c42:	bf00      	nop
 8000c44:	37b8      	adds	r7, #184	; 0xb8
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	bf00      	nop
 8000c4c:	40004800 	.word	0x40004800
 8000c50:	40023800 	.word	0x40023800
 8000c54:	40020c00 	.word	0x40020c00

08000c58 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b08c      	sub	sp, #48	; 0x30
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000c60:	2300      	movs	r3, #0
 8000c62:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000c64:	2300      	movs	r3, #0
 8000c66:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8000c68:	4b2e      	ldr	r3, [pc, #184]	; (8000d24 <HAL_InitTick+0xcc>)
 8000c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c6c:	4a2d      	ldr	r2, [pc, #180]	; (8000d24 <HAL_InitTick+0xcc>)
 8000c6e:	f043 0301 	orr.w	r3, r3, #1
 8000c72:	6453      	str	r3, [r2, #68]	; 0x44
 8000c74:	4b2b      	ldr	r3, [pc, #172]	; (8000d24 <HAL_InitTick+0xcc>)
 8000c76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c78:	f003 0301 	and.w	r3, r3, #1
 8000c7c:	60bb      	str	r3, [r7, #8]
 8000c7e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c80:	f107 020c 	add.w	r2, r7, #12
 8000c84:	f107 0310 	add.w	r3, r7, #16
 8000c88:	4611      	mov	r1, r2
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f002 fcfa 	bl	8003684 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000c90:	f002 fce4 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8000c94:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c98:	4a23      	ldr	r2, [pc, #140]	; (8000d28 <HAL_InitTick+0xd0>)
 8000c9a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c9e:	0c9b      	lsrs	r3, r3, #18
 8000ca0:	3b01      	subs	r3, #1
 8000ca2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8000ca4:	4b21      	ldr	r3, [pc, #132]	; (8000d2c <HAL_InitTick+0xd4>)
 8000ca6:	4a22      	ldr	r2, [pc, #136]	; (8000d30 <HAL_InitTick+0xd8>)
 8000ca8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8000caa:	4b20      	ldr	r3, [pc, #128]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cac:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8000cb2:	4a1e      	ldr	r2, [pc, #120]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8000cb8:	4b1c      	ldr	r3, [pc, #112]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cbe:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cc4:	4b19      	ldr	r3, [pc, #100]	; (8000d2c <HAL_InitTick+0xd4>)
 8000cc6:	2200      	movs	r2, #0
 8000cc8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8000cca:	4818      	ldr	r0, [pc, #96]	; (8000d2c <HAL_InitTick+0xd4>)
 8000ccc:	f003 f934 	bl	8003f38 <HAL_TIM_Base_Init>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000cd6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d11b      	bne.n	8000d16 <HAL_InitTick+0xbe>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8000cde:	4813      	ldr	r0, [pc, #76]	; (8000d2c <HAL_InitTick+0xd4>)
 8000ce0:	f003 f98c 	bl	8003ffc <HAL_TIM_Base_Start_IT>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000cea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000cee:	2b00      	cmp	r3, #0
 8000cf0:	d111      	bne.n	8000d16 <HAL_InitTick+0xbe>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000cf2:	2019      	movs	r0, #25
 8000cf4:	f000 fbd6 	bl	80014a4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	2b0f      	cmp	r3, #15
 8000cfc:	d808      	bhi.n	8000d10 <HAL_InitTick+0xb8>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	6879      	ldr	r1, [r7, #4]
 8000d02:	2019      	movs	r0, #25
 8000d04:	f000 fbb2 	bl	800146c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d08:	4a0a      	ldr	r2, [pc, #40]	; (8000d34 <HAL_InitTick+0xdc>)
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	6013      	str	r3, [r2, #0]
 8000d0e:	e002      	b.n	8000d16 <HAL_InitTick+0xbe>
      }
      else
      {
        status = HAL_ERROR;
 8000d10:	2301      	movs	r3, #1
 8000d12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3730      	adds	r7, #48	; 0x30
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023800 	.word	0x40023800
 8000d28:	431bde83 	.word	0x431bde83
 8000d2c:	20000538 	.word	0x20000538
 8000d30:	40010000 	.word	0x40010000
 8000d34:	20000004 	.word	0x20000004

08000d38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <NMI_Handler+0x4>

08000d3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4a:	b480      	push	{r7}
 8000d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d4e:	e7fe      	b.n	8000d4e <BusFault_Handler+0x4>

08000d50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d54:	e7fe      	b.n	8000d54 <UsageFault_Handler+0x4>

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8000d68:	4802      	ldr	r0, [pc, #8]	; (8000d74 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8000d6a:	f003 f9bf 	bl	80040ec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8000d6e:	bf00      	nop
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	20000538 	.word	0x20000538

08000d78 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000d7c:	4802      	ldr	r0, [pc, #8]	; (8000d88 <ETH_IRQHandler+0x10>)
 8000d7e:	f000 fe99 	bl	8001ab4 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	20004f6c 	.word	0x20004f6c

08000d8c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return 1;
 8000d90:	2301      	movs	r3, #1
}
 8000d92:	4618      	mov	r0, r3
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr

08000d9c <_kill>:

int _kill(int pid, int sig)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b083      	sub	sp, #12
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
 8000da4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000da6:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <_kill+0x20>)
 8000da8:	2216      	movs	r2, #22
 8000daa:	601a      	str	r2, [r3, #0]
  return -1;
 8000dac:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	370c      	adds	r7, #12
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	2000d2a4 	.word	0x2000d2a4

08000dc0 <_exit>:

void _exit (int status)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b082      	sub	sp, #8
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000dc8:	f04f 31ff 	mov.w	r1, #4294967295
 8000dcc:	6878      	ldr	r0, [r7, #4]
 8000dce:	f7ff ffe5 	bl	8000d9c <_kill>
  while (1) {}    /* Make sure we hang here */
 8000dd2:	e7fe      	b.n	8000dd2 <_exit+0x12>

08000dd4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b086      	sub	sp, #24
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	60f8      	str	r0, [r7, #12]
 8000ddc:	60b9      	str	r1, [r7, #8]
 8000dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000de0:	2300      	movs	r3, #0
 8000de2:	617b      	str	r3, [r7, #20]
 8000de4:	e00a      	b.n	8000dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000de6:	f3af 8000 	nop.w
 8000dea:	4601      	mov	r1, r0
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	1c5a      	adds	r2, r3, #1
 8000df0:	60ba      	str	r2, [r7, #8]
 8000df2:	b2ca      	uxtb	r2, r1
 8000df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000df6:	697b      	ldr	r3, [r7, #20]
 8000df8:	3301      	adds	r3, #1
 8000dfa:	617b      	str	r3, [r7, #20]
 8000dfc:	697a      	ldr	r2, [r7, #20]
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	429a      	cmp	r2, r3
 8000e02:	dbf0      	blt.n	8000de6 <_read+0x12>
  }

  return len;
 8000e04:	687b      	ldr	r3, [r7, #4]
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3718      	adds	r7, #24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	bd80      	pop	{r7, pc}

08000e0e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e0e:	b580      	push	{r7, lr}
 8000e10:	b086      	sub	sp, #24
 8000e12:	af00      	add	r7, sp, #0
 8000e14:	60f8      	str	r0, [r7, #12]
 8000e16:	60b9      	str	r1, [r7, #8]
 8000e18:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	617b      	str	r3, [r7, #20]
 8000e1e:	e009      	b.n	8000e34 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	1c5a      	adds	r2, r3, #1
 8000e24:	60ba      	str	r2, [r7, #8]
 8000e26:	781b      	ldrb	r3, [r3, #0]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f7ff fd89 	bl	8000940 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	3301      	adds	r3, #1
 8000e32:	617b      	str	r3, [r7, #20]
 8000e34:	697a      	ldr	r2, [r7, #20]
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	429a      	cmp	r2, r3
 8000e3a:	dbf1      	blt.n	8000e20 <_write+0x12>
  }
  return len;
 8000e3c:	687b      	ldr	r3, [r7, #4]
}
 8000e3e:	4618      	mov	r0, r3
 8000e40:	3718      	adds	r7, #24
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}

08000e46 <_close>:

int _close(int file)
{
 8000e46:	b480      	push	{r7}
 8000e48:	b083      	sub	sp, #12
 8000e4a:	af00      	add	r7, sp, #0
 8000e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000e4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e52:	4618      	mov	r0, r3
 8000e54:	370c      	adds	r7, #12
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e5e:	b480      	push	{r7}
 8000e60:	b083      	sub	sp, #12
 8000e62:	af00      	add	r7, sp, #0
 8000e64:	6078      	str	r0, [r7, #4]
 8000e66:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000e6e:	605a      	str	r2, [r3, #4]
  return 0;
 8000e70:	2300      	movs	r3, #0
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	370c      	adds	r7, #12
 8000e76:	46bd      	mov	sp, r7
 8000e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7c:	4770      	bx	lr

08000e7e <_isatty>:

int _isatty(int file)
{
 8000e7e:	b480      	push	{r7}
 8000e80:	b083      	sub	sp, #12
 8000e82:	af00      	add	r7, sp, #0
 8000e84:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000e86:	2301      	movs	r3, #1
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	370c      	adds	r7, #12
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e92:	4770      	bx	lr

08000e94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	60f8      	str	r0, [r7, #12]
 8000e9c:	60b9      	str	r1, [r7, #8]
 8000e9e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ea0:	2300      	movs	r3, #0
}
 8000ea2:	4618      	mov	r0, r3
 8000ea4:	3714      	adds	r7, #20
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr
	...

08000eb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000eb0:	b480      	push	{r7}
 8000eb2:	b087      	sub	sp, #28
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000eb8:	4a14      	ldr	r2, [pc, #80]	; (8000f0c <_sbrk+0x5c>)
 8000eba:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <_sbrk+0x60>)
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ec0:	697b      	ldr	r3, [r7, #20]
 8000ec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ec4:	4b13      	ldr	r3, [pc, #76]	; (8000f14 <_sbrk+0x64>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d102      	bne.n	8000ed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ecc:	4b11      	ldr	r3, [pc, #68]	; (8000f14 <_sbrk+0x64>)
 8000ece:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <_sbrk+0x68>)
 8000ed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ed2:	4b10      	ldr	r3, [pc, #64]	; (8000f14 <_sbrk+0x64>)
 8000ed4:	681a      	ldr	r2, [r3, #0]
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	4413      	add	r3, r2
 8000eda:	693a      	ldr	r2, [r7, #16]
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d205      	bcs.n	8000eec <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000ee0:	4b0e      	ldr	r3, [pc, #56]	; (8000f1c <_sbrk+0x6c>)
 8000ee2:	220c      	movs	r2, #12
 8000ee4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
 8000eea:	e009      	b.n	8000f00 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eec:	4b09      	ldr	r3, [pc, #36]	; (8000f14 <_sbrk+0x64>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ef2:	4b08      	ldr	r3, [pc, #32]	; (8000f14 <_sbrk+0x64>)
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	4413      	add	r3, r2
 8000efa:	4a06      	ldr	r2, [pc, #24]	; (8000f14 <_sbrk+0x64>)
 8000efc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000efe:	68fb      	ldr	r3, [r7, #12]
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	371c      	adds	r7, #28
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	20080000 	.word	0x20080000
 8000f10:	00000400 	.word	0x00000400
 8000f14:	20000584 	.word	0x20000584
 8000f18:	2000d2a8 	.word	0x2000d2a8
 8000f1c:	2000d2a4 	.word	0x2000d2a4

08000f20 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f24:	4b06      	ldr	r3, [pc, #24]	; (8000f40 <SystemInit+0x20>)
 8000f26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f2a:	4a05      	ldr	r2, [pc, #20]	; (8000f40 <SystemInit+0x20>)
 8000f2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f34:	bf00      	nop
 8000f36:	46bd      	mov	sp, r7
 8000f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3c:	4770      	bx	lr
 8000f3e:	bf00      	nop
 8000f40:	e000ed00 	.word	0xe000ed00

08000f44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f7c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f48:	480d      	ldr	r0, [pc, #52]	; (8000f80 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f4a:	490e      	ldr	r1, [pc, #56]	; (8000f84 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f4c:	4a0e      	ldr	r2, [pc, #56]	; (8000f88 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f4e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f50:	e002      	b.n	8000f58 <LoopCopyDataInit>

08000f52 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f52:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f54:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f56:	3304      	adds	r3, #4

08000f58 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f58:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f5a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f5c:	d3f9      	bcc.n	8000f52 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5e:	4a0b      	ldr	r2, [pc, #44]	; (8000f8c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f60:	4c0b      	ldr	r4, [pc, #44]	; (8000f90 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f62:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f64:	e001      	b.n	8000f6a <LoopFillZerobss>

08000f66 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f66:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f68:	3204      	adds	r2, #4

08000f6a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f6a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f6c:	d3fb      	bcc.n	8000f66 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f6e:	f7ff ffd7 	bl	8000f20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f72:	f015 fa0b 	bl	801638c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f76:	f7ff fb57 	bl	8000628 <main>
  bx  lr    
 8000f7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f7c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000f80:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f84:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000f88:	0801ae9c 	.word	0x0801ae9c
  ldr r2, =_sbss
 8000f8c:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8000f90:	2000d2a8 	.word	0x2000d2a8

08000f94 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f94:	e7fe      	b.n	8000f94 <ADC_IRQHandler>

08000f96 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8000f96:	b480      	push	{r7}
 8000f98:	b083      	sub	sp, #12
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	6078      	str	r0, [r7, #4]
 8000f9e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d00b      	beq.n	8000fbe <LAN8742_RegisterBusIO+0x28>
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	68db      	ldr	r3, [r3, #12]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d007      	beq.n	8000fbe <LAN8742_RegisterBusIO+0x28>
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	689b      	ldr	r3, [r3, #8]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d003      	beq.n	8000fbe <LAN8742_RegisterBusIO+0x28>
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691b      	ldr	r3, [r3, #16]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d102      	bne.n	8000fc4 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8000fc2:	e014      	b.n	8000fee <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	681a      	ldr	r2, [r3, #0]
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685a      	ldr	r2, [r3, #4]
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	691a      	ldr	r2, [r3, #16]
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr

08000ffa <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8000ffa:	b580      	push	{r7, lr}
 8000ffc:	b086      	sub	sp, #24
 8000ffe:	af00      	add	r7, sp, #0
 8001000:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 8001002:	2300      	movs	r3, #0
 8001004:	60fb      	str	r3, [r7, #12]
 8001006:	2300      	movs	r3, #0
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	685b      	ldr	r3, [r3, #4]
 8001016:	2b00      	cmp	r3, #0
 8001018:	d17c      	bne.n	8001114 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	689b      	ldr	r3, [r3, #8]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d002      	beq.n	8001028 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	689b      	ldr	r3, [r3, #8]
 8001026:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	2220      	movs	r2, #32
 800102c:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800102e:	2300      	movs	r3, #0
 8001030:	617b      	str	r3, [r7, #20]
 8001032:	e01c      	b.n	800106e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	695b      	ldr	r3, [r3, #20]
 8001038:	f107 0208 	add.w	r2, r7, #8
 800103c:	2112      	movs	r1, #18
 800103e:	6978      	ldr	r0, [r7, #20]
 8001040:	4798      	blx	r3
 8001042:	4603      	mov	r3, r0
 8001044:	2b00      	cmp	r3, #0
 8001046:	da03      	bge.n	8001050 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001048:	f06f 0304 	mvn.w	r3, #4
 800104c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800104e:	e00b      	b.n	8001068 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001050:	68bb      	ldr	r3, [r7, #8]
 8001052:	f003 031f 	and.w	r3, r3, #31
 8001056:	697a      	ldr	r2, [r7, #20]
 8001058:	429a      	cmp	r2, r3
 800105a:	d105      	bne.n	8001068 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001062:	2300      	movs	r3, #0
 8001064:	613b      	str	r3, [r7, #16]
         break;
 8001066:	e005      	b.n	8001074 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	3301      	adds	r3, #1
 800106c:	617b      	str	r3, [r7, #20]
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	2b1f      	cmp	r3, #31
 8001072:	d9df      	bls.n	8001034 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	2b1f      	cmp	r3, #31
 800107a:	d902      	bls.n	8001082 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800107c:	f06f 0302 	mvn.w	r3, #2
 8001080:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001082:	693b      	ldr	r3, [r7, #16]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d145      	bne.n	8001114 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	691b      	ldr	r3, [r3, #16]
 800108c:	687a      	ldr	r2, [r7, #4]
 800108e:	6810      	ldr	r0, [r2, #0]
 8001090:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001094:	2100      	movs	r1, #0
 8001096:	4798      	blx	r3
 8001098:	4603      	mov	r3, r0
 800109a:	2b00      	cmp	r3, #0
 800109c:	db37      	blt.n	800110e <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	695b      	ldr	r3, [r3, #20]
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	6810      	ldr	r0, [r2, #0]
 80010a6:	f107 0208 	add.w	r2, r7, #8
 80010aa:	2100      	movs	r1, #0
 80010ac:	4798      	blx	r3
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	db28      	blt.n	8001106 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	699b      	ldr	r3, [r3, #24]
 80010b8:	4798      	blx	r3
 80010ba:	4603      	mov	r3, r0
 80010bc:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010be:	e01c      	b.n	80010fa <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	699b      	ldr	r3, [r3, #24]
 80010c4:	4798      	blx	r3
 80010c6:	4603      	mov	r3, r0
 80010c8:	461a      	mov	r2, r3
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80010d2:	d80e      	bhi.n	80010f2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	695b      	ldr	r3, [r3, #20]
 80010d8:	687a      	ldr	r2, [r7, #4]
 80010da:	6810      	ldr	r0, [r2, #0]
 80010dc:	f107 0208 	add.w	r2, r7, #8
 80010e0:	2100      	movs	r1, #0
 80010e2:	4798      	blx	r3
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	da07      	bge.n	80010fa <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80010ea:	f06f 0304 	mvn.w	r3, #4
 80010ee:	613b      	str	r3, [r7, #16]
                 break;
 80010f0:	e010      	b.n	8001114 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80010f2:	f06f 0301 	mvn.w	r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
               break;
 80010f8:	e00c      	b.n	8001114 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80010fa:	68bb      	ldr	r3, [r7, #8]
 80010fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001100:	2b00      	cmp	r3, #0
 8001102:	d1dd      	bne.n	80010c0 <LAN8742_Init+0xc6>
 8001104:	e006      	b.n	8001114 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 8001106:	f06f 0304 	mvn.w	r3, #4
 800110a:	613b      	str	r3, [r7, #16]
 800110c:	e002      	b.n	8001114 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 800110e:	f06f 0303 	mvn.w	r3, #3
 8001112:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	2b00      	cmp	r3, #0
 8001118:	d112      	bne.n	8001140 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	699b      	ldr	r3, [r3, #24]
 800111e:	4798      	blx	r3
 8001120:	4603      	mov	r3, r0
 8001122:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 8001124:	bf00      	nop
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	699b      	ldr	r3, [r3, #24]
 800112a:	4798      	blx	r3
 800112c:	4603      	mov	r3, r0
 800112e:	461a      	mov	r2, r3
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	1ad3      	subs	r3, r2, r3
 8001134:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8001138:	d9f5      	bls.n	8001126 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	2201      	movs	r2, #1
 800113e:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001140:	693b      	ldr	r3, [r7, #16]
 }
 8001142:	4618      	mov	r0, r3
 8001144:	3718      	adds	r7, #24
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}

0800114a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800114a:	b580      	push	{r7, lr}
 800114c:	b084      	sub	sp, #16
 800114e:	af00      	add	r7, sp, #0
 8001150:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	695b      	ldr	r3, [r3, #20]
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	6810      	ldr	r0, [r2, #0]
 800115e:	f107 020c 	add.w	r2, r7, #12
 8001162:	2101      	movs	r1, #1
 8001164:	4798      	blx	r3
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	da02      	bge.n	8001172 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800116c:	f06f 0304 	mvn.w	r3, #4
 8001170:	e06e      	b.n	8001250 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	695b      	ldr	r3, [r3, #20]
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	6810      	ldr	r0, [r2, #0]
 800117a:	f107 020c 	add.w	r2, r7, #12
 800117e:	2101      	movs	r1, #1
 8001180:	4798      	blx	r3
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	da02      	bge.n	800118e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001188:	f06f 0304 	mvn.w	r3, #4
 800118c:	e060      	b.n	8001250 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	2b00      	cmp	r3, #0
 8001196:	d101      	bne.n	800119c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001198:	2301      	movs	r3, #1
 800119a:	e059      	b.n	8001250 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	695b      	ldr	r3, [r3, #20]
 80011a0:	687a      	ldr	r2, [r7, #4]
 80011a2:	6810      	ldr	r0, [r2, #0]
 80011a4:	f107 020c 	add.w	r2, r7, #12
 80011a8:	2100      	movs	r1, #0
 80011aa:	4798      	blx	r3
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	da02      	bge.n	80011b8 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80011b2:	f06f 0304 	mvn.w	r3, #4
 80011b6:	e04b      	b.n	8001250 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d11b      	bne.n	80011fa <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d006      	beq.n	80011da <LAN8742_GetLinkState+0x90>
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d001      	beq.n	80011da <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80011d6:	2302      	movs	r3, #2
 80011d8:	e03a      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80011e4:	2303      	movs	r3, #3
 80011e6:	e033      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d001      	beq.n	80011f6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80011f2:	2304      	movs	r3, #4
 80011f4:	e02c      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80011f6:	2305      	movs	r3, #5
 80011f8:	e02a      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	695b      	ldr	r3, [r3, #20]
 80011fe:	687a      	ldr	r2, [r7, #4]
 8001200:	6810      	ldr	r0, [r2, #0]
 8001202:	f107 020c 	add.w	r2, r7, #12
 8001206:	211f      	movs	r1, #31
 8001208:	4798      	blx	r3
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	da02      	bge.n	8001216 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8001210:	f06f 0304 	mvn.w	r3, #4
 8001214:	e01c      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d101      	bne.n	8001224 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8001220:	2306      	movs	r3, #6
 8001222:	e015      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 031c 	and.w	r3, r3, #28
 800122a:	2b18      	cmp	r3, #24
 800122c:	d101      	bne.n	8001232 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 800122e:	2302      	movs	r3, #2
 8001230:	e00e      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	f003 031c 	and.w	r3, r3, #28
 8001238:	2b08      	cmp	r3, #8
 800123a:	d101      	bne.n	8001240 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800123c:	2303      	movs	r3, #3
 800123e:	e007      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	f003 031c 	and.w	r3, r3, #28
 8001246:	2b14      	cmp	r3, #20
 8001248:	d101      	bne.n	800124e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800124a:	2304      	movs	r3, #4
 800124c:	e000      	b.n	8001250 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800124e:	2305      	movs	r3, #5
    }				
  }
}
 8001250:	4618      	mov	r0, r3
 8001252:	3710      	adds	r7, #16
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}

08001258 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800125c:	2003      	movs	r0, #3
 800125e:	f000 f8fa 	bl	8001456 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001262:	200f      	movs	r0, #15
 8001264:	f7ff fcf8 	bl	8000c58 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001268:	f7ff fc6e 	bl	8000b48 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001274:	b480      	push	{r7}
 8001276:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001278:	4b06      	ldr	r3, [pc, #24]	; (8001294 <HAL_IncTick+0x20>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	461a      	mov	r2, r3
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <HAL_IncTick+0x24>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	4413      	add	r3, r2
 8001284:	4a04      	ldr	r2, [pc, #16]	; (8001298 <HAL_IncTick+0x24>)
 8001286:	6013      	str	r3, [r2, #0]
}
 8001288:	bf00      	nop
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	20000008 	.word	0x20000008
 8001298:	20000588 	.word	0x20000588

0800129c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  return uwTick;
 80012a0:	4b03      	ldr	r3, [pc, #12]	; (80012b0 <HAL_GetTick+0x14>)
 80012a2:	681b      	ldr	r3, [r3, #0]
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	20000588 	.word	0x20000588

080012b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012bc:	f7ff ffee 	bl	800129c <HAL_GetTick>
 80012c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d005      	beq.n	80012da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012ce:	4b0a      	ldr	r3, [pc, #40]	; (80012f8 <HAL_Delay+0x44>)
 80012d0:	781b      	ldrb	r3, [r3, #0]
 80012d2:	461a      	mov	r2, r3
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	4413      	add	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80012da:	bf00      	nop
 80012dc:	f7ff ffde 	bl	800129c <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	68bb      	ldr	r3, [r7, #8]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	429a      	cmp	r2, r3
 80012ea:	d8f7      	bhi.n	80012dc <HAL_Delay+0x28>
  {
  }
}
 80012ec:	bf00      	nop
 80012ee:	bf00      	nop
 80012f0:	3710      	adds	r7, #16
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}
 80012f6:	bf00      	nop
 80012f8:	20000008 	.word	0x20000008

080012fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b085      	sub	sp, #20
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f003 0307 	and.w	r3, r3, #7
 800130a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800130c:	4b0b      	ldr	r3, [pc, #44]	; (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800130e:	68db      	ldr	r3, [r3, #12]
 8001310:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001312:	68ba      	ldr	r2, [r7, #8]
 8001314:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001318:	4013      	ands	r3, r2
 800131a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001320:	68bb      	ldr	r3, [r7, #8]
 8001322:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <__NVIC_SetPriorityGrouping+0x44>)
 8001326:	4313      	orrs	r3, r2
 8001328:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800132a:	4a04      	ldr	r2, [pc, #16]	; (800133c <__NVIC_SetPriorityGrouping+0x40>)
 800132c:	68bb      	ldr	r3, [r7, #8]
 800132e:	60d3      	str	r3, [r2, #12]
}
 8001330:	bf00      	nop
 8001332:	3714      	adds	r7, #20
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	e000ed00 	.word	0xe000ed00
 8001340:	05fa0000 	.word	0x05fa0000

08001344 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <__NVIC_GetPriorityGrouping+0x18>)
 800134a:	68db      	ldr	r3, [r3, #12]
 800134c:	0a1b      	lsrs	r3, r3, #8
 800134e:	f003 0307 	and.w	r3, r3, #7
}
 8001352:	4618      	mov	r0, r3
 8001354:	46bd      	mov	sp, r7
 8001356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135a:	4770      	bx	lr
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001360:	b480      	push	{r7}
 8001362:	b083      	sub	sp, #12
 8001364:	af00      	add	r7, sp, #0
 8001366:	4603      	mov	r3, r0
 8001368:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800136a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	db0b      	blt.n	800138a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	f003 021f 	and.w	r2, r3, #31
 8001378:	4907      	ldr	r1, [pc, #28]	; (8001398 <__NVIC_EnableIRQ+0x38>)
 800137a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800137e:	095b      	lsrs	r3, r3, #5
 8001380:	2001      	movs	r0, #1
 8001382:	fa00 f202 	lsl.w	r2, r0, r2
 8001386:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800138a:	bf00      	nop
 800138c:	370c      	adds	r7, #12
 800138e:	46bd      	mov	sp, r7
 8001390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000e100 	.word	0xe000e100

0800139c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0
 80013a2:	4603      	mov	r3, r0
 80013a4:	6039      	str	r1, [r7, #0]
 80013a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	db0a      	blt.n	80013c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	b2da      	uxtb	r2, r3
 80013b4:	490c      	ldr	r1, [pc, #48]	; (80013e8 <__NVIC_SetPriority+0x4c>)
 80013b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013ba:	0112      	lsls	r2, r2, #4
 80013bc:	b2d2      	uxtb	r2, r2
 80013be:	440b      	add	r3, r1
 80013c0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80013c4:	e00a      	b.n	80013dc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80013c6:	683b      	ldr	r3, [r7, #0]
 80013c8:	b2da      	uxtb	r2, r3
 80013ca:	4908      	ldr	r1, [pc, #32]	; (80013ec <__NVIC_SetPriority+0x50>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	f003 030f 	and.w	r3, r3, #15
 80013d2:	3b04      	subs	r3, #4
 80013d4:	0112      	lsls	r2, r2, #4
 80013d6:	b2d2      	uxtb	r2, r2
 80013d8:	440b      	add	r3, r1
 80013da:	761a      	strb	r2, [r3, #24]
}
 80013dc:	bf00      	nop
 80013de:	370c      	adds	r7, #12
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr
 80013e8:	e000e100 	.word	0xe000e100
 80013ec:	e000ed00 	.word	0xe000ed00

080013f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b089      	sub	sp, #36	; 0x24
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 0307 	and.w	r3, r3, #7
 8001402:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001404:	69fb      	ldr	r3, [r7, #28]
 8001406:	f1c3 0307 	rsb	r3, r3, #7
 800140a:	2b04      	cmp	r3, #4
 800140c:	bf28      	it	cs
 800140e:	2304      	movcs	r3, #4
 8001410:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	3304      	adds	r3, #4
 8001416:	2b06      	cmp	r3, #6
 8001418:	d902      	bls.n	8001420 <NVIC_EncodePriority+0x30>
 800141a:	69fb      	ldr	r3, [r7, #28]
 800141c:	3b03      	subs	r3, #3
 800141e:	e000      	b.n	8001422 <NVIC_EncodePriority+0x32>
 8001420:	2300      	movs	r3, #0
 8001422:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001424:	f04f 32ff 	mov.w	r2, #4294967295
 8001428:	69bb      	ldr	r3, [r7, #24]
 800142a:	fa02 f303 	lsl.w	r3, r2, r3
 800142e:	43da      	mvns	r2, r3
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	401a      	ands	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001438:	f04f 31ff 	mov.w	r1, #4294967295
 800143c:	697b      	ldr	r3, [r7, #20]
 800143e:	fa01 f303 	lsl.w	r3, r1, r3
 8001442:	43d9      	mvns	r1, r3
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001448:	4313      	orrs	r3, r2
         );
}
 800144a:	4618      	mov	r0, r3
 800144c:	3724      	adds	r7, #36	; 0x24
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001456:	b580      	push	{r7, lr}
 8001458:	b082      	sub	sp, #8
 800145a:	af00      	add	r7, sp, #0
 800145c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800145e:	6878      	ldr	r0, [r7, #4]
 8001460:	f7ff ff4c 	bl	80012fc <__NVIC_SetPriorityGrouping>
}
 8001464:	bf00      	nop
 8001466:	3708      	adds	r7, #8
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
 8001478:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800147a:	2300      	movs	r3, #0
 800147c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800147e:	f7ff ff61 	bl	8001344 <__NVIC_GetPriorityGrouping>
 8001482:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001484:	687a      	ldr	r2, [r7, #4]
 8001486:	68b9      	ldr	r1, [r7, #8]
 8001488:	6978      	ldr	r0, [r7, #20]
 800148a:	f7ff ffb1 	bl	80013f0 <NVIC_EncodePriority>
 800148e:	4602      	mov	r2, r0
 8001490:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001494:	4611      	mov	r1, r2
 8001496:	4618      	mov	r0, r3
 8001498:	f7ff ff80 	bl	800139c <__NVIC_SetPriority>
}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80014ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b2:	4618      	mov	r0, r3
 80014b4:	f7ff ff54 	bl	8001360 <__NVIC_EnableIRQ>
}
 80014b8:	bf00      	nop
 80014ba:	3708      	adds	r7, #8
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}

080014c0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d101      	bne.n	80014d2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e06a      	b.n	80015a8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d106      	bne.n	80014ea <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	2223      	movs	r2, #35	; 0x23
 80014e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80014e4:	6878      	ldr	r0, [r7, #4]
 80014e6:	f004 f8e9 	bl	80056bc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	4b31      	ldr	r3, [pc, #196]	; (80015b0 <HAL_ETH_Init+0xf0>)
 80014ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014ee:	4a30      	ldr	r2, [pc, #192]	; (80015b0 <HAL_ETH_Init+0xf0>)
 80014f0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f4:	6453      	str	r3, [r2, #68]	; 0x44
 80014f6:	4b2e      	ldr	r3, [pc, #184]	; (80015b0 <HAL_ETH_Init+0xf0>)
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014fe:	60bb      	str	r3, [r7, #8]
 8001500:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001502:	4b2c      	ldr	r3, [pc, #176]	; (80015b4 <HAL_ETH_Init+0xf4>)
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	4a2b      	ldr	r2, [pc, #172]	; (80015b4 <HAL_ETH_Init+0xf4>)
 8001508:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800150c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800150e:	4b29      	ldr	r3, [pc, #164]	; (80015b4 <HAL_ETH_Init+0xf4>)
 8001510:	685a      	ldr	r2, [r3, #4]
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	689b      	ldr	r3, [r3, #8]
 8001516:	4927      	ldr	r1, [pc, #156]	; (80015b4 <HAL_ETH_Init+0xf4>)
 8001518:	4313      	orrs	r3, r2
 800151a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800151c:	4b25      	ldr	r3, [pc, #148]	; (80015b4 <HAL_ETH_Init+0xf4>)
 800151e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	687a      	ldr	r2, [r7, #4]
 800152c:	6812      	ldr	r2, [r2, #0]
 800152e:	f043 0301 	orr.w	r3, r3, #1
 8001532:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001536:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001538:	f7ff feb0 	bl	800129c <HAL_GetTick>
 800153c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800153e:	e011      	b.n	8001564 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001540:	f7ff feac 	bl	800129c <HAL_GetTick>
 8001544:	4602      	mov	r2, r0
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	1ad3      	subs	r3, r2, r3
 800154a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800154e:	d909      	bls.n	8001564 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2204      	movs	r2, #4
 8001554:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	22e0      	movs	r2, #224	; 0xe0
 800155c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001560:	2301      	movs	r3, #1
 8001562:	e021      	b.n	80015a8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0301 	and.w	r3, r3, #1
 8001572:	2b00      	cmp	r3, #0
 8001574:	d1e4      	bne.n	8001540 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001576:	6878      	ldr	r0, [r7, #4]
 8001578:	f000 fecc 	bl	8002314 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800157c:	6878      	ldr	r0, [r7, #4]
 800157e:	f000 ff73 	bl	8002468 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001582:	6878      	ldr	r0, [r7, #4]
 8001584:	f000 ffc9 	bl	800251a <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	461a      	mov	r2, r3
 800158e:	2100      	movs	r1, #0
 8001590:	6878      	ldr	r0, [r7, #4]
 8001592:	f000 ff31 	bl	80023f8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2210      	movs	r2, #16
 80015a2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80015a6:	2300      	movs	r3, #0
}
 80015a8:	4618      	mov	r0, r3
 80015aa:	3710      	adds	r7, #16
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40013800 	.word	0x40013800

080015b8 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80015b8:	b580      	push	{r7, lr}
 80015ba:	b084      	sub	sp, #16
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80015c6:	2b10      	cmp	r3, #16
 80015c8:	d17b      	bne.n	80016c2 <HAL_ETH_Start_IT+0x10a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	2223      	movs	r2, #35	; 0x23
 80015ce:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	2201      	movs	r2, #1
 80015d6:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80015e6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681a      	ldr	r2, [r3, #0]
 80015f4:	4b35      	ldr	r3, [pc, #212]	; (80016cc <HAL_ETH_Start_IT+0x114>)
 80015f6:	430b      	orrs	r3, r1
 80015f8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800160c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2204      	movs	r2, #4
 8001614:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f000 f97c 	bl	8001914 <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	681a      	ldr	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f042 0208 	orr.w	r2, r2, #8
 800162a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001634:	2001      	movs	r0, #1
 8001636:	f7ff fe3d 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	68fa      	ldr	r2, [r7, #12]
 8001640:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f042 0204 	orr.w	r2, r2, #4
 8001650:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff fe2a 	bl	80012b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fcf4 	bl	8002056 <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001676:	699b      	ldr	r3, [r3, #24]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	6812      	ldr	r2, [r2, #0]
 800167c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001680:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001684:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800168e:	699b      	ldr	r3, [r3, #24]
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	f043 0302 	orr.w	r3, r3, #2
 8001698:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800169c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80016a6:	69d9      	ldr	r1, [r3, #28]
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_ETH_Start_IT+0x118>)
 80016ae:	430b      	orrs	r3, r1
 80016b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80016b4:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2223      	movs	r2, #35	; 0x23
 80016ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 80016be:	2300      	movs	r3, #0
 80016c0:	e000      	b.n	80016c4 <HAL_ETH_Start_IT+0x10c>
  }
  else
  {
    return HAL_ERROR;
 80016c2:	2301      	movs	r3, #1
  }
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	3710      	adds	r7, #16
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	00020060 	.word	0x00020060
 80016d0:	0001a0c1 	.word	0x0001a0c1

080016d4 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 80016de:	683b      	ldr	r3, [r7, #0]
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d109      	bne.n	80016f8 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80016ea:	f043 0201 	orr.w	r2, r3, #1
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80016f4:	2301      	movs	r3, #1
 80016f6:	e045      	b.n	8001784 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80016fe:	2b23      	cmp	r3, #35	; 0x23
 8001700:	d13f      	bne.n	8001782 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800170a:	2201      	movs	r2, #1
 800170c:	6839      	ldr	r1, [r7, #0]
 800170e:	6878      	ldr	r0, [r7, #4]
 8001710:	f000 ff70 	bl	80025f4 <ETH_Prepare_Tx_Descriptors>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d009      	beq.n	800172e <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001720:	f043 0202 	orr.w	r2, r3, #2
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e02a      	b.n	8001784 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800172e:	f3bf 8f4f 	dsb	sy
}
 8001732:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001738:	1c5a      	adds	r2, r3, #1
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	629a      	str	r2, [r3, #40]	; 0x28
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001742:	2b03      	cmp	r3, #3
 8001744:	d904      	bls.n	8001750 <HAL_ETH_Transmit_IT+0x7c>
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800174a:	1f1a      	subs	r2, r3, #4
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001758:	695b      	ldr	r3, [r3, #20]
 800175a:	f003 0304 	and.w	r3, r3, #4
 800175e:	2b00      	cmp	r3, #0
 8001760:	d00d      	beq.n	800177e <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800176a:	461a      	mov	r2, r3
 800176c:	2304      	movs	r3, #4
 800176e:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001778:	461a      	mov	r2, r3
 800177a:	2300      	movs	r3, #0
 800177c:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 800177e:	2300      	movs	r3, #0
 8001780:	e000      	b.n	8001784 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001782:	2301      	movs	r3, #1
  }
}
 8001784:	4618      	mov	r0, r3
 8001786:	3708      	adds	r7, #8
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}

0800178c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b088      	sub	sp, #32
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001796:	2300      	movs	r3, #0
 8001798:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800179a:	2300      	movs	r3, #0
 800179c:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2b00      	cmp	r3, #0
 80017a2:	d109      	bne.n	80017b8 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017aa:	f043 0201 	orr.w	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e0a8      	b.n	800190a <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80017be:	2b23      	cmp	r3, #35	; 0x23
 80017c0:	d001      	beq.n	80017c6 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 80017c2:	2301      	movs	r3, #1
 80017c4:	e0a1      	b.n	800190a <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	69fa      	ldr	r2, [r7, #28]
 80017d0:	3212      	adds	r2, #18
 80017d2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017d6:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80017dc:	f1c3 0304 	rsb	r3, r3, #4
 80017e0:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80017e2:	e06a      	b.n	80018ba <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 80017e4:	69bb      	ldr	r3, [r7, #24]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d007      	beq.n	8001800 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 80017f0:	69bb      	ldr	r3, [r7, #24]
 80017f2:	699a      	ldr	r2, [r3, #24]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 80017f8:	69bb      	ldr	r3, [r7, #24]
 80017fa:	69da      	ldr	r2, [r3, #28]
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001800:	69bb      	ldr	r3, [r7, #24]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001808:	2b00      	cmp	r3, #0
 800180a:	d103      	bne.n	8001814 <HAL_ETH_ReadData+0x88>
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001810:	2b00      	cmp	r3, #0
 8001812:	d040      	beq.n	8001896 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001814:	69bb      	ldr	r3, [r7, #24]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800181c:	2b00      	cmp	r3, #0
 800181e:	d005      	beq.n	800182c <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2200      	movs	r2, #0
 8001824:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	2200      	movs	r2, #0
 800182a:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	695b      	ldr	r3, [r3, #20]
 8001830:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001832:	69bb      	ldr	r3, [r7, #24]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800183a:	2b00      	cmp	r3, #0
 800183c:	d00c      	beq.n	8001858 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 800183e:	69bb      	ldr	r3, [r7, #24]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	0c1b      	lsrs	r3, r3, #16
 8001844:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001848:	3b04      	subs	r3, #4
 800184a:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 800184c:	69bb      	ldr	r3, [r7, #24]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001854:	2301      	movs	r3, #1
 8001856:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	689a      	ldr	r2, [r3, #8]
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 800186c:	69bb      	ldr	r3, [r7, #24]
 800186e:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001870:	461a      	mov	r2, r3
 8001872:	693b      	ldr	r3, [r7, #16]
 8001874:	b29b      	uxth	r3, r3
 8001876:	f004 f85f 	bl	8005938 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	441a      	add	r2, r3
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2200      	movs	r2, #0
 8001894:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001896:	69fb      	ldr	r3, [r7, #28]
 8001898:	3301      	adds	r3, #1
 800189a:	61fb      	str	r3, [r7, #28]
 800189c:	69fb      	ldr	r3, [r7, #28]
 800189e:	2b03      	cmp	r3, #3
 80018a0:	d902      	bls.n	80018a8 <HAL_ETH_ReadData+0x11c>
 80018a2:	69fb      	ldr	r3, [r7, #28]
 80018a4:	3b04      	subs	r3, #4
 80018a6:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	69fa      	ldr	r2, [r7, #28]
 80018ac:	3212      	adds	r2, #18
 80018ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80018b2:	61bb      	str	r3, [r7, #24]
    desccnt++;
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	3301      	adds	r3, #1
 80018b8:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db06      	blt.n	80018d0 <HAL_ETH_ReadData+0x144>
 80018c2:	697a      	ldr	r2, [r7, #20]
 80018c4:	68bb      	ldr	r3, [r7, #8]
 80018c6:	429a      	cmp	r2, r3
 80018c8:	d202      	bcs.n	80018d0 <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 80018ca:	7bfb      	ldrb	r3, [r7, #15]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d089      	beq.n	80017e4 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	441a      	add	r2, r3
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f000 f815 	bl	8001914 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	69fa      	ldr	r2, [r7, #28]
 80018ee:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	2b01      	cmp	r3, #1
 80018f4:	d108      	bne.n	8001908 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	2200      	movs	r2, #0
 8001902:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001904:	2300      	movs	r3, #0
 8001906:	e000      	b.n	800190a <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001908:	2301      	movs	r3, #1
}
 800190a:	4618      	mov	r0, r3
 800190c:	3720      	adds	r7, #32
 800190e:	46bd      	mov	sp, r7
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b088      	sub	sp, #32
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800191c:	2300      	movs	r3, #0
 800191e:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001920:	2301      	movs	r3, #1
 8001922:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001928:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	69fa      	ldr	r2, [r7, #28]
 800192e:	3212      	adds	r2, #18
 8001930:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001934:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800193a:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 800193c:	e040      	b.n	80019c0 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 800193e:	697b      	ldr	r3, [r7, #20]
 8001940:	6a1b      	ldr	r3, [r3, #32]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d112      	bne.n	800196c <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001946:	f107 030c 	add.w	r3, r7, #12
 800194a:	4618      	mov	r0, r3
 800194c:	f003 ffc4 	bl	80058d8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	2b00      	cmp	r3, #0
 8001954:	d102      	bne.n	800195c <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001956:	2300      	movs	r3, #0
 8001958:	74fb      	strb	r3, [r7, #19]
 800195a:	e007      	b.n	800196c <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	461a      	mov	r2, r3
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	461a      	mov	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 800196c:	7cfb      	ldrb	r3, [r7, #19]
 800196e:	2b00      	cmp	r3, #0
 8001970:	d026      	beq.n	80019c0 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001976:	2b00      	cmp	r3, #0
 8001978:	d103      	bne.n	8001982 <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 800197a:	697b      	ldr	r3, [r7, #20]
 800197c:	4a1e      	ldr	r2, [pc, #120]	; (80019f8 <ETH_UpdateDescriptor+0xe4>)
 800197e:	605a      	str	r2, [r3, #4]
 8001980:	e003      	b.n	800198a <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001982:	697b      	ldr	r3, [r7, #20]
 8001984:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001988:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 800198a:	f3bf 8f5f 	dmb	sy
}
 800198e:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001998:	697b      	ldr	r3, [r7, #20]
 800199a:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 800199c:	69fb      	ldr	r3, [r7, #28]
 800199e:	3301      	adds	r3, #1
 80019a0:	61fb      	str	r3, [r7, #28]
 80019a2:	69fb      	ldr	r3, [r7, #28]
 80019a4:	2b03      	cmp	r3, #3
 80019a6:	d902      	bls.n	80019ae <ETH_UpdateDescriptor+0x9a>
 80019a8:	69fb      	ldr	r3, [r7, #28]
 80019aa:	3b04      	subs	r3, #4
 80019ac:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	69fa      	ldr	r2, [r7, #28]
 80019b2:	3212      	adds	r2, #18
 80019b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019b8:	617b      	str	r3, [r7, #20]
      desccount--;
 80019ba:	69bb      	ldr	r3, [r7, #24]
 80019bc:	3b01      	subs	r3, #1
 80019be:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d002      	beq.n	80019cc <ETH_UpdateDescriptor+0xb8>
 80019c6:	7cfb      	ldrb	r3, [r7, #19]
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d1b8      	bne.n	800193e <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	429a      	cmp	r2, r3
 80019d4:	d00c      	beq.n	80019f0 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80019de:	461a      	mov	r2, r3
 80019e0:	2300      	movs	r3, #0
 80019e2:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	69fa      	ldr	r2, [r7, #28]
 80019e8:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	69ba      	ldr	r2, [r7, #24]
 80019ee:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 80019f0:	bf00      	nop
 80019f2:	3720      	adds	r7, #32
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	80004600 	.word	0x80004600

080019fc <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b086      	sub	sp, #24
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3318      	adds	r3, #24
 8001a08:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a0e:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a14:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001a16:	2301      	movs	r3, #1
 8001a18:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a1a:	e03f      	b.n	8001a9c <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001a1c:	2301      	movs	r3, #1
 8001a1e:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	3b01      	subs	r3, #1
 8001a24:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001a26:	68ba      	ldr	r2, [r7, #8]
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	3304      	adds	r3, #4
 8001a2c:	009b      	lsls	r3, r3, #2
 8001a2e:	4413      	add	r3, r2
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d106      	bne.n	8001a44 <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	f003 0303 	and.w	r3, r3, #3
 8001a3e:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001a40:	2300      	movs	r3, #0
 8001a42:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001a44:	7bbb      	ldrb	r3, [r7, #14]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d028      	beq.n	8001a9c <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	68d9      	ldr	r1, [r3, #12]
 8001a4e:	693a      	ldr	r2, [r7, #16]
 8001a50:	4613      	mov	r3, r2
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	00db      	lsls	r3, r3, #3
 8001a58:	440b      	add	r3, r1
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	db1b      	blt.n	8001a98 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001a60:	68ba      	ldr	r2, [r7, #8]
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	3304      	adds	r3, #4
 8001a66:	009b      	lsls	r3, r3, #2
 8001a68:	4413      	add	r3, r2
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f003 ffa5 	bl	80059bc <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001a72:	68ba      	ldr	r2, [r7, #8]
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	3304      	adds	r3, #4
 8001a78:	009b      	lsls	r3, r3, #2
 8001a7a:	4413      	add	r3, r2
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	3301      	adds	r3, #1
 8001a84:	f003 0303 	and.w	r3, r3, #3
 8001a88:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001a8a:	68bb      	ldr	r3, [r7, #8]
 8001a8c:	697a      	ldr	r2, [r7, #20]
 8001a8e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	693a      	ldr	r2, [r7, #16]
 8001a94:	62da      	str	r2, [r3, #44]	; 0x2c
 8001a96:	e001      	b.n	8001a9c <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d002      	beq.n	8001aa8 <HAL_ETH_ReleaseTxPacket+0xac>
 8001aa2:	7bfb      	ldrb	r3, [r7, #15]
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d1b9      	bne.n	8001a1c <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001aa8:	2300      	movs	r3, #0
}
 8001aaa:	4618      	mov	r0, r3
 8001aac:	3718      	adds	r7, #24
 8001aae:	46bd      	mov	sp, r7
 8001ab0:	bd80      	pop	{r7, pc}
	...

08001ab4 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001ab4:	b580      	push	{r7, lr}
 8001ab6:	b082      	sub	sp, #8
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ac4:	695b      	ldr	r3, [r3, #20]
 8001ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001aca:	2b40      	cmp	r3, #64	; 0x40
 8001acc:	d112      	bne.n	8001af4 <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ad6:	69db      	ldr	r3, [r3, #28]
 8001ad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001adc:	2b40      	cmp	r3, #64	; 0x40
 8001ade:	d109      	bne.n	8001af4 <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae8:	461a      	mov	r2, r3
 8001aea:	4b50      	ldr	r3, [pc, #320]	; (8001c2c <HAL_ETH_IRQHandler+0x178>)
 8001aec:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001aee:	6878      	ldr	r0, [r7, #4]
 8001af0:	f003 fb48 	bl	8005184 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afc:	695b      	ldr	r3, [r3, #20]
 8001afe:	f003 0301 	and.w	r3, r3, #1
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	d113      	bne.n	8001b2e <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b0e:	69db      	ldr	r3, [r3, #28]
 8001b10:	f003 0301 	and.w	r3, r3, #1
 8001b14:	2b01      	cmp	r3, #1
 8001b16:	d10a      	bne.n	8001b2e <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b20:	461a      	mov	r2, r3
 8001b22:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8001b26:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8001b28:	6878      	ldr	r0, [r7, #4]
 8001b2a:	f003 fb3b 	bl	80051a4 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b36:	695b      	ldr	r3, [r3, #20]
 8001b38:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b3c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b40:	d14c      	bne.n	8001bdc <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b4a:	69db      	ldr	r3, [r3, #28]
 8001b4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001b50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001b54:	d142      	bne.n	8001bdc <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b5c:	f043 0208 	orr.w	r2, r3, #8
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b6e:	695b      	ldr	r3, [r3, #20]
 8001b70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001b78:	d11a      	bne.n	8001bb0 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b82:	695a      	ldr	r2, [r3, #20]
 8001b84:	4b2a      	ldr	r3, [pc, #168]	; (8001c30 <HAL_ETH_IRQHandler+0x17c>)
 8001b86:	4013      	ands	r3, r2
 8001b88:	687a      	ldr	r2, [r7, #4]
 8001b8a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b96:	69db      	ldr	r3, [r3, #28]
 8001b98:	687a      	ldr	r2, [r7, #4]
 8001b9a:	6812      	ldr	r2, [r2, #0]
 8001b9c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8001ba0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001ba4:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	22e0      	movs	r2, #224	; 0xe0
 8001baa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8001bae:	e012      	b.n	8001bd6 <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bb8:	695a      	ldr	r2, [r3, #20]
 8001bba:	f248 6380 	movw	r3, #34432	; 0x8680
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	687a      	ldr	r2, [r7, #4]
 8001bc2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001bce:	461a      	mov	r2, r3
 8001bd0:	f248 6380 	movw	r3, #34432	; 0x8680
 8001bd4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 8001bd6:	6878      	ldr	r0, [r7, #4]
 8001bd8:	f003 faf4 	bl	80051c4 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	f003 0308 	and.w	r3, r3, #8
 8001be6:	2b08      	cmp	r3, #8
 8001be8:	d10e      	bne.n	8001c08 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f000 f81c 	bl	8001c38 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2200      	movs	r2, #0
 8001c04:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 8001c08:	4b0a      	ldr	r3, [pc, #40]	; (8001c34 <HAL_ETH_IRQHandler+0x180>)
 8001c0a:	695b      	ldr	r3, [r3, #20]
 8001c0c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d006      	beq.n	8001c22 <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8001c14:	4b07      	ldr	r3, [pc, #28]	; (8001c34 <HAL_ETH_IRQHandler+0x180>)
 8001c16:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8001c1a:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f000 f815 	bl	8001c4c <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8001c22:	bf00      	nop
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	00010040 	.word	0x00010040
 8001c30:	007e2000 	.word	0x007e2000
 8001c34:	40013c00 	.word	0x40013c00

08001c38 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8001c40:	bf00      	nop
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	60f8      	str	r0, [r7, #12]
 8001c68:	60b9      	str	r1, [r7, #8]
 8001c6a:	607a      	str	r2, [r7, #4]
 8001c6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001c6e:	68fb      	ldr	r3, [r7, #12]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	691b      	ldr	r3, [r3, #16]
 8001c74:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	f003 031c 	and.w	r3, r3, #28
 8001c7c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8001c7e:	68bb      	ldr	r3, [r7, #8]
 8001c80:	02db      	lsls	r3, r3, #11
 8001c82:	b29b      	uxth	r3, r3
 8001c84:	697a      	ldr	r2, [r7, #20]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	019b      	lsls	r3, r3, #6
 8001c8e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001c92:	697a      	ldr	r2, [r7, #20]
 8001c94:	4313      	orrs	r3, r2
 8001c96:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	f023 0302 	bic.w	r3, r3, #2
 8001c9e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f043 0301 	orr.w	r3, r3, #1
 8001ca6:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	697a      	ldr	r2, [r7, #20]
 8001cae:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8001cb0:	f7ff faf4 	bl	800129c <HAL_GetTick>
 8001cb4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cb6:	e00d      	b.n	8001cd4 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8001cb8:	f7ff faf0 	bl	800129c <HAL_GetTick>
 8001cbc:	4602      	mov	r2, r0
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	1ad3      	subs	r3, r2, r3
 8001cc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cc6:	d301      	bcc.n	8001ccc <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e010      	b.n	8001cee <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	691b      	ldr	r3, [r3, #16]
 8001cd2:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001cd4:	697b      	ldr	r3, [r7, #20]
 8001cd6:	f003 0301 	and.w	r3, r3, #1
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ec      	bne.n	8001cb8 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	695b      	ldr	r3, [r3, #20]
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	461a      	mov	r2, r3
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	3718      	adds	r7, #24
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	bd80      	pop	{r7, pc}

08001cf6 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8001cf6:	b580      	push	{r7, lr}
 8001cf8:	b086      	sub	sp, #24
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	60f8      	str	r0, [r7, #12]
 8001cfe:	60b9      	str	r1, [r7, #8]
 8001d00:	607a      	str	r2, [r7, #4]
 8001d02:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	691b      	ldr	r3, [r3, #16]
 8001d0a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	f003 031c 	and.w	r3, r3, #28
 8001d12:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	02db      	lsls	r3, r3, #11
 8001d18:	b29b      	uxth	r3, r3
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	019b      	lsls	r3, r3, #6
 8001d24:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8001d28:	697a      	ldr	r2, [r7, #20]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	f043 0302 	orr.w	r3, r3, #2
 8001d34:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	f043 0301 	orr.w	r3, r3, #1
 8001d3c:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	b29a      	uxth	r2, r3
 8001d42:	68fb      	ldr	r3, [r7, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	697a      	ldr	r2, [r7, #20]
 8001d4e:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d50:	f7ff faa4 	bl	800129c <HAL_GetTick>
 8001d54:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d56:	e00d      	b.n	8001d74 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8001d58:	f7ff faa0 	bl	800129c <HAL_GetTick>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	693b      	ldr	r3, [r7, #16]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d66:	d301      	bcc.n	8001d6c <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e009      	b.n	8001d80 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	691b      	ldr	r3, [r3, #16]
 8001d72:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	f003 0301 	and.w	r3, r3, #1
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d1ec      	bne.n	8001d58 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8001d7e:	2300      	movs	r3, #0
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
 8001d90:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d101      	bne.n	8001d9c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001d98:	2301      	movs	r3, #1
 8001d9a:	e0d9      	b.n	8001f50 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f003 0310 	and.w	r3, r3, #16
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	bf14      	ite	ne
 8001daa:	2301      	movne	r3, #1
 8001dac:	2300      	moveq	r3, #0
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	bf0c      	ite	eq
 8001dd4:	2301      	moveq	r3, #1
 8001dd6:	2300      	movne	r3, #0
 8001dd8:	b2db      	uxtb	r3, r3
 8001dda:	461a      	mov	r2, r3
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf14      	ite	ne
 8001df0:	2301      	movne	r3, #1
 8001df2:	2300      	moveq	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	bf0c      	ite	eq
 8001e0a:	2301      	moveq	r3, #1
 8001e0c:	2300      	movne	r3, #0
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	461a      	mov	r2, r3
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	bf14      	ite	ne
 8001e24:	2301      	movne	r3, #1
 8001e26:	2300      	moveq	r3, #0
 8001e28:	b2db      	uxtb	r3, r3
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	bf0c      	ite	eq
 8001e5a:	2301      	moveq	r3, #1
 8001e5c:	2300      	movne	r3, #0
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	bf0c      	ite	eq
 8001e74:	2301      	moveq	r3, #1
 8001e76:	2300      	movne	r3, #0
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	683b      	ldr	r3, [r7, #0]
 8001e7e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	bf14      	ite	ne
 8001e8e:	2301      	movne	r3, #1
 8001e90:	2300      	moveq	r3, #0
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	461a      	mov	r2, r3
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	bf14      	ite	ne
 8001eb6:	2301      	movne	r3, #1
 8001eb8:	2300      	moveq	r3, #0
 8001eba:	b2db      	uxtb	r3, r3
 8001ebc:	461a      	mov	r2, r3
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	699b      	ldr	r3, [r3, #24]
 8001ec8:	f003 0302 	and.w	r3, r3, #2
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bf14      	ite	ne
 8001ed0:	2301      	movne	r3, #1
 8001ed2:	2300      	moveq	r3, #0
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	bf0c      	ite	eq
 8001eec:	2301      	moveq	r3, #1
 8001eee:	2300      	movne	r3, #0
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	461a      	mov	r2, r3
 8001ef4:	683b      	ldr	r3, [r7, #0]
 8001ef6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	f003 0230 	and.w	r2, r3, #48	; 0x30
 8001f04:	683b      	ldr	r3, [r7, #0]
 8001f06:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	699b      	ldr	r3, [r3, #24]
 8001f0e:	0c1b      	lsrs	r3, r3, #16
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	699b      	ldr	r3, [r3, #24]
 8001f1c:	f003 0304 	and.w	r3, r3, #4
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	bf14      	ite	ne
 8001f24:	2301      	movne	r3, #1
 8001f26:	2300      	moveq	r3, #0
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	683b      	ldr	r3, [r7, #0]
 8001f2e:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	699b      	ldr	r3, [r3, #24]
 8001f38:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	bf14      	ite	ne
 8001f40:	2301      	movne	r3, #1
 8001f42:	2300      	moveq	r3, #0
 8001f44:	b2db      	uxtb	r3, r3
 8001f46:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8001f4e:	2300      	movs	r3, #0
}
 8001f50:	4618      	mov	r0, r3
 8001f52:	370c      	adds	r7, #12
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b082      	sub	sp, #8
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
 8001f64:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8001f66:	683b      	ldr	r3, [r7, #0]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d101      	bne.n	8001f70 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	e00b      	b.n	8001f88 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001f76:	2b10      	cmp	r3, #16
 8001f78:	d105      	bne.n	8001f86 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8001f7a:	6839      	ldr	r1, [r7, #0]
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 f88f 	bl	80020a0 <ETH_SetMACConfig>

    return HAL_OK;
 8001f82:	2300      	movs	r3, #0
 8001f84:	e000      	b.n	8001f88 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8001f86:	2301      	movs	r3, #1
  }
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	691b      	ldr	r3, [r3, #16]
 8001f9e:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	f023 031c 	bic.w	r3, r3, #28
 8001fa6:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8001fa8:	f001 fb38 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8001fac:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	4a1d      	ldr	r2, [pc, #116]	; (8002028 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d908      	bls.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x38>
 8001fb6:	68bb      	ldr	r3, [r7, #8]
 8001fb8:	4a1c      	ldr	r2, [pc, #112]	; (800202c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fba:	4293      	cmp	r3, r2
 8001fbc:	d804      	bhi.n	8001fc8 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	f043 0308 	orr.w	r3, r3, #8
 8001fc4:	60fb      	str	r3, [r7, #12]
 8001fc6:	e027      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	4a18      	ldr	r2, [pc, #96]	; (800202c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001fcc:	4293      	cmp	r3, r2
 8001fce:	d908      	bls.n	8001fe2 <HAL_ETH_SetMDIOClockRange+0x52>
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	4a17      	ldr	r2, [pc, #92]	; (8002030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	d204      	bcs.n	8001fe2 <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	f043 030c 	orr.w	r3, r3, #12
 8001fde:	60fb      	str	r3, [r7, #12]
 8001fe0:	e01a      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 8001fe2:	68bb      	ldr	r3, [r7, #8]
 8001fe4:	4a12      	ldr	r2, [pc, #72]	; (8002030 <HAL_ETH_SetMDIOClockRange+0xa0>)
 8001fe6:	4293      	cmp	r3, r2
 8001fe8:	d303      	bcc.n	8001ff2 <HAL_ETH_SetMDIOClockRange+0x62>
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	4a11      	ldr	r2, [pc, #68]	; (8002034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d911      	bls.n	8002016 <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4a0f      	ldr	r2, [pc, #60]	; (8002034 <HAL_ETH_SetMDIOClockRange+0xa4>)
 8001ff6:	4293      	cmp	r3, r2
 8001ff8:	d908      	bls.n	800200c <HAL_ETH_SetMDIOClockRange+0x7c>
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	4a0e      	ldr	r2, [pc, #56]	; (8002038 <HAL_ETH_SetMDIOClockRange+0xa8>)
 8001ffe:	4293      	cmp	r3, r2
 8002000:	d804      	bhi.n	800200c <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f043 0304 	orr.w	r3, r3, #4
 8002008:	60fb      	str	r3, [r7, #12]
 800200a:	e005      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f043 0310 	orr.w	r3, r3, #16
 8002012:	60fb      	str	r3, [r7, #12]
 8002014:	e000      	b.n	8002018 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 8002016:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	68fa      	ldr	r2, [r7, #12]
 800201e:	611a      	str	r2, [r3, #16]
}
 8002020:	bf00      	nop
 8002022:	3710      	adds	r7, #16
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	01312cff 	.word	0x01312cff
 800202c:	02160ebf 	.word	0x02160ebf
 8002030:	03938700 	.word	0x03938700
 8002034:	05f5e0ff 	.word	0x05f5e0ff
 8002038:	08f0d17f 	.word	0x08f0d17f

0800203c <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 800204a:	4618      	mov	r0, r3
 800204c:	370c      	adds	r7, #12
 800204e:	46bd      	mov	sp, r7
 8002050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002054:	4770      	bx	lr

08002056 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8002056:	b580      	push	{r7, lr}
 8002058:	b084      	sub	sp, #16
 800205a:	af00      	add	r7, sp, #0
 800205c:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 800205e:	2300      	movs	r3, #0
 8002060:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	699b      	ldr	r3, [r3, #24]
 800206c:	687a      	ldr	r2, [r7, #4]
 800206e:	6812      	ldr	r2, [r2, #0]
 8002070:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002074:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002078:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002086:	2001      	movs	r0, #1
 8002088:	f7ff f914 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681a      	ldr	r2, [r3, #0]
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002096:	6193      	str	r3, [r2, #24]
}
 8002098:	bf00      	nop
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80020b2:	68fa      	ldr	r2, [r7, #12]
 80020b4:	4b51      	ldr	r3, [pc, #324]	; (80021fc <ETH_SetMACConfig+0x15c>)
 80020b6:	4013      	ands	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	7c1b      	ldrb	r3, [r3, #16]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d102      	bne.n	80020c8 <ETH_SetMACConfig+0x28>
 80020c2:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80020c6:	e000      	b.n	80020ca <ETH_SetMACConfig+0x2a>
 80020c8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	7c5b      	ldrb	r3, [r3, #17]
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d102      	bne.n	80020d8 <ETH_SetMACConfig+0x38>
 80020d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80020d6:	e000      	b.n	80020da <ETH_SetMACConfig+0x3a>
 80020d8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80020da:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80020e0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	7fdb      	ldrb	r3, [r3, #31]
 80020e6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80020e8:	431a      	orrs	r2, r3
                        macconf->Speed |
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80020ee:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	7f92      	ldrb	r2, [r2, #30]
 80020f4:	2a00      	cmp	r2, #0
 80020f6:	d102      	bne.n	80020fe <ETH_SetMACConfig+0x5e>
 80020f8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80020fc:	e000      	b.n	8002100 <ETH_SetMACConfig+0x60>
 80020fe:	2200      	movs	r2, #0
                        macconf->Speed |
 8002100:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	7f1b      	ldrb	r3, [r3, #28]
 8002106:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002108:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800210e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	791b      	ldrb	r3, [r3, #4]
 8002114:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002116:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002118:	683a      	ldr	r2, [r7, #0]
 800211a:	f892 2020 	ldrb.w	r2, [r2, #32]
 800211e:	2a00      	cmp	r2, #0
 8002120:	d102      	bne.n	8002128 <ETH_SetMACConfig+0x88>
 8002122:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002126:	e000      	b.n	800212a <ETH_SetMACConfig+0x8a>
 8002128:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 800212a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	7bdb      	ldrb	r3, [r3, #15]
 8002130:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002132:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002138:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 800213a:	683b      	ldr	r3, [r7, #0]
 800213c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002140:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002142:	4313      	orrs	r3, r2
 8002144:	68fa      	ldr	r2, [r7, #12]
 8002146:	4313      	orrs	r3, r2
 8002148:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	68fa      	ldr	r2, [r7, #12]
 8002150:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800215a:	2001      	movs	r0, #1
 800215c:	f7ff f8aa 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68fa      	ldr	r2, [r7, #12]
 8002166:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	699b      	ldr	r3, [r3, #24]
 800216e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002176:	4013      	ands	r3, r2
 8002178:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800217e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002180:	683a      	ldr	r2, [r7, #0]
 8002182:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002186:	2a00      	cmp	r2, #0
 8002188:	d101      	bne.n	800218e <ETH_SetMACConfig+0xee>
 800218a:	2280      	movs	r2, #128	; 0x80
 800218c:	e000      	b.n	8002190 <ETH_SetMACConfig+0xf0>
 800218e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002190:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002196:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002198:	683a      	ldr	r2, [r7, #0]
 800219a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 800219e:	2a01      	cmp	r2, #1
 80021a0:	d101      	bne.n	80021a6 <ETH_SetMACConfig+0x106>
 80021a2:	2208      	movs	r2, #8
 80021a4:	e000      	b.n	80021a8 <ETH_SetMACConfig+0x108>
 80021a6:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80021a8:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80021aa:	683a      	ldr	r2, [r7, #0]
 80021ac:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80021b0:	2a01      	cmp	r2, #1
 80021b2:	d101      	bne.n	80021b8 <ETH_SetMACConfig+0x118>
 80021b4:	2204      	movs	r2, #4
 80021b6:	e000      	b.n	80021ba <ETH_SetMACConfig+0x11a>
 80021b8:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80021ba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80021c2:	2a01      	cmp	r2, #1
 80021c4:	d101      	bne.n	80021ca <ETH_SetMACConfig+0x12a>
 80021c6:	2202      	movs	r2, #2
 80021c8:	e000      	b.n	80021cc <ETH_SetMACConfig+0x12c>
 80021ca:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80021cc:	4313      	orrs	r3, r2
 80021ce:	68fa      	ldr	r2, [r7, #12]
 80021d0:	4313      	orrs	r3, r2
 80021d2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	68fa      	ldr	r2, [r7, #12]
 80021da:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80021e4:	2001      	movs	r0, #1
 80021e6:	f7ff f865 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	619a      	str	r2, [r3, #24]
}
 80021f2:	bf00      	nop
 80021f4:	3710      	adds	r7, #16
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	ff20810f 	.word	0xff20810f

08002200 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002212:	699b      	ldr	r3, [r3, #24]
 8002214:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	4b3d      	ldr	r3, [pc, #244]	; (8002310 <ETH_SetDMAConfig+0x110>)
 800221a:	4013      	ands	r3, r2
 800221c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	7b1b      	ldrb	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d102      	bne.n	800222c <ETH_SetDMAConfig+0x2c>
 8002226:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800222a:	e000      	b.n	800222e <ETH_SetDMAConfig+0x2e>
 800222c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	7b5b      	ldrb	r3, [r3, #13]
 8002232:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002234:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	7f52      	ldrb	r2, [r2, #29]
 800223a:	2a00      	cmp	r2, #0
 800223c:	d102      	bne.n	8002244 <ETH_SetDMAConfig+0x44>
 800223e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002242:	e000      	b.n	8002246 <ETH_SetDMAConfig+0x46>
 8002244:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002246:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	7b9b      	ldrb	r3, [r3, #14]
 800224c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800224e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002254:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	7f1b      	ldrb	r3, [r3, #28]
 800225a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800225c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	7f9b      	ldrb	r3, [r3, #30]
 8002262:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002264:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800226a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002272:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002274:	4313      	orrs	r3, r2
 8002276:	68fa      	ldr	r2, [r7, #12]
 8002278:	4313      	orrs	r3, r2
 800227a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002284:	461a      	mov	r2, r3
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002292:	699b      	ldr	r3, [r3, #24]
 8002294:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002296:	2001      	movs	r0, #1
 8002298:	f7ff f80c 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022a4:	461a      	mov	r2, r3
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	791b      	ldrb	r3, [r3, #4]
 80022ae:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022b4:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022b6:	683b      	ldr	r3, [r7, #0]
 80022b8:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80022ba:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80022c0:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022c2:	683b      	ldr	r3, [r7, #0]
 80022c4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80022c8:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80022ca:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80022d0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80022d2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80022d4:	683b      	ldr	r3, [r7, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80022d8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80022da:	687a      	ldr	r2, [r7, #4]
 80022dc:	6812      	ldr	r2, [r2, #0]
 80022de:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80022e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80022e6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80022f4:	2001      	movs	r0, #1
 80022f6:	f7fe ffdd 	bl	80012b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002302:	461a      	mov	r2, r3
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	6013      	str	r3, [r2, #0]
}
 8002308:	bf00      	nop
 800230a:	3710      	adds	r7, #16
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	f8de3f23 	.word	0xf8de3f23

08002314 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b0a6      	sub	sp, #152	; 0x98
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 800231c:	2301      	movs	r3, #1
 800231e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002322:	2301      	movs	r3, #1
 8002324:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002328:	2300      	movs	r3, #0
 800232a:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800232c:	2300      	movs	r3, #0
 800232e:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002332:	2301      	movs	r3, #1
 8002334:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002338:	2300      	movs	r3, #0
 800233a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800233e:	2301      	movs	r3, #1
 8002340:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800234a:	2300      	movs	r3, #0
 800234c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002350:	2300      	movs	r3, #0
 8002352:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002354:	2300      	movs	r3, #0
 8002356:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800235a:	2300      	movs	r3, #0
 800235c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800235e:	2300      	movs	r3, #0
 8002360:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002364:	2300      	movs	r3, #0
 8002366:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002370:	2300      	movs	r3, #0
 8002372:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002376:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800237a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800237c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002380:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002382:	2300      	movs	r3, #0
 8002384:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002388:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800238c:	4619      	mov	r1, r3
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f7ff fe86 	bl	80020a0 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002394:	2301      	movs	r3, #1
 8002396:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002398:	2301      	movs	r3, #1
 800239a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800239c:	2301      	movs	r3, #1
 800239e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 80023a2:	2301      	movs	r3, #1
 80023a4:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 80023a6:	2300      	movs	r3, #0
 80023a8:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 80023b0:	2300      	movs	r3, #0
 80023b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80023c0:	2301      	movs	r3, #1
 80023c2:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80023c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80023c8:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80023ca:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80023ce:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80023d0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80023d6:	2301      	movs	r3, #1
 80023d8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80023e4:	f107 0308 	add.w	r3, r7, #8
 80023e8:	4619      	mov	r1, r3
 80023ea:	6878      	ldr	r0, [r7, #4]
 80023ec:	f7ff ff08 	bl	8002200 <ETH_SetDMAConfig>
}
 80023f0:	bf00      	nop
 80023f2:	3798      	adds	r7, #152	; 0x98
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b087      	sub	sp, #28
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	60f8      	str	r0, [r7, #12]
 8002400:	60b9      	str	r1, [r7, #8]
 8002402:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	3305      	adds	r3, #5
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	021b      	lsls	r3, r3, #8
 800240c:	687a      	ldr	r2, [r7, #4]
 800240e:	3204      	adds	r2, #4
 8002410:	7812      	ldrb	r2, [r2, #0]
 8002412:	4313      	orrs	r3, r2
 8002414:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002416:	68ba      	ldr	r2, [r7, #8]
 8002418:	4b11      	ldr	r3, [pc, #68]	; (8002460 <ETH_MACAddressConfig+0x68>)
 800241a:	4413      	add	r3, r2
 800241c:	461a      	mov	r2, r3
 800241e:	697b      	ldr	r3, [r7, #20]
 8002420:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3303      	adds	r3, #3
 8002426:	781b      	ldrb	r3, [r3, #0]
 8002428:	061a      	lsls	r2, r3, #24
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	3302      	adds	r3, #2
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	041b      	lsls	r3, r3, #16
 8002432:	431a      	orrs	r2, r3
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	3301      	adds	r3, #1
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	021b      	lsls	r3, r3, #8
 800243c:	4313      	orrs	r3, r2
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	7812      	ldrb	r2, [r2, #0]
 8002442:	4313      	orrs	r3, r2
 8002444:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	4b06      	ldr	r3, [pc, #24]	; (8002464 <ETH_MACAddressConfig+0x6c>)
 800244a:	4413      	add	r3, r2
 800244c:	461a      	mov	r2, r3
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	6013      	str	r3, [r2, #0]
}
 8002452:	bf00      	nop
 8002454:	371c      	adds	r7, #28
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40028040 	.word	0x40028040
 8002464:	40028044 	.word	0x40028044

08002468 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002468:	b480      	push	{r7}
 800246a:	b085      	sub	sp, #20
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002470:	2300      	movs	r3, #0
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	e03e      	b.n	80024f4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68d9      	ldr	r1, [r3, #12]
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	4613      	mov	r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	4413      	add	r3, r2
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	440b      	add	r3, r1
 8002486:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002488:	68bb      	ldr	r3, [r7, #8]
 800248a:	2200      	movs	r2, #0
 800248c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800248e:	68bb      	ldr	r3, [r7, #8]
 8002490:	2200      	movs	r2, #0
 8002492:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	2200      	movs	r2, #0
 8002498:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800249a:	68bb      	ldr	r3, [r7, #8]
 800249c:	2200      	movs	r2, #0
 800249e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 80024a0:	68b9      	ldr	r1, [r7, #8]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	3206      	adds	r2, #6
 80024a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d80c      	bhi.n	80024d8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68d9      	ldr	r1, [r3, #12]
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	1c5a      	adds	r2, r3, #1
 80024c6:	4613      	mov	r3, r2
 80024c8:	009b      	lsls	r3, r3, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	00db      	lsls	r3, r3, #3
 80024ce:	440b      	add	r3, r1
 80024d0:	461a      	mov	r2, r3
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	60da      	str	r2, [r3, #12]
 80024d6:	e004      	b.n	80024e2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	68db      	ldr	r3, [r3, #12]
 80024dc:	461a      	mov	r2, r3
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80024ea:	68bb      	ldr	r3, [r7, #8]
 80024ec:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	3301      	adds	r3, #1
 80024f2:	60fb      	str	r3, [r7, #12]
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	2b03      	cmp	r3, #3
 80024f8:	d9bd      	bls.n	8002476 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2200      	movs	r2, #0
 80024fe:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	68da      	ldr	r2, [r3, #12]
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800250c:	611a      	str	r2, [r3, #16]
}
 800250e:	bf00      	nop
 8002510:	3714      	adds	r7, #20
 8002512:	46bd      	mov	sp, r7
 8002514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002518:	4770      	bx	lr

0800251a <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800251a:	b480      	push	{r7}
 800251c:	b085      	sub	sp, #20
 800251e:	af00      	add	r7, sp, #0
 8002520:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002522:	2300      	movs	r3, #0
 8002524:	60fb      	str	r3, [r7, #12]
 8002526:	e046      	b.n	80025b6 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6919      	ldr	r1, [r3, #16]
 800252c:	68fa      	ldr	r2, [r7, #12]
 800252e:	4613      	mov	r3, r2
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	4413      	add	r3, r2
 8002534:	00db      	lsls	r3, r3, #3
 8002536:	440b      	add	r3, r1
 8002538:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800253a:	68bb      	ldr	r3, [r7, #8]
 800253c:	2200      	movs	r2, #0
 800253e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2200      	movs	r2, #0
 8002544:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2200      	movs	r2, #0
 800254a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	2200      	movs	r2, #0
 8002550:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002552:	68bb      	ldr	r3, [r7, #8]
 8002554:	2200      	movs	r2, #0
 8002556:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	2200      	movs	r2, #0
 800255c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800255e:	68bb      	ldr	r3, [r7, #8]
 8002560:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002564:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002566:	68bb      	ldr	r3, [r7, #8]
 8002568:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 800256c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800256e:	68bb      	ldr	r3, [r7, #8]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800257a:	68b9      	ldr	r1, [r7, #8]
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	68fa      	ldr	r2, [r7, #12]
 8002580:	3212      	adds	r2, #18
 8002582:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	2b02      	cmp	r3, #2
 800258a:	d80c      	bhi.n	80025a6 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	6919      	ldr	r1, [r3, #16]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	1c5a      	adds	r2, r3, #1
 8002594:	4613      	mov	r3, r2
 8002596:	009b      	lsls	r3, r3, #2
 8002598:	4413      	add	r3, r2
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	440b      	add	r3, r1
 800259e:	461a      	mov	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	60da      	str	r2, [r3, #12]
 80025a4:	e004      	b.n	80025b0 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	691b      	ldr	r3, [r3, #16]
 80025aa:	461a      	mov	r2, r3
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	3301      	adds	r3, #1
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d9b5      	bls.n	8002528 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2200      	movs	r2, #0
 80025c0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	2200      	movs	r2, #0
 80025c6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2200      	movs	r2, #0
 80025cc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	2200      	movs	r2, #0
 80025d2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2200      	movs	r2, #0
 80025d8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	691a      	ldr	r2, [r3, #16]
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025e6:	60da      	str	r2, [r3, #12]
}
 80025e8:	bf00      	nop
 80025ea:	3714      	adds	r7, #20
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b08d      	sub	sp, #52	; 0x34
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	3318      	adds	r3, #24
 8002604:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	691b      	ldr	r3, [r3, #16]
 800260a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	691b      	ldr	r3, [r3, #16]
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800261a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800261e:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	689b      	ldr	r3, [r3, #8]
 8002624:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002626:	2300      	movs	r3, #0
 8002628:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 800262a:	6a3b      	ldr	r3, [r7, #32]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002632:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002636:	d007      	beq.n	8002648 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002638:	697a      	ldr	r2, [r7, #20]
 800263a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800263c:	3304      	adds	r3, #4
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	4413      	add	r3, r2
 8002642:	685b      	ldr	r3, [r3, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d001      	beq.n	800264c <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002648:	2302      	movs	r3, #2
 800264a:	e0ff      	b.n	800284c <ETH_Prepare_Tx_Descriptors+0x258>
  }


  descnbr += 1U;
 800264c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800264e:	3301      	adds	r3, #1
 8002650:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002652:	69fb      	ldr	r3, [r7, #28]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	461a      	mov	r2, r3
 8002658:	6a3b      	ldr	r3, [r7, #32]
 800265a:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800265c:	6a3b      	ldr	r3, [r7, #32]
 800265e:	685a      	ldr	r2, [r3, #4]
 8002660:	4b7d      	ldr	r3, [pc, #500]	; (8002858 <ETH_Prepare_Tx_Descriptors+0x264>)
 8002662:	4013      	ands	r3, r2
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	6852      	ldr	r2, [r2, #4]
 8002668:	431a      	orrs	r2, r3
 800266a:	6a3b      	ldr	r3, [r7, #32]
 800266c:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	2b00      	cmp	r3, #0
 8002678:	d008      	beq.n	800268c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800267a:	6a3b      	ldr	r3, [r7, #32]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	431a      	orrs	r2, r3
 8002688:	6a3b      	ldr	r3, [r7, #32]
 800268a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800268c:	68bb      	ldr	r3, [r7, #8]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	431a      	orrs	r2, r3
 80026a6:	6a3b      	ldr	r3, [r7, #32]
 80026a8:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 0304 	and.w	r3, r3, #4
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d005      	beq.n	80026c2 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 80026b6:	6a3b      	ldr	r3, [r7, #32]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80026be:	6a3b      	ldr	r3, [r7, #32]
 80026c0:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 80026c2:	6a3b      	ldr	r3, [r7, #32]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80026ca:	6a3b      	ldr	r3, [r7, #32]
 80026cc:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 80026ce:	f3bf 8f5f 	dmb	sy
}
 80026d2:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80026d4:	6a3b      	ldr	r3, [r7, #32]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80026dc:	6a3b      	ldr	r3, [r7, #32]
 80026de:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 80026e0:	e082      	b.n	80027e8 <ETH_Prepare_Tx_Descriptors+0x1f4>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 80026e2:	6a3b      	ldr	r3, [r7, #32]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80026ea:	6a3b      	ldr	r3, [r7, #32]
 80026ec:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d006      	beq.n	8002702 <ETH_Prepare_Tx_Descriptors+0x10e>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80026f4:	6a3b      	ldr	r3, [r7, #32]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	601a      	str	r2, [r3, #0]
 8002700:	e005      	b.n	800270e <ETH_Prepare_Tx_Descriptors+0x11a>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002702:	6a3b      	ldr	r3, [r7, #32]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002710:	3301      	adds	r3, #1
 8002712:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002716:	2b03      	cmp	r3, #3
 8002718:	d902      	bls.n	8002720 <ETH_Prepare_Tx_Descriptors+0x12c>
 800271a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800271c:	3b04      	subs	r3, #4
 800271e:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002724:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002728:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800272a:	6a3b      	ldr	r3, [r7, #32]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002732:	6a3b      	ldr	r3, [r7, #32]
 8002734:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002736:	6a3b      	ldr	r3, [r7, #32]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800273e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002742:	d007      	beq.n	8002754 <ETH_Prepare_Tx_Descriptors+0x160>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002744:	697a      	ldr	r2, [r7, #20]
 8002746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002748:	3304      	adds	r3, #4
 800274a:	009b      	lsls	r3, r3, #2
 800274c:	4413      	add	r3, r2
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d029      	beq.n	80027a8 <ETH_Prepare_Tx_Descriptors+0x1b4>
    {
      descidx = firstdescidx;
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002758:	697b      	ldr	r3, [r7, #20]
 800275a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800275c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002760:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002762:	2300      	movs	r3, #0
 8002764:	62bb      	str	r3, [r7, #40]	; 0x28
 8002766:	e019      	b.n	800279c <ETH_Prepare_Tx_Descriptors+0x1a8>
  __ASM volatile ("dmb 0xF":::"memory");
 8002768:	f3bf 8f5f 	dmb	sy
}
 800276c:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002776:	6a3b      	ldr	r3, [r7, #32]
 8002778:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 800277a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800277c:	3301      	adds	r3, #1
 800277e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002780:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002782:	2b03      	cmp	r3, #3
 8002784:	d902      	bls.n	800278c <ETH_Prepare_Tx_Descriptors+0x198>
 8002786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002788:	3b04      	subs	r3, #4
 800278a:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002790:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002794:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002796:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002798:	3301      	adds	r3, #1
 800279a:	62bb      	str	r3, [r7, #40]	; 0x28
 800279c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800279e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d3e1      	bcc.n	8002768 <ETH_Prepare_Tx_Descriptors+0x174>
      }

      return HAL_ETH_ERROR_BUSY;
 80027a4:	2302      	movs	r3, #2
 80027a6:	e051      	b.n	800284c <ETH_Prepare_Tx_Descriptors+0x258>
    }

    descnbr += 1U;
 80027a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027aa:	3301      	adds	r3, #1
 80027ac:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 80027ae:	69fb      	ldr	r3, [r7, #28]
 80027b0:	689b      	ldr	r3, [r3, #8]
 80027b2:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80027b4:	69fb      	ldr	r3, [r7, #28]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	461a      	mov	r2, r3
 80027ba:	6a3b      	ldr	r3, [r7, #32]
 80027bc:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	685a      	ldr	r2, [r3, #4]
 80027c2:	4b25      	ldr	r3, [pc, #148]	; (8002858 <ETH_Prepare_Tx_Descriptors+0x264>)
 80027c4:	4013      	ands	r3, r2
 80027c6:	69fa      	ldr	r2, [r7, #28]
 80027c8:	6852      	ldr	r2, [r2, #4]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	6a3b      	ldr	r3, [r7, #32]
 80027ce:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 80027d0:	69bb      	ldr	r3, [r7, #24]
 80027d2:	3301      	adds	r3, #1
 80027d4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 80027d6:	f3bf 8f5f 	dmb	sy
}
 80027da:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80027dc:	6a3b      	ldr	r3, [r7, #32]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	f47f af78 	bne.w	80026e2 <ETH_Prepare_Tx_Descriptors+0xee>
  }

  if (ItMode != ((uint32_t)RESET))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d006      	beq.n	8002806 <ETH_Prepare_Tx_Descriptors+0x212>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 80027f8:	6a3b      	ldr	r3, [r7, #32]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002800:	6a3b      	ldr	r3, [r7, #32]
 8002802:	601a      	str	r2, [r3, #0]
 8002804:	e005      	b.n	8002812 <ETH_Prepare_Tx_Descriptors+0x21e>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002806:	6a3b      	ldr	r3, [r7, #32]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800280e:	6a3b      	ldr	r3, [r7, #32]
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002812:	6a3b      	ldr	r3, [r7, #32]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800281a:	6a3b      	ldr	r3, [r7, #32]
 800281c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 800281e:	697b      	ldr	r3, [r7, #20]
 8002820:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002822:	6979      	ldr	r1, [r7, #20]
 8002824:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002826:	3304      	adds	r3, #4
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	440b      	add	r3, r1
 800282c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002832:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002834:	b672      	cpsid	i
}
 8002836:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002838:	697b      	ldr	r3, [r7, #20]
 800283a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800283c:	69bb      	ldr	r3, [r7, #24]
 800283e:	4413      	add	r3, r2
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002846:	b662      	cpsie	i
}
 8002848:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3734      	adds	r7, #52	; 0x34
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr
 8002858:	ffffe000 	.word	0xffffe000

0800285c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800285c:	b480      	push	{r7}
 800285e:	b089      	sub	sp, #36	; 0x24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002866:	2300      	movs	r3, #0
 8002868:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800286e:	2300      	movs	r3, #0
 8002870:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002872:	2300      	movs	r3, #0
 8002874:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002876:	2300      	movs	r3, #0
 8002878:	61fb      	str	r3, [r7, #28]
 800287a:	e175      	b.n	8002b68 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800287c:	2201      	movs	r2, #1
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	697a      	ldr	r2, [r7, #20]
 800288c:	4013      	ands	r3, r2
 800288e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	429a      	cmp	r2, r3
 8002896:	f040 8164 	bne.w	8002b62 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f003 0303 	and.w	r3, r3, #3
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d005      	beq.n	80028b2 <HAL_GPIO_Init+0x56>
 80028a6:	683b      	ldr	r3, [r7, #0]
 80028a8:	685b      	ldr	r3, [r3, #4]
 80028aa:	f003 0303 	and.w	r3, r3, #3
 80028ae:	2b02      	cmp	r3, #2
 80028b0:	d130      	bne.n	8002914 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80028b8:	69fb      	ldr	r3, [r7, #28]
 80028ba:	005b      	lsls	r3, r3, #1
 80028bc:	2203      	movs	r2, #3
 80028be:	fa02 f303 	lsl.w	r3, r2, r3
 80028c2:	43db      	mvns	r3, r3
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	4013      	ands	r3, r2
 80028c8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	69fb      	ldr	r3, [r7, #28]
 80028d0:	005b      	lsls	r3, r3, #1
 80028d2:	fa02 f303 	lsl.w	r3, r2, r3
 80028d6:	69ba      	ldr	r2, [r7, #24]
 80028d8:	4313      	orrs	r3, r2
 80028da:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	69ba      	ldr	r2, [r7, #24]
 80028e0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	685b      	ldr	r3, [r3, #4]
 80028e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80028e8:	2201      	movs	r2, #1
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	fa02 f303 	lsl.w	r3, r2, r3
 80028f0:	43db      	mvns	r3, r3
 80028f2:	69ba      	ldr	r2, [r7, #24]
 80028f4:	4013      	ands	r3, r2
 80028f6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	091b      	lsrs	r3, r3, #4
 80028fe:	f003 0201 	and.w	r2, r3, #1
 8002902:	69fb      	ldr	r3, [r7, #28]
 8002904:	fa02 f303 	lsl.w	r3, r2, r3
 8002908:	69ba      	ldr	r2, [r7, #24]
 800290a:	4313      	orrs	r3, r2
 800290c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f003 0303 	and.w	r3, r3, #3
 800291c:	2b03      	cmp	r3, #3
 800291e:	d017      	beq.n	8002950 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	68db      	ldr	r3, [r3, #12]
 8002924:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	005b      	lsls	r3, r3, #1
 800292a:	2203      	movs	r2, #3
 800292c:	fa02 f303 	lsl.w	r3, r2, r3
 8002930:	43db      	mvns	r3, r3
 8002932:	69ba      	ldr	r2, [r7, #24]
 8002934:	4013      	ands	r3, r2
 8002936:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	689a      	ldr	r2, [r3, #8]
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	005b      	lsls	r3, r3, #1
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	69ba      	ldr	r2, [r7, #24]
 8002946:	4313      	orrs	r3, r2
 8002948:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	69ba      	ldr	r2, [r7, #24]
 800294e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	685b      	ldr	r3, [r3, #4]
 8002954:	f003 0303 	and.w	r3, r3, #3
 8002958:	2b02      	cmp	r3, #2
 800295a:	d123      	bne.n	80029a4 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 800295c:	69fb      	ldr	r3, [r7, #28]
 800295e:	08da      	lsrs	r2, r3, #3
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3208      	adds	r2, #8
 8002964:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002968:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800296a:	69fb      	ldr	r3, [r7, #28]
 800296c:	f003 0307 	and.w	r3, r3, #7
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	220f      	movs	r2, #15
 8002974:	fa02 f303 	lsl.w	r3, r2, r3
 8002978:	43db      	mvns	r3, r3
 800297a:	69ba      	ldr	r2, [r7, #24]
 800297c:	4013      	ands	r3, r2
 800297e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	f003 0307 	and.w	r3, r3, #7
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	fa02 f303 	lsl.w	r3, r2, r3
 8002990:	69ba      	ldr	r2, [r7, #24]
 8002992:	4313      	orrs	r3, r2
 8002994:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	08da      	lsrs	r2, r3, #3
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	3208      	adds	r2, #8
 800299e:	69b9      	ldr	r1, [r7, #24]
 80029a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	2203      	movs	r2, #3
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	4013      	ands	r3, r2
 80029ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	f003 0203 	and.w	r2, r3, #3
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	005b      	lsls	r3, r3, #1
 80029c8:	fa02 f303 	lsl.w	r3, r2, r3
 80029cc:	69ba      	ldr	r2, [r7, #24]
 80029ce:	4313      	orrs	r3, r2
 80029d0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	685b      	ldr	r3, [r3, #4]
 80029dc:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	f000 80be 	beq.w	8002b62 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029e6:	4b66      	ldr	r3, [pc, #408]	; (8002b80 <HAL_GPIO_Init+0x324>)
 80029e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029ea:	4a65      	ldr	r2, [pc, #404]	; (8002b80 <HAL_GPIO_Init+0x324>)
 80029ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80029f0:	6453      	str	r3, [r2, #68]	; 0x44
 80029f2:	4b63      	ldr	r3, [pc, #396]	; (8002b80 <HAL_GPIO_Init+0x324>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80029fe:	4a61      	ldr	r2, [pc, #388]	; (8002b84 <HAL_GPIO_Init+0x328>)
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	089b      	lsrs	r3, r3, #2
 8002a04:	3302      	adds	r3, #2
 8002a06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	f003 0303 	and.w	r3, r3, #3
 8002a12:	009b      	lsls	r3, r3, #2
 8002a14:	220f      	movs	r2, #15
 8002a16:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1a:	43db      	mvns	r3, r3
 8002a1c:	69ba      	ldr	r2, [r7, #24]
 8002a1e:	4013      	ands	r3, r2
 8002a20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a58      	ldr	r2, [pc, #352]	; (8002b88 <HAL_GPIO_Init+0x32c>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d037      	beq.n	8002a9a <HAL_GPIO_Init+0x23e>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a57      	ldr	r2, [pc, #348]	; (8002b8c <HAL_GPIO_Init+0x330>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d031      	beq.n	8002a96 <HAL_GPIO_Init+0x23a>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a56      	ldr	r2, [pc, #344]	; (8002b90 <HAL_GPIO_Init+0x334>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d02b      	beq.n	8002a92 <HAL_GPIO_Init+0x236>
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a55      	ldr	r2, [pc, #340]	; (8002b94 <HAL_GPIO_Init+0x338>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d025      	beq.n	8002a8e <HAL_GPIO_Init+0x232>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	4a54      	ldr	r2, [pc, #336]	; (8002b98 <HAL_GPIO_Init+0x33c>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d01f      	beq.n	8002a8a <HAL_GPIO_Init+0x22e>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a53      	ldr	r2, [pc, #332]	; (8002b9c <HAL_GPIO_Init+0x340>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d019      	beq.n	8002a86 <HAL_GPIO_Init+0x22a>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a52      	ldr	r2, [pc, #328]	; (8002ba0 <HAL_GPIO_Init+0x344>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d013      	beq.n	8002a82 <HAL_GPIO_Init+0x226>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a51      	ldr	r2, [pc, #324]	; (8002ba4 <HAL_GPIO_Init+0x348>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d00d      	beq.n	8002a7e <HAL_GPIO_Init+0x222>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a50      	ldr	r2, [pc, #320]	; (8002ba8 <HAL_GPIO_Init+0x34c>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d007      	beq.n	8002a7a <HAL_GPIO_Init+0x21e>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a4f      	ldr	r2, [pc, #316]	; (8002bac <HAL_GPIO_Init+0x350>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d101      	bne.n	8002a76 <HAL_GPIO_Init+0x21a>
 8002a72:	2309      	movs	r3, #9
 8002a74:	e012      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a76:	230a      	movs	r3, #10
 8002a78:	e010      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a7a:	2308      	movs	r3, #8
 8002a7c:	e00e      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e00c      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a82:	2306      	movs	r3, #6
 8002a84:	e00a      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a86:	2305      	movs	r3, #5
 8002a88:	e008      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a8a:	2304      	movs	r3, #4
 8002a8c:	e006      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e004      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a92:	2302      	movs	r3, #2
 8002a94:	e002      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <HAL_GPIO_Init+0x240>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	69fa      	ldr	r2, [r7, #28]
 8002a9e:	f002 0203 	and.w	r2, r2, #3
 8002aa2:	0092      	lsls	r2, r2, #2
 8002aa4:	4093      	lsls	r3, r2
 8002aa6:	69ba      	ldr	r2, [r7, #24]
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002aac:	4935      	ldr	r1, [pc, #212]	; (8002b84 <HAL_GPIO_Init+0x328>)
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	089b      	lsrs	r3, r3, #2
 8002ab2:	3302      	adds	r3, #2
 8002ab4:	69ba      	ldr	r2, [r7, #24]
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aba:	4b3d      	ldr	r3, [pc, #244]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002abc:	689b      	ldr	r3, [r3, #8]
 8002abe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	43db      	mvns	r3, r3
 8002ac4:	69ba      	ldr	r2, [r7, #24]
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685b      	ldr	r3, [r3, #4]
 8002ace:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d003      	beq.n	8002ade <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002ad6:	69ba      	ldr	r2, [r7, #24]
 8002ad8:	693b      	ldr	r3, [r7, #16]
 8002ada:	4313      	orrs	r3, r2
 8002adc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ade:	4a34      	ldr	r2, [pc, #208]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002ae0:	69bb      	ldr	r3, [r7, #24]
 8002ae2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ae4:	4b32      	ldr	r3, [pc, #200]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002aea:	693b      	ldr	r3, [r7, #16]
 8002aec:	43db      	mvns	r3, r3
 8002aee:	69ba      	ldr	r2, [r7, #24]
 8002af0:	4013      	ands	r3, r2
 8002af2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d003      	beq.n	8002b08 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b00:	69ba      	ldr	r2, [r7, #24]
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002b08:	4a29      	ldr	r2, [pc, #164]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b0a:	69bb      	ldr	r3, [r7, #24]
 8002b0c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b0e:	4b28      	ldr	r3, [pc, #160]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b14:	693b      	ldr	r3, [r7, #16]
 8002b16:	43db      	mvns	r3, r3
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	4013      	ands	r3, r2
 8002b1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d003      	beq.n	8002b32 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b2a:	69ba      	ldr	r2, [r7, #24]
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b32:	4a1f      	ldr	r2, [pc, #124]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b34:	69bb      	ldr	r3, [r7, #24]
 8002b36:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b38:	4b1d      	ldr	r3, [pc, #116]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	43db      	mvns	r3, r3
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	4013      	ands	r3, r2
 8002b46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d003      	beq.n	8002b5c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002b54:	69ba      	ldr	r2, [r7, #24]
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b5c:	4a14      	ldr	r2, [pc, #80]	; (8002bb0 <HAL_GPIO_Init+0x354>)
 8002b5e:	69bb      	ldr	r3, [r7, #24]
 8002b60:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002b62:	69fb      	ldr	r3, [r7, #28]
 8002b64:	3301      	adds	r3, #1
 8002b66:	61fb      	str	r3, [r7, #28]
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	2b0f      	cmp	r3, #15
 8002b6c:	f67f ae86 	bls.w	800287c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002b70:	bf00      	nop
 8002b72:	bf00      	nop
 8002b74:	3724      	adds	r7, #36	; 0x24
 8002b76:	46bd      	mov	sp, r7
 8002b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7c:	4770      	bx	lr
 8002b7e:	bf00      	nop
 8002b80:	40023800 	.word	0x40023800
 8002b84:	40013800 	.word	0x40013800
 8002b88:	40020000 	.word	0x40020000
 8002b8c:	40020400 	.word	0x40020400
 8002b90:	40020800 	.word	0x40020800
 8002b94:	40020c00 	.word	0x40020c00
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40021400 	.word	0x40021400
 8002ba0:	40021800 	.word	0x40021800
 8002ba4:	40021c00 	.word	0x40021c00
 8002ba8:	40022000 	.word	0x40022000
 8002bac:	40022400 	.word	0x40022400
 8002bb0:	40013c00 	.word	0x40013c00

08002bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
 8002bbc:	460b      	mov	r3, r1
 8002bbe:	807b      	strh	r3, [r7, #2]
 8002bc0:	4613      	mov	r3, r2
 8002bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002bc4:	787b      	ldrb	r3, [r7, #1]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d003      	beq.n	8002bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bca:	887a      	ldrh	r2, [r7, #2]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002bd0:	e003      	b.n	8002bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002bd2:	887b      	ldrh	r3, [r7, #2]
 8002bd4:	041a      	lsls	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	619a      	str	r2, [r3, #24]
}
 8002bda:	bf00      	nop
 8002bdc:	370c      	adds	r7, #12
 8002bde:	46bd      	mov	sp, r7
 8002be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be4:	4770      	bx	lr

08002be6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002be6:	b480      	push	{r7}
 8002be8:	b085      	sub	sp, #20
 8002bea:	af00      	add	r7, sp, #0
 8002bec:	6078      	str	r0, [r7, #4]
 8002bee:	460b      	mov	r3, r1
 8002bf0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	695b      	ldr	r3, [r3, #20]
 8002bf6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002bf8:	887a      	ldrh	r2, [r7, #2]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	041a      	lsls	r2, r3, #16
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	43d9      	mvns	r1, r3
 8002c04:	887b      	ldrh	r3, [r7, #2]
 8002c06:	400b      	ands	r3, r1
 8002c08:	431a      	orrs	r2, r3
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	619a      	str	r2, [r3, #24]
}
 8002c0e:	bf00      	nop
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
	...

08002c1c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c20:	4b05      	ldr	r3, [pc, #20]	; (8002c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c26:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c2a:	6013      	str	r3, [r2, #0]
}
 8002c2c:	bf00      	nop
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c34:	4770      	bx	lr
 8002c36:	bf00      	nop
 8002c38:	40007000 	.word	0x40007000

08002c3c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	b082      	sub	sp, #8
 8002c40:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8002c42:	2300      	movs	r3, #0
 8002c44:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002c46:	4b23      	ldr	r3, [pc, #140]	; (8002cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4a:	4a22      	ldr	r2, [pc, #136]	; (8002cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c50:	6413      	str	r3, [r2, #64]	; 0x40
 8002c52:	4b20      	ldr	r3, [pc, #128]	; (8002cd4 <HAL_PWREx_EnableOverDrive+0x98>)
 8002c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	603b      	str	r3, [r7, #0]
 8002c5c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002c6a:	f7fe fb17 	bl	800129c <HAL_GetTick>
 8002c6e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c70:	e009      	b.n	8002c86 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002c72:	f7fe fb13 	bl	800129c <HAL_GetTick>
 8002c76:	4602      	mov	r2, r0
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	1ad3      	subs	r3, r2, r3
 8002c7c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002c80:	d901      	bls.n	8002c86 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8002c82:	2303      	movs	r3, #3
 8002c84:	e022      	b.n	8002ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002c86:	4b14      	ldr	r3, [pc, #80]	; (8002cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c88:	685b      	ldr	r3, [r3, #4]
 8002c8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c92:	d1ee      	bne.n	8002c72 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002c94:	4b10      	ldr	r3, [pc, #64]	; (8002cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a0f      	ldr	r2, [pc, #60]	; (8002cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002c9a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c9e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca0:	f7fe fafc 	bl	800129c <HAL_GetTick>
 8002ca4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002ca6:	e009      	b.n	8002cbc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002ca8:	f7fe faf8 	bl	800129c <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cb6:	d901      	bls.n	8002cbc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e007      	b.n	8002ccc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002cbc:	4b06      	ldr	r3, [pc, #24]	; (8002cd8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cc4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002cc8:	d1ee      	bne.n	8002ca8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002cca:	2300      	movs	r3, #0
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}
 8002cd4:	40023800 	.word	0x40023800
 8002cd8:	40007000 	.word	0x40007000

08002cdc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	b086      	sub	sp, #24
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d101      	bne.n	8002cf2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002cee:	2301      	movs	r3, #1
 8002cf0:	e29b      	b.n	800322a <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0301 	and.w	r3, r3, #1
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	f000 8087 	beq.w	8002e0e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d00:	4b96      	ldr	r3, [pc, #600]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f003 030c 	and.w	r3, r3, #12
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d00c      	beq.n	8002d26 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d0c:	4b93      	ldr	r3, [pc, #588]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d0e:	689b      	ldr	r3, [r3, #8]
 8002d10:	f003 030c 	and.w	r3, r3, #12
 8002d14:	2b08      	cmp	r3, #8
 8002d16:	d112      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62>
 8002d18:	4b90      	ldr	r3, [pc, #576]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d24:	d10b      	bne.n	8002d3e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d26:	4b8d      	ldr	r3, [pc, #564]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	d06c      	beq.n	8002e0c <HAL_RCC_OscConfig+0x130>
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	685b      	ldr	r3, [r3, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d168      	bne.n	8002e0c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e275      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d46:	d106      	bne.n	8002d56 <HAL_RCC_OscConfig+0x7a>
 8002d48:	4b84      	ldr	r3, [pc, #528]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a83      	ldr	r2, [pc, #524]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d4e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d52:	6013      	str	r3, [r2, #0]
 8002d54:	e02e      	b.n	8002db4 <HAL_RCC_OscConfig+0xd8>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10c      	bne.n	8002d78 <HAL_RCC_OscConfig+0x9c>
 8002d5e:	4b7f      	ldr	r3, [pc, #508]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	4a7e      	ldr	r2, [pc, #504]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d68:	6013      	str	r3, [r2, #0]
 8002d6a:	4b7c      	ldr	r3, [pc, #496]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4a7b      	ldr	r2, [pc, #492]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d70:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d74:	6013      	str	r3, [r2, #0]
 8002d76:	e01d      	b.n	8002db4 <HAL_RCC_OscConfig+0xd8>
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d80:	d10c      	bne.n	8002d9c <HAL_RCC_OscConfig+0xc0>
 8002d82:	4b76      	ldr	r3, [pc, #472]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4a75      	ldr	r2, [pc, #468]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d8c:	6013      	str	r3, [r2, #0]
 8002d8e:	4b73      	ldr	r3, [pc, #460]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a72      	ldr	r2, [pc, #456]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d98:	6013      	str	r3, [r2, #0]
 8002d9a:	e00b      	b.n	8002db4 <HAL_RCC_OscConfig+0xd8>
 8002d9c:	4b6f      	ldr	r3, [pc, #444]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a6e      	ldr	r2, [pc, #440]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002da2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002da6:	6013      	str	r3, [r2, #0]
 8002da8:	4b6c      	ldr	r3, [pc, #432]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4a6b      	ldr	r2, [pc, #428]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002dae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002db2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d013      	beq.n	8002de4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dbc:	f7fe fa6e 	bl	800129c <HAL_GetTick>
 8002dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	e008      	b.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dc4:	f7fe fa6a 	bl	800129c <HAL_GetTick>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	693b      	ldr	r3, [r7, #16]
 8002dcc:	1ad3      	subs	r3, r2, r3
 8002dce:	2b64      	cmp	r3, #100	; 0x64
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e229      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dd6:	4b61      	ldr	r3, [pc, #388]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d0f0      	beq.n	8002dc4 <HAL_RCC_OscConfig+0xe8>
 8002de2:	e014      	b.n	8002e0e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002de4:	f7fe fa5a 	bl	800129c <HAL_GetTick>
 8002de8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	e008      	b.n	8002dfe <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002dec:	f7fe fa56 	bl	800129c <HAL_GetTick>
 8002df0:	4602      	mov	r2, r0
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	1ad3      	subs	r3, r2, r3
 8002df6:	2b64      	cmp	r3, #100	; 0x64
 8002df8:	d901      	bls.n	8002dfe <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e215      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dfe:	4b57      	ldr	r3, [pc, #348]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d1f0      	bne.n	8002dec <HAL_RCC_OscConfig+0x110>
 8002e0a:	e000      	b.n	8002e0e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d069      	beq.n	8002eee <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002e1a:	4b50      	ldr	r3, [pc, #320]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f003 030c 	and.w	r3, r3, #12
 8002e22:	2b00      	cmp	r3, #0
 8002e24:	d00b      	beq.n	8002e3e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e26:	4b4d      	ldr	r3, [pc, #308]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	f003 030c 	and.w	r3, r3, #12
 8002e2e:	2b08      	cmp	r3, #8
 8002e30:	d11c      	bne.n	8002e6c <HAL_RCC_OscConfig+0x190>
 8002e32:	4b4a      	ldr	r3, [pc, #296]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e34:	685b      	ldr	r3, [r3, #4]
 8002e36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d116      	bne.n	8002e6c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e3e:	4b47      	ldr	r3, [pc, #284]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d005      	beq.n	8002e56 <HAL_RCC_OscConfig+0x17a>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d001      	beq.n	8002e56 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002e52:	2301      	movs	r3, #1
 8002e54:	e1e9      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e56:	4b41      	ldr	r3, [pc, #260]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	691b      	ldr	r3, [r3, #16]
 8002e62:	00db      	lsls	r3, r3, #3
 8002e64:	493d      	ldr	r1, [pc, #244]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e66:	4313      	orrs	r3, r2
 8002e68:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e6a:	e040      	b.n	8002eee <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	68db      	ldr	r3, [r3, #12]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d023      	beq.n	8002ebc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e74:	4b39      	ldr	r3, [pc, #228]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a38      	ldr	r2, [pc, #224]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e7a:	f043 0301 	orr.w	r3, r3, #1
 8002e7e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e80:	f7fe fa0c 	bl	800129c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e88:	f7fe fa08 	bl	800129c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e1c7      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e9a:	4b30      	ldr	r3, [pc, #192]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ea6:	4b2d      	ldr	r3, [pc, #180]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	00db      	lsls	r3, r3, #3
 8002eb4:	4929      	ldr	r1, [pc, #164]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	600b      	str	r3, [r1, #0]
 8002eba:	e018      	b.n	8002eee <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ebc:	4b27      	ldr	r3, [pc, #156]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	4a26      	ldr	r2, [pc, #152]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002ec2:	f023 0301 	bic.w	r3, r3, #1
 8002ec6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f9e8 	bl	800129c <HAL_GetTick>
 8002ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ece:	e008      	b.n	8002ee2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ed0:	f7fe f9e4 	bl	800129c <HAL_GetTick>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	1ad3      	subs	r3, r2, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d901      	bls.n	8002ee2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002ede:	2303      	movs	r3, #3
 8002ee0:	e1a3      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ee2:	4b1e      	ldr	r3, [pc, #120]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f003 0302 	and.w	r3, r3, #2
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d1f0      	bne.n	8002ed0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	f003 0308 	and.w	r3, r3, #8
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d038      	beq.n	8002f6c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	695b      	ldr	r3, [r3, #20]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d019      	beq.n	8002f36 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f02:	4b16      	ldr	r3, [pc, #88]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	4a15      	ldr	r2, [pc, #84]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f0e:	f7fe f9c5 	bl	800129c <HAL_GetTick>
 8002f12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f14:	e008      	b.n	8002f28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f16:	f7fe f9c1 	bl	800129c <HAL_GetTick>
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	1ad3      	subs	r3, r2, r3
 8002f20:	2b02      	cmp	r3, #2
 8002f22:	d901      	bls.n	8002f28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f24:	2303      	movs	r3, #3
 8002f26:	e180      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f28:	4b0c      	ldr	r3, [pc, #48]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002f2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f2c:	f003 0302 	and.w	r3, r3, #2
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d0f0      	beq.n	8002f16 <HAL_RCC_OscConfig+0x23a>
 8002f34:	e01a      	b.n	8002f6c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f36:	4b09      	ldr	r3, [pc, #36]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002f38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f3a:	4a08      	ldr	r2, [pc, #32]	; (8002f5c <HAL_RCC_OscConfig+0x280>)
 8002f3c:	f023 0301 	bic.w	r3, r3, #1
 8002f40:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f42:	f7fe f9ab 	bl	800129c <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002f4a:	f7fe f9a7 	bl	800129c <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d903      	bls.n	8002f60 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e166      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
 8002f5c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f60:	4b92      	ldr	r3, [pc, #584]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8002f62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d1ee      	bne.n	8002f4a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0304 	and.w	r3, r3, #4
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 80a4 	beq.w	80030c2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f7a:	4b8c      	ldr	r3, [pc, #560]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8002f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d10d      	bne.n	8002fa2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f86:	4b89      	ldr	r3, [pc, #548]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8002f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f8a:	4a88      	ldr	r2, [pc, #544]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8002f8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f90:	6413      	str	r3, [r2, #64]	; 0x40
 8002f92:	4b86      	ldr	r3, [pc, #536]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8002f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f9a:	60bb      	str	r3, [r7, #8]
 8002f9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f9e:	2301      	movs	r3, #1
 8002fa0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fa2:	4b83      	ldr	r3, [pc, #524]	; (80031b0 <HAL_RCC_OscConfig+0x4d4>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d118      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002fae:	4b80      	ldr	r3, [pc, #512]	; (80031b0 <HAL_RCC_OscConfig+0x4d4>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a7f      	ldr	r2, [pc, #508]	; (80031b0 <HAL_RCC_OscConfig+0x4d4>)
 8002fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fba:	f7fe f96f 	bl	800129c <HAL_GetTick>
 8002fbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fc0:	e008      	b.n	8002fd4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fc2:	f7fe f96b 	bl	800129c <HAL_GetTick>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	693b      	ldr	r3, [r7, #16]
 8002fca:	1ad3      	subs	r3, r2, r3
 8002fcc:	2b64      	cmp	r3, #100	; 0x64
 8002fce:	d901      	bls.n	8002fd4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002fd0:	2303      	movs	r3, #3
 8002fd2:	e12a      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002fd4:	4b76      	ldr	r3, [pc, #472]	; (80031b0 <HAL_RCC_OscConfig+0x4d4>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d0f0      	beq.n	8002fc2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d106      	bne.n	8002ff6 <HAL_RCC_OscConfig+0x31a>
 8002fe8:	4b70      	ldr	r3, [pc, #448]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8002fea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fec:	4a6f      	ldr	r2, [pc, #444]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8002fee:	f043 0301 	orr.w	r3, r3, #1
 8002ff2:	6713      	str	r3, [r2, #112]	; 0x70
 8002ff4:	e02d      	b.n	8003052 <HAL_RCC_OscConfig+0x376>
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689b      	ldr	r3, [r3, #8]
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d10c      	bne.n	8003018 <HAL_RCC_OscConfig+0x33c>
 8002ffe:	4b6b      	ldr	r3, [pc, #428]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	4a6a      	ldr	r2, [pc, #424]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003004:	f023 0301 	bic.w	r3, r3, #1
 8003008:	6713      	str	r3, [r2, #112]	; 0x70
 800300a:	4b68      	ldr	r3, [pc, #416]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800300c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300e:	4a67      	ldr	r2, [pc, #412]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003010:	f023 0304 	bic.w	r3, r3, #4
 8003014:	6713      	str	r3, [r2, #112]	; 0x70
 8003016:	e01c      	b.n	8003052 <HAL_RCC_OscConfig+0x376>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	2b05      	cmp	r3, #5
 800301e:	d10c      	bne.n	800303a <HAL_RCC_OscConfig+0x35e>
 8003020:	4b62      	ldr	r3, [pc, #392]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003022:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003024:	4a61      	ldr	r2, [pc, #388]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003026:	f043 0304 	orr.w	r3, r3, #4
 800302a:	6713      	str	r3, [r2, #112]	; 0x70
 800302c:	4b5f      	ldr	r3, [pc, #380]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800302e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003030:	4a5e      	ldr	r2, [pc, #376]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003032:	f043 0301 	orr.w	r3, r3, #1
 8003036:	6713      	str	r3, [r2, #112]	; 0x70
 8003038:	e00b      	b.n	8003052 <HAL_RCC_OscConfig+0x376>
 800303a:	4b5c      	ldr	r3, [pc, #368]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	4a5b      	ldr	r2, [pc, #364]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003040:	f023 0301 	bic.w	r3, r3, #1
 8003044:	6713      	str	r3, [r2, #112]	; 0x70
 8003046:	4b59      	ldr	r3, [pc, #356]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800304a:	4a58      	ldr	r2, [pc, #352]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800304c:	f023 0304 	bic.w	r3, r3, #4
 8003050:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d015      	beq.n	8003086 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800305a:	f7fe f91f 	bl	800129c <HAL_GetTick>
 800305e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003060:	e00a      	b.n	8003078 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003062:	f7fe f91b 	bl	800129c <HAL_GetTick>
 8003066:	4602      	mov	r2, r0
 8003068:	693b      	ldr	r3, [r7, #16]
 800306a:	1ad3      	subs	r3, r2, r3
 800306c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003070:	4293      	cmp	r3, r2
 8003072:	d901      	bls.n	8003078 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003074:	2303      	movs	r3, #3
 8003076:	e0d8      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003078:	4b4c      	ldr	r3, [pc, #304]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800307a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800307c:	f003 0302 	and.w	r3, r3, #2
 8003080:	2b00      	cmp	r3, #0
 8003082:	d0ee      	beq.n	8003062 <HAL_RCC_OscConfig+0x386>
 8003084:	e014      	b.n	80030b0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003086:	f7fe f909 	bl	800129c <HAL_GetTick>
 800308a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800308c:	e00a      	b.n	80030a4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800308e:	f7fe f905 	bl	800129c <HAL_GetTick>
 8003092:	4602      	mov	r2, r0
 8003094:	693b      	ldr	r3, [r7, #16]
 8003096:	1ad3      	subs	r3, r2, r3
 8003098:	f241 3288 	movw	r2, #5000	; 0x1388
 800309c:	4293      	cmp	r3, r2
 800309e:	d901      	bls.n	80030a4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e0c2      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030a4:	4b41      	ldr	r3, [pc, #260]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 80030a6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d1ee      	bne.n	800308e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80030b0:	7dfb      	ldrb	r3, [r7, #23]
 80030b2:	2b01      	cmp	r3, #1
 80030b4:	d105      	bne.n	80030c2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a3c      	ldr	r2, [pc, #240]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 80030bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	699b      	ldr	r3, [r3, #24]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	f000 80ae 	beq.w	8003228 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80030cc:	4b37      	ldr	r3, [pc, #220]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	f003 030c 	and.w	r3, r3, #12
 80030d4:	2b08      	cmp	r3, #8
 80030d6:	d06d      	beq.n	80031b4 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	699b      	ldr	r3, [r3, #24]
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d14b      	bne.n	8003178 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030e0:	4b32      	ldr	r3, [pc, #200]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a31      	ldr	r2, [pc, #196]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 80030e6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe f8d6 	bl	800129c <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe f8d2 	bl	800129c <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e091      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003106:	4b29      	ldr	r3, [pc, #164]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d1f0      	bne.n	80030f4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	69da      	ldr	r2, [r3, #28]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	431a      	orrs	r2, r3
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003120:	019b      	lsls	r3, r3, #6
 8003122:	431a      	orrs	r2, r3
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003128:	085b      	lsrs	r3, r3, #1
 800312a:	3b01      	subs	r3, #1
 800312c:	041b      	lsls	r3, r3, #16
 800312e:	431a      	orrs	r2, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003134:	061b      	lsls	r3, r3, #24
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313c:	071b      	lsls	r3, r3, #28
 800313e:	491b      	ldr	r1, [pc, #108]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003140:	4313      	orrs	r3, r2
 8003142:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003144:	4b19      	ldr	r3, [pc, #100]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800314a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800314e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003150:	f7fe f8a4 	bl	800129c <HAL_GetTick>
 8003154:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003156:	e008      	b.n	800316a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003158:	f7fe f8a0 	bl	800129c <HAL_GetTick>
 800315c:	4602      	mov	r2, r0
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	1ad3      	subs	r3, r2, r3
 8003162:	2b02      	cmp	r3, #2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e05f      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800316a:	4b10      	ldr	r3, [pc, #64]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0f0      	beq.n	8003158 <HAL_RCC_OscConfig+0x47c>
 8003176:	e057      	b.n	8003228 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003178:	4b0c      	ldr	r3, [pc, #48]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a0b      	ldr	r2, [pc, #44]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 800317e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003182:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003184:	f7fe f88a 	bl	800129c <HAL_GetTick>
 8003188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800318a:	e008      	b.n	800319e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800318c:	f7fe f886 	bl	800129c <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	693b      	ldr	r3, [r7, #16]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	2b02      	cmp	r3, #2
 8003198:	d901      	bls.n	800319e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800319a:	2303      	movs	r3, #3
 800319c:	e045      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	4b03      	ldr	r3, [pc, #12]	; (80031ac <HAL_RCC_OscConfig+0x4d0>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1f0      	bne.n	800318c <HAL_RCC_OscConfig+0x4b0>
 80031aa:	e03d      	b.n	8003228 <HAL_RCC_OscConfig+0x54c>
 80031ac:	40023800 	.word	0x40023800
 80031b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80031b4:	4b1f      	ldr	r3, [pc, #124]	; (8003234 <HAL_RCC_OscConfig+0x558>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	699b      	ldr	r3, [r3, #24]
 80031be:	2b01      	cmp	r3, #1
 80031c0:	d030      	beq.n	8003224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031cc:	429a      	cmp	r2, r3
 80031ce:	d129      	bne.n	8003224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031da:	429a      	cmp	r2, r3
 80031dc:	d122      	bne.n	8003224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80031de:	68fa      	ldr	r2, [r7, #12]
 80031e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80031e4:	4013      	ands	r3, r2
 80031e6:	687a      	ldr	r2, [r7, #4]
 80031e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031ea:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80031ec:	4293      	cmp	r3, r2
 80031ee:	d119      	bne.n	8003224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fa:	085b      	lsrs	r3, r3, #1
 80031fc:	3b01      	subs	r3, #1
 80031fe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003200:	429a      	cmp	r2, r3
 8003202:	d10f      	bne.n	8003224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8003210:	429a      	cmp	r2, r3
 8003212:	d107      	bne.n	8003224 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003220:	429a      	cmp	r2, r3
 8003222:	d001      	beq.n	8003228 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8003224:	2301      	movs	r3, #1
 8003226:	e000      	b.n	800322a <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3718      	adds	r7, #24
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800

08003238 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b084      	sub	sp, #16
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
 8003240:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003242:	2300      	movs	r3, #0
 8003244:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d101      	bne.n	8003250 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0d0      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003250:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f003 030f 	and.w	r3, r3, #15
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	429a      	cmp	r2, r3
 800325c:	d910      	bls.n	8003280 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800325e:	4b67      	ldr	r3, [pc, #412]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f023 020f 	bic.w	r2, r3, #15
 8003266:	4965      	ldr	r1, [pc, #404]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	4313      	orrs	r3, r2
 800326c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800326e:	4b63      	ldr	r3, [pc, #396]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f003 030f 	and.w	r3, r3, #15
 8003276:	683a      	ldr	r2, [r7, #0]
 8003278:	429a      	cmp	r2, r3
 800327a:	d001      	beq.n	8003280 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800327c:	2301      	movs	r3, #1
 800327e:	e0b8      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f003 0302 	and.w	r3, r3, #2
 8003288:	2b00      	cmp	r3, #0
 800328a:	d020      	beq.n	80032ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f003 0304 	and.w	r3, r3, #4
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003298:	4b59      	ldr	r3, [pc, #356]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	4a58      	ldr	r2, [pc, #352]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 800329e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0308 	and.w	r3, r3, #8
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d005      	beq.n	80032bc <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b0:	4b53      	ldr	r3, [pc, #332]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	4a52      	ldr	r2, [pc, #328]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80032b6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032ba:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032bc:	4b50      	ldr	r3, [pc, #320]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	494d      	ldr	r1, [pc, #308]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80032ca:	4313      	orrs	r3, r2
 80032cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f003 0301 	and.w	r3, r3, #1
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d040      	beq.n	800335c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d107      	bne.n	80032f2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032e2:	4b47      	ldr	r3, [pc, #284]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d115      	bne.n	800331a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e07f      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d107      	bne.n	800330a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80032fa:	4b41      	ldr	r3, [pc, #260]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003306:	2301      	movs	r3, #1
 8003308:	e073      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800330a:	4b3d      	ldr	r3, [pc, #244]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 0302 	and.w	r3, r3, #2
 8003312:	2b00      	cmp	r3, #0
 8003314:	d101      	bne.n	800331a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06b      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800331a:	4b39      	ldr	r3, [pc, #228]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	f023 0203 	bic.w	r2, r3, #3
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4936      	ldr	r1, [pc, #216]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 8003328:	4313      	orrs	r3, r2
 800332a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800332c:	f7fd ffb6 	bl	800129c <HAL_GetTick>
 8003330:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003332:	e00a      	b.n	800334a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003334:	f7fd ffb2 	bl	800129c <HAL_GetTick>
 8003338:	4602      	mov	r2, r0
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	1ad3      	subs	r3, r2, r3
 800333e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003342:	4293      	cmp	r3, r2
 8003344:	d901      	bls.n	800334a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003346:	2303      	movs	r3, #3
 8003348:	e053      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800334a:	4b2d      	ldr	r3, [pc, #180]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	f003 020c 	and.w	r2, r3, #12
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	429a      	cmp	r2, r3
 800335a:	d1eb      	bne.n	8003334 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800335c:	4b27      	ldr	r3, [pc, #156]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 030f 	and.w	r3, r3, #15
 8003364:	683a      	ldr	r2, [r7, #0]
 8003366:	429a      	cmp	r2, r3
 8003368:	d210      	bcs.n	800338c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800336a:	4b24      	ldr	r3, [pc, #144]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f023 020f 	bic.w	r2, r3, #15
 8003372:	4922      	ldr	r1, [pc, #136]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 8003374:	683b      	ldr	r3, [r7, #0]
 8003376:	4313      	orrs	r3, r2
 8003378:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800337a:	4b20      	ldr	r3, [pc, #128]	; (80033fc <HAL_RCC_ClockConfig+0x1c4>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	f003 030f 	and.w	r3, r3, #15
 8003382:	683a      	ldr	r2, [r7, #0]
 8003384:	429a      	cmp	r2, r3
 8003386:	d001      	beq.n	800338c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003388:	2301      	movs	r3, #1
 800338a:	e032      	b.n	80033f2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0304 	and.w	r3, r3, #4
 8003394:	2b00      	cmp	r3, #0
 8003396:	d008      	beq.n	80033aa <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003398:	4b19      	ldr	r3, [pc, #100]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	4916      	ldr	r1, [pc, #88]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033a6:	4313      	orrs	r3, r2
 80033a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f003 0308 	and.w	r3, r3, #8
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80033b6:	4b12      	ldr	r3, [pc, #72]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033b8:	689b      	ldr	r3, [r3, #8]
 80033ba:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	691b      	ldr	r3, [r3, #16]
 80033c2:	00db      	lsls	r3, r3, #3
 80033c4:	490e      	ldr	r1, [pc, #56]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033c6:	4313      	orrs	r3, r2
 80033c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80033ca:	f000 f821 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 80033ce:	4602      	mov	r2, r0
 80033d0:	4b0b      	ldr	r3, [pc, #44]	; (8003400 <HAL_RCC_ClockConfig+0x1c8>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	091b      	lsrs	r3, r3, #4
 80033d6:	f003 030f 	and.w	r3, r3, #15
 80033da:	490a      	ldr	r1, [pc, #40]	; (8003404 <HAL_RCC_ClockConfig+0x1cc>)
 80033dc:	5ccb      	ldrb	r3, [r1, r3]
 80033de:	fa22 f303 	lsr.w	r3, r2, r3
 80033e2:	4a09      	ldr	r2, [pc, #36]	; (8003408 <HAL_RCC_ClockConfig+0x1d0>)
 80033e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80033e6:	4b09      	ldr	r3, [pc, #36]	; (800340c <HAL_RCC_ClockConfig+0x1d4>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4618      	mov	r0, r3
 80033ec:	f7fd fc34 	bl	8000c58 <HAL_InitTick>

  return HAL_OK;
 80033f0:	2300      	movs	r3, #0
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	40023c00 	.word	0x40023c00
 8003400:	40023800 	.word	0x40023800
 8003404:	0801aad8 	.word	0x0801aad8
 8003408:	20000000 	.word	0x20000000
 800340c:	20000004 	.word	0x20000004

08003410 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003410:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003414:	b094      	sub	sp, #80	; 0x50
 8003416:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003418:	2300      	movs	r3, #0
 800341a:	647b      	str	r3, [r7, #68]	; 0x44
 800341c:	2300      	movs	r3, #0
 800341e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003420:	2300      	movs	r3, #0
 8003422:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8003424:	2300      	movs	r3, #0
 8003426:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003428:	4b79      	ldr	r3, [pc, #484]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 030c 	and.w	r3, r3, #12
 8003430:	2b08      	cmp	r3, #8
 8003432:	d00d      	beq.n	8003450 <HAL_RCC_GetSysClockFreq+0x40>
 8003434:	2b08      	cmp	r3, #8
 8003436:	f200 80e1 	bhi.w	80035fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800343a:	2b00      	cmp	r3, #0
 800343c:	d002      	beq.n	8003444 <HAL_RCC_GetSysClockFreq+0x34>
 800343e:	2b04      	cmp	r3, #4
 8003440:	d003      	beq.n	800344a <HAL_RCC_GetSysClockFreq+0x3a>
 8003442:	e0db      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003444:	4b73      	ldr	r3, [pc, #460]	; (8003614 <HAL_RCC_GetSysClockFreq+0x204>)
 8003446:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003448:	e0db      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800344a:	4b73      	ldr	r3, [pc, #460]	; (8003618 <HAL_RCC_GetSysClockFreq+0x208>)
 800344c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800344e:	e0d8      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003450:	4b6f      	ldr	r3, [pc, #444]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003458:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800345a:	4b6d      	ldr	r3, [pc, #436]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003462:	2b00      	cmp	r3, #0
 8003464:	d063      	beq.n	800352e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003466:	4b6a      	ldr	r3, [pc, #424]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	099b      	lsrs	r3, r3, #6
 800346c:	2200      	movs	r2, #0
 800346e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003470:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003474:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003478:	633b      	str	r3, [r7, #48]	; 0x30
 800347a:	2300      	movs	r3, #0
 800347c:	637b      	str	r3, [r7, #52]	; 0x34
 800347e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003482:	4622      	mov	r2, r4
 8003484:	462b      	mov	r3, r5
 8003486:	f04f 0000 	mov.w	r0, #0
 800348a:	f04f 0100 	mov.w	r1, #0
 800348e:	0159      	lsls	r1, r3, #5
 8003490:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003494:	0150      	lsls	r0, r2, #5
 8003496:	4602      	mov	r2, r0
 8003498:	460b      	mov	r3, r1
 800349a:	4621      	mov	r1, r4
 800349c:	1a51      	subs	r1, r2, r1
 800349e:	6139      	str	r1, [r7, #16]
 80034a0:	4629      	mov	r1, r5
 80034a2:	eb63 0301 	sbc.w	r3, r3, r1
 80034a6:	617b      	str	r3, [r7, #20]
 80034a8:	f04f 0200 	mov.w	r2, #0
 80034ac:	f04f 0300 	mov.w	r3, #0
 80034b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034b4:	4659      	mov	r1, fp
 80034b6:	018b      	lsls	r3, r1, #6
 80034b8:	4651      	mov	r1, sl
 80034ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034be:	4651      	mov	r1, sl
 80034c0:	018a      	lsls	r2, r1, #6
 80034c2:	4651      	mov	r1, sl
 80034c4:	ebb2 0801 	subs.w	r8, r2, r1
 80034c8:	4659      	mov	r1, fp
 80034ca:	eb63 0901 	sbc.w	r9, r3, r1
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034e2:	4690      	mov	r8, r2
 80034e4:	4699      	mov	r9, r3
 80034e6:	4623      	mov	r3, r4
 80034e8:	eb18 0303 	adds.w	r3, r8, r3
 80034ec:	60bb      	str	r3, [r7, #8]
 80034ee:	462b      	mov	r3, r5
 80034f0:	eb49 0303 	adc.w	r3, r9, r3
 80034f4:	60fb      	str	r3, [r7, #12]
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	f04f 0300 	mov.w	r3, #0
 80034fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003502:	4629      	mov	r1, r5
 8003504:	024b      	lsls	r3, r1, #9
 8003506:	4621      	mov	r1, r4
 8003508:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800350c:	4621      	mov	r1, r4
 800350e:	024a      	lsls	r2, r1, #9
 8003510:	4610      	mov	r0, r2
 8003512:	4619      	mov	r1, r3
 8003514:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003516:	2200      	movs	r2, #0
 8003518:	62bb      	str	r3, [r7, #40]	; 0x28
 800351a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800351c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003520:	f7fc fee6 	bl	80002f0 <__aeabi_uldivmod>
 8003524:	4602      	mov	r2, r0
 8003526:	460b      	mov	r3, r1
 8003528:	4613      	mov	r3, r2
 800352a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800352c:	e058      	b.n	80035e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800352e:	4b38      	ldr	r3, [pc, #224]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	099b      	lsrs	r3, r3, #6
 8003534:	2200      	movs	r2, #0
 8003536:	4618      	mov	r0, r3
 8003538:	4611      	mov	r1, r2
 800353a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800353e:	623b      	str	r3, [r7, #32]
 8003540:	2300      	movs	r3, #0
 8003542:	627b      	str	r3, [r7, #36]	; 0x24
 8003544:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003548:	4642      	mov	r2, r8
 800354a:	464b      	mov	r3, r9
 800354c:	f04f 0000 	mov.w	r0, #0
 8003550:	f04f 0100 	mov.w	r1, #0
 8003554:	0159      	lsls	r1, r3, #5
 8003556:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800355a:	0150      	lsls	r0, r2, #5
 800355c:	4602      	mov	r2, r0
 800355e:	460b      	mov	r3, r1
 8003560:	4641      	mov	r1, r8
 8003562:	ebb2 0a01 	subs.w	sl, r2, r1
 8003566:	4649      	mov	r1, r9
 8003568:	eb63 0b01 	sbc.w	fp, r3, r1
 800356c:	f04f 0200 	mov.w	r2, #0
 8003570:	f04f 0300 	mov.w	r3, #0
 8003574:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003578:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800357c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003580:	ebb2 040a 	subs.w	r4, r2, sl
 8003584:	eb63 050b 	sbc.w	r5, r3, fp
 8003588:	f04f 0200 	mov.w	r2, #0
 800358c:	f04f 0300 	mov.w	r3, #0
 8003590:	00eb      	lsls	r3, r5, #3
 8003592:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003596:	00e2      	lsls	r2, r4, #3
 8003598:	4614      	mov	r4, r2
 800359a:	461d      	mov	r5, r3
 800359c:	4643      	mov	r3, r8
 800359e:	18e3      	adds	r3, r4, r3
 80035a0:	603b      	str	r3, [r7, #0]
 80035a2:	464b      	mov	r3, r9
 80035a4:	eb45 0303 	adc.w	r3, r5, r3
 80035a8:	607b      	str	r3, [r7, #4]
 80035aa:	f04f 0200 	mov.w	r2, #0
 80035ae:	f04f 0300 	mov.w	r3, #0
 80035b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035b6:	4629      	mov	r1, r5
 80035b8:	028b      	lsls	r3, r1, #10
 80035ba:	4621      	mov	r1, r4
 80035bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c0:	4621      	mov	r1, r4
 80035c2:	028a      	lsls	r2, r1, #10
 80035c4:	4610      	mov	r0, r2
 80035c6:	4619      	mov	r1, r3
 80035c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035ca:	2200      	movs	r2, #0
 80035cc:	61bb      	str	r3, [r7, #24]
 80035ce:	61fa      	str	r2, [r7, #28]
 80035d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035d4:	f7fc fe8c 	bl	80002f0 <__aeabi_uldivmod>
 80035d8:	4602      	mov	r2, r0
 80035da:	460b      	mov	r3, r1
 80035dc:	4613      	mov	r3, r2
 80035de:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80035e0:	4b0b      	ldr	r3, [pc, #44]	; (8003610 <HAL_RCC_GetSysClockFreq+0x200>)
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	0c1b      	lsrs	r3, r3, #16
 80035e6:	f003 0303 	and.w	r3, r3, #3
 80035ea:	3301      	adds	r3, #1
 80035ec:	005b      	lsls	r3, r3, #1
 80035ee:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80035f0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b05      	ldr	r3, [pc, #20]	; (8003614 <HAL_RCC_GetSysClockFreq+0x204>)
 80035fe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003602:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003604:	4618      	mov	r0, r3
 8003606:	3750      	adds	r7, #80	; 0x50
 8003608:	46bd      	mov	sp, r7
 800360a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800360e:	bf00      	nop
 8003610:	40023800 	.word	0x40023800
 8003614:	00f42400 	.word	0x00f42400
 8003618:	007a1200 	.word	0x007a1200

0800361c <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800361c:	b480      	push	{r7}
 800361e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003620:	4b03      	ldr	r3, [pc, #12]	; (8003630 <HAL_RCC_GetHCLKFreq+0x14>)
 8003622:	681b      	ldr	r3, [r3, #0]
}
 8003624:	4618      	mov	r0, r3
 8003626:	46bd      	mov	sp, r7
 8003628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800362c:	4770      	bx	lr
 800362e:	bf00      	nop
 8003630:	20000000 	.word	0x20000000

08003634 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003638:	f7ff fff0 	bl	800361c <HAL_RCC_GetHCLKFreq>
 800363c:	4602      	mov	r2, r0
 800363e:	4b05      	ldr	r3, [pc, #20]	; (8003654 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003640:	689b      	ldr	r3, [r3, #8]
 8003642:	0a9b      	lsrs	r3, r3, #10
 8003644:	f003 0307 	and.w	r3, r3, #7
 8003648:	4903      	ldr	r1, [pc, #12]	; (8003658 <HAL_RCC_GetPCLK1Freq+0x24>)
 800364a:	5ccb      	ldrb	r3, [r1, r3]
 800364c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003650:	4618      	mov	r0, r3
 8003652:	bd80      	pop	{r7, pc}
 8003654:	40023800 	.word	0x40023800
 8003658:	0801aae8 	.word	0x0801aae8

0800365c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800365c:	b580      	push	{r7, lr}
 800365e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003660:	f7ff ffdc 	bl	800361c <HAL_RCC_GetHCLKFreq>
 8003664:	4602      	mov	r2, r0
 8003666:	4b05      	ldr	r3, [pc, #20]	; (800367c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003668:	689b      	ldr	r3, [r3, #8]
 800366a:	0b5b      	lsrs	r3, r3, #13
 800366c:	f003 0307 	and.w	r3, r3, #7
 8003670:	4903      	ldr	r1, [pc, #12]	; (8003680 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003672:	5ccb      	ldrb	r3, [r1, r3]
 8003674:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003678:	4618      	mov	r0, r3
 800367a:	bd80      	pop	{r7, pc}
 800367c:	40023800 	.word	0x40023800
 8003680:	0801aae8 	.word	0x0801aae8

08003684 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003684:	b480      	push	{r7}
 8003686:	b083      	sub	sp, #12
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	220f      	movs	r2, #15
 8003692:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003694:	4b12      	ldr	r3, [pc, #72]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	f003 0203 	and.w	r2, r3, #3
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80036a0:	4b0f      	ldr	r3, [pc, #60]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80036ac:	4b0c      	ldr	r3, [pc, #48]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80036b8:	4b09      	ldr	r3, [pc, #36]	; (80036e0 <HAL_RCC_GetClockConfig+0x5c>)
 80036ba:	689b      	ldr	r3, [r3, #8]
 80036bc:	08db      	lsrs	r3, r3, #3
 80036be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80036c6:	4b07      	ldr	r3, [pc, #28]	; (80036e4 <HAL_RCC_GetClockConfig+0x60>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 020f 	and.w	r2, r3, #15
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	601a      	str	r2, [r3, #0]
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40023800 	.word	0x40023800
 80036e4:	40023c00 	.word	0x40023c00

080036e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b088      	sub	sp, #32
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80036f4:	2300      	movs	r3, #0
 80036f6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80036f8:	2300      	movs	r3, #0
 80036fa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80036fc:	2300      	movs	r3, #0
 80036fe:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003700:	2300      	movs	r3, #0
 8003702:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d012      	beq.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003710:	4b69      	ldr	r3, [pc, #420]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a68      	ldr	r2, [pc, #416]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800371a:	6093      	str	r3, [r2, #8]
 800371c:	4b66      	ldr	r3, [pc, #408]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800371e:	689a      	ldr	r2, [r3, #8]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	4964      	ldr	r1, [pc, #400]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003726:	4313      	orrs	r3, r2
 8003728:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800372e:	2b00      	cmp	r3, #0
 8003730:	d101      	bne.n	8003736 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003732:	2301      	movs	r3, #1
 8003734:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800373e:	2b00      	cmp	r3, #0
 8003740:	d017      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003742:	4b5d      	ldr	r3, [pc, #372]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003744:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003748:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003750:	4959      	ldr	r1, [pc, #356]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003752:	4313      	orrs	r3, r2
 8003754:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800375c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003760:	d101      	bne.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003762:	2301      	movs	r3, #1
 8003764:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376a:	2b00      	cmp	r3, #0
 800376c:	d101      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800376e:	2301      	movs	r3, #1
 8003770:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800377a:	2b00      	cmp	r3, #0
 800377c:	d017      	beq.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800377e:	4b4e      	ldr	r3, [pc, #312]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003780:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003784:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800378c:	494a      	ldr	r1, [pc, #296]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800378e:	4313      	orrs	r3, r2
 8003790:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800379c:	d101      	bne.n	80037a2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800379e:	2301      	movs	r3, #1
 80037a0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80037aa:	2301      	movs	r3, #1
 80037ac:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d001      	beq.n	80037be <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80037ba:	2301      	movs	r3, #1
 80037bc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 0320 	and.w	r3, r3, #32
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f000 808b 	beq.w	80038e2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80037cc:	4b3a      	ldr	r3, [pc, #232]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d0:	4a39      	ldr	r2, [pc, #228]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037d6:	6413      	str	r3, [r2, #64]	; 0x40
 80037d8:	4b37      	ldr	r3, [pc, #220]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80037da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037e0:	60bb      	str	r3, [r7, #8]
 80037e2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80037e4:	4b35      	ldr	r3, [pc, #212]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	4a34      	ldr	r2, [pc, #208]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80037ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80037ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80037f0:	f7fd fd54 	bl	800129c <HAL_GetTick>
 80037f4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80037f6:	e008      	b.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037f8:	f7fd fd50 	bl	800129c <HAL_GetTick>
 80037fc:	4602      	mov	r2, r0
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	1ad3      	subs	r3, r2, r3
 8003802:	2b64      	cmp	r3, #100	; 0x64
 8003804:	d901      	bls.n	800380a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003806:	2303      	movs	r3, #3
 8003808:	e38f      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800380a:	4b2c      	ldr	r3, [pc, #176]	; (80038bc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003812:	2b00      	cmp	r3, #0
 8003814:	d0f0      	beq.n	80037f8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003816:	4b28      	ldr	r3, [pc, #160]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	2b00      	cmp	r3, #0
 8003824:	d035      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800382e:	693a      	ldr	r2, [r7, #16]
 8003830:	429a      	cmp	r2, r3
 8003832:	d02e      	beq.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003834:	4b20      	ldr	r3, [pc, #128]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003836:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003838:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800383c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800383e:	4b1e      	ldr	r3, [pc, #120]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003842:	4a1d      	ldr	r2, [pc, #116]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800384a:	4b1b      	ldr	r3, [pc, #108]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800384c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800384e:	4a1a      	ldr	r2, [pc, #104]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003850:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003854:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003856:	4a18      	ldr	r2, [pc, #96]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800385c:	4b16      	ldr	r3, [pc, #88]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800385e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b01      	cmp	r3, #1
 8003866:	d114      	bne.n	8003892 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003868:	f7fd fd18 	bl	800129c <HAL_GetTick>
 800386c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800386e:	e00a      	b.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003870:	f7fd fd14 	bl	800129c <HAL_GetTick>
 8003874:	4602      	mov	r2, r0
 8003876:	697b      	ldr	r3, [r7, #20]
 8003878:	1ad3      	subs	r3, r2, r3
 800387a:	f241 3288 	movw	r2, #5000	; 0x1388
 800387e:	4293      	cmp	r3, r2
 8003880:	d901      	bls.n	8003886 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e351      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	4b0c      	ldr	r3, [pc, #48]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003888:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800388a:	f003 0302 	and.w	r3, r3, #2
 800388e:	2b00      	cmp	r3, #0
 8003890:	d0ee      	beq.n	8003870 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003896:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800389a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800389e:	d111      	bne.n	80038c4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80038a0:	4b05      	ldr	r3, [pc, #20]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038ac:	4b04      	ldr	r3, [pc, #16]	; (80038c0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80038ae:	400b      	ands	r3, r1
 80038b0:	4901      	ldr	r1, [pc, #4]	; (80038b8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80038b2:	4313      	orrs	r3, r2
 80038b4:	608b      	str	r3, [r1, #8]
 80038b6:	e00b      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80038b8:	40023800 	.word	0x40023800
 80038bc:	40007000 	.word	0x40007000
 80038c0:	0ffffcff 	.word	0x0ffffcff
 80038c4:	4bac      	ldr	r3, [pc, #688]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	4aab      	ldr	r2, [pc, #684]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038ca:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80038ce:	6093      	str	r3, [r2, #8]
 80038d0:	4ba9      	ldr	r3, [pc, #676]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038d2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	49a6      	ldr	r1, [pc, #664]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0310 	and.w	r3, r3, #16
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d010      	beq.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80038ee:	4ba2      	ldr	r3, [pc, #648]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80038f4:	4aa0      	ldr	r2, [pc, #640]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80038f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038fa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80038fe:	4b9e      	ldr	r3, [pc, #632]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003900:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	499b      	ldr	r1, [pc, #620]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800390a:	4313      	orrs	r3, r2
 800390c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003918:	2b00      	cmp	r3, #0
 800391a:	d00a      	beq.n	8003932 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800391c:	4b96      	ldr	r3, [pc, #600]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800391e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800392a:	4993      	ldr	r1, [pc, #588]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800392c:	4313      	orrs	r3, r2
 800392e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800393a:	2b00      	cmp	r3, #0
 800393c:	d00a      	beq.n	8003954 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800393e:	4b8e      	ldr	r3, [pc, #568]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003940:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800394c:	498a      	ldr	r1, [pc, #552]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800394e:	4313      	orrs	r3, r2
 8003950:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800395c:	2b00      	cmp	r3, #0
 800395e:	d00a      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003960:	4b85      	ldr	r3, [pc, #532]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003962:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800396e:	4982      	ldr	r1, [pc, #520]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800397e:	2b00      	cmp	r3, #0
 8003980:	d00a      	beq.n	8003998 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003982:	4b7d      	ldr	r3, [pc, #500]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003984:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003988:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003990:	4979      	ldr	r1, [pc, #484]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003992:	4313      	orrs	r3, r2
 8003994:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d00a      	beq.n	80039ba <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80039a4:	4b74      	ldr	r3, [pc, #464]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039aa:	f023 0203 	bic.w	r2, r3, #3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039b2:	4971      	ldr	r1, [pc, #452]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039b4:	4313      	orrs	r3, r2
 80039b6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d00a      	beq.n	80039dc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80039c6:	4b6c      	ldr	r3, [pc, #432]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039cc:	f023 020c 	bic.w	r2, r3, #12
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039d4:	4968      	ldr	r1, [pc, #416]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039d6:	4313      	orrs	r3, r2
 80039d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d00a      	beq.n	80039fe <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80039e8:	4b63      	ldr	r3, [pc, #396]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039ee:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039f6:	4960      	ldr	r1, [pc, #384]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d00a      	beq.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003a0a:	4b5b      	ldr	r3, [pc, #364]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a10:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a18:	4957      	ldr	r1, [pc, #348]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d00a      	beq.n	8003a42 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003a2c:	4b52      	ldr	r3, [pc, #328]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a32:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a3a:	494f      	ldr	r1, [pc, #316]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a3c:	4313      	orrs	r3, r2
 8003a3e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d00a      	beq.n	8003a64 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8003a4e:	4b4a      	ldr	r3, [pc, #296]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a54:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a5c:	4946      	ldr	r1, [pc, #280]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a5e:	4313      	orrs	r3, r2
 8003a60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d00a      	beq.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003a70:	4b41      	ldr	r3, [pc, #260]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a7e:	493e      	ldr	r1, [pc, #248]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a80:	4313      	orrs	r3, r2
 8003a82:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003a92:	4b39      	ldr	r3, [pc, #228]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a98:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003aa0:	4935      	ldr	r1, [pc, #212]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d00a      	beq.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003ab4:	4b30      	ldr	r3, [pc, #192]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003aba:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003ac2:	492d      	ldr	r1, [pc, #180]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ac4:	4313      	orrs	r3, r2
 8003ac6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d011      	beq.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003ad6:	4b28      	ldr	r3, [pc, #160]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ad8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003adc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003ae4:	4924      	ldr	r1, [pc, #144]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003af0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003af4:	d101      	bne.n	8003afa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003af6:	2301      	movs	r3, #1
 8003af8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	f003 0308 	and.w	r3, r3, #8
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d001      	beq.n	8003b0a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003b06:	2301      	movs	r3, #1
 8003b08:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00a      	beq.n	8003b2c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003b16:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b1c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003b24:	4914      	ldr	r1, [pc, #80]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b26:	4313      	orrs	r3, r2
 8003b28:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00b      	beq.n	8003b50 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003b38:	4b0f      	ldr	r3, [pc, #60]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b3e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b48:	490b      	ldr	r1, [pc, #44]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b4a:	4313      	orrs	r3, r2
 8003b4c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00f      	beq.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003b62:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	4902      	ldr	r1, [pc, #8]	; (8003b78 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003b74:	e002      	b.n	8003b7c <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8003b88:	4b8a      	ldr	r3, [pc, #552]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b8e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b98:	4986      	ldr	r1, [pc, #536]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d00b      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8003bac:	4b81      	ldr	r3, [pc, #516]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bae:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bb2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003bbc:	497d      	ldr	r1, [pc, #500]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003bc4:	69fb      	ldr	r3, [r7, #28]
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d006      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	f000 80d6 	beq.w	8003d84 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003bd8:	4b76      	ldr	r3, [pc, #472]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	4a75      	ldr	r2, [pc, #468]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003bde:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003be2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003be4:	f7fd fb5a 	bl	800129c <HAL_GetTick>
 8003be8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bea:	e008      	b.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bec:	f7fd fb56 	bl	800129c <HAL_GetTick>
 8003bf0:	4602      	mov	r2, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	1ad3      	subs	r3, r2, r3
 8003bf6:	2b64      	cmp	r3, #100	; 0x64
 8003bf8:	d901      	bls.n	8003bfe <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003bfa:	2303      	movs	r3, #3
 8003bfc:	e195      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003bfe:	4b6d      	ldr	r3, [pc, #436]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d1f0      	bne.n	8003bec <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f003 0301 	and.w	r3, r3, #1
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d021      	beq.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d11d      	bne.n	8003c5a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c1e:	4b65      	ldr	r3, [pc, #404]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c24:	0c1b      	lsrs	r3, r3, #16
 8003c26:	f003 0303 	and.w	r3, r3, #3
 8003c2a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003c2c:	4b61      	ldr	r3, [pc, #388]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c2e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c32:	0e1b      	lsrs	r3, r3, #24
 8003c34:	f003 030f 	and.w	r3, r3, #15
 8003c38:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	685b      	ldr	r3, [r3, #4]
 8003c3e:	019a      	lsls	r2, r3, #6
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	041b      	lsls	r3, r3, #16
 8003c44:	431a      	orrs	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	061b      	lsls	r3, r3, #24
 8003c4a:	431a      	orrs	r2, r3
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	071b      	lsls	r3, r3, #28
 8003c52:	4958      	ldr	r1, [pc, #352]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d004      	beq.n	8003c70 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c6a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c6e:	d00a      	beq.n	8003c86 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d02e      	beq.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c80:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003c84:	d129      	bne.n	8003cda <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003c86:	4b4b      	ldr	r3, [pc, #300]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c8c:	0c1b      	lsrs	r3, r3, #16
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003c94:	4b47      	ldr	r3, [pc, #284]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003c96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003c9a:	0f1b      	lsrs	r3, r3, #28
 8003c9c:	f003 0307 	and.w	r3, r3, #7
 8003ca0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	019a      	lsls	r2, r3, #6
 8003ca8:	693b      	ldr	r3, [r7, #16]
 8003caa:	041b      	lsls	r3, r3, #16
 8003cac:	431a      	orrs	r2, r3
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	68db      	ldr	r3, [r3, #12]
 8003cb2:	061b      	lsls	r3, r3, #24
 8003cb4:	431a      	orrs	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	071b      	lsls	r3, r3, #28
 8003cba:	493e      	ldr	r1, [pc, #248]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cbc:	4313      	orrs	r3, r2
 8003cbe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003cc2:	4b3c      	ldr	r3, [pc, #240]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cc4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003cc8:	f023 021f 	bic.w	r2, r3, #31
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	4938      	ldr	r1, [pc, #224]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d01d      	beq.n	8003d22 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003ce6:	4b33      	ldr	r3, [pc, #204]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003ce8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cec:	0e1b      	lsrs	r3, r3, #24
 8003cee:	f003 030f 	and.w	r3, r3, #15
 8003cf2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003cf4:	4b2f      	ldr	r3, [pc, #188]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003cfa:	0f1b      	lsrs	r3, r3, #28
 8003cfc:	f003 0307 	and.w	r3, r3, #7
 8003d00:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	019a      	lsls	r2, r3, #6
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	691b      	ldr	r3, [r3, #16]
 8003d0c:	041b      	lsls	r3, r3, #16
 8003d0e:	431a      	orrs	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	061b      	lsls	r3, r3, #24
 8003d14:	431a      	orrs	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	071b      	lsls	r3, r3, #28
 8003d1a:	4926      	ldr	r1, [pc, #152]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d1c:	4313      	orrs	r3, r2
 8003d1e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d011      	beq.n	8003d52 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	019a      	lsls	r2, r3, #6
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	691b      	ldr	r3, [r3, #16]
 8003d38:	041b      	lsls	r3, r3, #16
 8003d3a:	431a      	orrs	r2, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	68db      	ldr	r3, [r3, #12]
 8003d40:	061b      	lsls	r3, r3, #24
 8003d42:	431a      	orrs	r2, r3
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	071b      	lsls	r3, r3, #28
 8003d4a:	491a      	ldr	r1, [pc, #104]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d4c:	4313      	orrs	r3, r2
 8003d4e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d58:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003d5c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d5e:	f7fd fa9d 	bl	800129c <HAL_GetTick>
 8003d62:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d64:	e008      	b.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003d66:	f7fd fa99 	bl	800129c <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	697b      	ldr	r3, [r7, #20]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b64      	cmp	r3, #100	; 0x64
 8003d72:	d901      	bls.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e0d8      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003d78:	4b0e      	ldr	r3, [pc, #56]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	d0f0      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	2b01      	cmp	r3, #1
 8003d88:	f040 80ce 	bne.w	8003f28 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003d8c:	4b09      	ldr	r3, [pc, #36]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	4a08      	ldr	r2, [pc, #32]	; (8003db4 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8003d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d96:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d98:	f7fd fa80 	bl	800129c <HAL_GetTick>
 8003d9c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003d9e:	e00b      	b.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003da0:	f7fd fa7c 	bl	800129c <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	697b      	ldr	r3, [r7, #20]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b64      	cmp	r3, #100	; 0x64
 8003dac:	d904      	bls.n	8003db8 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e0bb      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003db8:	4b5e      	ldr	r3, [pc, #376]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003dc0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dc4:	d0ec      	beq.n	8003da0 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d003      	beq.n	8003dda <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d009      	beq.n	8003dee <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d02e      	beq.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d12a      	bne.n	8003e44 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003dee:	4b51      	ldr	r3, [pc, #324]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003df4:	0c1b      	lsrs	r3, r3, #16
 8003df6:	f003 0303 	and.w	r3, r3, #3
 8003dfa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003dfc:	4b4d      	ldr	r3, [pc, #308]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e02:	0f1b      	lsrs	r3, r3, #28
 8003e04:	f003 0307 	and.w	r3, r3, #7
 8003e08:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	695b      	ldr	r3, [r3, #20]
 8003e0e:	019a      	lsls	r2, r3, #6
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	041b      	lsls	r3, r3, #16
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	061b      	lsls	r3, r3, #24
 8003e1c:	431a      	orrs	r2, r3
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	071b      	lsls	r3, r3, #28
 8003e22:	4944      	ldr	r1, [pc, #272]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e24:	4313      	orrs	r3, r2
 8003e26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003e2a:	4b42      	ldr	r3, [pc, #264]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003e30:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e38:	3b01      	subs	r3, #1
 8003e3a:	021b      	lsls	r3, r3, #8
 8003e3c:	493d      	ldr	r1, [pc, #244]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e4c:	2b00      	cmp	r3, #0
 8003e4e:	d022      	beq.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003e54:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003e58:	d11d      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003e5a:	4b36      	ldr	r3, [pc, #216]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e60:	0e1b      	lsrs	r3, r3, #24
 8003e62:	f003 030f 	and.w	r3, r3, #15
 8003e66:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003e68:	4b32      	ldr	r3, [pc, #200]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	0f1b      	lsrs	r3, r3, #28
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	019a      	lsls	r2, r3, #6
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	041b      	lsls	r3, r3, #16
 8003e82:	431a      	orrs	r2, r3
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	061b      	lsls	r3, r3, #24
 8003e88:	431a      	orrs	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	071b      	lsls	r3, r3, #28
 8003e8e:	4929      	ldr	r1, [pc, #164]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003e90:	4313      	orrs	r3, r2
 8003e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0308 	and.w	r3, r3, #8
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d028      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003ea2:	4b24      	ldr	r3, [pc, #144]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ea8:	0e1b      	lsrs	r3, r3, #24
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003eb0:	4b20      	ldr	r3, [pc, #128]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eb6:	0c1b      	lsrs	r3, r3, #16
 8003eb8:	f003 0303 	and.w	r3, r3, #3
 8003ebc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	695b      	ldr	r3, [r3, #20]
 8003ec2:	019a      	lsls	r2, r3, #6
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	041b      	lsls	r3, r3, #16
 8003ec8:	431a      	orrs	r2, r3
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	061b      	lsls	r3, r3, #24
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	69db      	ldr	r3, [r3, #28]
 8003ed4:	071b      	lsls	r3, r3, #28
 8003ed6:	4917      	ldr	r1, [pc, #92]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003ede:	4b15      	ldr	r3, [pc, #84]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eec:	4911      	ldr	r1, [pc, #68]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003eee:	4313      	orrs	r3, r2
 8003ef0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003ef4:	4b0f      	ldr	r3, [pc, #60]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a0e      	ldr	r2, [pc, #56]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003efa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003efe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003f00:	f7fd f9cc 	bl	800129c <HAL_GetTick>
 8003f04:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f06:	e008      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003f08:	f7fd f9c8 	bl	800129c <HAL_GetTick>
 8003f0c:	4602      	mov	r2, r0
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	1ad3      	subs	r3, r2, r3
 8003f12:	2b64      	cmp	r3, #100	; 0x64
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e007      	b.n	8003f2a <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003f1a:	4b06      	ldr	r3, [pc, #24]	; (8003f34 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003f22:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003f26:	d1ef      	bne.n	8003f08 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3720      	adds	r7, #32
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}
 8003f32:	bf00      	nop
 8003f34:	40023800 	.word	0x40023800

08003f38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b082      	sub	sp, #8
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d101      	bne.n	8003f4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003f46:	2301      	movs	r3, #1
 8003f48:	e049      	b.n	8003fde <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 f841 	bl	8003fe6 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2202      	movs	r2, #2
 8003f68:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681a      	ldr	r2, [r3, #0]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	3304      	adds	r3, #4
 8003f74:	4619      	mov	r1, r3
 8003f76:	4610      	mov	r0, r2
 8003f78:	f000 fa00 	bl	800437c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	2201      	movs	r2, #1
 8003f88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2201      	movs	r2, #1
 8003f90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2201      	movs	r2, #1
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2201      	movs	r2, #1
 8003fb8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003fdc:	2300      	movs	r3, #0
}
 8003fde:	4618      	mov	r0, r3
 8003fe0:	3708      	adds	r7, #8
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	bd80      	pop	{r7, pc}

08003fe6 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
	...

08003ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b085      	sub	sp, #20
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800400a:	b2db      	uxtb	r3, r3
 800400c:	2b01      	cmp	r3, #1
 800400e:	d001      	beq.n	8004014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e054      	b.n	80040be <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2202      	movs	r2, #2
 8004018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f042 0201 	orr.w	r2, r2, #1
 800402a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a26      	ldr	r2, [pc, #152]	; (80040cc <HAL_TIM_Base_Start_IT+0xd0>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d022      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x80>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800403e:	d01d      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x80>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a22      	ldr	r2, [pc, #136]	; (80040d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d018      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x80>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a21      	ldr	r2, [pc, #132]	; (80040d4 <HAL_TIM_Base_Start_IT+0xd8>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d013      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x80>
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4a1f      	ldr	r2, [pc, #124]	; (80040d8 <HAL_TIM_Base_Start_IT+0xdc>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00e      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x80>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	4a1e      	ldr	r2, [pc, #120]	; (80040dc <HAL_TIM_Base_Start_IT+0xe0>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d009      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x80>
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	4a1c      	ldr	r2, [pc, #112]	; (80040e0 <HAL_TIM_Base_Start_IT+0xe4>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d004      	beq.n	800407c <HAL_TIM_Base_Start_IT+0x80>
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4a1b      	ldr	r2, [pc, #108]	; (80040e4 <HAL_TIM_Base_Start_IT+0xe8>)
 8004078:	4293      	cmp	r3, r2
 800407a:	d115      	bne.n	80040a8 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	4b19      	ldr	r3, [pc, #100]	; (80040e8 <HAL_TIM_Base_Start_IT+0xec>)
 8004084:	4013      	ands	r3, r2
 8004086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2b06      	cmp	r3, #6
 800408c:	d015      	beq.n	80040ba <HAL_TIM_Base_Start_IT+0xbe>
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004094:	d011      	beq.n	80040ba <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	681a      	ldr	r2, [r3, #0]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f042 0201 	orr.w	r2, r2, #1
 80040a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040a6:	e008      	b.n	80040ba <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0201 	orr.w	r2, r2, #1
 80040b6:	601a      	str	r2, [r3, #0]
 80040b8:	e000      	b.n	80040bc <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040ba:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3714      	adds	r7, #20
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
 80040ca:	bf00      	nop
 80040cc:	40010000 	.word	0x40010000
 80040d0:	40000400 	.word	0x40000400
 80040d4:	40000800 	.word	0x40000800
 80040d8:	40000c00 	.word	0x40000c00
 80040dc:	40010400 	.word	0x40010400
 80040e0:	40014000 	.word	0x40014000
 80040e4:	40001800 	.word	0x40001800
 80040e8:	00010007 	.word	0x00010007

080040ec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b082      	sub	sp, #8
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	691b      	ldr	r3, [r3, #16]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d122      	bne.n	8004148 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68db      	ldr	r3, [r3, #12]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b02      	cmp	r3, #2
 800410e:	d11b      	bne.n	8004148 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f06f 0202 	mvn.w	r2, #2
 8004118:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2201      	movs	r2, #1
 800411e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d003      	beq.n	8004136 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 f905 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8004134:	e005      	b.n	8004142 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f8f7 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800413c:	6878      	ldr	r0, [r7, #4]
 800413e:	f000 f908 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	691b      	ldr	r3, [r3, #16]
 800414e:	f003 0304 	and.w	r3, r3, #4
 8004152:	2b04      	cmp	r3, #4
 8004154:	d122      	bne.n	800419c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	68db      	ldr	r3, [r3, #12]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b04      	cmp	r3, #4
 8004162:	d11b      	bne.n	800419c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f06f 0204 	mvn.w	r2, #4
 800416c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2202      	movs	r2, #2
 8004172:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	699b      	ldr	r3, [r3, #24]
 800417a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800417e:	2b00      	cmp	r3, #0
 8004180:	d003      	beq.n	800418a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004182:	6878      	ldr	r0, [r7, #4]
 8004184:	f000 f8db 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8004188:	e005      	b.n	8004196 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800418a:	6878      	ldr	r0, [r7, #4]
 800418c:	f000 f8cd 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004190:	6878      	ldr	r0, [r7, #4]
 8004192:	f000 f8de 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2200      	movs	r2, #0
 800419a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	691b      	ldr	r3, [r3, #16]
 80041a2:	f003 0308 	and.w	r3, r3, #8
 80041a6:	2b08      	cmp	r3, #8
 80041a8:	d122      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	f003 0308 	and.w	r3, r3, #8
 80041b4:	2b08      	cmp	r3, #8
 80041b6:	d11b      	bne.n	80041f0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f06f 0208 	mvn.w	r2, #8
 80041c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2204      	movs	r2, #4
 80041c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	69db      	ldr	r3, [r3, #28]
 80041ce:	f003 0303 	and.w	r3, r3, #3
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d003      	beq.n	80041de <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 f8b1 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 80041dc:	e005      	b.n	80041ea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f8a3 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f000 f8b4 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	2200      	movs	r2, #0
 80041ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	691b      	ldr	r3, [r3, #16]
 80041f6:	f003 0310 	and.w	r3, r3, #16
 80041fa:	2b10      	cmp	r3, #16
 80041fc:	d122      	bne.n	8004244 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	68db      	ldr	r3, [r3, #12]
 8004204:	f003 0310 	and.w	r3, r3, #16
 8004208:	2b10      	cmp	r3, #16
 800420a:	d11b      	bne.n	8004244 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f06f 0210 	mvn.w	r2, #16
 8004214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2208      	movs	r2, #8
 800421a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	69db      	ldr	r3, [r3, #28]
 8004222:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004226:	2b00      	cmp	r3, #0
 8004228:	d003      	beq.n	8004232 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800422a:	6878      	ldr	r0, [r7, #4]
 800422c:	f000 f887 	bl	800433e <HAL_TIM_IC_CaptureCallback>
 8004230:	e005      	b.n	800423e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f000 f879 	bl	800432a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f000 f88a 	bl	8004352 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	691b      	ldr	r3, [r3, #16]
 800424a:	f003 0301 	and.w	r3, r3, #1
 800424e:	2b01      	cmp	r3, #1
 8004250:	d10e      	bne.n	8004270 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	f003 0301 	and.w	r3, r3, #1
 800425c:	2b01      	cmp	r3, #1
 800425e:	d107      	bne.n	8004270 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f06f 0201 	mvn.w	r2, #1
 8004268:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f7fc fc4e 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	691b      	ldr	r3, [r3, #16]
 8004276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800427a:	2b80      	cmp	r3, #128	; 0x80
 800427c:	d10e      	bne.n	800429c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	68db      	ldr	r3, [r3, #12]
 8004284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004288:	2b80      	cmp	r3, #128	; 0x80
 800428a:	d107      	bne.n	800429c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004294:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004296:	6878      	ldr	r0, [r7, #4]
 8004298:	f000 f91a 	bl	80044d0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	691b      	ldr	r3, [r3, #16]
 80042a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042aa:	d10e      	bne.n	80042ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68db      	ldr	r3, [r3, #12]
 80042b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042b6:	2b80      	cmp	r3, #128	; 0x80
 80042b8:	d107      	bne.n	80042ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80042c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80042c4:	6878      	ldr	r0, [r7, #4]
 80042c6:	f000 f90d 	bl	80044e4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	691b      	ldr	r3, [r3, #16]
 80042d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d10e      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	68db      	ldr	r3, [r3, #12]
 80042de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042e2:	2b40      	cmp	r3, #64	; 0x40
 80042e4:	d107      	bne.n	80042f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80042ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f838 	bl	8004366 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f003 0320 	and.w	r3, r3, #32
 8004300:	2b20      	cmp	r3, #32
 8004302:	d10e      	bne.n	8004322 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68db      	ldr	r3, [r3, #12]
 800430a:	f003 0320 	and.w	r3, r3, #32
 800430e:	2b20      	cmp	r3, #32
 8004310:	d107      	bne.n	8004322 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f06f 0220 	mvn.w	r2, #32
 800431a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800431c:	6878      	ldr	r0, [r7, #4]
 800431e:	f000 f8cd 	bl	80044bc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004322:	bf00      	nop
 8004324:	3708      	adds	r7, #8
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}

0800432a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800432a:	b480      	push	{r7}
 800432c:	b083      	sub	sp, #12
 800432e:	af00      	add	r7, sp, #0
 8004330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004332:	bf00      	nop
 8004334:	370c      	adds	r7, #12
 8004336:	46bd      	mov	sp, r7
 8004338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800433c:	4770      	bx	lr

0800433e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800433e:	b480      	push	{r7}
 8004340:	b083      	sub	sp, #12
 8004342:	af00      	add	r7, sp, #0
 8004344:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004346:	bf00      	nop
 8004348:	370c      	adds	r7, #12
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004352:	b480      	push	{r7}
 8004354:	b083      	sub	sp, #12
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800435a:	bf00      	nop
 800435c:	370c      	adds	r7, #12
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr

08004366 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004366:	b480      	push	{r7}
 8004368:	b083      	sub	sp, #12
 800436a:	af00      	add	r7, sp, #0
 800436c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800436e:	bf00      	nop
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800437c:	b480      	push	{r7}
 800437e:	b085      	sub	sp, #20
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	4a40      	ldr	r2, [pc, #256]	; (8004490 <TIM_Base_SetConfig+0x114>)
 8004390:	4293      	cmp	r3, r2
 8004392:	d013      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439a:	d00f      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	4a3d      	ldr	r2, [pc, #244]	; (8004494 <TIM_Base_SetConfig+0x118>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d00b      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	4a3c      	ldr	r2, [pc, #240]	; (8004498 <TIM_Base_SetConfig+0x11c>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d007      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a3b      	ldr	r2, [pc, #236]	; (800449c <TIM_Base_SetConfig+0x120>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d003      	beq.n	80043bc <TIM_Base_SetConfig+0x40>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	4a3a      	ldr	r2, [pc, #232]	; (80044a0 <TIM_Base_SetConfig+0x124>)
 80043b8:	4293      	cmp	r3, r2
 80043ba:	d108      	bne.n	80043ce <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	68fa      	ldr	r2, [r7, #12]
 80043ca:	4313      	orrs	r3, r2
 80043cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	4a2f      	ldr	r2, [pc, #188]	; (8004490 <TIM_Base_SetConfig+0x114>)
 80043d2:	4293      	cmp	r3, r2
 80043d4:	d02b      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043dc:	d027      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	4a2c      	ldr	r2, [pc, #176]	; (8004494 <TIM_Base_SetConfig+0x118>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d023      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	4a2b      	ldr	r2, [pc, #172]	; (8004498 <TIM_Base_SetConfig+0x11c>)
 80043ea:	4293      	cmp	r3, r2
 80043ec:	d01f      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	4a2a      	ldr	r2, [pc, #168]	; (800449c <TIM_Base_SetConfig+0x120>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d01b      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	4a29      	ldr	r2, [pc, #164]	; (80044a0 <TIM_Base_SetConfig+0x124>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d017      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	4a28      	ldr	r2, [pc, #160]	; (80044a4 <TIM_Base_SetConfig+0x128>)
 8004402:	4293      	cmp	r3, r2
 8004404:	d013      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	4a27      	ldr	r2, [pc, #156]	; (80044a8 <TIM_Base_SetConfig+0x12c>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00f      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	4a26      	ldr	r2, [pc, #152]	; (80044ac <TIM_Base_SetConfig+0x130>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d00b      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a25      	ldr	r2, [pc, #148]	; (80044b0 <TIM_Base_SetConfig+0x134>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d007      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a24      	ldr	r2, [pc, #144]	; (80044b4 <TIM_Base_SetConfig+0x138>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d003      	beq.n	800442e <TIM_Base_SetConfig+0xb2>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a23      	ldr	r2, [pc, #140]	; (80044b8 <TIM_Base_SetConfig+0x13c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d108      	bne.n	8004440 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004434:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	68db      	ldr	r3, [r3, #12]
 800443a:	68fa      	ldr	r2, [r7, #12]
 800443c:	4313      	orrs	r3, r2
 800443e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	695b      	ldr	r3, [r3, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	68fa      	ldr	r2, [r7, #12]
 8004452:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689a      	ldr	r2, [r3, #8]
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	4a0a      	ldr	r2, [pc, #40]	; (8004490 <TIM_Base_SetConfig+0x114>)
 8004468:	4293      	cmp	r3, r2
 800446a:	d003      	beq.n	8004474 <TIM_Base_SetConfig+0xf8>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	4a0c      	ldr	r2, [pc, #48]	; (80044a0 <TIM_Base_SetConfig+0x124>)
 8004470:	4293      	cmp	r3, r2
 8004472:	d103      	bne.n	800447c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	691a      	ldr	r2, [r3, #16]
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2201      	movs	r2, #1
 8004480:	615a      	str	r2, [r3, #20]
}
 8004482:	bf00      	nop
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	40010000 	.word	0x40010000
 8004494:	40000400 	.word	0x40000400
 8004498:	40000800 	.word	0x40000800
 800449c:	40000c00 	.word	0x40000c00
 80044a0:	40010400 	.word	0x40010400
 80044a4:	40014000 	.word	0x40014000
 80044a8:	40014400 	.word	0x40014400
 80044ac:	40014800 	.word	0x40014800
 80044b0:	40001800 	.word	0x40001800
 80044b4:	40001c00 	.word	0x40001c00
 80044b8:	40002000 	.word	0x40002000

080044bc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80044bc:	b480      	push	{r7}
 80044be:	b083      	sub	sp, #12
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80044c4:	bf00      	nop
 80044c6:	370c      	adds	r7, #12
 80044c8:	46bd      	mov	sp, r7
 80044ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80044d0:	b480      	push	{r7}
 80044d2:	b083      	sub	sp, #12
 80044d4:	af00      	add	r7, sp, #0
 80044d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80044d8:	bf00      	nop
 80044da:	370c      	adds	r7, #12
 80044dc:	46bd      	mov	sp, r7
 80044de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044e2:	4770      	bx	lr

080044e4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80044e4:	b480      	push	{r7}
 80044e6:	b083      	sub	sp, #12
 80044e8:	af00      	add	r7, sp, #0
 80044ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80044ec:	bf00      	nop
 80044ee:	370c      	adds	r7, #12
 80044f0:	46bd      	mov	sp, r7
 80044f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f6:	4770      	bx	lr

080044f8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b082      	sub	sp, #8
 80044fc:	af00      	add	r7, sp, #0
 80044fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e040      	b.n	800458c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800450e:	2b00      	cmp	r3, #0
 8004510:	d106      	bne.n	8004520 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	2200      	movs	r2, #0
 8004516:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f7fc fb3c 	bl	8000b98 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2224      	movs	r2, #36	; 0x24
 8004524:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f8b0 	bl	800469c <UART_SetConfig>
 800453c:	4603      	mov	r3, r0
 800453e:	2b01      	cmp	r3, #1
 8004540:	d101      	bne.n	8004546 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	e022      	b.n	800458c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454a:	2b00      	cmp	r3, #0
 800454c:	d002      	beq.n	8004554 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 fb08 	bl	8004b64 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004562:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	689a      	ldr	r2, [r3, #8]
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004572:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	681a      	ldr	r2, [r3, #0]
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	f042 0201 	orr.w	r2, r2, #1
 8004582:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004584:	6878      	ldr	r0, [r7, #4]
 8004586:	f000 fb8f 	bl	8004ca8 <UART_CheckIdleState>
 800458a:	4603      	mov	r3, r0
}
 800458c:	4618      	mov	r0, r3
 800458e:	3708      	adds	r7, #8
 8004590:	46bd      	mov	sp, r7
 8004592:	bd80      	pop	{r7, pc}

08004594 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b08a      	sub	sp, #40	; 0x28
 8004598:	af02      	add	r7, sp, #8
 800459a:	60f8      	str	r0, [r7, #12]
 800459c:	60b9      	str	r1, [r7, #8]
 800459e:	603b      	str	r3, [r7, #0]
 80045a0:	4613      	mov	r3, r2
 80045a2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80045a8:	2b20      	cmp	r3, #32
 80045aa:	d171      	bne.n	8004690 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d002      	beq.n	80045b8 <HAL_UART_Transmit+0x24>
 80045b2:	88fb      	ldrh	r3, [r7, #6]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d101      	bne.n	80045bc <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80045b8:	2301      	movs	r3, #1
 80045ba:	e06a      	b.n	8004692 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2221      	movs	r2, #33	; 0x21
 80045c8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80045ca:	f7fc fe67 	bl	800129c <HAL_GetTick>
 80045ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	88fa      	ldrh	r2, [r7, #6]
 80045d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	88fa      	ldrh	r2, [r7, #6]
 80045dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	689b      	ldr	r3, [r3, #8]
 80045e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045e8:	d108      	bne.n	80045fc <HAL_UART_Transmit+0x68>
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d104      	bne.n	80045fc <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80045f2:	2300      	movs	r3, #0
 80045f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	61bb      	str	r3, [r7, #24]
 80045fa:	e003      	b.n	8004604 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004600:	2300      	movs	r3, #0
 8004602:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004604:	e02c      	b.n	8004660 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004606:	683b      	ldr	r3, [r7, #0]
 8004608:	9300      	str	r3, [sp, #0]
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	2200      	movs	r2, #0
 800460e:	2180      	movs	r1, #128	; 0x80
 8004610:	68f8      	ldr	r0, [r7, #12]
 8004612:	f000 fb96 	bl	8004d42 <UART_WaitOnFlagUntilTimeout>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 800461c:	2303      	movs	r3, #3
 800461e:	e038      	b.n	8004692 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	d10b      	bne.n	800463e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	881b      	ldrh	r3, [r3, #0]
 800462a:	461a      	mov	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004634:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8004636:	69bb      	ldr	r3, [r7, #24]
 8004638:	3302      	adds	r3, #2
 800463a:	61bb      	str	r3, [r7, #24]
 800463c:	e007      	b.n	800464e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800463e:	69fb      	ldr	r3, [r7, #28]
 8004640:	781a      	ldrb	r2, [r3, #0]
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	3301      	adds	r3, #1
 800464c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004654:	b29b      	uxth	r3, r3
 8004656:	3b01      	subs	r3, #1
 8004658:	b29a      	uxth	r2, r3
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8004666:	b29b      	uxth	r3, r3
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1cc      	bne.n	8004606 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	9300      	str	r3, [sp, #0]
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	2200      	movs	r2, #0
 8004674:	2140      	movs	r1, #64	; 0x40
 8004676:	68f8      	ldr	r0, [r7, #12]
 8004678:	f000 fb63 	bl	8004d42 <UART_WaitOnFlagUntilTimeout>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d001      	beq.n	8004686 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e005      	b.n	8004692 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2220      	movs	r2, #32
 800468a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 800468c:	2300      	movs	r3, #0
 800468e:	e000      	b.n	8004692 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8004690:	2302      	movs	r3, #2
  }
}
 8004692:	4618      	mov	r0, r3
 8004694:	3720      	adds	r7, #32
 8004696:	46bd      	mov	sp, r7
 8004698:	bd80      	pop	{r7, pc}
	...

0800469c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b088      	sub	sp, #32
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	689a      	ldr	r2, [r3, #8]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	691b      	ldr	r3, [r3, #16]
 80046b0:	431a      	orrs	r2, r3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	695b      	ldr	r3, [r3, #20]
 80046b6:	431a      	orrs	r2, r3
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	69db      	ldr	r3, [r3, #28]
 80046bc:	4313      	orrs	r3, r2
 80046be:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	4ba6      	ldr	r3, [pc, #664]	; (8004960 <UART_SetConfig+0x2c4>)
 80046c8:	4013      	ands	r3, r2
 80046ca:	687a      	ldr	r2, [r7, #4]
 80046cc:	6812      	ldr	r2, [r2, #0]
 80046ce:	6979      	ldr	r1, [r7, #20]
 80046d0:	430b      	orrs	r3, r1
 80046d2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	685b      	ldr	r3, [r3, #4]
 80046da:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	68da      	ldr	r2, [r3, #12]
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	430a      	orrs	r2, r1
 80046e8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6a1b      	ldr	r3, [r3, #32]
 80046f4:	697a      	ldr	r2, [r7, #20]
 80046f6:	4313      	orrs	r3, r2
 80046f8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	697a      	ldr	r2, [r7, #20]
 800470a:	430a      	orrs	r2, r1
 800470c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	4a94      	ldr	r2, [pc, #592]	; (8004964 <UART_SetConfig+0x2c8>)
 8004714:	4293      	cmp	r3, r2
 8004716:	d120      	bne.n	800475a <UART_SetConfig+0xbe>
 8004718:	4b93      	ldr	r3, [pc, #588]	; (8004968 <UART_SetConfig+0x2cc>)
 800471a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471e:	f003 0303 	and.w	r3, r3, #3
 8004722:	2b03      	cmp	r3, #3
 8004724:	d816      	bhi.n	8004754 <UART_SetConfig+0xb8>
 8004726:	a201      	add	r2, pc, #4	; (adr r2, 800472c <UART_SetConfig+0x90>)
 8004728:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800472c:	0800473d 	.word	0x0800473d
 8004730:	08004749 	.word	0x08004749
 8004734:	08004743 	.word	0x08004743
 8004738:	0800474f 	.word	0x0800474f
 800473c:	2301      	movs	r3, #1
 800473e:	77fb      	strb	r3, [r7, #31]
 8004740:	e150      	b.n	80049e4 <UART_SetConfig+0x348>
 8004742:	2302      	movs	r3, #2
 8004744:	77fb      	strb	r3, [r7, #31]
 8004746:	e14d      	b.n	80049e4 <UART_SetConfig+0x348>
 8004748:	2304      	movs	r3, #4
 800474a:	77fb      	strb	r3, [r7, #31]
 800474c:	e14a      	b.n	80049e4 <UART_SetConfig+0x348>
 800474e:	2308      	movs	r3, #8
 8004750:	77fb      	strb	r3, [r7, #31]
 8004752:	e147      	b.n	80049e4 <UART_SetConfig+0x348>
 8004754:	2310      	movs	r3, #16
 8004756:	77fb      	strb	r3, [r7, #31]
 8004758:	e144      	b.n	80049e4 <UART_SetConfig+0x348>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	4a83      	ldr	r2, [pc, #524]	; (800496c <UART_SetConfig+0x2d0>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d132      	bne.n	80047ca <UART_SetConfig+0x12e>
 8004764:	4b80      	ldr	r3, [pc, #512]	; (8004968 <UART_SetConfig+0x2cc>)
 8004766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800476a:	f003 030c 	and.w	r3, r3, #12
 800476e:	2b0c      	cmp	r3, #12
 8004770:	d828      	bhi.n	80047c4 <UART_SetConfig+0x128>
 8004772:	a201      	add	r2, pc, #4	; (adr r2, 8004778 <UART_SetConfig+0xdc>)
 8004774:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004778:	080047ad 	.word	0x080047ad
 800477c:	080047c5 	.word	0x080047c5
 8004780:	080047c5 	.word	0x080047c5
 8004784:	080047c5 	.word	0x080047c5
 8004788:	080047b9 	.word	0x080047b9
 800478c:	080047c5 	.word	0x080047c5
 8004790:	080047c5 	.word	0x080047c5
 8004794:	080047c5 	.word	0x080047c5
 8004798:	080047b3 	.word	0x080047b3
 800479c:	080047c5 	.word	0x080047c5
 80047a0:	080047c5 	.word	0x080047c5
 80047a4:	080047c5 	.word	0x080047c5
 80047a8:	080047bf 	.word	0x080047bf
 80047ac:	2300      	movs	r3, #0
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e118      	b.n	80049e4 <UART_SetConfig+0x348>
 80047b2:	2302      	movs	r3, #2
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e115      	b.n	80049e4 <UART_SetConfig+0x348>
 80047b8:	2304      	movs	r3, #4
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e112      	b.n	80049e4 <UART_SetConfig+0x348>
 80047be:	2308      	movs	r3, #8
 80047c0:	77fb      	strb	r3, [r7, #31]
 80047c2:	e10f      	b.n	80049e4 <UART_SetConfig+0x348>
 80047c4:	2310      	movs	r3, #16
 80047c6:	77fb      	strb	r3, [r7, #31]
 80047c8:	e10c      	b.n	80049e4 <UART_SetConfig+0x348>
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a68      	ldr	r2, [pc, #416]	; (8004970 <UART_SetConfig+0x2d4>)
 80047d0:	4293      	cmp	r3, r2
 80047d2:	d120      	bne.n	8004816 <UART_SetConfig+0x17a>
 80047d4:	4b64      	ldr	r3, [pc, #400]	; (8004968 <UART_SetConfig+0x2cc>)
 80047d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047da:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80047de:	2b30      	cmp	r3, #48	; 0x30
 80047e0:	d013      	beq.n	800480a <UART_SetConfig+0x16e>
 80047e2:	2b30      	cmp	r3, #48	; 0x30
 80047e4:	d814      	bhi.n	8004810 <UART_SetConfig+0x174>
 80047e6:	2b20      	cmp	r3, #32
 80047e8:	d009      	beq.n	80047fe <UART_SetConfig+0x162>
 80047ea:	2b20      	cmp	r3, #32
 80047ec:	d810      	bhi.n	8004810 <UART_SetConfig+0x174>
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <UART_SetConfig+0x15c>
 80047f2:	2b10      	cmp	r3, #16
 80047f4:	d006      	beq.n	8004804 <UART_SetConfig+0x168>
 80047f6:	e00b      	b.n	8004810 <UART_SetConfig+0x174>
 80047f8:	2300      	movs	r3, #0
 80047fa:	77fb      	strb	r3, [r7, #31]
 80047fc:	e0f2      	b.n	80049e4 <UART_SetConfig+0x348>
 80047fe:	2302      	movs	r3, #2
 8004800:	77fb      	strb	r3, [r7, #31]
 8004802:	e0ef      	b.n	80049e4 <UART_SetConfig+0x348>
 8004804:	2304      	movs	r3, #4
 8004806:	77fb      	strb	r3, [r7, #31]
 8004808:	e0ec      	b.n	80049e4 <UART_SetConfig+0x348>
 800480a:	2308      	movs	r3, #8
 800480c:	77fb      	strb	r3, [r7, #31]
 800480e:	e0e9      	b.n	80049e4 <UART_SetConfig+0x348>
 8004810:	2310      	movs	r3, #16
 8004812:	77fb      	strb	r3, [r7, #31]
 8004814:	e0e6      	b.n	80049e4 <UART_SetConfig+0x348>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	4a56      	ldr	r2, [pc, #344]	; (8004974 <UART_SetConfig+0x2d8>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d120      	bne.n	8004862 <UART_SetConfig+0x1c6>
 8004820:	4b51      	ldr	r3, [pc, #324]	; (8004968 <UART_SetConfig+0x2cc>)
 8004822:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004826:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800482a:	2bc0      	cmp	r3, #192	; 0xc0
 800482c:	d013      	beq.n	8004856 <UART_SetConfig+0x1ba>
 800482e:	2bc0      	cmp	r3, #192	; 0xc0
 8004830:	d814      	bhi.n	800485c <UART_SetConfig+0x1c0>
 8004832:	2b80      	cmp	r3, #128	; 0x80
 8004834:	d009      	beq.n	800484a <UART_SetConfig+0x1ae>
 8004836:	2b80      	cmp	r3, #128	; 0x80
 8004838:	d810      	bhi.n	800485c <UART_SetConfig+0x1c0>
 800483a:	2b00      	cmp	r3, #0
 800483c:	d002      	beq.n	8004844 <UART_SetConfig+0x1a8>
 800483e:	2b40      	cmp	r3, #64	; 0x40
 8004840:	d006      	beq.n	8004850 <UART_SetConfig+0x1b4>
 8004842:	e00b      	b.n	800485c <UART_SetConfig+0x1c0>
 8004844:	2300      	movs	r3, #0
 8004846:	77fb      	strb	r3, [r7, #31]
 8004848:	e0cc      	b.n	80049e4 <UART_SetConfig+0x348>
 800484a:	2302      	movs	r3, #2
 800484c:	77fb      	strb	r3, [r7, #31]
 800484e:	e0c9      	b.n	80049e4 <UART_SetConfig+0x348>
 8004850:	2304      	movs	r3, #4
 8004852:	77fb      	strb	r3, [r7, #31]
 8004854:	e0c6      	b.n	80049e4 <UART_SetConfig+0x348>
 8004856:	2308      	movs	r3, #8
 8004858:	77fb      	strb	r3, [r7, #31]
 800485a:	e0c3      	b.n	80049e4 <UART_SetConfig+0x348>
 800485c:	2310      	movs	r3, #16
 800485e:	77fb      	strb	r3, [r7, #31]
 8004860:	e0c0      	b.n	80049e4 <UART_SetConfig+0x348>
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	4a44      	ldr	r2, [pc, #272]	; (8004978 <UART_SetConfig+0x2dc>)
 8004868:	4293      	cmp	r3, r2
 800486a:	d125      	bne.n	80048b8 <UART_SetConfig+0x21c>
 800486c:	4b3e      	ldr	r3, [pc, #248]	; (8004968 <UART_SetConfig+0x2cc>)
 800486e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004872:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004876:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800487a:	d017      	beq.n	80048ac <UART_SetConfig+0x210>
 800487c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004880:	d817      	bhi.n	80048b2 <UART_SetConfig+0x216>
 8004882:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004886:	d00b      	beq.n	80048a0 <UART_SetConfig+0x204>
 8004888:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800488c:	d811      	bhi.n	80048b2 <UART_SetConfig+0x216>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d003      	beq.n	800489a <UART_SetConfig+0x1fe>
 8004892:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004896:	d006      	beq.n	80048a6 <UART_SetConfig+0x20a>
 8004898:	e00b      	b.n	80048b2 <UART_SetConfig+0x216>
 800489a:	2300      	movs	r3, #0
 800489c:	77fb      	strb	r3, [r7, #31]
 800489e:	e0a1      	b.n	80049e4 <UART_SetConfig+0x348>
 80048a0:	2302      	movs	r3, #2
 80048a2:	77fb      	strb	r3, [r7, #31]
 80048a4:	e09e      	b.n	80049e4 <UART_SetConfig+0x348>
 80048a6:	2304      	movs	r3, #4
 80048a8:	77fb      	strb	r3, [r7, #31]
 80048aa:	e09b      	b.n	80049e4 <UART_SetConfig+0x348>
 80048ac:	2308      	movs	r3, #8
 80048ae:	77fb      	strb	r3, [r7, #31]
 80048b0:	e098      	b.n	80049e4 <UART_SetConfig+0x348>
 80048b2:	2310      	movs	r3, #16
 80048b4:	77fb      	strb	r3, [r7, #31]
 80048b6:	e095      	b.n	80049e4 <UART_SetConfig+0x348>
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	4a2f      	ldr	r2, [pc, #188]	; (800497c <UART_SetConfig+0x2e0>)
 80048be:	4293      	cmp	r3, r2
 80048c0:	d125      	bne.n	800490e <UART_SetConfig+0x272>
 80048c2:	4b29      	ldr	r3, [pc, #164]	; (8004968 <UART_SetConfig+0x2cc>)
 80048c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80048c8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80048cc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d0:	d017      	beq.n	8004902 <UART_SetConfig+0x266>
 80048d2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048d6:	d817      	bhi.n	8004908 <UART_SetConfig+0x26c>
 80048d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048dc:	d00b      	beq.n	80048f6 <UART_SetConfig+0x25a>
 80048de:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e2:	d811      	bhi.n	8004908 <UART_SetConfig+0x26c>
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d003      	beq.n	80048f0 <UART_SetConfig+0x254>
 80048e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80048ec:	d006      	beq.n	80048fc <UART_SetConfig+0x260>
 80048ee:	e00b      	b.n	8004908 <UART_SetConfig+0x26c>
 80048f0:	2301      	movs	r3, #1
 80048f2:	77fb      	strb	r3, [r7, #31]
 80048f4:	e076      	b.n	80049e4 <UART_SetConfig+0x348>
 80048f6:	2302      	movs	r3, #2
 80048f8:	77fb      	strb	r3, [r7, #31]
 80048fa:	e073      	b.n	80049e4 <UART_SetConfig+0x348>
 80048fc:	2304      	movs	r3, #4
 80048fe:	77fb      	strb	r3, [r7, #31]
 8004900:	e070      	b.n	80049e4 <UART_SetConfig+0x348>
 8004902:	2308      	movs	r3, #8
 8004904:	77fb      	strb	r3, [r7, #31]
 8004906:	e06d      	b.n	80049e4 <UART_SetConfig+0x348>
 8004908:	2310      	movs	r3, #16
 800490a:	77fb      	strb	r3, [r7, #31]
 800490c:	e06a      	b.n	80049e4 <UART_SetConfig+0x348>
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a1b      	ldr	r2, [pc, #108]	; (8004980 <UART_SetConfig+0x2e4>)
 8004914:	4293      	cmp	r3, r2
 8004916:	d138      	bne.n	800498a <UART_SetConfig+0x2ee>
 8004918:	4b13      	ldr	r3, [pc, #76]	; (8004968 <UART_SetConfig+0x2cc>)
 800491a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800491e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004922:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004926:	d017      	beq.n	8004958 <UART_SetConfig+0x2bc>
 8004928:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800492c:	d82a      	bhi.n	8004984 <UART_SetConfig+0x2e8>
 800492e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004932:	d00b      	beq.n	800494c <UART_SetConfig+0x2b0>
 8004934:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004938:	d824      	bhi.n	8004984 <UART_SetConfig+0x2e8>
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <UART_SetConfig+0x2aa>
 800493e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004942:	d006      	beq.n	8004952 <UART_SetConfig+0x2b6>
 8004944:	e01e      	b.n	8004984 <UART_SetConfig+0x2e8>
 8004946:	2300      	movs	r3, #0
 8004948:	77fb      	strb	r3, [r7, #31]
 800494a:	e04b      	b.n	80049e4 <UART_SetConfig+0x348>
 800494c:	2302      	movs	r3, #2
 800494e:	77fb      	strb	r3, [r7, #31]
 8004950:	e048      	b.n	80049e4 <UART_SetConfig+0x348>
 8004952:	2304      	movs	r3, #4
 8004954:	77fb      	strb	r3, [r7, #31]
 8004956:	e045      	b.n	80049e4 <UART_SetConfig+0x348>
 8004958:	2308      	movs	r3, #8
 800495a:	77fb      	strb	r3, [r7, #31]
 800495c:	e042      	b.n	80049e4 <UART_SetConfig+0x348>
 800495e:	bf00      	nop
 8004960:	efff69f3 	.word	0xefff69f3
 8004964:	40011000 	.word	0x40011000
 8004968:	40023800 	.word	0x40023800
 800496c:	40004400 	.word	0x40004400
 8004970:	40004800 	.word	0x40004800
 8004974:	40004c00 	.word	0x40004c00
 8004978:	40005000 	.word	0x40005000
 800497c:	40011400 	.word	0x40011400
 8004980:	40007800 	.word	0x40007800
 8004984:	2310      	movs	r3, #16
 8004986:	77fb      	strb	r3, [r7, #31]
 8004988:	e02c      	b.n	80049e4 <UART_SetConfig+0x348>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	4a72      	ldr	r2, [pc, #456]	; (8004b58 <UART_SetConfig+0x4bc>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d125      	bne.n	80049e0 <UART_SetConfig+0x344>
 8004994:	4b71      	ldr	r3, [pc, #452]	; (8004b5c <UART_SetConfig+0x4c0>)
 8004996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800499a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800499e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049a2:	d017      	beq.n	80049d4 <UART_SetConfig+0x338>
 80049a4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80049a8:	d817      	bhi.n	80049da <UART_SetConfig+0x33e>
 80049aa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ae:	d00b      	beq.n	80049c8 <UART_SetConfig+0x32c>
 80049b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b4:	d811      	bhi.n	80049da <UART_SetConfig+0x33e>
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d003      	beq.n	80049c2 <UART_SetConfig+0x326>
 80049ba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049be:	d006      	beq.n	80049ce <UART_SetConfig+0x332>
 80049c0:	e00b      	b.n	80049da <UART_SetConfig+0x33e>
 80049c2:	2300      	movs	r3, #0
 80049c4:	77fb      	strb	r3, [r7, #31]
 80049c6:	e00d      	b.n	80049e4 <UART_SetConfig+0x348>
 80049c8:	2302      	movs	r3, #2
 80049ca:	77fb      	strb	r3, [r7, #31]
 80049cc:	e00a      	b.n	80049e4 <UART_SetConfig+0x348>
 80049ce:	2304      	movs	r3, #4
 80049d0:	77fb      	strb	r3, [r7, #31]
 80049d2:	e007      	b.n	80049e4 <UART_SetConfig+0x348>
 80049d4:	2308      	movs	r3, #8
 80049d6:	77fb      	strb	r3, [r7, #31]
 80049d8:	e004      	b.n	80049e4 <UART_SetConfig+0x348>
 80049da:	2310      	movs	r3, #16
 80049dc:	77fb      	strb	r3, [r7, #31]
 80049de:	e001      	b.n	80049e4 <UART_SetConfig+0x348>
 80049e0:	2310      	movs	r3, #16
 80049e2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	69db      	ldr	r3, [r3, #28]
 80049e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049ec:	d15b      	bne.n	8004aa6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80049ee:	7ffb      	ldrb	r3, [r7, #31]
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	d828      	bhi.n	8004a46 <UART_SetConfig+0x3aa>
 80049f4:	a201      	add	r2, pc, #4	; (adr r2, 80049fc <UART_SetConfig+0x360>)
 80049f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049fa:	bf00      	nop
 80049fc:	08004a21 	.word	0x08004a21
 8004a00:	08004a29 	.word	0x08004a29
 8004a04:	08004a31 	.word	0x08004a31
 8004a08:	08004a47 	.word	0x08004a47
 8004a0c:	08004a37 	.word	0x08004a37
 8004a10:	08004a47 	.word	0x08004a47
 8004a14:	08004a47 	.word	0x08004a47
 8004a18:	08004a47 	.word	0x08004a47
 8004a1c:	08004a3f 	.word	0x08004a3f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a20:	f7fe fe08 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004a24:	61b8      	str	r0, [r7, #24]
        break;
 8004a26:	e013      	b.n	8004a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a28:	f7fe fe18 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8004a2c:	61b8      	str	r0, [r7, #24]
        break;
 8004a2e:	e00f      	b.n	8004a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a30:	4b4b      	ldr	r3, [pc, #300]	; (8004b60 <UART_SetConfig+0x4c4>)
 8004a32:	61bb      	str	r3, [r7, #24]
        break;
 8004a34:	e00c      	b.n	8004a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a36:	f7fe fceb 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004a3a:	61b8      	str	r0, [r7, #24]
        break;
 8004a3c:	e008      	b.n	8004a50 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a3e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004a42:	61bb      	str	r3, [r7, #24]
        break;
 8004a44:	e004      	b.n	8004a50 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	77bb      	strb	r3, [r7, #30]
        break;
 8004a4e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d074      	beq.n	8004b40 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	005a      	lsls	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	085b      	lsrs	r3, r3, #1
 8004a60:	441a      	add	r2, r3
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a6a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004a6c:	693b      	ldr	r3, [r7, #16]
 8004a6e:	2b0f      	cmp	r3, #15
 8004a70:	d916      	bls.n	8004aa0 <UART_SetConfig+0x404>
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a78:	d212      	bcs.n	8004aa0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	b29b      	uxth	r3, r3
 8004a7e:	f023 030f 	bic.w	r3, r3, #15
 8004a82:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	085b      	lsrs	r3, r3, #1
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	f003 0307 	and.w	r3, r3, #7
 8004a8e:	b29a      	uxth	r2, r3
 8004a90:	89fb      	ldrh	r3, [r7, #14]
 8004a92:	4313      	orrs	r3, r2
 8004a94:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	89fa      	ldrh	r2, [r7, #14]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	e04f      	b.n	8004b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	77bb      	strb	r3, [r7, #30]
 8004aa4:	e04c      	b.n	8004b40 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004aa6:	7ffb      	ldrb	r3, [r7, #31]
 8004aa8:	2b08      	cmp	r3, #8
 8004aaa:	d828      	bhi.n	8004afe <UART_SetConfig+0x462>
 8004aac:	a201      	add	r2, pc, #4	; (adr r2, 8004ab4 <UART_SetConfig+0x418>)
 8004aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ab2:	bf00      	nop
 8004ab4:	08004ad9 	.word	0x08004ad9
 8004ab8:	08004ae1 	.word	0x08004ae1
 8004abc:	08004ae9 	.word	0x08004ae9
 8004ac0:	08004aff 	.word	0x08004aff
 8004ac4:	08004aef 	.word	0x08004aef
 8004ac8:	08004aff 	.word	0x08004aff
 8004acc:	08004aff 	.word	0x08004aff
 8004ad0:	08004aff 	.word	0x08004aff
 8004ad4:	08004af7 	.word	0x08004af7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ad8:	f7fe fdac 	bl	8003634 <HAL_RCC_GetPCLK1Freq>
 8004adc:	61b8      	str	r0, [r7, #24]
        break;
 8004ade:	e013      	b.n	8004b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004ae0:	f7fe fdbc 	bl	800365c <HAL_RCC_GetPCLK2Freq>
 8004ae4:	61b8      	str	r0, [r7, #24]
        break;
 8004ae6:	e00f      	b.n	8004b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ae8:	4b1d      	ldr	r3, [pc, #116]	; (8004b60 <UART_SetConfig+0x4c4>)
 8004aea:	61bb      	str	r3, [r7, #24]
        break;
 8004aec:	e00c      	b.n	8004b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004aee:	f7fe fc8f 	bl	8003410 <HAL_RCC_GetSysClockFreq>
 8004af2:	61b8      	str	r0, [r7, #24]
        break;
 8004af4:	e008      	b.n	8004b08 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004af6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004afa:	61bb      	str	r3, [r7, #24]
        break;
 8004afc:	e004      	b.n	8004b08 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004b02:	2301      	movs	r3, #1
 8004b04:	77bb      	strb	r3, [r7, #30]
        break;
 8004b06:	bf00      	nop
    }

    if (pclk != 0U)
 8004b08:	69bb      	ldr	r3, [r7, #24]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d018      	beq.n	8004b40 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	685b      	ldr	r3, [r3, #4]
 8004b12:	085a      	lsrs	r2, r3, #1
 8004b14:	69bb      	ldr	r3, [r7, #24]
 8004b16:	441a      	add	r2, r3
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	685b      	ldr	r3, [r3, #4]
 8004b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b20:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	2b0f      	cmp	r3, #15
 8004b26:	d909      	bls.n	8004b3c <UART_SetConfig+0x4a0>
 8004b28:	693b      	ldr	r3, [r7, #16]
 8004b2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b2e:	d205      	bcs.n	8004b3c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	b29a      	uxth	r2, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	60da      	str	r2, [r3, #12]
 8004b3a:	e001      	b.n	8004b40 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004b4c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3720      	adds	r7, #32
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}
 8004b56:	bf00      	nop
 8004b58:	40007c00 	.word	0x40007c00
 8004b5c:	40023800 	.word	0x40023800
 8004b60:	00f42400 	.word	0x00f42400

08004b64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b70:	f003 0301 	and.w	r3, r3, #1
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d00a      	beq.n	8004b8e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	430a      	orrs	r2, r1
 8004b8c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b92:	f003 0302 	and.w	r3, r3, #2
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d00a      	beq.n	8004bb0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	685b      	ldr	r3, [r3, #4]
 8004ba0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	430a      	orrs	r2, r1
 8004bae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb4:	f003 0304 	and.w	r3, r3, #4
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d00a      	beq.n	8004bd2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	430a      	orrs	r2, r1
 8004bd0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bd6:	f003 0308 	and.w	r3, r3, #8
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d00a      	beq.n	8004bf4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685b      	ldr	r3, [r3, #4]
 8004be4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf8:	f003 0310 	and.w	r3, r3, #16
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	d00a      	beq.n	8004c16 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	689b      	ldr	r3, [r3, #8]
 8004c06:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	f003 0320 	and.w	r3, r3, #32
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d00a      	beq.n	8004c38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	689b      	ldr	r3, [r3, #8]
 8004c28:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	430a      	orrs	r2, r1
 8004c36:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d01a      	beq.n	8004c7a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c5e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004c62:	d10a      	bne.n	8004c7a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	430a      	orrs	r2, r1
 8004c78:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d00a      	beq.n	8004c9c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	685b      	ldr	r3, [r3, #4]
 8004c8c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	430a      	orrs	r2, r1
 8004c9a:	605a      	str	r2, [r3, #4]
  }
}
 8004c9c:	bf00      	nop
 8004c9e:	370c      	adds	r7, #12
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af02      	add	r7, sp, #8
 8004cae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004cb8:	f7fc faf0 	bl	800129c <HAL_GetTick>
 8004cbc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f003 0308 	and.w	r3, r3, #8
 8004cc8:	2b08      	cmp	r3, #8
 8004cca:	d10e      	bne.n	8004cea <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004ccc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cd0:	9300      	str	r3, [sp, #0]
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004cda:	6878      	ldr	r0, [r7, #4]
 8004cdc:	f000 f831 	bl	8004d42 <UART_WaitOnFlagUntilTimeout>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e027      	b.n	8004d3a <UART_CheckIdleState+0x92>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f003 0304 	and.w	r3, r3, #4
 8004cf4:	2b04      	cmp	r3, #4
 8004cf6:	d10e      	bne.n	8004d16 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004cf8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004cfc:	9300      	str	r3, [sp, #0]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2200      	movs	r2, #0
 8004d02:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8004d06:	6878      	ldr	r0, [r7, #4]
 8004d08:	f000 f81b 	bl	8004d42 <UART_WaitOnFlagUntilTimeout>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e011      	b.n	8004d3a <UART_CheckIdleState+0x92>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2220      	movs	r2, #32
 8004d20:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	2200      	movs	r2, #0
 8004d28:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	2200      	movs	r2, #0
 8004d34:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004d38:	2300      	movs	r3, #0
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3710      	adds	r7, #16
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b09c      	sub	sp, #112	; 0x70
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	60f8      	str	r0, [r7, #12]
 8004d4a:	60b9      	str	r1, [r7, #8]
 8004d4c:	603b      	str	r3, [r7, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004d52:	e0a7      	b.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004d54:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d5a:	f000 80a3 	beq.w	8004ea4 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d5e:	f7fc fa9d 	bl	800129c <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d302      	bcc.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x32>
 8004d6e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d13f      	bne.n	8004df4 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004d7c:	e853 3f00 	ldrex	r3, [r3]
 8004d80:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004d82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004d84:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004d88:	667b      	str	r3, [r7, #100]	; 0x64
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	461a      	mov	r2, r3
 8004d90:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004d92:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004d94:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d96:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004d98:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8004d9a:	e841 2300 	strex	r3, r2, [r1]
 8004d9e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004da0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d1e6      	bne.n	8004d74 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	3308      	adds	r3, #8
 8004dac:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004db0:	e853 3f00 	ldrex	r3, [r3]
 8004db4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004db8:	f023 0301 	bic.w	r3, r3, #1
 8004dbc:	663b      	str	r3, [r7, #96]	; 0x60
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	3308      	adds	r3, #8
 8004dc4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004dc6:	64ba      	str	r2, [r7, #72]	; 0x48
 8004dc8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004dcc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004dce:	e841 2300 	strex	r3, r2, [r1]
 8004dd2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004dd4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d1e5      	bne.n	8004da6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	2220      	movs	r2, #32
 8004dde:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	2220      	movs	r2, #32
 8004de4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e068      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f003 0304 	and.w	r3, r3, #4
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d050      	beq.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	69db      	ldr	r3, [r3, #28]
 8004e08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e0c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e10:	d148      	bne.n	8004ea4 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004e1a:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e24:	e853 3f00 	ldrex	r3, [r3]
 8004e28:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004e30:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	461a      	mov	r2, r3
 8004e38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
 8004e3c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e3e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004e40:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e42:	e841 2300 	strex	r3, r2, [r1]
 8004e46:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d1e6      	bne.n	8004e1c <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e4e:	68fb      	ldr	r3, [r7, #12]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	3308      	adds	r3, #8
 8004e54:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	e853 3f00 	ldrex	r3, [r3]
 8004e5c:	613b      	str	r3, [r7, #16]
   return(result);
 8004e5e:	693b      	ldr	r3, [r7, #16]
 8004e60:	f023 0301 	bic.w	r3, r3, #1
 8004e64:	66bb      	str	r3, [r7, #104]	; 0x68
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	3308      	adds	r3, #8
 8004e6c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004e6e:	623a      	str	r2, [r7, #32]
 8004e70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e72:	69f9      	ldr	r1, [r7, #28]
 8004e74:	6a3a      	ldr	r2, [r7, #32]
 8004e76:	e841 2300 	strex	r3, r2, [r1]
 8004e7a:	61bb      	str	r3, [r7, #24]
   return(result);
 8004e7c:	69bb      	ldr	r3, [r7, #24]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d1e5      	bne.n	8004e4e <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	2220      	movs	r2, #32
 8004e86:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8004e88:	68fb      	ldr	r3, [r7, #12]
 8004e8a:	2220      	movs	r2, #32
 8004e8c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	2220      	movs	r2, #32
 8004e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004ea0:	2303      	movs	r3, #3
 8004ea2:	e010      	b.n	8004ec6 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	69da      	ldr	r2, [r3, #28]
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	4013      	ands	r3, r2
 8004eae:	68ba      	ldr	r2, [r7, #8]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	bf0c      	ite	eq
 8004eb4:	2301      	moveq	r3, #1
 8004eb6:	2300      	movne	r3, #0
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	79fb      	ldrb	r3, [r7, #7]
 8004ebe:	429a      	cmp	r2, r3
 8004ec0:	f43f af48 	beq.w	8004d54 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004ec4:	2300      	movs	r3, #0
}
 8004ec6:	4618      	mov	r0, r3
 8004ec8:	3770      	adds	r7, #112	; 0x70
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	bd80      	pop	{r7, pc}
	...

08004ed0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004ed0:	b580      	push	{r7, lr}
 8004ed2:	b084      	sub	sp, #16
 8004ed4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004ed6:	4b8c      	ldr	r3, [pc, #560]	; (8005108 <MX_LWIP_Init+0x238>)
 8004ed8:	22c0      	movs	r2, #192	; 0xc0
 8004eda:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004edc:	4b8a      	ldr	r3, [pc, #552]	; (8005108 <MX_LWIP_Init+0x238>)
 8004ede:	22a8      	movs	r2, #168	; 0xa8
 8004ee0:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 1;
 8004ee2:	4b89      	ldr	r3, [pc, #548]	; (8005108 <MX_LWIP_Init+0x238>)
 8004ee4:	2201      	movs	r2, #1
 8004ee6:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 122;
 8004ee8:	4b87      	ldr	r3, [pc, #540]	; (8005108 <MX_LWIP_Init+0x238>)
 8004eea:	227a      	movs	r2, #122	; 0x7a
 8004eec:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004eee:	4b87      	ldr	r3, [pc, #540]	; (800510c <MX_LWIP_Init+0x23c>)
 8004ef0:	22ff      	movs	r2, #255	; 0xff
 8004ef2:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004ef4:	4b85      	ldr	r3, [pc, #532]	; (800510c <MX_LWIP_Init+0x23c>)
 8004ef6:	22ff      	movs	r2, #255	; 0xff
 8004ef8:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004efa:	4b84      	ldr	r3, [pc, #528]	; (800510c <MX_LWIP_Init+0x23c>)
 8004efc:	22ff      	movs	r2, #255	; 0xff
 8004efe:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004f00:	4b82      	ldr	r3, [pc, #520]	; (800510c <MX_LWIP_Init+0x23c>)
 8004f02:	2200      	movs	r2, #0
 8004f04:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004f06:	4b82      	ldr	r3, [pc, #520]	; (8005110 <MX_LWIP_Init+0x240>)
 8004f08:	22c0      	movs	r2, #192	; 0xc0
 8004f0a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004f0c:	4b80      	ldr	r3, [pc, #512]	; (8005110 <MX_LWIP_Init+0x240>)
 8004f0e:	22a8      	movs	r2, #168	; 0xa8
 8004f10:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 1;
 8004f12:	4b7f      	ldr	r3, [pc, #508]	; (8005110 <MX_LWIP_Init+0x240>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004f18:	4b7d      	ldr	r3, [pc, #500]	; (8005110 <MX_LWIP_Init+0x240>)
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004f1e:	2100      	movs	r1, #0
 8004f20:	2000      	movs	r0, #0
 8004f22:	f003 fe0b 	bl	8008b3c <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004f26:	4b78      	ldr	r3, [pc, #480]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f28:	781b      	ldrb	r3, [r3, #0]
 8004f2a:	061a      	lsls	r2, r3, #24
 8004f2c:	4b76      	ldr	r3, [pc, #472]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f2e:	785b      	ldrb	r3, [r3, #1]
 8004f30:	041b      	lsls	r3, r3, #16
 8004f32:	431a      	orrs	r2, r3
 8004f34:	4b74      	ldr	r3, [pc, #464]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f36:	789b      	ldrb	r3, [r3, #2]
 8004f38:	021b      	lsls	r3, r3, #8
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	4a72      	ldr	r2, [pc, #456]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f3e:	78d2      	ldrb	r2, [r2, #3]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	061a      	lsls	r2, r3, #24
 8004f44:	4b70      	ldr	r3, [pc, #448]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	0619      	lsls	r1, r3, #24
 8004f4a:	4b6f      	ldr	r3, [pc, #444]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f4c:	785b      	ldrb	r3, [r3, #1]
 8004f4e:	041b      	lsls	r3, r3, #16
 8004f50:	4319      	orrs	r1, r3
 8004f52:	4b6d      	ldr	r3, [pc, #436]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f54:	789b      	ldrb	r3, [r3, #2]
 8004f56:	021b      	lsls	r3, r3, #8
 8004f58:	430b      	orrs	r3, r1
 8004f5a:	496b      	ldr	r1, [pc, #428]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f5c:	78c9      	ldrb	r1, [r1, #3]
 8004f5e:	430b      	orrs	r3, r1
 8004f60:	021b      	lsls	r3, r3, #8
 8004f62:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004f66:	431a      	orrs	r2, r3
 8004f68:	4b67      	ldr	r3, [pc, #412]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f6a:	781b      	ldrb	r3, [r3, #0]
 8004f6c:	0619      	lsls	r1, r3, #24
 8004f6e:	4b66      	ldr	r3, [pc, #408]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f70:	785b      	ldrb	r3, [r3, #1]
 8004f72:	041b      	lsls	r3, r3, #16
 8004f74:	4319      	orrs	r1, r3
 8004f76:	4b64      	ldr	r3, [pc, #400]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f78:	789b      	ldrb	r3, [r3, #2]
 8004f7a:	021b      	lsls	r3, r3, #8
 8004f7c:	430b      	orrs	r3, r1
 8004f7e:	4962      	ldr	r1, [pc, #392]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f80:	78c9      	ldrb	r1, [r1, #3]
 8004f82:	430b      	orrs	r3, r1
 8004f84:	0a1b      	lsrs	r3, r3, #8
 8004f86:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004f8a:	431a      	orrs	r2, r3
 8004f8c:	4b5e      	ldr	r3, [pc, #376]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	0619      	lsls	r1, r3, #24
 8004f92:	4b5d      	ldr	r3, [pc, #372]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f94:	785b      	ldrb	r3, [r3, #1]
 8004f96:	041b      	lsls	r3, r3, #16
 8004f98:	4319      	orrs	r1, r3
 8004f9a:	4b5b      	ldr	r3, [pc, #364]	; (8005108 <MX_LWIP_Init+0x238>)
 8004f9c:	789b      	ldrb	r3, [r3, #2]
 8004f9e:	021b      	lsls	r3, r3, #8
 8004fa0:	430b      	orrs	r3, r1
 8004fa2:	4959      	ldr	r1, [pc, #356]	; (8005108 <MX_LWIP_Init+0x238>)
 8004fa4:	78c9      	ldrb	r1, [r1, #3]
 8004fa6:	430b      	orrs	r3, r1
 8004fa8:	0e1b      	lsrs	r3, r3, #24
 8004faa:	4313      	orrs	r3, r2
 8004fac:	4a59      	ldr	r2, [pc, #356]	; (8005114 <MX_LWIP_Init+0x244>)
 8004fae:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004fb0:	4b56      	ldr	r3, [pc, #344]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	061a      	lsls	r2, r3, #24
 8004fb6:	4b55      	ldr	r3, [pc, #340]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fb8:	785b      	ldrb	r3, [r3, #1]
 8004fba:	041b      	lsls	r3, r3, #16
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	4b53      	ldr	r3, [pc, #332]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fc0:	789b      	ldrb	r3, [r3, #2]
 8004fc2:	021b      	lsls	r3, r3, #8
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	4a51      	ldr	r2, [pc, #324]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fc8:	78d2      	ldrb	r2, [r2, #3]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	061a      	lsls	r2, r3, #24
 8004fce:	4b4f      	ldr	r3, [pc, #316]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fd0:	781b      	ldrb	r3, [r3, #0]
 8004fd2:	0619      	lsls	r1, r3, #24
 8004fd4:	4b4d      	ldr	r3, [pc, #308]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fd6:	785b      	ldrb	r3, [r3, #1]
 8004fd8:	041b      	lsls	r3, r3, #16
 8004fda:	4319      	orrs	r1, r3
 8004fdc:	4b4b      	ldr	r3, [pc, #300]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fde:	789b      	ldrb	r3, [r3, #2]
 8004fe0:	021b      	lsls	r3, r3, #8
 8004fe2:	430b      	orrs	r3, r1
 8004fe4:	4949      	ldr	r1, [pc, #292]	; (800510c <MX_LWIP_Init+0x23c>)
 8004fe6:	78c9      	ldrb	r1, [r1, #3]
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	021b      	lsls	r3, r3, #8
 8004fec:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004ff0:	431a      	orrs	r2, r3
 8004ff2:	4b46      	ldr	r3, [pc, #280]	; (800510c <MX_LWIP_Init+0x23c>)
 8004ff4:	781b      	ldrb	r3, [r3, #0]
 8004ff6:	0619      	lsls	r1, r3, #24
 8004ff8:	4b44      	ldr	r3, [pc, #272]	; (800510c <MX_LWIP_Init+0x23c>)
 8004ffa:	785b      	ldrb	r3, [r3, #1]
 8004ffc:	041b      	lsls	r3, r3, #16
 8004ffe:	4319      	orrs	r1, r3
 8005000:	4b42      	ldr	r3, [pc, #264]	; (800510c <MX_LWIP_Init+0x23c>)
 8005002:	789b      	ldrb	r3, [r3, #2]
 8005004:	021b      	lsls	r3, r3, #8
 8005006:	430b      	orrs	r3, r1
 8005008:	4940      	ldr	r1, [pc, #256]	; (800510c <MX_LWIP_Init+0x23c>)
 800500a:	78c9      	ldrb	r1, [r1, #3]
 800500c:	430b      	orrs	r3, r1
 800500e:	0a1b      	lsrs	r3, r3, #8
 8005010:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8005014:	431a      	orrs	r2, r3
 8005016:	4b3d      	ldr	r3, [pc, #244]	; (800510c <MX_LWIP_Init+0x23c>)
 8005018:	781b      	ldrb	r3, [r3, #0]
 800501a:	0619      	lsls	r1, r3, #24
 800501c:	4b3b      	ldr	r3, [pc, #236]	; (800510c <MX_LWIP_Init+0x23c>)
 800501e:	785b      	ldrb	r3, [r3, #1]
 8005020:	041b      	lsls	r3, r3, #16
 8005022:	4319      	orrs	r1, r3
 8005024:	4b39      	ldr	r3, [pc, #228]	; (800510c <MX_LWIP_Init+0x23c>)
 8005026:	789b      	ldrb	r3, [r3, #2]
 8005028:	021b      	lsls	r3, r3, #8
 800502a:	430b      	orrs	r3, r1
 800502c:	4937      	ldr	r1, [pc, #220]	; (800510c <MX_LWIP_Init+0x23c>)
 800502e:	78c9      	ldrb	r1, [r1, #3]
 8005030:	430b      	orrs	r3, r1
 8005032:	0e1b      	lsrs	r3, r3, #24
 8005034:	4313      	orrs	r3, r2
 8005036:	4a38      	ldr	r2, [pc, #224]	; (8005118 <MX_LWIP_Init+0x248>)
 8005038:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800503a:	4b35      	ldr	r3, [pc, #212]	; (8005110 <MX_LWIP_Init+0x240>)
 800503c:	781b      	ldrb	r3, [r3, #0]
 800503e:	061a      	lsls	r2, r3, #24
 8005040:	4b33      	ldr	r3, [pc, #204]	; (8005110 <MX_LWIP_Init+0x240>)
 8005042:	785b      	ldrb	r3, [r3, #1]
 8005044:	041b      	lsls	r3, r3, #16
 8005046:	431a      	orrs	r2, r3
 8005048:	4b31      	ldr	r3, [pc, #196]	; (8005110 <MX_LWIP_Init+0x240>)
 800504a:	789b      	ldrb	r3, [r3, #2]
 800504c:	021b      	lsls	r3, r3, #8
 800504e:	4313      	orrs	r3, r2
 8005050:	4a2f      	ldr	r2, [pc, #188]	; (8005110 <MX_LWIP_Init+0x240>)
 8005052:	78d2      	ldrb	r2, [r2, #3]
 8005054:	4313      	orrs	r3, r2
 8005056:	061a      	lsls	r2, r3, #24
 8005058:	4b2d      	ldr	r3, [pc, #180]	; (8005110 <MX_LWIP_Init+0x240>)
 800505a:	781b      	ldrb	r3, [r3, #0]
 800505c:	0619      	lsls	r1, r3, #24
 800505e:	4b2c      	ldr	r3, [pc, #176]	; (8005110 <MX_LWIP_Init+0x240>)
 8005060:	785b      	ldrb	r3, [r3, #1]
 8005062:	041b      	lsls	r3, r3, #16
 8005064:	4319      	orrs	r1, r3
 8005066:	4b2a      	ldr	r3, [pc, #168]	; (8005110 <MX_LWIP_Init+0x240>)
 8005068:	789b      	ldrb	r3, [r3, #2]
 800506a:	021b      	lsls	r3, r3, #8
 800506c:	430b      	orrs	r3, r1
 800506e:	4928      	ldr	r1, [pc, #160]	; (8005110 <MX_LWIP_Init+0x240>)
 8005070:	78c9      	ldrb	r1, [r1, #3]
 8005072:	430b      	orrs	r3, r1
 8005074:	021b      	lsls	r3, r3, #8
 8005076:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800507a:	431a      	orrs	r2, r3
 800507c:	4b24      	ldr	r3, [pc, #144]	; (8005110 <MX_LWIP_Init+0x240>)
 800507e:	781b      	ldrb	r3, [r3, #0]
 8005080:	0619      	lsls	r1, r3, #24
 8005082:	4b23      	ldr	r3, [pc, #140]	; (8005110 <MX_LWIP_Init+0x240>)
 8005084:	785b      	ldrb	r3, [r3, #1]
 8005086:	041b      	lsls	r3, r3, #16
 8005088:	4319      	orrs	r1, r3
 800508a:	4b21      	ldr	r3, [pc, #132]	; (8005110 <MX_LWIP_Init+0x240>)
 800508c:	789b      	ldrb	r3, [r3, #2]
 800508e:	021b      	lsls	r3, r3, #8
 8005090:	430b      	orrs	r3, r1
 8005092:	491f      	ldr	r1, [pc, #124]	; (8005110 <MX_LWIP_Init+0x240>)
 8005094:	78c9      	ldrb	r1, [r1, #3]
 8005096:	430b      	orrs	r3, r1
 8005098:	0a1b      	lsrs	r3, r3, #8
 800509a:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800509e:	431a      	orrs	r2, r3
 80050a0:	4b1b      	ldr	r3, [pc, #108]	; (8005110 <MX_LWIP_Init+0x240>)
 80050a2:	781b      	ldrb	r3, [r3, #0]
 80050a4:	0619      	lsls	r1, r3, #24
 80050a6:	4b1a      	ldr	r3, [pc, #104]	; (8005110 <MX_LWIP_Init+0x240>)
 80050a8:	785b      	ldrb	r3, [r3, #1]
 80050aa:	041b      	lsls	r3, r3, #16
 80050ac:	4319      	orrs	r1, r3
 80050ae:	4b18      	ldr	r3, [pc, #96]	; (8005110 <MX_LWIP_Init+0x240>)
 80050b0:	789b      	ldrb	r3, [r3, #2]
 80050b2:	021b      	lsls	r3, r3, #8
 80050b4:	430b      	orrs	r3, r1
 80050b6:	4916      	ldr	r1, [pc, #88]	; (8005110 <MX_LWIP_Init+0x240>)
 80050b8:	78c9      	ldrb	r1, [r1, #3]
 80050ba:	430b      	orrs	r3, r1
 80050bc:	0e1b      	lsrs	r3, r3, #24
 80050be:	4313      	orrs	r3, r2
 80050c0:	4a16      	ldr	r2, [pc, #88]	; (800511c <MX_LWIP_Init+0x24c>)
 80050c2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 80050c4:	4b16      	ldr	r3, [pc, #88]	; (8005120 <MX_LWIP_Init+0x250>)
 80050c6:	9302      	str	r3, [sp, #8]
 80050c8:	4b16      	ldr	r3, [pc, #88]	; (8005124 <MX_LWIP_Init+0x254>)
 80050ca:	9301      	str	r3, [sp, #4]
 80050cc:	2300      	movs	r3, #0
 80050ce:	9300      	str	r3, [sp, #0]
 80050d0:	4b12      	ldr	r3, [pc, #72]	; (800511c <MX_LWIP_Init+0x24c>)
 80050d2:	4a11      	ldr	r2, [pc, #68]	; (8005118 <MX_LWIP_Init+0x248>)
 80050d4:	490f      	ldr	r1, [pc, #60]	; (8005114 <MX_LWIP_Init+0x244>)
 80050d6:	4814      	ldr	r0, [pc, #80]	; (8005128 <MX_LWIP_Init+0x258>)
 80050d8:	f006 fa30 	bl	800b53c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 80050dc:	4812      	ldr	r0, [pc, #72]	; (8005128 <MX_LWIP_Init+0x258>)
 80050de:	f006 fbe7 	bl	800b8b0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 80050e2:	4b11      	ldr	r3, [pc, #68]	; (8005128 <MX_LWIP_Init+0x258>)
 80050e4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80050e8:	089b      	lsrs	r3, r3, #2
 80050ea:	f003 0301 	and.w	r3, r3, #1
 80050ee:	b2db      	uxtb	r3, r3
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d003      	beq.n	80050fc <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 80050f4:	480c      	ldr	r0, [pc, #48]	; (8005128 <MX_LWIP_Init+0x258>)
 80050f6:	f006 fbeb 	bl	800b8d0 <netif_set_up>
    netif_set_down(&gnetif);
  }

/* USER CODE BEGIN 3 */
/* USER CODE END 3 */
}
 80050fa:	e002      	b.n	8005102 <MX_LWIP_Init+0x232>
    netif_set_down(&gnetif);
 80050fc:	480a      	ldr	r0, [pc, #40]	; (8005128 <MX_LWIP_Init+0x258>)
 80050fe:	f006 fc5b 	bl	800b9b8 <netif_set_down>
}
 8005102:	bf00      	nop
 8005104:	46bd      	mov	sp, r7
 8005106:	bd80      	pop	{r7, pc}
 8005108:	200005cc 	.word	0x200005cc
 800510c:	200005d0 	.word	0x200005d0
 8005110:	200005d4 	.word	0x200005d4
 8005114:	200005c0 	.word	0x200005c0
 8005118:	200005c4 	.word	0x200005c4
 800511c:	200005c8 	.word	0x200005c8
 8005120:	08008a79 	.word	0x08008a79
 8005124:	08005611 	.word	0x08005611
 8005128:	2000058c 	.word	0x2000058c

0800512c <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800512c:	b480      	push	{r7}
 800512e:	b087      	sub	sp, #28
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800513e:	2320      	movs	r3, #32
 8005140:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8005142:	f3bf 8f4f 	dsb	sy
}
 8005146:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 8005148:	e00b      	b.n	8005162 <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800514a:	4a0d      	ldr	r2, [pc, #52]	; (8005180 <SCB_InvalidateDCache_by_Addr+0x54>)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	693a      	ldr	r2, [r7, #16]
 8005156:	4413      	add	r3, r2
 8005158:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800515a:	697a      	ldr	r2, [r7, #20]
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	1ad3      	subs	r3, r2, r3
 8005160:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 8005162:	697b      	ldr	r3, [r7, #20]
 8005164:	2b00      	cmp	r3, #0
 8005166:	dcf0      	bgt.n	800514a <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 8005168:	f3bf 8f4f 	dsb	sy
}
 800516c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800516e:	f3bf 8f6f 	isb	sy
}
 8005172:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 8005174:	bf00      	nop
 8005176:	371c      	adds	r7, #28
 8005178:	46bd      	mov	sp, r7
 800517a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517e:	4770      	bx	lr
 8005180:	e000ed00 	.word	0xe000ed00

08005184 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b082      	sub	sp, #8
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800518c:	4b04      	ldr	r3, [pc, #16]	; (80051a0 <HAL_ETH_RxCpltCallback+0x1c>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f000 fda9 	bl	8005ce8 <osSemaphoreRelease>
}
 8005196:	bf00      	nop
 8005198:	3708      	adds	r7, #8
 800519a:	46bd      	mov	sp, r7
 800519c:	bd80      	pop	{r7, pc}
 800519e:	bf00      	nop
 80051a0:	20004f64 	.word	0x20004f64

080051a4 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 80051a4:	b580      	push	{r7, lr}
 80051a6:	b082      	sub	sp, #8
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 80051ac:	4b04      	ldr	r3, [pc, #16]	; (80051c0 <HAL_ETH_TxCpltCallback+0x1c>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	4618      	mov	r0, r3
 80051b2:	f000 fd99 	bl	8005ce8 <osSemaphoreRelease>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20004f68 	.word	0x20004f68

080051c4 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 80051cc:	6878      	ldr	r0, [r7, #4]
 80051ce:	f7fc ff35 	bl	800203c <HAL_ETH_GetDMAError>
 80051d2:	4603      	mov	r3, r0
 80051d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051d8:	2b80      	cmp	r3, #128	; 0x80
 80051da:	d104      	bne.n	80051e6 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 80051dc:	4b04      	ldr	r3, [pc, #16]	; (80051f0 <HAL_ETH_ErrorCallback+0x2c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4618      	mov	r0, r3
 80051e2:	f000 fd81 	bl	8005ce8 <osSemaphoreRelease>
  }
}
 80051e6:	bf00      	nop
 80051e8:	3708      	adds	r7, #8
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	20004f64 	.word	0x20004f64

080051f4 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 80051f4:	b5b0      	push	{r4, r5, r7, lr}
 80051f6:	b0a8      	sub	sp, #160	; 0xa0
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 80051fc:	2300      	movs	r3, #0
 80051fe:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97
  uint32_t duplex, speed = 0;
 8005202:	2300      	movs	r3, #0
 8005204:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  int32_t PHYLinkState = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  ETH_MACConfigTypeDef MACConf = {0};
 800520e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8005212:	2264      	movs	r2, #100	; 0x64
 8005214:	2100      	movs	r1, #0
 8005216:	4618      	mov	r0, r3
 8005218:	f011 f8fd 	bl	8016416 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800521c:	4b85      	ldr	r3, [pc, #532]	; (8005434 <low_level_init+0x240>)
 800521e:	4a86      	ldr	r2, [pc, #536]	; (8005438 <low_level_init+0x244>)
 8005220:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8005222:	2300      	movs	r3, #0
 8005224:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  MACAddr[1] = 0x80;
 8005228:	2380      	movs	r3, #128	; 0x80
 800522a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  MACAddr[2] = 0xE1;
 800522e:	23e1      	movs	r3, #225	; 0xe1
 8005230:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  MACAddr[3] = 0x00;
 8005234:	2300      	movs	r3, #0
 8005236:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  MACAddr[4] = 0x00;
 800523a:	2300      	movs	r3, #0
 800523c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  MACAddr[5] = 0x00;
 8005240:	2300      	movs	r3, #0
 8005242:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
  heth.Init.MACAddr = &MACAddr[0];
 8005246:	4a7b      	ldr	r2, [pc, #492]	; (8005434 <low_level_init+0x240>)
 8005248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800524c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800524e:	4b79      	ldr	r3, [pc, #484]	; (8005434 <low_level_init+0x240>)
 8005250:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005254:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8005256:	4b77      	ldr	r3, [pc, #476]	; (8005434 <low_level_init+0x240>)
 8005258:	4a78      	ldr	r2, [pc, #480]	; (800543c <low_level_init+0x248>)
 800525a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800525c:	4b75      	ldr	r3, [pc, #468]	; (8005434 <low_level_init+0x240>)
 800525e:	4a78      	ldr	r2, [pc, #480]	; (8005440 <low_level_init+0x24c>)
 8005260:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8005262:	4b74      	ldr	r3, [pc, #464]	; (8005434 <low_level_init+0x240>)
 8005264:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005268:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800526a:	4872      	ldr	r0, [pc, #456]	; (8005434 <low_level_init+0x240>)
 800526c:	f7fc f928 	bl	80014c0 <HAL_ETH_Init>
 8005270:	4603      	mov	r3, r0
 8005272:	f887 3097 	strb.w	r3, [r7, #151]	; 0x97

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8005276:	2238      	movs	r2, #56	; 0x38
 8005278:	2100      	movs	r1, #0
 800527a:	4872      	ldr	r0, [pc, #456]	; (8005444 <low_level_init+0x250>)
 800527c:	f011 f8cb 	bl	8016416 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8005280:	4b70      	ldr	r3, [pc, #448]	; (8005444 <low_level_init+0x250>)
 8005282:	2221      	movs	r2, #33	; 0x21
 8005284:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8005286:	4b6f      	ldr	r3, [pc, #444]	; (8005444 <low_level_init+0x250>)
 8005288:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800528c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800528e:	4b6d      	ldr	r3, [pc, #436]	; (8005444 <low_level_init+0x250>)
 8005290:	2200      	movs	r2, #0
 8005292:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8005294:	486c      	ldr	r0, [pc, #432]	; (8005448 <low_level_init+0x254>)
 8005296:	f006 f80b 	bl	800b2b0 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	2206      	movs	r2, #6
 800529e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 80052a2:	4b64      	ldr	r3, [pc, #400]	; (8005434 <low_level_init+0x240>)
 80052a4:	685b      	ldr	r3, [r3, #4]
 80052a6:	781a      	ldrb	r2, [r3, #0]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 80052ae:	4b61      	ldr	r3, [pc, #388]	; (8005434 <low_level_init+0x240>)
 80052b0:	685b      	ldr	r3, [r3, #4]
 80052b2:	785a      	ldrb	r2, [r3, #1]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 80052ba:	4b5e      	ldr	r3, [pc, #376]	; (8005434 <low_level_init+0x240>)
 80052bc:	685b      	ldr	r3, [r3, #4]
 80052be:	789a      	ldrb	r2, [r3, #2]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 80052c6:	4b5b      	ldr	r3, [pc, #364]	; (8005434 <low_level_init+0x240>)
 80052c8:	685b      	ldr	r3, [r3, #4]
 80052ca:	78da      	ldrb	r2, [r3, #3]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 80052d2:	4b58      	ldr	r3, [pc, #352]	; (8005434 <low_level_init+0x240>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	791a      	ldrb	r2, [r3, #4]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 80052de:	4b55      	ldr	r3, [pc, #340]	; (8005434 <low_level_init+0x240>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	795a      	ldrb	r2, [r3, #5]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	f240 52dc 	movw	r2, #1500	; 0x5dc
 80052f0:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80052f8:	f043 030a 	orr.w	r3, r3, #10
 80052fc:	b2da      	uxtb	r2, r3
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = xSemaphoreCreateBinary();
 8005304:	2203      	movs	r2, #3
 8005306:	2100      	movs	r1, #0
 8005308:	2001      	movs	r0, #1
 800530a:	f000 ff9f 	bl	800624c <xQueueGenericCreate>
 800530e:	4603      	mov	r3, r0
 8005310:	4a4e      	ldr	r2, [pc, #312]	; (800544c <low_level_init+0x258>)
 8005312:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = xSemaphoreCreateBinary();
 8005314:	2203      	movs	r2, #3
 8005316:	2100      	movs	r1, #0
 8005318:	2001      	movs	r0, #1
 800531a:	f000 ff97 	bl	800624c <xQueueGenericCreate>
 800531e:	4603      	mov	r3, r0
 8005320:	4a4b      	ldr	r2, [pc, #300]	; (8005450 <low_level_init+0x25c>)
 8005322:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 8005324:	4b4b      	ldr	r3, [pc, #300]	; (8005454 <low_level_init+0x260>)
 8005326:	f107 0408 	add.w	r4, r7, #8
 800532a:	461d      	mov	r5, r3
 800532c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800532e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005330:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005334:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 8005338:	f107 0308 	add.w	r3, r7, #8
 800533c:	6879      	ldr	r1, [r7, #4]
 800533e:	4618      	mov	r0, r3
 8005340:	f000 fb88 	bl	8005a54 <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005344:	4944      	ldr	r1, [pc, #272]	; (8005458 <low_level_init+0x264>)
 8005346:	4845      	ldr	r0, [pc, #276]	; (800545c <low_level_init+0x268>)
 8005348:	f7fb fe25 	bl	8000f96 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800534c:	4843      	ldr	r0, [pc, #268]	; (800545c <low_level_init+0x268>)
 800534e:	f7fb fe54 	bl	8000ffa <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005352:	f897 3097 	ldrb.w	r3, [r7, #151]	; 0x97
 8005356:	2b00      	cmp	r3, #0
 8005358:	d165      	bne.n	8005426 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800535a:	4840      	ldr	r0, [pc, #256]	; (800545c <low_level_init+0x268>)
 800535c:	f7fb fef5 	bl	800114a <LAN8742_GetLinkState>
 8005360:	f8c7 0090 	str.w	r0, [r7, #144]	; 0x90

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005364:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005368:	2b01      	cmp	r3, #1
 800536a:	dc06      	bgt.n	800537a <low_level_init+0x186>
    {
      netif_set_link_down(netif);
 800536c:	6878      	ldr	r0, [r7, #4]
 800536e:	f006 fb89 	bl	800ba84 <netif_set_link_down>
      netif_set_down(netif);
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f006 fb20 	bl	800b9b8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005378:	e057      	b.n	800542a <low_level_init+0x236>
      switch (PHYLinkState)
 800537a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800537e:	3b02      	subs	r3, #2
 8005380:	2b03      	cmp	r3, #3
 8005382:	d82b      	bhi.n	80053dc <low_level_init+0x1e8>
 8005384:	a201      	add	r2, pc, #4	; (adr r2, 800538c <low_level_init+0x198>)
 8005386:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800538a:	bf00      	nop
 800538c:	0800539d 	.word	0x0800539d
 8005390:	080053af 	.word	0x080053af
 8005394:	080053bf 	.word	0x080053bf
 8005398:	080053cf 	.word	0x080053cf
        duplex = ETH_FULLDUPLEX_MODE;
 800539c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80053a4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053a8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053ac:	e01f      	b.n	80053ee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80053ae:	2300      	movs	r3, #0
 80053b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80053b4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053bc:	e017      	b.n	80053ee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80053be:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053c2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80053c6:	2300      	movs	r3, #0
 80053c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053cc:	e00f      	b.n	80053ee <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80053ce:	2300      	movs	r3, #0
 80053d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_10M;
 80053d4:	2300      	movs	r3, #0
 80053d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053da:	e008      	b.n	80053ee <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80053dc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80053e0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
        speed = ETH_SPEED_100M;
 80053e4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80053e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
        break;
 80053ec:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 80053ee:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80053f2:	4619      	mov	r1, r3
 80053f4:	480f      	ldr	r0, [pc, #60]	; (8005434 <low_level_init+0x240>)
 80053f6:	f7fc fcc7 	bl	8001d88 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 80053fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80053fe:	647b      	str	r3, [r7, #68]	; 0x44
    MACConf.Speed = speed;
 8005400:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005404:	643b      	str	r3, [r7, #64]	; 0x40
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005406:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800540a:	4619      	mov	r1, r3
 800540c:	4809      	ldr	r0, [pc, #36]	; (8005434 <low_level_init+0x240>)
 800540e:	f7fc fda5 	bl	8001f5c <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 8005412:	4808      	ldr	r0, [pc, #32]	; (8005434 <low_level_init+0x240>)
 8005414:	f7fc f8d0 	bl	80015b8 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f006 fa59 	bl	800b8d0 <netif_set_up>
    netif_set_link_up(netif);
 800541e:	6878      	ldr	r0, [r7, #4]
 8005420:	f006 fb04 	bl	800ba2c <netif_set_link_up>
}
 8005424:	e001      	b.n	800542a <low_level_init+0x236>
    Error_Handler();
 8005426:	f7fb fb83 	bl	8000b30 <Error_Handler>
}
 800542a:	bf00      	nop
 800542c:	37a0      	adds	r7, #160	; 0xa0
 800542e:	46bd      	mov	sp, r7
 8005430:	bdb0      	pop	{r4, r5, r7, pc}
 8005432:	bf00      	nop
 8005434:	20004f6c 	.word	0x20004f6c
 8005438:	40028000 	.word	0x40028000
 800543c:	20000134 	.word	0x20000134
 8005440:	20000094 	.word	0x20000094
 8005444:	2000501c 	.word	0x2000501c
 8005448:	0801aaf0 	.word	0x0801aaf0
 800544c:	20004f64 	.word	0x20004f64
 8005450:	20004f68 	.word	0x20004f68
 8005454:	080176f0 	.word	0x080176f0
 8005458:	2000000c 	.word	0x2000000c
 800545c:	20005054 	.word	0x20005054

08005460 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b092      	sub	sp, #72	; 0x48
 8005464:	af00      	add	r7, sp, #0
 8005466:	6078      	str	r0, [r7, #4]
 8005468:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800546a:	2300      	movs	r3, #0
 800546c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800546e:	2300      	movs	r3, #0
 8005470:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005472:	2300      	movs	r3, #0
 8005474:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005478:	f107 030c 	add.w	r3, r7, #12
 800547c:	2230      	movs	r2, #48	; 0x30
 800547e:	2100      	movs	r1, #0
 8005480:	4618      	mov	r0, r3
 8005482:	f010 ffc8 	bl	8016416 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 8005486:	f107 030c 	add.w	r3, r7, #12
 800548a:	2230      	movs	r2, #48	; 0x30
 800548c:	2100      	movs	r1, #0
 800548e:	4618      	mov	r0, r3
 8005490:	f010 ffc1 	bl	8016416 <memset>

  for(q = p; q != NULL; q = q->next)
 8005494:	683b      	ldr	r3, [r7, #0]
 8005496:	643b      	str	r3, [r7, #64]	; 0x40
 8005498:	e045      	b.n	8005526 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800549a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800549c:	2b03      	cmp	r3, #3
 800549e:	d902      	bls.n	80054a6 <low_level_output+0x46>
      return ERR_IF;
 80054a0:	f06f 030b 	mvn.w	r3, #11
 80054a4:	e065      	b.n	8005572 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80054a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054a8:	6859      	ldr	r1, [r3, #4]
 80054aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054ac:	4613      	mov	r3, r2
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	4413      	add	r3, r2
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	3348      	adds	r3, #72	; 0x48
 80054b6:	443b      	add	r3, r7
 80054b8:	3b3c      	subs	r3, #60	; 0x3c
 80054ba:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80054bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80054be:	895b      	ldrh	r3, [r3, #10]
 80054c0:	4619      	mov	r1, r3
 80054c2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054c4:	4613      	mov	r3, r2
 80054c6:	005b      	lsls	r3, r3, #1
 80054c8:	4413      	add	r3, r2
 80054ca:	009b      	lsls	r3, r3, #2
 80054cc:	3348      	adds	r3, #72	; 0x48
 80054ce:	443b      	add	r3, r7
 80054d0:	3b38      	subs	r3, #56	; 0x38
 80054d2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d011      	beq.n	80054fe <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80054da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054dc:	1e5a      	subs	r2, r3, #1
 80054de:	f107 000c 	add.w	r0, r7, #12
 80054e2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80054e4:	460b      	mov	r3, r1
 80054e6:	005b      	lsls	r3, r3, #1
 80054e8:	440b      	add	r3, r1
 80054ea:	009b      	lsls	r3, r3, #2
 80054ec:	18c1      	adds	r1, r0, r3
 80054ee:	4613      	mov	r3, r2
 80054f0:	005b      	lsls	r3, r3, #1
 80054f2:	4413      	add	r3, r2
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	3348      	adds	r3, #72	; 0x48
 80054f8:	443b      	add	r3, r7
 80054fa:	3b34      	subs	r3, #52	; 0x34
 80054fc:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 80054fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	2b00      	cmp	r3, #0
 8005504:	d109      	bne.n	800551a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005506:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005508:	4613      	mov	r3, r2
 800550a:	005b      	lsls	r3, r3, #1
 800550c:	4413      	add	r3, r2
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	3348      	adds	r3, #72	; 0x48
 8005512:	443b      	add	r3, r7
 8005514:	3b34      	subs	r3, #52	; 0x34
 8005516:	2200      	movs	r2, #0
 8005518:	601a      	str	r2, [r3, #0]
    }

    i++;
 800551a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800551c:	3301      	adds	r3, #1
 800551e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005520:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	643b      	str	r3, [r7, #64]	; 0x40
 8005526:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005528:	2b00      	cmp	r3, #0
 800552a:	d1b6      	bne.n	800549a <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800552c:	683b      	ldr	r3, [r7, #0]
 800552e:	891b      	ldrh	r3, [r3, #8]
 8005530:	461a      	mov	r2, r3
 8005532:	4b12      	ldr	r3, [pc, #72]	; (800557c <low_level_output+0x11c>)
 8005534:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005536:	4a11      	ldr	r2, [pc, #68]	; (800557c <low_level_output+0x11c>)
 8005538:	f107 030c 	add.w	r3, r7, #12
 800553c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800553e:	4a0f      	ldr	r2, [pc, #60]	; (800557c <low_level_output+0x11c>)
 8005540:	683b      	ldr	r3, [r7, #0]
 8005542:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005544:	6838      	ldr	r0, [r7, #0]
 8005546:	f006 ff07 	bl	800c358 <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800554a:	490c      	ldr	r1, [pc, #48]	; (800557c <low_level_output+0x11c>)
 800554c:	480c      	ldr	r0, [pc, #48]	; (8005580 <low_level_output+0x120>)
 800554e:	f7fc f8c1 	bl	80016d4 <HAL_ETH_Transmit_IT>
  while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005552:	bf00      	nop
 8005554:	4b0b      	ldr	r3, [pc, #44]	; (8005584 <low_level_output+0x124>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f04f 31ff 	mov.w	r1, #4294967295
 800555c:	4618      	mov	r0, r3
 800555e:	f000 fb75 	bl	8005c4c <osSemaphoreWait>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	d1f5      	bne.n	8005554 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005568:	4805      	ldr	r0, [pc, #20]	; (8005580 <low_level_output+0x120>)
 800556a:	f7fc fa47 	bl	80019fc <HAL_ETH_ReleaseTxPacket>

  return errval;
 800556e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005572:	4618      	mov	r0, r3
 8005574:	3748      	adds	r7, #72	; 0x48
 8005576:	46bd      	mov	sp, r7
 8005578:	bd80      	pop	{r7, pc}
 800557a:	bf00      	nop
 800557c:	2000501c 	.word	0x2000501c
 8005580:	20004f6c 	.word	0x20004f6c
 8005584:	20004f68 	.word	0x20004f68

08005588 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 8005588:	b580      	push	{r7, lr}
 800558a:	b084      	sub	sp, #16
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 8005590:	2300      	movs	r3, #0
 8005592:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 8005594:	4b07      	ldr	r3, [pc, #28]	; (80055b4 <low_level_input+0x2c>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d105      	bne.n	80055a8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800559c:	f107 030c 	add.w	r3, r7, #12
 80055a0:	4619      	mov	r1, r3
 80055a2:	4805      	ldr	r0, [pc, #20]	; (80055b8 <low_level_input+0x30>)
 80055a4:	f7fc f8f2 	bl	800178c <HAL_ETH_ReadData>
  }

  return p;
 80055a8:	68fb      	ldr	r3, [r7, #12]
}
 80055aa:	4618      	mov	r0, r3
 80055ac:	3710      	adds	r7, #16
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bd80      	pop	{r7, pc}
 80055b2:	bf00      	nop
 80055b4:	20004f60 	.word	0x20004f60
 80055b8:	20004f6c 	.word	0x20004f6c

080055bc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b084      	sub	sp, #16
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80055c4:	2300      	movs	r3, #0
 80055c6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <ethernetif_input+0x50>)
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f04f 31ff 	mov.w	r1, #4294967295
 80055d4:	4618      	mov	r0, r3
 80055d6:	f000 fb39 	bl	8005c4c <osSemaphoreWait>
 80055da:	4603      	mov	r3, r0
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d1f5      	bne.n	80055cc <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 80055e0:	68b8      	ldr	r0, [r7, #8]
 80055e2:	f7ff ffd1 	bl	8005588 <low_level_input>
 80055e6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d00a      	beq.n	8005604 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 80055ee:	68bb      	ldr	r3, [r7, #8]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	68b9      	ldr	r1, [r7, #8]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	4798      	blx	r3
 80055f8:	4603      	mov	r3, r0
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d002      	beq.n	8005604 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 80055fe:	68f8      	ldr	r0, [r7, #12]
 8005600:	f006 fe04 	bl	800c20c <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d1ea      	bne.n	80055e0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800560a:	e7df      	b.n	80055cc <ethernetif_input+0x10>
 800560c:	20004f64 	.word	0x20004f64

08005610 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d106      	bne.n	800562c <ethernetif_init+0x1c>
 800561e:	4b0e      	ldr	r3, [pc, #56]	; (8005658 <ethernetif_init+0x48>)
 8005620:	f240 12ef 	movw	r2, #495	; 0x1ef
 8005624:	490d      	ldr	r1, [pc, #52]	; (800565c <ethernetif_init+0x4c>)
 8005626:	480e      	ldr	r0, [pc, #56]	; (8005660 <ethernetif_init+0x50>)
 8005628:	f010 ff92 	bl	8016550 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2273      	movs	r2, #115	; 0x73
 8005630:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	2274      	movs	r2, #116	; 0x74
 8005638:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a09      	ldr	r2, [pc, #36]	; (8005664 <ethernetif_init+0x54>)
 8005640:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	4a08      	ldr	r2, [pc, #32]	; (8005668 <ethernetif_init+0x58>)
 8005646:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005648:	6878      	ldr	r0, [r7, #4]
 800564a:	f7ff fdd3 	bl	80051f4 <low_level_init>

  return ERR_OK;
 800564e:	2300      	movs	r3, #0
}
 8005650:	4618      	mov	r0, r3
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}
 8005658:	0801770c 	.word	0x0801770c
 800565c:	08017728 	.word	0x08017728
 8005660:	08017738 	.word	0x08017738
 8005664:	0801402d 	.word	0x0801402d
 8005668:	08005461 	.word	0x08005461

0800566c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005678:	68f9      	ldr	r1, [r7, #12]
 800567a:	4809      	ldr	r0, [pc, #36]	; (80056a0 <pbuf_free_custom+0x34>)
 800567c:	f005 ff08 	bl	800b490 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 8005680:	4b08      	ldr	r3, [pc, #32]	; (80056a4 <pbuf_free_custom+0x38>)
 8005682:	781b      	ldrb	r3, [r3, #0]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d107      	bne.n	8005698 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 8005688:	4b06      	ldr	r3, [pc, #24]	; (80056a4 <pbuf_free_custom+0x38>)
 800568a:	2200      	movs	r2, #0
 800568c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800568e:	4b06      	ldr	r3, [pc, #24]	; (80056a8 <pbuf_free_custom+0x3c>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fb28 	bl	8005ce8 <osSemaphoreRelease>
  }
}
 8005698:	bf00      	nop
 800569a:	3710      	adds	r7, #16
 800569c:	46bd      	mov	sp, r7
 800569e:	bd80      	pop	{r7, pc}
 80056a0:	0801aaf0 	.word	0x0801aaf0
 80056a4:	20004f60 	.word	0x20004f60
 80056a8:	20004f64 	.word	0x20004f64

080056ac <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80056b0:	f7fb fdf4 	bl	800129c <HAL_GetTick>
 80056b4:	4603      	mov	r3, r0
}
 80056b6:	4618      	mov	r0, r3
 80056b8:	bd80      	pop	{r7, pc}
	...

080056bc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b08e      	sub	sp, #56	; 0x38
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80056c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
 80056cc:	605a      	str	r2, [r3, #4]
 80056ce:	609a      	str	r2, [r3, #8]
 80056d0:	60da      	str	r2, [r3, #12]
 80056d2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	4a52      	ldr	r2, [pc, #328]	; (8005824 <HAL_ETH_MspInit+0x168>)
 80056da:	4293      	cmp	r3, r2
 80056dc:	f040 809e 	bne.w	800581c <HAL_ETH_MspInit+0x160>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 80056e0:	4b51      	ldr	r3, [pc, #324]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 80056e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056e4:	4a50      	ldr	r2, [pc, #320]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 80056e6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80056ea:	6313      	str	r3, [r2, #48]	; 0x30
 80056ec:	4b4e      	ldr	r3, [pc, #312]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 80056ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80056f4:	623b      	str	r3, [r7, #32]
 80056f6:	6a3b      	ldr	r3, [r7, #32]
 80056f8:	4b4b      	ldr	r3, [pc, #300]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 80056fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056fc:	4a4a      	ldr	r2, [pc, #296]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 80056fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005702:	6313      	str	r3, [r2, #48]	; 0x30
 8005704:	4b48      	ldr	r3, [pc, #288]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005706:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005708:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	69fb      	ldr	r3, [r7, #28]
 8005710:	4b45      	ldr	r3, [pc, #276]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005714:	4a44      	ldr	r2, [pc, #272]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005716:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800571a:	6313      	str	r3, [r2, #48]	; 0x30
 800571c:	4b42      	ldr	r3, [pc, #264]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 800571e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005720:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005724:	61bb      	str	r3, [r7, #24]
 8005726:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005728:	4b3f      	ldr	r3, [pc, #252]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 800572a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800572c:	4a3e      	ldr	r2, [pc, #248]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 800572e:	f043 0304 	orr.w	r3, r3, #4
 8005732:	6313      	str	r3, [r2, #48]	; 0x30
 8005734:	4b3c      	ldr	r3, [pc, #240]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005738:	f003 0304 	and.w	r3, r3, #4
 800573c:	617b      	str	r3, [r7, #20]
 800573e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005740:	4b39      	ldr	r3, [pc, #228]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005742:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005744:	4a38      	ldr	r2, [pc, #224]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005746:	f043 0301 	orr.w	r3, r3, #1
 800574a:	6313      	str	r3, [r2, #48]	; 0x30
 800574c:	4b36      	ldr	r3, [pc, #216]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 800574e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8005758:	4b33      	ldr	r3, [pc, #204]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 800575a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800575c:	4a32      	ldr	r2, [pc, #200]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 800575e:	f043 0302 	orr.w	r3, r3, #2
 8005762:	6313      	str	r3, [r2, #48]	; 0x30
 8005764:	4b30      	ldr	r3, [pc, #192]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	f003 0302 	and.w	r3, r3, #2
 800576c:	60fb      	str	r3, [r7, #12]
 800576e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8005770:	4b2d      	ldr	r3, [pc, #180]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005772:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005774:	4a2c      	ldr	r2, [pc, #176]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 8005776:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800577a:	6313      	str	r3, [r2, #48]	; 0x30
 800577c:	4b2a      	ldr	r3, [pc, #168]	; (8005828 <HAL_ETH_MspInit+0x16c>)
 800577e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005780:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005784:	60bb      	str	r3, [r7, #8]
 8005786:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8005788:	2332      	movs	r3, #50	; 0x32
 800578a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800578c:	2302      	movs	r3, #2
 800578e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005790:	2300      	movs	r3, #0
 8005792:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005794:	2303      	movs	r3, #3
 8005796:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005798:	230b      	movs	r3, #11
 800579a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800579c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057a0:	4619      	mov	r1, r3
 80057a2:	4822      	ldr	r0, [pc, #136]	; (800582c <HAL_ETH_MspInit+0x170>)
 80057a4:	f7fd f85a 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80057a8:	2386      	movs	r3, #134	; 0x86
 80057aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ac:	2302      	movs	r3, #2
 80057ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057b0:	2300      	movs	r3, #0
 80057b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057b4:	2303      	movs	r3, #3
 80057b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057b8:	230b      	movs	r3, #11
 80057ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80057bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057c0:	4619      	mov	r1, r3
 80057c2:	481b      	ldr	r0, [pc, #108]	; (8005830 <HAL_ETH_MspInit+0x174>)
 80057c4:	f7fd f84a 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80057c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80057cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057ce:	2302      	movs	r3, #2
 80057d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057d2:	2300      	movs	r3, #0
 80057d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057d6:	2303      	movs	r3, #3
 80057d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057da:	230b      	movs	r3, #11
 80057dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80057de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80057e2:	4619      	mov	r1, r3
 80057e4:	4813      	ldr	r0, [pc, #76]	; (8005834 <HAL_ETH_MspInit+0x178>)
 80057e6:	f7fd f839 	bl	800285c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80057ea:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80057ee:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80057f0:	2302      	movs	r3, #2
 80057f2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80057f4:	2300      	movs	r3, #0
 80057f6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80057f8:	2303      	movs	r3, #3
 80057fa:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80057fc:	230b      	movs	r3, #11
 80057fe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8005800:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005804:	4619      	mov	r1, r3
 8005806:	480c      	ldr	r0, [pc, #48]	; (8005838 <HAL_ETH_MspInit+0x17c>)
 8005808:	f7fd f828 	bl	800285c <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800580c:	2200      	movs	r2, #0
 800580e:	2105      	movs	r1, #5
 8005810:	203d      	movs	r0, #61	; 0x3d
 8005812:	f7fb fe2b 	bl	800146c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005816:	203d      	movs	r0, #61	; 0x3d
 8005818:	f7fb fe44 	bl	80014a4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800581c:	bf00      	nop
 800581e:	3738      	adds	r7, #56	; 0x38
 8005820:	46bd      	mov	sp, r7
 8005822:	bd80      	pop	{r7, pc}
 8005824:	40028000 	.word	0x40028000
 8005828:	40023800 	.word	0x40023800
 800582c:	40020800 	.word	0x40020800
 8005830:	40020000 	.word	0x40020000
 8005834:	40020400 	.word	0x40020400
 8005838:	40021800 	.word	0x40021800

0800583c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800583c:	b580      	push	{r7, lr}
 800583e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 8005840:	4802      	ldr	r0, [pc, #8]	; (800584c <ETH_PHY_IO_Init+0x10>)
 8005842:	f7fc fba5 	bl	8001f90 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005846:	2300      	movs	r3, #0
}
 8005848:	4618      	mov	r0, r3
 800584a:	bd80      	pop	{r7, pc}
 800584c:	20004f6c 	.word	0x20004f6c

08005850 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 8005850:	b480      	push	{r7}
 8005852:	af00      	add	r7, sp, #0
  return 0;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	46bd      	mov	sp, r7
 800585a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585e:	4770      	bx	lr

08005860 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	60f8      	str	r0, [r7, #12]
 8005868:	60b9      	str	r1, [r7, #8]
 800586a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	68ba      	ldr	r2, [r7, #8]
 8005870:	68f9      	ldr	r1, [r7, #12]
 8005872:	4807      	ldr	r0, [pc, #28]	; (8005890 <ETH_PHY_IO_ReadReg+0x30>)
 8005874:	f7fc f9f4 	bl	8001c60 <HAL_ETH_ReadPHYRegister>
 8005878:	4603      	mov	r3, r0
 800587a:	2b00      	cmp	r3, #0
 800587c:	d002      	beq.n	8005884 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800587e:	f04f 33ff 	mov.w	r3, #4294967295
 8005882:	e000      	b.n	8005886 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 8005884:	2300      	movs	r3, #0
}
 8005886:	4618      	mov	r0, r3
 8005888:	3710      	adds	r7, #16
 800588a:	46bd      	mov	sp, r7
 800588c:	bd80      	pop	{r7, pc}
 800588e:	bf00      	nop
 8005890:	20004f6c 	.word	0x20004f6c

08005894 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 8005894:	b580      	push	{r7, lr}
 8005896:	b084      	sub	sp, #16
 8005898:	af00      	add	r7, sp, #0
 800589a:	60f8      	str	r0, [r7, #12]
 800589c:	60b9      	str	r1, [r7, #8]
 800589e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	68f9      	ldr	r1, [r7, #12]
 80058a6:	4807      	ldr	r0, [pc, #28]	; (80058c4 <ETH_PHY_IO_WriteReg+0x30>)
 80058a8:	f7fc fa25 	bl	8001cf6 <HAL_ETH_WritePHYRegister>
 80058ac:	4603      	mov	r3, r0
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d002      	beq.n	80058b8 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80058b2:	f04f 33ff 	mov.w	r3, #4294967295
 80058b6:	e000      	b.n	80058ba <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80058b8:	2300      	movs	r3, #0
}
 80058ba:	4618      	mov	r0, r3
 80058bc:	3710      	adds	r7, #16
 80058be:	46bd      	mov	sp, r7
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	bf00      	nop
 80058c4:	20004f6c 	.word	0x20004f6c

080058c8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80058cc:	f7fb fce6 	bl	800129c <HAL_GetTick>
 80058d0:	4603      	mov	r3, r0
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	bd80      	pop	{r7, pc}
	...

080058d8 <HAL_ETH_RxAllocateCallback>:
    osDelay(100);
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b086      	sub	sp, #24
 80058dc:	af02      	add	r7, sp, #8
 80058de:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 80058e0:	4812      	ldr	r0, [pc, #72]	; (800592c <HAL_ETH_RxAllocateCallback+0x54>)
 80058e2:	f005 fd61 	bl	800b3a8 <memp_malloc_pool>
 80058e6:	60f8      	str	r0, [r7, #12]
  if (p)
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d014      	beq.n	8005918 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f103 0220 	add.w	r2, r3, #32
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	4a0d      	ldr	r2, [pc, #52]	; (8005930 <HAL_ETH_RxAllocateCallback+0x58>)
 80058fc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8005906:	9201      	str	r2, [sp, #4]
 8005908:	9300      	str	r3, [sp, #0]
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	2241      	movs	r2, #65	; 0x41
 800590e:	2100      	movs	r1, #0
 8005910:	2000      	movs	r0, #0
 8005912:	f006 fac1 	bl	800be98 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 8005916:	e005      	b.n	8005924 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005918:	4b06      	ldr	r3, [pc, #24]	; (8005934 <HAL_ETH_RxAllocateCallback+0x5c>)
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	601a      	str	r2, [r3, #0]
}
 8005924:	bf00      	nop
 8005926:	3710      	adds	r7, #16
 8005928:	46bd      	mov	sp, r7
 800592a:	bd80      	pop	{r7, pc}
 800592c:	0801aaf0 	.word	0x0801aaf0
 8005930:	0800566d 	.word	0x0800566d
 8005934:	20004f60 	.word	0x20004f60

08005938 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b088      	sub	sp, #32
 800593c:	af00      	add	r7, sp, #0
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	607a      	str	r2, [r7, #4]
 8005944:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800594e:	2300      	movs	r3, #0
 8005950:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	3b20      	subs	r3, #32
 8005956:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 8005958:	69fb      	ldr	r3, [r7, #28]
 800595a:	2200      	movs	r2, #0
 800595c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800595e:	69fb      	ldr	r3, [r7, #28]
 8005960:	2200      	movs	r2, #0
 8005962:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 8005964:	69fb      	ldr	r3, [r7, #28]
 8005966:	887a      	ldrh	r2, [r7, #2]
 8005968:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800596a:	69bb      	ldr	r3, [r7, #24]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d103      	bne.n	800597a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 8005972:	69bb      	ldr	r3, [r7, #24]
 8005974:	69fa      	ldr	r2, [r7, #28]
 8005976:	601a      	str	r2, [r3, #0]
 8005978:	e003      	b.n	8005982 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	69fa      	ldr	r2, [r7, #28]
 8005980:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	69fa      	ldr	r2, [r7, #28]
 8005986:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	61fb      	str	r3, [r7, #28]
 800598e:	e009      	b.n	80059a4 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	891a      	ldrh	r2, [r3, #8]
 8005994:	887b      	ldrh	r3, [r7, #2]
 8005996:	4413      	add	r3, r2
 8005998:	b29a      	uxth	r2, r3
 800599a:	69fb      	ldr	r3, [r7, #28]
 800599c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800599e:	69fb      	ldr	r3, [r7, #28]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	61fb      	str	r3, [r7, #28]
 80059a4:	69fb      	ldr	r3, [r7, #28]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d1f2      	bne.n	8005990 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 80059aa:	887b      	ldrh	r3, [r7, #2]
 80059ac:	4619      	mov	r1, r3
 80059ae:	6878      	ldr	r0, [r7, #4]
 80059b0:	f7ff fbbc 	bl	800512c <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 80059b4:	bf00      	nop
 80059b6:	3720      	adds	r7, #32
 80059b8:	46bd      	mov	sp, r7
 80059ba:	bd80      	pop	{r7, pc}

080059bc <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 80059c4:	6878      	ldr	r0, [r7, #4]
 80059c6:	f006 fc21 	bl	800c20c <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 80059ca:	bf00      	nop
 80059cc:	3708      	adds	r7, #8
 80059ce:	46bd      	mov	sp, r7
 80059d0:	bd80      	pop	{r7, pc}

080059d2 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	4603      	mov	r3, r0
 80059da:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80059dc:	2300      	movs	r3, #0
 80059de:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80059e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80059e4:	2b84      	cmp	r3, #132	; 0x84
 80059e6:	d005      	beq.n	80059f4 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80059e8:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	4413      	add	r3, r2
 80059f0:	3303      	adds	r3, #3
 80059f2:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80059f4:	68fb      	ldr	r3, [r7, #12]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a08:	f3ef 8305 	mrs	r3, IPSR
 8005a0c:	607b      	str	r3, [r7, #4]
  return(result);
 8005a0e:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	bf14      	ite	ne
 8005a14:	2301      	movne	r3, #1
 8005a16:	2300      	moveq	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
}
 8005a1a:	4618      	mov	r0, r3
 8005a1c:	370c      	adds	r7, #12
 8005a1e:	46bd      	mov	sp, r7
 8005a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a24:	4770      	bx	lr

08005a26 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8005a26:	b580      	push	{r7, lr}
 8005a28:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8005a2a:	f001 fc89 	bl	8007340 <vTaskStartScheduler>
  
  return osOK;
 8005a2e:	2300      	movs	r3, #0
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	bd80      	pop	{r7, pc}

08005a34 <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 8005a38:	f7ff ffe3 	bl	8005a02 <inHandlerMode>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d003      	beq.n	8005a4a <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 8005a42:	f001 fda7 	bl	8007594 <xTaskGetTickCountFromISR>
 8005a46:	4603      	mov	r3, r0
 8005a48:	e002      	b.n	8005a50 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 8005a4a:	f001 fd93 	bl	8007574 <xTaskGetTickCount>
 8005a4e:	4603      	mov	r3, r0
  }
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8005a54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005a56:	b089      	sub	sp, #36	; 0x24
 8005a58:	af04      	add	r7, sp, #16
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d020      	beq.n	8005aa8 <osThreadCreate+0x54>
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	699b      	ldr	r3, [r3, #24]
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d01c      	beq.n	8005aa8 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	685c      	ldr	r4, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681d      	ldr	r5, [r3, #0]
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	691e      	ldr	r6, [r3, #16]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7ff ffa6 	bl	80059d2 <makeFreeRtosPriority>
 8005a86:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	695b      	ldr	r3, [r3, #20]
 8005a8c:	687a      	ldr	r2, [r7, #4]
 8005a8e:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005a90:	9202      	str	r2, [sp, #8]
 8005a92:	9301      	str	r3, [sp, #4]
 8005a94:	9100      	str	r1, [sp, #0]
 8005a96:	683b      	ldr	r3, [r7, #0]
 8005a98:	4632      	mov	r2, r6
 8005a9a:	4629      	mov	r1, r5
 8005a9c:	4620      	mov	r0, r4
 8005a9e:	f001 fa67 	bl	8006f70 <xTaskCreateStatic>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	60fb      	str	r3, [r7, #12]
 8005aa6:	e01c      	b.n	8005ae2 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	685c      	ldr	r4, [r3, #4]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8005ab4:	b29e      	uxth	r6, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8005abc:	4618      	mov	r0, r3
 8005abe:	f7ff ff88 	bl	80059d2 <makeFreeRtosPriority>
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	f107 030c 	add.w	r3, r7, #12
 8005ac8:	9301      	str	r3, [sp, #4]
 8005aca:	9200      	str	r2, [sp, #0]
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	4632      	mov	r2, r6
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	4620      	mov	r0, r4
 8005ad4:	f001 faaf 	bl	8007036 <xTaskCreate>
 8005ad8:	4603      	mov	r3, r0
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d001      	beq.n	8005ae2 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 8005ade:	2300      	movs	r3, #0
 8005ae0:	e000      	b.n	8005ae4 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
}
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	3714      	adds	r7, #20
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005aec <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8005aec:	b580      	push	{r7, lr}
 8005aee:	b084      	sub	sp, #16
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d001      	beq.n	8005b02 <osDelay+0x16>
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	e000      	b.n	8005b04 <osDelay+0x18>
 8005b02:	2301      	movs	r3, #1
 8005b04:	4618      	mov	r0, r3
 8005b06:	f001 fbe5 	bl	80072d4 <vTaskDelay>
  
  return osOK;
 8005b0a:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b082      	sub	sp, #8
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d007      	beq.n	8005b34 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	2001      	movs	r0, #1
 8005b2c:	f000 fc21 	bl	8006372 <xQueueCreateMutexStatic>
 8005b30:	4603      	mov	r3, r0
 8005b32:	e003      	b.n	8005b3c <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 8005b34:	2001      	movs	r0, #1
 8005b36:	f000 fc04 	bl	8006342 <xQueueCreateMutex>
 8005b3a:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 8005b3c:	4618      	mov	r0, r3
 8005b3e:	3708      	adds	r7, #8
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
 8005b4c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005b4e:	2300      	movs	r3, #0
 8005b50:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d101      	bne.n	8005b5c <osMutexWait+0x18>
    return osErrorParameter;
 8005b58:	2380      	movs	r3, #128	; 0x80
 8005b5a:	e03a      	b.n	8005bd2 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 8005b5c:	2300      	movs	r3, #0
 8005b5e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b66:	d103      	bne.n	8005b70 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 8005b68:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6c:	60fb      	str	r3, [r7, #12]
 8005b6e:	e009      	b.n	8005b84 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d006      	beq.n	8005b84 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d101      	bne.n	8005b84 <osMutexWait+0x40>
      ticks = 1;
 8005b80:	2301      	movs	r3, #1
 8005b82:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005b84:	f7ff ff3d 	bl	8005a02 <inHandlerMode>
 8005b88:	4603      	mov	r3, r0
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d017      	beq.n	8005bbe <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005b8e:	f107 0308 	add.w	r3, r7, #8
 8005b92:	461a      	mov	r2, r3
 8005b94:	2100      	movs	r1, #0
 8005b96:	6878      	ldr	r0, [r7, #4]
 8005b98:	f001 f83c 	bl	8006c14 <xQueueReceiveFromISR>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b01      	cmp	r3, #1
 8005ba0:	d001      	beq.n	8005ba6 <osMutexWait+0x62>
      return osErrorOS;
 8005ba2:	23ff      	movs	r3, #255	; 0xff
 8005ba4:	e015      	b.n	8005bd2 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005ba6:	68bb      	ldr	r3, [r7, #8]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d011      	beq.n	8005bd0 <osMutexWait+0x8c>
 8005bac:	4b0b      	ldr	r3, [pc, #44]	; (8005bdc <osMutexWait+0x98>)
 8005bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bb2:	601a      	str	r2, [r3, #0]
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	f3bf 8f6f 	isb	sy
 8005bbc:	e008      	b.n	8005bd0 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 8005bbe:	68f9      	ldr	r1, [r7, #12]
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	f000 ff13 	bl	80069ec <xQueueSemaphoreTake>
 8005bc6:	4603      	mov	r3, r0
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d001      	beq.n	8005bd0 <osMutexWait+0x8c>
    return osErrorOS;
 8005bcc:	23ff      	movs	r3, #255	; 0xff
 8005bce:	e000      	b.n	8005bd2 <osMutexWait+0x8e>
  }
  
  return osOK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3710      	adds	r7, #16
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	e000ed04 	.word	0xe000ed04

08005be0 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b084      	sub	sp, #16
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005be8:	2300      	movs	r3, #0
 8005bea:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005bec:	2300      	movs	r3, #0
 8005bee:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 8005bf0:	f7ff ff07 	bl	8005a02 <inHandlerMode>
 8005bf4:	4603      	mov	r3, r0
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d016      	beq.n	8005c28 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 8005bfa:	f107 0308 	add.w	r3, r7, #8
 8005bfe:	4619      	mov	r1, r3
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fd77 	bl	80066f4 <xQueueGiveFromISR>
 8005c06:	4603      	mov	r3, r0
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	d001      	beq.n	8005c10 <osMutexRelease+0x30>
      return osErrorOS;
 8005c0c:	23ff      	movs	r3, #255	; 0xff
 8005c0e:	e017      	b.n	8005c40 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005c10:	68bb      	ldr	r3, [r7, #8]
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d013      	beq.n	8005c3e <osMutexRelease+0x5e>
 8005c16:	4b0c      	ldr	r3, [pc, #48]	; (8005c48 <osMutexRelease+0x68>)
 8005c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c1c:	601a      	str	r2, [r3, #0]
 8005c1e:	f3bf 8f4f 	dsb	sy
 8005c22:	f3bf 8f6f 	isb	sy
 8005c26:	e00a      	b.n	8005c3e <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 8005c28:	2300      	movs	r3, #0
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	2100      	movs	r1, #0
 8005c2e:	6878      	ldr	r0, [r7, #4]
 8005c30:	f000 fbba 	bl	80063a8 <xQueueGenericSend>
 8005c34:	4603      	mov	r3, r0
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d001      	beq.n	8005c3e <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 8005c3a:	23ff      	movs	r3, #255	; 0xff
 8005c3c:	60fb      	str	r3, [r7, #12]
  }
  return result;
 8005c3e:	68fb      	ldr	r3, [r7, #12]
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3710      	adds	r7, #16
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}
 8005c48:	e000ed04 	.word	0xe000ed04

08005c4c <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8005c4c:	b580      	push	{r7, lr}
 8005c4e:	b084      	sub	sp, #16
 8005c50:	af00      	add	r7, sp, #0
 8005c52:	6078      	str	r0, [r7, #4]
 8005c54:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8005c56:	2300      	movs	r3, #0
 8005c58:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <osSemaphoreWait+0x18>
    return osErrorParameter;
 8005c60:	2380      	movs	r3, #128	; 0x80
 8005c62:	e03a      	b.n	8005cda <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 8005c64:	2300      	movs	r3, #0
 8005c66:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d103      	bne.n	8005c78 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 8005c70:	f04f 33ff 	mov.w	r3, #4294967295
 8005c74:	60fb      	str	r3, [r7, #12]
 8005c76:	e009      	b.n	8005c8c <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d006      	beq.n	8005c8c <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d101      	bne.n	8005c8c <osSemaphoreWait+0x40>
      ticks = 1;
 8005c88:	2301      	movs	r3, #1
 8005c8a:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 8005c8c:	f7ff feb9 	bl	8005a02 <inHandlerMode>
 8005c90:	4603      	mov	r3, r0
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d017      	beq.n	8005cc6 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005c96:	f107 0308 	add.w	r3, r7, #8
 8005c9a:	461a      	mov	r2, r3
 8005c9c:	2100      	movs	r1, #0
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	f000 ffb8 	bl	8006c14 <xQueueReceiveFromISR>
 8005ca4:	4603      	mov	r3, r0
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	d001      	beq.n	8005cae <osSemaphoreWait+0x62>
      return osErrorOS;
 8005caa:	23ff      	movs	r3, #255	; 0xff
 8005cac:	e015      	b.n	8005cda <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d011      	beq.n	8005cd8 <osSemaphoreWait+0x8c>
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <osSemaphoreWait+0x98>)
 8005cb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	f3bf 8f4f 	dsb	sy
 8005cc0:	f3bf 8f6f 	isb	sy
 8005cc4:	e008      	b.n	8005cd8 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8005cc6:	68f9      	ldr	r1, [r7, #12]
 8005cc8:	6878      	ldr	r0, [r7, #4]
 8005cca:	f000 fe8f 	bl	80069ec <xQueueSemaphoreTake>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b01      	cmp	r3, #1
 8005cd2:	d001      	beq.n	8005cd8 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8005cd4:	23ff      	movs	r3, #255	; 0xff
 8005cd6:	e000      	b.n	8005cda <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8005cd8:	2300      	movs	r3, #0
}
 8005cda:	4618      	mov	r0, r3
 8005cdc:	3710      	adds	r7, #16
 8005cde:	46bd      	mov	sp, r7
 8005ce0:	bd80      	pop	{r7, pc}
 8005ce2:	bf00      	nop
 8005ce4:	e000ed04 	.word	0xe000ed04

08005ce8 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b084      	sub	sp, #16
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8005cf8:	f7ff fe83 	bl	8005a02 <inHandlerMode>
 8005cfc:	4603      	mov	r3, r0
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d016      	beq.n	8005d30 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 8005d02:	f107 0308 	add.w	r3, r7, #8
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fcf3 	bl	80066f4 <xQueueGiveFromISR>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d001      	beq.n	8005d18 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8005d14:	23ff      	movs	r3, #255	; 0xff
 8005d16:	e017      	b.n	8005d48 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d013      	beq.n	8005d46 <osSemaphoreRelease+0x5e>
 8005d1e:	4b0c      	ldr	r3, [pc, #48]	; (8005d50 <osSemaphoreRelease+0x68>)
 8005d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	f3bf 8f6f 	isb	sy
 8005d2e:	e00a      	b.n	8005d46 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 8005d30:	2300      	movs	r3, #0
 8005d32:	2200      	movs	r2, #0
 8005d34:	2100      	movs	r1, #0
 8005d36:	6878      	ldr	r0, [r7, #4]
 8005d38:	f000 fb36 	bl	80063a8 <xQueueGenericSend>
 8005d3c:	4603      	mov	r3, r0
 8005d3e:	2b01      	cmp	r3, #1
 8005d40:	d001      	beq.n	8005d46 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 8005d42:	23ff      	movs	r3, #255	; 0xff
 8005d44:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8005d46:	68fb      	ldr	r3, [r7, #12]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	e000ed04 	.word	0xe000ed04

08005d54 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 8005d54:	b590      	push	{r4, r7, lr}
 8005d56:	b085      	sub	sp, #20
 8005d58:	af02      	add	r7, sp, #8
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d011      	beq.n	8005d8a <osMessageCreate+0x36>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	68db      	ldr	r3, [r3, #12]
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d00d      	beq.n	8005d8a <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6818      	ldr	r0, [r3, #0]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6859      	ldr	r1, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	68db      	ldr	r3, [r3, #12]
 8005d7e:	2400      	movs	r4, #0
 8005d80:	9400      	str	r4, [sp, #0]
 8005d82:	f000 f9e1 	bl	8006148 <xQueueGenericCreateStatic>
 8005d86:	4603      	mov	r3, r0
 8005d88:	e008      	b.n	8005d9c <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6818      	ldr	r0, [r3, #0]
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	685b      	ldr	r3, [r3, #4]
 8005d92:	2200      	movs	r2, #0
 8005d94:	4619      	mov	r1, r3
 8005d96:	f000 fa59 	bl	800624c <xQueueGenericCreate>
 8005d9a:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 8005d9c:	4618      	mov	r0, r3
 8005d9e:	370c      	adds	r7, #12
 8005da0:	46bd      	mov	sp, r7
 8005da2:	bd90      	pop	{r4, r7, pc}

08005da4 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b086      	sub	sp, #24
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 8005db8:	697b      	ldr	r3, [r7, #20]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <osMessagePut+0x1e>
    ticks = 1;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 8005dc2:	f7ff fe1e 	bl	8005a02 <inHandlerMode>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d018      	beq.n	8005dfe <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 8005dcc:	f107 0210 	add.w	r2, r7, #16
 8005dd0:	f107 0108 	add.w	r1, r7, #8
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	68f8      	ldr	r0, [r7, #12]
 8005dd8:	f000 fbec 	bl	80065b4 <xQueueGenericSendFromISR>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b01      	cmp	r3, #1
 8005de0:	d001      	beq.n	8005de6 <osMessagePut+0x42>
      return osErrorOS;
 8005de2:	23ff      	movs	r3, #255	; 0xff
 8005de4:	e018      	b.n	8005e18 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005de6:	693b      	ldr	r3, [r7, #16]
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d014      	beq.n	8005e16 <osMessagePut+0x72>
 8005dec:	4b0c      	ldr	r3, [pc, #48]	; (8005e20 <osMessagePut+0x7c>)
 8005dee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005df2:	601a      	str	r2, [r3, #0]
 8005df4:	f3bf 8f4f 	dsb	sy
 8005df8:	f3bf 8f6f 	isb	sy
 8005dfc:	e00b      	b.n	8005e16 <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 8005dfe:	f107 0108 	add.w	r1, r7, #8
 8005e02:	2300      	movs	r3, #0
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	68f8      	ldr	r0, [r7, #12]
 8005e08:	f000 face 	bl	80063a8 <xQueueGenericSend>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b01      	cmp	r3, #1
 8005e10:	d001      	beq.n	8005e16 <osMessagePut+0x72>
      return osErrorOS;
 8005e12:	23ff      	movs	r3, #255	; 0xff
 8005e14:	e000      	b.n	8005e18 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3718      	adds	r7, #24
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}
 8005e20:	e000ed04 	.word	0xe000ed04

08005e24 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 8005e24:	b590      	push	{r4, r7, lr}
 8005e26:	b08b      	sub	sp, #44	; 0x2c
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	60f8      	str	r0, [r7, #12]
 8005e2c:	60b9      	str	r1, [r7, #8]
 8005e2e:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 8005e30:	68bb      	ldr	r3, [r7, #8]
 8005e32:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 8005e34:	2300      	movs	r3, #0
 8005e36:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d10a      	bne.n	8005e54 <osMessageGet+0x30>
    event.status = osErrorParameter;
 8005e3e:	2380      	movs	r3, #128	; 0x80
 8005e40:	617b      	str	r3, [r7, #20]
    return event;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	461c      	mov	r4, r3
 8005e46:	f107 0314 	add.w	r3, r7, #20
 8005e4a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005e4e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8005e52:	e054      	b.n	8005efe <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 8005e54:	2300      	movs	r3, #0
 8005e56:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 8005e58:	2300      	movs	r3, #0
 8005e5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e62:	d103      	bne.n	8005e6c <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 8005e64:	f04f 33ff 	mov.w	r3, #4294967295
 8005e68:	627b      	str	r3, [r7, #36]	; 0x24
 8005e6a:	e009      	b.n	8005e80 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d006      	beq.n	8005e80 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 8005e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d101      	bne.n	8005e80 <osMessageGet+0x5c>
      ticks = 1;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 8005e80:	f7ff fdbf 	bl	8005a02 <inHandlerMode>
 8005e84:	4603      	mov	r3, r0
 8005e86:	2b00      	cmp	r3, #0
 8005e88:	d01c      	beq.n	8005ec4 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 8005e8a:	f107 0220 	add.w	r2, r7, #32
 8005e8e:	f107 0314 	add.w	r3, r7, #20
 8005e92:	3304      	adds	r3, #4
 8005e94:	4619      	mov	r1, r3
 8005e96:	68b8      	ldr	r0, [r7, #8]
 8005e98:	f000 febc 	bl	8006c14 <xQueueReceiveFromISR>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b01      	cmp	r3, #1
 8005ea0:	d102      	bne.n	8005ea8 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 8005ea2:	2310      	movs	r3, #16
 8005ea4:	617b      	str	r3, [r7, #20]
 8005ea6:	e001      	b.n	8005eac <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d01d      	beq.n	8005eee <osMessageGet+0xca>
 8005eb2:	4b15      	ldr	r3, [pc, #84]	; (8005f08 <osMessageGet+0xe4>)
 8005eb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005eb8:	601a      	str	r2, [r3, #0]
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	e014      	b.n	8005eee <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 8005ec4:	f107 0314 	add.w	r3, r7, #20
 8005ec8:	3304      	adds	r3, #4
 8005eca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ecc:	4619      	mov	r1, r3
 8005ece:	68b8      	ldr	r0, [r7, #8]
 8005ed0:	f000 fca6 	bl	8006820 <xQueueReceive>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b01      	cmp	r3, #1
 8005ed8:	d102      	bne.n	8005ee0 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 8005eda:	2310      	movs	r3, #16
 8005edc:	617b      	str	r3, [r7, #20]
 8005ede:	e006      	b.n	8005eee <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 8005ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d101      	bne.n	8005eea <osMessageGet+0xc6>
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	e000      	b.n	8005eec <osMessageGet+0xc8>
 8005eea:	2340      	movs	r3, #64	; 0x40
 8005eec:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	461c      	mov	r4, r3
 8005ef2:	f107 0314 	add.w	r3, r7, #20
 8005ef6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005efa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 8005efe:	68f8      	ldr	r0, [r7, #12]
 8005f00:	372c      	adds	r7, #44	; 0x2c
 8005f02:	46bd      	mov	sp, r7
 8005f04:	bd90      	pop	{r4, r7, pc}
 8005f06:	bf00      	nop
 8005f08:	e000ed04 	.word	0xe000ed04

08005f0c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f103 0208 	add.w	r2, r3, #8
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f04f 32ff 	mov.w	r2, #4294967295
 8005f24:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f103 0208 	add.w	r2, r3, #8
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f103 0208 	add.w	r2, r3, #8
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2200      	movs	r2, #0
 8005f3e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005f40:	bf00      	nop
 8005f42:	370c      	adds	r7, #12
 8005f44:	46bd      	mov	sp, r7
 8005f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f4a:	4770      	bx	lr

08005f4c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b083      	sub	sp, #12
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005f5a:	bf00      	nop
 8005f5c:	370c      	adds	r7, #12
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005f66:	b480      	push	{r7}
 8005f68:	b085      	sub	sp, #20
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
 8005f6e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	685b      	ldr	r3, [r3, #4]
 8005f74:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005f76:	683b      	ldr	r3, [r7, #0]
 8005f78:	68fa      	ldr	r2, [r7, #12]
 8005f7a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	689a      	ldr	r2, [r3, #8]
 8005f80:	683b      	ldr	r3, [r7, #0]
 8005f82:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	689b      	ldr	r3, [r3, #8]
 8005f88:	683a      	ldr	r2, [r7, #0]
 8005f8a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	683a      	ldr	r2, [r7, #0]
 8005f90:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	687a      	ldr	r2, [r7, #4]
 8005f96:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	1c5a      	adds	r2, r3, #1
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	601a      	str	r2, [r3, #0]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
 8005fb6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc4:	d103      	bne.n	8005fce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	60fb      	str	r3, [r7, #12]
 8005fcc:	e00c      	b.n	8005fe8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	3308      	adds	r3, #8
 8005fd2:	60fb      	str	r3, [r7, #12]
 8005fd4:	e002      	b.n	8005fdc <vListInsert+0x2e>
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	60fb      	str	r3, [r7, #12]
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	685b      	ldr	r3, [r3, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d2f6      	bcs.n	8005fd6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	685a      	ldr	r2, [r3, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	685b      	ldr	r3, [r3, #4]
 8005ff4:	683a      	ldr	r2, [r7, #0]
 8005ff6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	68fa      	ldr	r2, [r7, #12]
 8005ffc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	683a      	ldr	r2, [r7, #0]
 8006002:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	687a      	ldr	r2, [r7, #4]
 8006008:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	1c5a      	adds	r2, r3, #1
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	601a      	str	r2, [r3, #0]
}
 8006014:	bf00      	nop
 8006016:	3714      	adds	r7, #20
 8006018:	46bd      	mov	sp, r7
 800601a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601e:	4770      	bx	lr

08006020 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006020:	b480      	push	{r7}
 8006022:	b085      	sub	sp, #20
 8006024:	af00      	add	r7, sp, #0
 8006026:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	6892      	ldr	r2, [r2, #8]
 8006036:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	689b      	ldr	r3, [r3, #8]
 800603c:	687a      	ldr	r2, [r7, #4]
 800603e:	6852      	ldr	r2, [r2, #4]
 8006040:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	685b      	ldr	r3, [r3, #4]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	429a      	cmp	r2, r3
 800604a:	d103      	bne.n	8006054 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	689a      	ldr	r2, [r3, #8]
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	1e5a      	subs	r2, r3, #1
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	681b      	ldr	r3, [r3, #0]
}
 8006068:	4618      	mov	r0, r3
 800606a:	3714      	adds	r7, #20
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b084      	sub	sp, #16
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2b00      	cmp	r3, #0
 8006086:	d10c      	bne.n	80060a2 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006088:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608c:	b672      	cpsid	i
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	b662      	cpsie	i
 800609c:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800609e:	bf00      	nop
 80060a0:	e7fe      	b.n	80060a0 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 80060a2:	f002 f8e3 	bl	800826c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681a      	ldr	r2, [r3, #0]
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060ae:	68f9      	ldr	r1, [r7, #12]
 80060b0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060b2:	fb01 f303 	mul.w	r3, r1, r3
 80060b6:	441a      	add	r2, r3
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	2200      	movs	r2, #0
 80060c0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681a      	ldr	r2, [r3, #0]
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060d2:	3b01      	subs	r3, #1
 80060d4:	68f9      	ldr	r1, [r7, #12]
 80060d6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80060d8:	fb01 f303 	mul.w	r3, r1, r3
 80060dc:	441a      	add	r2, r3
 80060de:	68fb      	ldr	r3, [r7, #12]
 80060e0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	22ff      	movs	r2, #255	; 0xff
 80060e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	22ff      	movs	r2, #255	; 0xff
 80060ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80060f2:	683b      	ldr	r3, [r7, #0]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d114      	bne.n	8006122 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	691b      	ldr	r3, [r3, #16]
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d01a      	beq.n	8006136 <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	3310      	adds	r3, #16
 8006104:	4618      	mov	r0, r3
 8006106:	f001 fb9b 	bl	8007840 <xTaskRemoveFromEventList>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d012      	beq.n	8006136 <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8006110:	4b0c      	ldr	r3, [pc, #48]	; (8006144 <xQueueGenericReset+0xd0>)
 8006112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006116:	601a      	str	r2, [r3, #0]
 8006118:	f3bf 8f4f 	dsb	sy
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	e009      	b.n	8006136 <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3310      	adds	r3, #16
 8006126:	4618      	mov	r0, r3
 8006128:	f7ff fef0 	bl	8005f0c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	3324      	adds	r3, #36	; 0x24
 8006130:	4618      	mov	r0, r3
 8006132:	f7ff feeb 	bl	8005f0c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006136:	f002 f8cd 	bl	80082d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800613a:	2301      	movs	r3, #1
}
 800613c:	4618      	mov	r0, r3
 800613e:	3710      	adds	r7, #16
 8006140:	46bd      	mov	sp, r7
 8006142:	bd80      	pop	{r7, pc}
 8006144:	e000ed04 	.word	0xe000ed04

08006148 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006148:	b580      	push	{r7, lr}
 800614a:	b08e      	sub	sp, #56	; 0x38
 800614c:	af02      	add	r7, sp, #8
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d10c      	bne.n	8006176 <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800615c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006160:	b672      	cpsid	i
 8006162:	f383 8811 	msr	BASEPRI, r3
 8006166:	f3bf 8f6f 	isb	sy
 800616a:	f3bf 8f4f 	dsb	sy
 800616e:	b662      	cpsie	i
 8006170:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006172:	bf00      	nop
 8006174:	e7fe      	b.n	8006174 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d10c      	bne.n	8006196 <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800617c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006180:	b672      	cpsid	i
 8006182:	f383 8811 	msr	BASEPRI, r3
 8006186:	f3bf 8f6f 	isb	sy
 800618a:	f3bf 8f4f 	dsb	sy
 800618e:	b662      	cpsie	i
 8006190:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006192:	bf00      	nop
 8006194:	e7fe      	b.n	8006194 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d002      	beq.n	80061a2 <xQueueGenericCreateStatic+0x5a>
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d001      	beq.n	80061a6 <xQueueGenericCreateStatic+0x5e>
 80061a2:	2301      	movs	r3, #1
 80061a4:	e000      	b.n	80061a8 <xQueueGenericCreateStatic+0x60>
 80061a6:	2300      	movs	r3, #0
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d10c      	bne.n	80061c6 <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 80061ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061b0:	b672      	cpsid	i
 80061b2:	f383 8811 	msr	BASEPRI, r3
 80061b6:	f3bf 8f6f 	isb	sy
 80061ba:	f3bf 8f4f 	dsb	sy
 80061be:	b662      	cpsie	i
 80061c0:	623b      	str	r3, [r7, #32]
}
 80061c2:	bf00      	nop
 80061c4:	e7fe      	b.n	80061c4 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d102      	bne.n	80061d2 <xQueueGenericCreateStatic+0x8a>
 80061cc:	68bb      	ldr	r3, [r7, #8]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d101      	bne.n	80061d6 <xQueueGenericCreateStatic+0x8e>
 80061d2:	2301      	movs	r3, #1
 80061d4:	e000      	b.n	80061d8 <xQueueGenericCreateStatic+0x90>
 80061d6:	2300      	movs	r3, #0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d10c      	bne.n	80061f6 <xQueueGenericCreateStatic+0xae>
	__asm volatile
 80061dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e0:	b672      	cpsid	i
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	b662      	cpsie	i
 80061f0:	61fb      	str	r3, [r7, #28]
}
 80061f2:	bf00      	nop
 80061f4:	e7fe      	b.n	80061f4 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80061f6:	2348      	movs	r3, #72	; 0x48
 80061f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80061fa:	697b      	ldr	r3, [r7, #20]
 80061fc:	2b48      	cmp	r3, #72	; 0x48
 80061fe:	d00c      	beq.n	800621a <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 8006200:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006204:	b672      	cpsid	i
 8006206:	f383 8811 	msr	BASEPRI, r3
 800620a:	f3bf 8f6f 	isb	sy
 800620e:	f3bf 8f4f 	dsb	sy
 8006212:	b662      	cpsie	i
 8006214:	61bb      	str	r3, [r7, #24]
}
 8006216:	bf00      	nop
 8006218:	e7fe      	b.n	8006218 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800621a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8006220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00d      	beq.n	8006242 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8006226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006228:	2201      	movs	r2, #1
 800622a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800622e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	9300      	str	r3, [sp, #0]
 8006236:	4613      	mov	r3, r2
 8006238:	687a      	ldr	r2, [r7, #4]
 800623a:	68b9      	ldr	r1, [r7, #8]
 800623c:	68f8      	ldr	r0, [r7, #12]
 800623e:	f000 f847 	bl	80062d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006242:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006244:	4618      	mov	r0, r3
 8006246:	3730      	adds	r7, #48	; 0x30
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}

0800624c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800624c:	b580      	push	{r7, lr}
 800624e:	b08a      	sub	sp, #40	; 0x28
 8006250:	af02      	add	r7, sp, #8
 8006252:	60f8      	str	r0, [r7, #12]
 8006254:	60b9      	str	r1, [r7, #8]
 8006256:	4613      	mov	r3, r2
 8006258:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d10c      	bne.n	800627a <xQueueGenericCreate+0x2e>
	__asm volatile
 8006260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006264:	b672      	cpsid	i
 8006266:	f383 8811 	msr	BASEPRI, r3
 800626a:	f3bf 8f6f 	isb	sy
 800626e:	f3bf 8f4f 	dsb	sy
 8006272:	b662      	cpsie	i
 8006274:	613b      	str	r3, [r7, #16]
}
 8006276:	bf00      	nop
 8006278:	e7fe      	b.n	8006278 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b00      	cmp	r3, #0
 800627e:	d102      	bne.n	8006286 <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006280:	2300      	movs	r3, #0
 8006282:	61fb      	str	r3, [r7, #28]
 8006284:	e004      	b.n	8006290 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	68ba      	ldr	r2, [r7, #8]
 800628a:	fb02 f303 	mul.w	r3, r2, r3
 800628e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8006290:	69fb      	ldr	r3, [r7, #28]
 8006292:	3348      	adds	r3, #72	; 0x48
 8006294:	4618      	mov	r0, r3
 8006296:	f002 f915 	bl	80084c4 <pvPortMalloc>
 800629a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800629c:	69bb      	ldr	r3, [r7, #24]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d011      	beq.n	80062c6 <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80062a2:	69bb      	ldr	r3, [r7, #24]
 80062a4:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	3348      	adds	r3, #72	; 0x48
 80062aa:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80062ac:	69bb      	ldr	r3, [r7, #24]
 80062ae:	2200      	movs	r2, #0
 80062b0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80062b4:	79fa      	ldrb	r2, [r7, #7]
 80062b6:	69bb      	ldr	r3, [r7, #24]
 80062b8:	9300      	str	r3, [sp, #0]
 80062ba:	4613      	mov	r3, r2
 80062bc:	697a      	ldr	r2, [r7, #20]
 80062be:	68b9      	ldr	r1, [r7, #8]
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f000 f805 	bl	80062d0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80062c6:	69bb      	ldr	r3, [r7, #24]
	}
 80062c8:	4618      	mov	r0, r3
 80062ca:	3720      	adds	r7, #32
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	60f8      	str	r0, [r7, #12]
 80062d8:	60b9      	str	r1, [r7, #8]
 80062da:	607a      	str	r2, [r7, #4]
 80062dc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80062de:	68bb      	ldr	r3, [r7, #8]
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d103      	bne.n	80062ec <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80062e4:	69bb      	ldr	r3, [r7, #24]
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	601a      	str	r2, [r3, #0]
 80062ea:	e002      	b.n	80062f2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80062ec:	69bb      	ldr	r3, [r7, #24]
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	68fa      	ldr	r2, [r7, #12]
 80062f6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80062f8:	69bb      	ldr	r3, [r7, #24]
 80062fa:	68ba      	ldr	r2, [r7, #8]
 80062fc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80062fe:	2101      	movs	r1, #1
 8006300:	69b8      	ldr	r0, [r7, #24]
 8006302:	f7ff feb7 	bl	8006074 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006306:	bf00      	nop
 8006308:	3710      	adds	r7, #16
 800630a:	46bd      	mov	sp, r7
 800630c:	bd80      	pop	{r7, pc}

0800630e <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800630e:	b580      	push	{r7, lr}
 8006310:	b082      	sub	sp, #8
 8006312:	af00      	add	r7, sp, #0
 8006314:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00e      	beq.n	800633a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	2200      	movs	r2, #0
 8006320:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	2200      	movs	r2, #0
 800632c:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800632e:	2300      	movs	r3, #0
 8006330:	2200      	movs	r2, #0
 8006332:	2100      	movs	r1, #0
 8006334:	6878      	ldr	r0, [r7, #4]
 8006336:	f000 f837 	bl	80063a8 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800633a:	bf00      	nop
 800633c:	3708      	adds	r7, #8
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}

08006342 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8006342:	b580      	push	{r7, lr}
 8006344:	b086      	sub	sp, #24
 8006346:	af00      	add	r7, sp, #0
 8006348:	4603      	mov	r3, r0
 800634a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800634c:	2301      	movs	r3, #1
 800634e:	617b      	str	r3, [r7, #20]
 8006350:	2300      	movs	r3, #0
 8006352:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8006354:	79fb      	ldrb	r3, [r7, #7]
 8006356:	461a      	mov	r2, r3
 8006358:	6939      	ldr	r1, [r7, #16]
 800635a:	6978      	ldr	r0, [r7, #20]
 800635c:	f7ff ff76 	bl	800624c <xQueueGenericCreate>
 8006360:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	f7ff ffd3 	bl	800630e <prvInitialiseMutex>

		return xNewQueue;
 8006368:	68fb      	ldr	r3, [r7, #12]
	}
 800636a:	4618      	mov	r0, r3
 800636c:	3718      	adds	r7, #24
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}

08006372 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006372:	b580      	push	{r7, lr}
 8006374:	b088      	sub	sp, #32
 8006376:	af02      	add	r7, sp, #8
 8006378:	4603      	mov	r3, r0
 800637a:	6039      	str	r1, [r7, #0]
 800637c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800637e:	2301      	movs	r3, #1
 8006380:	617b      	str	r3, [r7, #20]
 8006382:	2300      	movs	r3, #0
 8006384:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8006386:	79fb      	ldrb	r3, [r7, #7]
 8006388:	9300      	str	r3, [sp, #0]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	2200      	movs	r2, #0
 800638e:	6939      	ldr	r1, [r7, #16]
 8006390:	6978      	ldr	r0, [r7, #20]
 8006392:	f7ff fed9 	bl	8006148 <xQueueGenericCreateStatic>
 8006396:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f7ff ffb8 	bl	800630e <prvInitialiseMutex>

		return xNewQueue;
 800639e:	68fb      	ldr	r3, [r7, #12]
	}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3718      	adds	r7, #24
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b08e      	sub	sp, #56	; 0x38
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80063b6:	2300      	movs	r3, #0
 80063b8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80063be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d10c      	bne.n	80063de <xQueueGenericSend+0x36>
	__asm volatile
 80063c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063c8:	b672      	cpsid	i
 80063ca:	f383 8811 	msr	BASEPRI, r3
 80063ce:	f3bf 8f6f 	isb	sy
 80063d2:	f3bf 8f4f 	dsb	sy
 80063d6:	b662      	cpsie	i
 80063d8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80063da:	bf00      	nop
 80063dc:	e7fe      	b.n	80063dc <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d103      	bne.n	80063ec <xQueueGenericSend+0x44>
 80063e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d101      	bne.n	80063f0 <xQueueGenericSend+0x48>
 80063ec:	2301      	movs	r3, #1
 80063ee:	e000      	b.n	80063f2 <xQueueGenericSend+0x4a>
 80063f0:	2300      	movs	r3, #0
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10c      	bne.n	8006410 <xQueueGenericSend+0x68>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063fa:	b672      	cpsid	i
 80063fc:	f383 8811 	msr	BASEPRI, r3
 8006400:	f3bf 8f6f 	isb	sy
 8006404:	f3bf 8f4f 	dsb	sy
 8006408:	b662      	cpsie	i
 800640a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800640c:	bf00      	nop
 800640e:	e7fe      	b.n	800640e <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006410:	683b      	ldr	r3, [r7, #0]
 8006412:	2b02      	cmp	r3, #2
 8006414:	d103      	bne.n	800641e <xQueueGenericSend+0x76>
 8006416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800641a:	2b01      	cmp	r3, #1
 800641c:	d101      	bne.n	8006422 <xQueueGenericSend+0x7a>
 800641e:	2301      	movs	r3, #1
 8006420:	e000      	b.n	8006424 <xQueueGenericSend+0x7c>
 8006422:	2300      	movs	r3, #0
 8006424:	2b00      	cmp	r3, #0
 8006426:	d10c      	bne.n	8006442 <xQueueGenericSend+0x9a>
	__asm volatile
 8006428:	f04f 0350 	mov.w	r3, #80	; 0x50
 800642c:	b672      	cpsid	i
 800642e:	f383 8811 	msr	BASEPRI, r3
 8006432:	f3bf 8f6f 	isb	sy
 8006436:	f3bf 8f4f 	dsb	sy
 800643a:	b662      	cpsie	i
 800643c:	623b      	str	r3, [r7, #32]
}
 800643e:	bf00      	nop
 8006440:	e7fe      	b.n	8006440 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006442:	f001 fbc5 	bl	8007bd0 <xTaskGetSchedulerState>
 8006446:	4603      	mov	r3, r0
 8006448:	2b00      	cmp	r3, #0
 800644a:	d102      	bne.n	8006452 <xQueueGenericSend+0xaa>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d101      	bne.n	8006456 <xQueueGenericSend+0xae>
 8006452:	2301      	movs	r3, #1
 8006454:	e000      	b.n	8006458 <xQueueGenericSend+0xb0>
 8006456:	2300      	movs	r3, #0
 8006458:	2b00      	cmp	r3, #0
 800645a:	d10c      	bne.n	8006476 <xQueueGenericSend+0xce>
	__asm volatile
 800645c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006460:	b672      	cpsid	i
 8006462:	f383 8811 	msr	BASEPRI, r3
 8006466:	f3bf 8f6f 	isb	sy
 800646a:	f3bf 8f4f 	dsb	sy
 800646e:	b662      	cpsie	i
 8006470:	61fb      	str	r3, [r7, #28]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006476:	f001 fef9 	bl	800826c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800647a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800647c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800647e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	429a      	cmp	r2, r3
 8006484:	d302      	bcc.n	800648c <xQueueGenericSend+0xe4>
 8006486:	683b      	ldr	r3, [r7, #0]
 8006488:	2b02      	cmp	r3, #2
 800648a:	d129      	bne.n	80064e0 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800648c:	683a      	ldr	r2, [r7, #0]
 800648e:	68b9      	ldr	r1, [r7, #8]
 8006490:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006492:	f000 fc5d 	bl	8006d50 <prvCopyDataToQueue>
 8006496:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800649a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800649c:	2b00      	cmp	r3, #0
 800649e:	d010      	beq.n	80064c2 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80064a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a2:	3324      	adds	r3, #36	; 0x24
 80064a4:	4618      	mov	r0, r3
 80064a6:	f001 f9cb 	bl	8007840 <xTaskRemoveFromEventList>
 80064aa:	4603      	mov	r3, r0
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d013      	beq.n	80064d8 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80064b0:	4b3f      	ldr	r3, [pc, #252]	; (80065b0 <xQueueGenericSend+0x208>)
 80064b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	f3bf 8f4f 	dsb	sy
 80064bc:	f3bf 8f6f 	isb	sy
 80064c0:	e00a      	b.n	80064d8 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d007      	beq.n	80064d8 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80064c8:	4b39      	ldr	r3, [pc, #228]	; (80065b0 <xQueueGenericSend+0x208>)
 80064ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064ce:	601a      	str	r2, [r3, #0]
 80064d0:	f3bf 8f4f 	dsb	sy
 80064d4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80064d8:	f001 fefc 	bl	80082d4 <vPortExitCritical>
				return pdPASS;
 80064dc:	2301      	movs	r3, #1
 80064de:	e063      	b.n	80065a8 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d103      	bne.n	80064ee <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80064e6:	f001 fef5 	bl	80082d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80064ea:	2300      	movs	r3, #0
 80064ec:	e05c      	b.n	80065a8 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 80064ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d106      	bne.n	8006502 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80064f4:	f107 0314 	add.w	r3, r7, #20
 80064f8:	4618      	mov	r0, r3
 80064fa:	f001 fa05 	bl	8007908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80064fe:	2301      	movs	r3, #1
 8006500:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006502:	f001 fee7 	bl	80082d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006506:	f000 ff89 	bl	800741c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800650a:	f001 feaf 	bl	800826c <vPortEnterCritical>
 800650e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006510:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006514:	b25b      	sxtb	r3, r3
 8006516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800651a:	d103      	bne.n	8006524 <xQueueGenericSend+0x17c>
 800651c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651e:	2200      	movs	r2, #0
 8006520:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006526:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800652a:	b25b      	sxtb	r3, r3
 800652c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006530:	d103      	bne.n	800653a <xQueueGenericSend+0x192>
 8006532:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800653a:	f001 fecb 	bl	80082d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800653e:	1d3a      	adds	r2, r7, #4
 8006540:	f107 0314 	add.w	r3, r7, #20
 8006544:	4611      	mov	r1, r2
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f9f4 	bl	8007934 <xTaskCheckForTimeOut>
 800654c:	4603      	mov	r3, r0
 800654e:	2b00      	cmp	r3, #0
 8006550:	d124      	bne.n	800659c <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006552:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006554:	f000 fcf4 	bl	8006f40 <prvIsQueueFull>
 8006558:	4603      	mov	r3, r0
 800655a:	2b00      	cmp	r3, #0
 800655c:	d018      	beq.n	8006590 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800655e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006560:	3310      	adds	r3, #16
 8006562:	687a      	ldr	r2, [r7, #4]
 8006564:	4611      	mov	r1, r2
 8006566:	4618      	mov	r0, r3
 8006568:	f001 f944 	bl	80077f4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800656c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800656e:	f000 fc7f 	bl	8006e70 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006572:	f000 ff61 	bl	8007438 <xTaskResumeAll>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	f47f af7c 	bne.w	8006476 <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800657e:	4b0c      	ldr	r3, [pc, #48]	; (80065b0 <xQueueGenericSend+0x208>)
 8006580:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006584:	601a      	str	r2, [r3, #0]
 8006586:	f3bf 8f4f 	dsb	sy
 800658a:	f3bf 8f6f 	isb	sy
 800658e:	e772      	b.n	8006476 <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006590:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006592:	f000 fc6d 	bl	8006e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006596:	f000 ff4f 	bl	8007438 <xTaskResumeAll>
 800659a:	e76c      	b.n	8006476 <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800659c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800659e:	f000 fc67 	bl	8006e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80065a2:	f000 ff49 	bl	8007438 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80065a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	3738      	adds	r7, #56	; 0x38
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	e000ed04 	.word	0xe000ed04

080065b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b08e      	sub	sp, #56	; 0x38
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80065c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d10c      	bne.n	80065e6 <xQueueGenericSendFromISR+0x32>
	__asm volatile
 80065cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065d0:	b672      	cpsid	i
 80065d2:	f383 8811 	msr	BASEPRI, r3
 80065d6:	f3bf 8f6f 	isb	sy
 80065da:	f3bf 8f4f 	dsb	sy
 80065de:	b662      	cpsie	i
 80065e0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80065e2:	bf00      	nop
 80065e4:	e7fe      	b.n	80065e4 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d103      	bne.n	80065f4 <xQueueGenericSendFromISR+0x40>
 80065ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d101      	bne.n	80065f8 <xQueueGenericSendFromISR+0x44>
 80065f4:	2301      	movs	r3, #1
 80065f6:	e000      	b.n	80065fa <xQueueGenericSendFromISR+0x46>
 80065f8:	2300      	movs	r3, #0
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d10c      	bne.n	8006618 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 80065fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006602:	b672      	cpsid	i
 8006604:	f383 8811 	msr	BASEPRI, r3
 8006608:	f3bf 8f6f 	isb	sy
 800660c:	f3bf 8f4f 	dsb	sy
 8006610:	b662      	cpsie	i
 8006612:	623b      	str	r3, [r7, #32]
}
 8006614:	bf00      	nop
 8006616:	e7fe      	b.n	8006616 <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006618:	683b      	ldr	r3, [r7, #0]
 800661a:	2b02      	cmp	r3, #2
 800661c:	d103      	bne.n	8006626 <xQueueGenericSendFromISR+0x72>
 800661e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006620:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006622:	2b01      	cmp	r3, #1
 8006624:	d101      	bne.n	800662a <xQueueGenericSendFromISR+0x76>
 8006626:	2301      	movs	r3, #1
 8006628:	e000      	b.n	800662c <xQueueGenericSendFromISR+0x78>
 800662a:	2300      	movs	r3, #0
 800662c:	2b00      	cmp	r3, #0
 800662e:	d10c      	bne.n	800664a <xQueueGenericSendFromISR+0x96>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	b672      	cpsid	i
 8006636:	f383 8811 	msr	BASEPRI, r3
 800663a:	f3bf 8f6f 	isb	sy
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	b662      	cpsie	i
 8006644:	61fb      	str	r3, [r7, #28]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800664a:	f001 fef7 	bl	800843c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800664e:	f3ef 8211 	mrs	r2, BASEPRI
 8006652:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006656:	b672      	cpsid	i
 8006658:	f383 8811 	msr	BASEPRI, r3
 800665c:	f3bf 8f6f 	isb	sy
 8006660:	f3bf 8f4f 	dsb	sy
 8006664:	b662      	cpsie	i
 8006666:	61ba      	str	r2, [r7, #24]
 8006668:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800666a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800666c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800666e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006670:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006674:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006676:	429a      	cmp	r2, r3
 8006678:	d302      	bcc.n	8006680 <xQueueGenericSendFromISR+0xcc>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b02      	cmp	r3, #2
 800667e:	d12c      	bne.n	80066da <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006686:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800668a:	683a      	ldr	r2, [r7, #0]
 800668c:	68b9      	ldr	r1, [r7, #8]
 800668e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006690:	f000 fb5e 	bl	8006d50 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006694:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006698:	f1b3 3fff 	cmp.w	r3, #4294967295
 800669c:	d112      	bne.n	80066c4 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d016      	beq.n	80066d4 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80066a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a8:	3324      	adds	r3, #36	; 0x24
 80066aa:	4618      	mov	r0, r3
 80066ac:	f001 f8c8 	bl	8007840 <xTaskRemoveFromEventList>
 80066b0:	4603      	mov	r3, r0
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d00e      	beq.n	80066d4 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2b00      	cmp	r3, #0
 80066ba:	d00b      	beq.n	80066d4 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2201      	movs	r2, #1
 80066c0:	601a      	str	r2, [r3, #0]
 80066c2:	e007      	b.n	80066d4 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80066c4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80066c8:	3301      	adds	r3, #1
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	b25a      	sxtb	r2, r3
 80066ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066d0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80066d4:	2301      	movs	r3, #1
 80066d6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 80066d8:	e001      	b.n	80066de <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80066da:	2300      	movs	r3, #0
 80066dc:	637b      	str	r3, [r7, #52]	; 0x34
 80066de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80066e2:	693b      	ldr	r3, [r7, #16]
 80066e4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80066e8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80066ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3738      	adds	r7, #56	; 0x38
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b08e      	sub	sp, #56	; 0x38
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10c      	bne.n	8006722 <xQueueGiveFromISR+0x2e>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800670c:	b672      	cpsid	i
 800670e:	f383 8811 	msr	BASEPRI, r3
 8006712:	f3bf 8f6f 	isb	sy
 8006716:	f3bf 8f4f 	dsb	sy
 800671a:	b662      	cpsie	i
 800671c:	623b      	str	r3, [r7, #32]
}
 800671e:	bf00      	nop
 8006720:	e7fe      	b.n	8006720 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006726:	2b00      	cmp	r3, #0
 8006728:	d00c      	beq.n	8006744 <xQueueGiveFromISR+0x50>
	__asm volatile
 800672a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800672e:	b672      	cpsid	i
 8006730:	f383 8811 	msr	BASEPRI, r3
 8006734:	f3bf 8f6f 	isb	sy
 8006738:	f3bf 8f4f 	dsb	sy
 800673c:	b662      	cpsie	i
 800673e:	61fb      	str	r3, [r7, #28]
}
 8006740:	bf00      	nop
 8006742:	e7fe      	b.n	8006742 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d103      	bne.n	8006754 <xQueueGiveFromISR+0x60>
 800674c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800674e:	689b      	ldr	r3, [r3, #8]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d101      	bne.n	8006758 <xQueueGiveFromISR+0x64>
 8006754:	2301      	movs	r3, #1
 8006756:	e000      	b.n	800675a <xQueueGiveFromISR+0x66>
 8006758:	2300      	movs	r3, #0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10c      	bne.n	8006778 <xQueueGiveFromISR+0x84>
	__asm volatile
 800675e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006762:	b672      	cpsid	i
 8006764:	f383 8811 	msr	BASEPRI, r3
 8006768:	f3bf 8f6f 	isb	sy
 800676c:	f3bf 8f4f 	dsb	sy
 8006770:	b662      	cpsie	i
 8006772:	61bb      	str	r3, [r7, #24]
}
 8006774:	bf00      	nop
 8006776:	e7fe      	b.n	8006776 <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006778:	f001 fe60 	bl	800843c <vPortValidateInterruptPriority>
	__asm volatile
 800677c:	f3ef 8211 	mrs	r2, BASEPRI
 8006780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006784:	b672      	cpsid	i
 8006786:	f383 8811 	msr	BASEPRI, r3
 800678a:	f3bf 8f6f 	isb	sy
 800678e:	f3bf 8f4f 	dsb	sy
 8006792:	b662      	cpsie	i
 8006794:	617a      	str	r2, [r7, #20]
 8006796:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006798:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800679a:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800679c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800679e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067a0:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80067a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80067a6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d22b      	bcs.n	8006804 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80067ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ae:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80067b2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80067b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80067b8:	1c5a      	adds	r2, r3, #1
 80067ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067bc:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80067be:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80067c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067c6:	d112      	bne.n	80067ee <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80067c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d016      	beq.n	80067fe <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80067d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d2:	3324      	adds	r3, #36	; 0x24
 80067d4:	4618      	mov	r0, r3
 80067d6:	f001 f833 	bl	8007840 <xTaskRemoveFromEventList>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d00e      	beq.n	80067fe <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80067e0:	683b      	ldr	r3, [r7, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d00b      	beq.n	80067fe <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80067e6:	683b      	ldr	r3, [r7, #0]
 80067e8:	2201      	movs	r2, #1
 80067ea:	601a      	str	r2, [r3, #0]
 80067ec:	e007      	b.n	80067fe <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80067ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80067f2:	3301      	adds	r3, #1
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	b25a      	sxtb	r2, r3
 80067f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067fa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80067fe:	2301      	movs	r3, #1
 8006800:	637b      	str	r3, [r7, #52]	; 0x34
 8006802:	e001      	b.n	8006808 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006804:	2300      	movs	r3, #0
 8006806:	637b      	str	r3, [r7, #52]	; 0x34
 8006808:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800680a:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	f383 8811 	msr	BASEPRI, r3
}
 8006812:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006814:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006816:	4618      	mov	r0, r3
 8006818:	3738      	adds	r7, #56	; 0x38
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
	...

08006820 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08c      	sub	sp, #48	; 0x30
 8006824:	af00      	add	r7, sp, #0
 8006826:	60f8      	str	r0, [r7, #12]
 8006828:	60b9      	str	r1, [r7, #8]
 800682a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800682c:	2300      	movs	r3, #0
 800682e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006836:	2b00      	cmp	r3, #0
 8006838:	d10c      	bne.n	8006854 <xQueueReceive+0x34>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	b672      	cpsid	i
 8006840:	f383 8811 	msr	BASEPRI, r3
 8006844:	f3bf 8f6f 	isb	sy
 8006848:	f3bf 8f4f 	dsb	sy
 800684c:	b662      	cpsie	i
 800684e:	623b      	str	r3, [r7, #32]
}
 8006850:	bf00      	nop
 8006852:	e7fe      	b.n	8006852 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <xQueueReceive+0x42>
 800685a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800685c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	d101      	bne.n	8006866 <xQueueReceive+0x46>
 8006862:	2301      	movs	r3, #1
 8006864:	e000      	b.n	8006868 <xQueueReceive+0x48>
 8006866:	2300      	movs	r3, #0
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10c      	bne.n	8006886 <xQueueReceive+0x66>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	b672      	cpsid	i
 8006872:	f383 8811 	msr	BASEPRI, r3
 8006876:	f3bf 8f6f 	isb	sy
 800687a:	f3bf 8f4f 	dsb	sy
 800687e:	b662      	cpsie	i
 8006880:	61fb      	str	r3, [r7, #28]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006886:	f001 f9a3 	bl	8007bd0 <xTaskGetSchedulerState>
 800688a:	4603      	mov	r3, r0
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <xQueueReceive+0x76>
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	2b00      	cmp	r3, #0
 8006894:	d101      	bne.n	800689a <xQueueReceive+0x7a>
 8006896:	2301      	movs	r3, #1
 8006898:	e000      	b.n	800689c <xQueueReceive+0x7c>
 800689a:	2300      	movs	r3, #0
 800689c:	2b00      	cmp	r3, #0
 800689e:	d10c      	bne.n	80068ba <xQueueReceive+0x9a>
	__asm volatile
 80068a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068a4:	b672      	cpsid	i
 80068a6:	f383 8811 	msr	BASEPRI, r3
 80068aa:	f3bf 8f6f 	isb	sy
 80068ae:	f3bf 8f4f 	dsb	sy
 80068b2:	b662      	cpsie	i
 80068b4:	61bb      	str	r3, [r7, #24]
}
 80068b6:	bf00      	nop
 80068b8:	e7fe      	b.n	80068b8 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80068ba:	f001 fcd7 	bl	800826c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80068be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068c2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80068c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d01f      	beq.n	800690a <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80068ca:	68b9      	ldr	r1, [r7, #8]
 80068cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80068ce:	f000 faa9 	bl	8006e24 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	1e5a      	subs	r2, r3, #1
 80068d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068dc:	691b      	ldr	r3, [r3, #16]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00f      	beq.n	8006902 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068e4:	3310      	adds	r3, #16
 80068e6:	4618      	mov	r0, r3
 80068e8:	f000 ffaa 	bl	8007840 <xTaskRemoveFromEventList>
 80068ec:	4603      	mov	r3, r0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d007      	beq.n	8006902 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80068f2:	4b3d      	ldr	r3, [pc, #244]	; (80069e8 <xQueueReceive+0x1c8>)
 80068f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f8:	601a      	str	r2, [r3, #0]
 80068fa:	f3bf 8f4f 	dsb	sy
 80068fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006902:	f001 fce7 	bl	80082d4 <vPortExitCritical>
				return pdPASS;
 8006906:	2301      	movs	r3, #1
 8006908:	e069      	b.n	80069de <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d103      	bne.n	8006918 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006910:	f001 fce0 	bl	80082d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006914:	2300      	movs	r3, #0
 8006916:	e062      	b.n	80069de <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800691a:	2b00      	cmp	r3, #0
 800691c:	d106      	bne.n	800692c <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800691e:	f107 0310 	add.w	r3, r7, #16
 8006922:	4618      	mov	r0, r3
 8006924:	f000 fff0 	bl	8007908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006928:	2301      	movs	r3, #1
 800692a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800692c:	f001 fcd2 	bl	80082d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006930:	f000 fd74 	bl	800741c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006934:	f001 fc9a 	bl	800826c <vPortEnterCritical>
 8006938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800693a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800693e:	b25b      	sxtb	r3, r3
 8006940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006944:	d103      	bne.n	800694e <xQueueReceive+0x12e>
 8006946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006948:	2200      	movs	r2, #0
 800694a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800694e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006950:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006954:	b25b      	sxtb	r3, r3
 8006956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800695a:	d103      	bne.n	8006964 <xQueueReceive+0x144>
 800695c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800695e:	2200      	movs	r2, #0
 8006960:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006964:	f001 fcb6 	bl	80082d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006968:	1d3a      	adds	r2, r7, #4
 800696a:	f107 0310 	add.w	r3, r7, #16
 800696e:	4611      	mov	r1, r2
 8006970:	4618      	mov	r0, r3
 8006972:	f000 ffdf 	bl	8007934 <xTaskCheckForTimeOut>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d123      	bne.n	80069c4 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800697c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800697e:	f000 fac9 	bl	8006f14 <prvIsQueueEmpty>
 8006982:	4603      	mov	r3, r0
 8006984:	2b00      	cmp	r3, #0
 8006986:	d017      	beq.n	80069b8 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006988:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800698a:	3324      	adds	r3, #36	; 0x24
 800698c:	687a      	ldr	r2, [r7, #4]
 800698e:	4611      	mov	r1, r2
 8006990:	4618      	mov	r0, r3
 8006992:	f000 ff2f 	bl	80077f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006998:	f000 fa6a 	bl	8006e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800699c:	f000 fd4c 	bl	8007438 <xTaskResumeAll>
 80069a0:	4603      	mov	r3, r0
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d189      	bne.n	80068ba <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <xQueueReceive+0x1c8>)
 80069a8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069ac:	601a      	str	r2, [r3, #0]
 80069ae:	f3bf 8f4f 	dsb	sy
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	e780      	b.n	80068ba <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80069b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069ba:	f000 fa59 	bl	8006e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80069be:	f000 fd3b 	bl	8007438 <xTaskResumeAll>
 80069c2:	e77a      	b.n	80068ba <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80069c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069c6:	f000 fa53 	bl	8006e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80069ca:	f000 fd35 	bl	8007438 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80069ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80069d0:	f000 faa0 	bl	8006f14 <prvIsQueueEmpty>
 80069d4:	4603      	mov	r3, r0
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f43f af6f 	beq.w	80068ba <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80069dc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80069de:	4618      	mov	r0, r3
 80069e0:	3730      	adds	r7, #48	; 0x30
 80069e2:	46bd      	mov	sp, r7
 80069e4:	bd80      	pop	{r7, pc}
 80069e6:	bf00      	nop
 80069e8:	e000ed04 	.word	0xe000ed04

080069ec <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b08e      	sub	sp, #56	; 0x38
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80069f6:	2300      	movs	r3, #0
 80069f8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80069fe:	2300      	movs	r3, #0
 8006a00:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d10c      	bne.n	8006a22 <xQueueSemaphoreTake+0x36>
	__asm volatile
 8006a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0c:	b672      	cpsid	i
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	b662      	cpsie	i
 8006a1c:	623b      	str	r3, [r7, #32]
}
 8006a1e:	bf00      	nop
 8006a20:	e7fe      	b.n	8006a20 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d00c      	beq.n	8006a44 <xQueueSemaphoreTake+0x58>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	b672      	cpsid	i
 8006a30:	f383 8811 	msr	BASEPRI, r3
 8006a34:	f3bf 8f6f 	isb	sy
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	b662      	cpsie	i
 8006a3e:	61fb      	str	r3, [r7, #28]
}
 8006a40:	bf00      	nop
 8006a42:	e7fe      	b.n	8006a42 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006a44:	f001 f8c4 	bl	8007bd0 <xTaskGetSchedulerState>
 8006a48:	4603      	mov	r3, r0
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d102      	bne.n	8006a54 <xQueueSemaphoreTake+0x68>
 8006a4e:	683b      	ldr	r3, [r7, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <xQueueSemaphoreTake+0x6c>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <xQueueSemaphoreTake+0x6e>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10c      	bne.n	8006a78 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8006a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a62:	b672      	cpsid	i
 8006a64:	f383 8811 	msr	BASEPRI, r3
 8006a68:	f3bf 8f6f 	isb	sy
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	b662      	cpsie	i
 8006a72:	61bb      	str	r3, [r7, #24]
}
 8006a74:	bf00      	nop
 8006a76:	e7fe      	b.n	8006a76 <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006a78:	f001 fbf8 	bl	800826c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006a82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d024      	beq.n	8006ad2 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006a88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a8a:	1e5a      	subs	r2, r3, #1
 8006a8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d104      	bne.n	8006aa2 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006a98:	f001 fa60 	bl	8007f5c <pvTaskIncrementMutexHeldCount>
 8006a9c:	4602      	mov	r2, r0
 8006a9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aa4:	691b      	ldr	r3, [r3, #16]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d00f      	beq.n	8006aca <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006aaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006aac:	3310      	adds	r3, #16
 8006aae:	4618      	mov	r0, r3
 8006ab0:	f000 fec6 	bl	8007840 <xTaskRemoveFromEventList>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d007      	beq.n	8006aca <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006aba:	4b55      	ldr	r3, [pc, #340]	; (8006c10 <xQueueSemaphoreTake+0x224>)
 8006abc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ac0:	601a      	str	r2, [r3, #0]
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006aca:	f001 fc03 	bl	80082d4 <vPortExitCritical>
				return pdPASS;
 8006ace:	2301      	movs	r3, #1
 8006ad0:	e099      	b.n	8006c06 <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d113      	bne.n	8006b00 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00c      	beq.n	8006af8 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ae2:	b672      	cpsid	i
 8006ae4:	f383 8811 	msr	BASEPRI, r3
 8006ae8:	f3bf 8f6f 	isb	sy
 8006aec:	f3bf 8f4f 	dsb	sy
 8006af0:	b662      	cpsie	i
 8006af2:	617b      	str	r3, [r7, #20]
}
 8006af4:	bf00      	nop
 8006af6:	e7fe      	b.n	8006af6 <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006af8:	f001 fbec 	bl	80082d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006afc:	2300      	movs	r3, #0
 8006afe:	e082      	b.n	8006c06 <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006b00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d106      	bne.n	8006b14 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006b06:	f107 030c 	add.w	r3, r7, #12
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	f000 fefc 	bl	8007908 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006b10:	2301      	movs	r3, #1
 8006b12:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006b14:	f001 fbde 	bl	80082d4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006b18:	f000 fc80 	bl	800741c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006b1c:	f001 fba6 	bl	800826c <vPortEnterCritical>
 8006b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b22:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006b26:	b25b      	sxtb	r3, r3
 8006b28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b2c:	d103      	bne.n	8006b36 <xQueueSemaphoreTake+0x14a>
 8006b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b30:	2200      	movs	r2, #0
 8006b32:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b38:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006b3c:	b25b      	sxtb	r3, r3
 8006b3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b42:	d103      	bne.n	8006b4c <xQueueSemaphoreTake+0x160>
 8006b44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b46:	2200      	movs	r2, #0
 8006b48:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006b4c:	f001 fbc2 	bl	80082d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006b50:	463a      	mov	r2, r7
 8006b52:	f107 030c 	add.w	r3, r7, #12
 8006b56:	4611      	mov	r1, r2
 8006b58:	4618      	mov	r0, r3
 8006b5a:	f000 feeb 	bl	8007934 <xTaskCheckForTimeOut>
 8006b5e:	4603      	mov	r3, r0
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d132      	bne.n	8006bca <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006b64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b66:	f000 f9d5 	bl	8006f14 <prvIsQueueEmpty>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d026      	beq.n	8006bbe <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006b70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d109      	bne.n	8006b8c <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 8006b78:	f001 fb78 	bl	800826c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b7e:	689b      	ldr	r3, [r3, #8]
 8006b80:	4618      	mov	r0, r3
 8006b82:	f001 f843 	bl	8007c0c <xTaskPriorityInherit>
 8006b86:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8006b88:	f001 fba4 	bl	80082d4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006b8e:	3324      	adds	r3, #36	; 0x24
 8006b90:	683a      	ldr	r2, [r7, #0]
 8006b92:	4611      	mov	r1, r2
 8006b94:	4618      	mov	r0, r3
 8006b96:	f000 fe2d 	bl	80077f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006b9a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006b9c:	f000 f968 	bl	8006e70 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ba0:	f000 fc4a 	bl	8007438 <xTaskResumeAll>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	f47f af66 	bne.w	8006a78 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8006bac:	4b18      	ldr	r3, [pc, #96]	; (8006c10 <xQueueSemaphoreTake+0x224>)
 8006bae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bb2:	601a      	str	r2, [r3, #0]
 8006bb4:	f3bf 8f4f 	dsb	sy
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	e75c      	b.n	8006a78 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8006bbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bc0:	f000 f956 	bl	8006e70 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006bc4:	f000 fc38 	bl	8007438 <xTaskResumeAll>
 8006bc8:	e756      	b.n	8006a78 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8006bca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bcc:	f000 f950 	bl	8006e70 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006bd0:	f000 fc32 	bl	8007438 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006bd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bd6:	f000 f99d 	bl	8006f14 <prvIsQueueEmpty>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	f43f af4b 	beq.w	8006a78 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8006be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d00d      	beq.n	8006c04 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 8006be8:	f001 fb40 	bl	800826c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8006bec:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8006bee:	f000 f897 	bl	8006d20 <prvGetDisinheritPriorityAfterTimeout>
 8006bf2:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8006bf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bf6:	689b      	ldr	r3, [r3, #8]
 8006bf8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006bfa:	4618      	mov	r0, r3
 8006bfc:	f001 f910 	bl	8007e20 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8006c00:	f001 fb68 	bl	80082d4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006c04:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3738      	adds	r7, #56	; 0x38
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	e000ed04 	.word	0xe000ed04

08006c14 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	b08e      	sub	sp, #56	; 0x38
 8006c18:	af00      	add	r7, sp, #0
 8006c1a:	60f8      	str	r0, [r7, #12]
 8006c1c:	60b9      	str	r1, [r7, #8]
 8006c1e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10c      	bne.n	8006c44 <xQueueReceiveFromISR+0x30>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	b672      	cpsid	i
 8006c30:	f383 8811 	msr	BASEPRI, r3
 8006c34:	f3bf 8f6f 	isb	sy
 8006c38:	f3bf 8f4f 	dsb	sy
 8006c3c:	b662      	cpsie	i
 8006c3e:	623b      	str	r3, [r7, #32]
}
 8006c40:	bf00      	nop
 8006c42:	e7fe      	b.n	8006c42 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006c44:	68bb      	ldr	r3, [r7, #8]
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d103      	bne.n	8006c52 <xQueueReceiveFromISR+0x3e>
 8006c4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <xQueueReceiveFromISR+0x42>
 8006c52:	2301      	movs	r3, #1
 8006c54:	e000      	b.n	8006c58 <xQueueReceiveFromISR+0x44>
 8006c56:	2300      	movs	r3, #0
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d10c      	bne.n	8006c76 <xQueueReceiveFromISR+0x62>
	__asm volatile
 8006c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c60:	b672      	cpsid	i
 8006c62:	f383 8811 	msr	BASEPRI, r3
 8006c66:	f3bf 8f6f 	isb	sy
 8006c6a:	f3bf 8f4f 	dsb	sy
 8006c6e:	b662      	cpsie	i
 8006c70:	61fb      	str	r3, [r7, #28]
}
 8006c72:	bf00      	nop
 8006c74:	e7fe      	b.n	8006c74 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c76:	f001 fbe1 	bl	800843c <vPortValidateInterruptPriority>
	__asm volatile
 8006c7a:	f3ef 8211 	mrs	r2, BASEPRI
 8006c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c82:	b672      	cpsid	i
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	b662      	cpsie	i
 8006c92:	61ba      	str	r2, [r7, #24]
 8006c94:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8006c96:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006c98:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c9e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006ca0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d02f      	beq.n	8006d06 <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8006ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ca8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006cb0:	68b9      	ldr	r1, [r7, #8]
 8006cb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cb4:	f000 f8b6 	bl	8006e24 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006cb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cba:	1e5a      	subs	r2, r3, #1
 8006cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cbe:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006cc0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cc8:	d112      	bne.n	8006cf0 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006cca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ccc:	691b      	ldr	r3, [r3, #16]
 8006cce:	2b00      	cmp	r3, #0
 8006cd0:	d016      	beq.n	8006d00 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cd4:	3310      	adds	r3, #16
 8006cd6:	4618      	mov	r0, r3
 8006cd8:	f000 fdb2 	bl	8007840 <xTaskRemoveFromEventList>
 8006cdc:	4603      	mov	r3, r0
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d00e      	beq.n	8006d00 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d00b      	beq.n	8006d00 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	2201      	movs	r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
 8006cee:	e007      	b.n	8006d00 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006cf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006cf4:	3301      	adds	r3, #1
 8006cf6:	b2db      	uxtb	r3, r3
 8006cf8:	b25a      	sxtb	r2, r3
 8006cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cfc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006d00:	2301      	movs	r3, #1
 8006d02:	637b      	str	r3, [r7, #52]	; 0x34
 8006d04:	e001      	b.n	8006d0a <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 8006d06:	2300      	movs	r3, #0
 8006d08:	637b      	str	r3, [r7, #52]	; 0x34
 8006d0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d0c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006d0e:	693b      	ldr	r3, [r7, #16]
 8006d10:	f383 8811 	msr	BASEPRI, r3
}
 8006d14:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d18:	4618      	mov	r0, r3
 8006d1a:	3738      	adds	r7, #56	; 0x38
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}

08006d20 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8006d20:	b480      	push	{r7}
 8006d22:	b085      	sub	sp, #20
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d006      	beq.n	8006d3e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	f1c3 0307 	rsb	r3, r3, #7
 8006d3a:	60fb      	str	r3, [r7, #12]
 8006d3c:	e001      	b.n	8006d42 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8006d3e:	2300      	movs	r3, #0
 8006d40:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8006d42:	68fb      	ldr	r3, [r7, #12]
	}
 8006d44:	4618      	mov	r0, r3
 8006d46:	3714      	adds	r7, #20
 8006d48:	46bd      	mov	sp, r7
 8006d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4e:	4770      	bx	lr

08006d50 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006d50:	b580      	push	{r7, lr}
 8006d52:	b086      	sub	sp, #24
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d64:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10d      	bne.n	8006d8a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d14d      	bne.n	8006e12 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	4618      	mov	r0, r3
 8006d7c:	f000 ffc6 	bl	8007d0c <xTaskPriorityDisinherit>
 8006d80:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2200      	movs	r2, #0
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	e043      	b.n	8006e12 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d119      	bne.n	8006dc4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6858      	ldr	r0, [r3, #4]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d98:	461a      	mov	r2, r3
 8006d9a:	68b9      	ldr	r1, [r7, #8]
 8006d9c:	f00f fb2d 	bl	80163fa <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	685a      	ldr	r2, [r3, #4]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da8:	441a      	add	r2, r3
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685a      	ldr	r2, [r3, #4]
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	689b      	ldr	r3, [r3, #8]
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d32b      	bcc.n	8006e12 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	605a      	str	r2, [r3, #4]
 8006dc2:	e026      	b.n	8006e12 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	68d8      	ldr	r0, [r3, #12]
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006dcc:	461a      	mov	r2, r3
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	f00f fb13 	bl	80163fa <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	68da      	ldr	r2, [r3, #12]
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ddc:	425b      	negs	r3, r3
 8006dde:	441a      	add	r2, r3
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	68da      	ldr	r2, [r3, #12]
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	d207      	bcs.n	8006e00 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	689a      	ldr	r2, [r3, #8]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006df8:	425b      	negs	r3, r3
 8006dfa:	441a      	add	r2, r3
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d105      	bne.n	8006e12 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e06:	693b      	ldr	r3, [r7, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d002      	beq.n	8006e12 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006e0c:	693b      	ldr	r3, [r7, #16]
 8006e0e:	3b01      	subs	r3, #1
 8006e10:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	1c5a      	adds	r2, r3, #1
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8006e1a:	697b      	ldr	r3, [r7, #20]
}
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	3718      	adds	r7, #24
 8006e20:	46bd      	mov	sp, r7
 8006e22:	bd80      	pop	{r7, pc}

08006e24 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006e24:	b580      	push	{r7, lr}
 8006e26:	b082      	sub	sp, #8
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	6078      	str	r0, [r7, #4]
 8006e2c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d018      	beq.n	8006e68 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	68da      	ldr	r2, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	441a      	add	r2, r3
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68da      	ldr	r2, [r3, #12]
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d303      	bcc.n	8006e58 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	68d9      	ldr	r1, [r3, #12]
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e60:	461a      	mov	r2, r3
 8006e62:	6838      	ldr	r0, [r7, #0]
 8006e64:	f00f fac9 	bl	80163fa <memcpy>
	}
}
 8006e68:	bf00      	nop
 8006e6a:	3708      	adds	r7, #8
 8006e6c:	46bd      	mov	sp, r7
 8006e6e:	bd80      	pop	{r7, pc}

08006e70 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b084      	sub	sp, #16
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006e78:	f001 f9f8 	bl	800826c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e82:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006e84:	e011      	b.n	8006eaa <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d012      	beq.n	8006eb4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	3324      	adds	r3, #36	; 0x24
 8006e92:	4618      	mov	r0, r3
 8006e94:	f000 fcd4 	bl	8007840 <xTaskRemoveFromEventList>
 8006e98:	4603      	mov	r3, r0
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d001      	beq.n	8006ea2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006e9e:	f000 fdaf 	bl	8007a00 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006ea2:	7bfb      	ldrb	r3, [r7, #15]
 8006ea4:	3b01      	subs	r3, #1
 8006ea6:	b2db      	uxtb	r3, r3
 8006ea8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006eaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	dce9      	bgt.n	8006e86 <prvUnlockQueue+0x16>
 8006eb2:	e000      	b.n	8006eb6 <prvUnlockQueue+0x46>
					break;
 8006eb4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006ebe:	f001 fa09 	bl	80082d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006ec2:	f001 f9d3 	bl	800826c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006ecc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ece:	e011      	b.n	8006ef4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	691b      	ldr	r3, [r3, #16]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d012      	beq.n	8006efe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	3310      	adds	r3, #16
 8006edc:	4618      	mov	r0, r3
 8006ede:	f000 fcaf 	bl	8007840 <xTaskRemoveFromEventList>
 8006ee2:	4603      	mov	r3, r0
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d001      	beq.n	8006eec <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006ee8:	f000 fd8a 	bl	8007a00 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006eec:	7bbb      	ldrb	r3, [r7, #14]
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b2db      	uxtb	r3, r3
 8006ef2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006ef4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	dce9      	bgt.n	8006ed0 <prvUnlockQueue+0x60>
 8006efc:	e000      	b.n	8006f00 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006efe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	22ff      	movs	r2, #255	; 0xff
 8006f04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8006f08:	f001 f9e4 	bl	80082d4 <vPortExitCritical>
}
 8006f0c:	bf00      	nop
 8006f0e:	3710      	adds	r7, #16
 8006f10:	46bd      	mov	sp, r7
 8006f12:	bd80      	pop	{r7, pc}

08006f14 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006f14:	b580      	push	{r7, lr}
 8006f16:	b084      	sub	sp, #16
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f1c:	f001 f9a6 	bl	800826c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d102      	bne.n	8006f2e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	60fb      	str	r3, [r7, #12]
 8006f2c:	e001      	b.n	8006f32 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006f2e:	2300      	movs	r3, #0
 8006f30:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f32:	f001 f9cf 	bl	80082d4 <vPortExitCritical>

	return xReturn;
 8006f36:	68fb      	ldr	r3, [r7, #12]
}
 8006f38:	4618      	mov	r0, r3
 8006f3a:	3710      	adds	r7, #16
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	bd80      	pop	{r7, pc}

08006f40 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b084      	sub	sp, #16
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006f48:	f001 f990 	bl	800826c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d102      	bne.n	8006f5e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006f58:	2301      	movs	r3, #1
 8006f5a:	60fb      	str	r3, [r7, #12]
 8006f5c:	e001      	b.n	8006f62 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006f5e:	2300      	movs	r3, #0
 8006f60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006f62:	f001 f9b7 	bl	80082d4 <vPortExitCritical>

	return xReturn;
 8006f66:	68fb      	ldr	r3, [r7, #12]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3710      	adds	r7, #16
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd80      	pop	{r7, pc}

08006f70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b08e      	sub	sp, #56	; 0x38
 8006f74:	af04      	add	r7, sp, #16
 8006f76:	60f8      	str	r0, [r7, #12]
 8006f78:	60b9      	str	r1, [r7, #8]
 8006f7a:	607a      	str	r2, [r7, #4]
 8006f7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006f7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d10c      	bne.n	8006f9e <xTaskCreateStatic+0x2e>
	__asm volatile
 8006f84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f88:	b672      	cpsid	i
 8006f8a:	f383 8811 	msr	BASEPRI, r3
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f3bf 8f4f 	dsb	sy
 8006f96:	b662      	cpsie	i
 8006f98:	623b      	str	r3, [r7, #32]
}
 8006f9a:	bf00      	nop
 8006f9c:	e7fe      	b.n	8006f9c <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8006f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d10c      	bne.n	8006fbe <xTaskCreateStatic+0x4e>
	__asm volatile
 8006fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fa8:	b672      	cpsid	i
 8006faa:	f383 8811 	msr	BASEPRI, r3
 8006fae:	f3bf 8f6f 	isb	sy
 8006fb2:	f3bf 8f4f 	dsb	sy
 8006fb6:	b662      	cpsie	i
 8006fb8:	61fb      	str	r3, [r7, #28]
}
 8006fba:	bf00      	nop
 8006fbc:	e7fe      	b.n	8006fbc <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006fbe:	23b4      	movs	r3, #180	; 0xb4
 8006fc0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	2bb4      	cmp	r3, #180	; 0xb4
 8006fc6:	d00c      	beq.n	8006fe2 <xTaskCreateStatic+0x72>
	__asm volatile
 8006fc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fcc:	b672      	cpsid	i
 8006fce:	f383 8811 	msr	BASEPRI, r3
 8006fd2:	f3bf 8f6f 	isb	sy
 8006fd6:	f3bf 8f4f 	dsb	sy
 8006fda:	b662      	cpsie	i
 8006fdc:	61bb      	str	r3, [r7, #24]
}
 8006fde:	bf00      	nop
 8006fe0:	e7fe      	b.n	8006fe0 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006fe2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d01e      	beq.n	8007028 <xTaskCreateStatic+0xb8>
 8006fea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d01b      	beq.n	8007028 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8006ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ff6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ff8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ffc:	2202      	movs	r2, #2
 8006ffe:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007002:	2300      	movs	r3, #0
 8007004:	9303      	str	r3, [sp, #12]
 8007006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007008:	9302      	str	r3, [sp, #8]
 800700a:	f107 0314 	add.w	r3, r7, #20
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007012:	9300      	str	r3, [sp, #0]
 8007014:	683b      	ldr	r3, [r7, #0]
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	68b9      	ldr	r1, [r7, #8]
 800701a:	68f8      	ldr	r0, [r7, #12]
 800701c:	f000 f850 	bl	80070c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007020:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007022:	f000 f8ed 	bl	8007200 <prvAddNewTaskToReadyList>
 8007026:	e001      	b.n	800702c <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 8007028:	2300      	movs	r3, #0
 800702a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800702c:	697b      	ldr	r3, [r7, #20]
	}
 800702e:	4618      	mov	r0, r3
 8007030:	3728      	adds	r7, #40	; 0x28
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007036:	b580      	push	{r7, lr}
 8007038:	b08c      	sub	sp, #48	; 0x30
 800703a:	af04      	add	r7, sp, #16
 800703c:	60f8      	str	r0, [r7, #12]
 800703e:	60b9      	str	r1, [r7, #8]
 8007040:	603b      	str	r3, [r7, #0]
 8007042:	4613      	mov	r3, r2
 8007044:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007046:	88fb      	ldrh	r3, [r7, #6]
 8007048:	009b      	lsls	r3, r3, #2
 800704a:	4618      	mov	r0, r3
 800704c:	f001 fa3a 	bl	80084c4 <pvPortMalloc>
 8007050:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007052:	697b      	ldr	r3, [r7, #20]
 8007054:	2b00      	cmp	r3, #0
 8007056:	d00e      	beq.n	8007076 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007058:	20b4      	movs	r0, #180	; 0xb4
 800705a:	f001 fa33 	bl	80084c4 <pvPortMalloc>
 800705e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8007060:	69fb      	ldr	r3, [r7, #28]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d003      	beq.n	800706e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007066:	69fb      	ldr	r3, [r7, #28]
 8007068:	697a      	ldr	r2, [r7, #20]
 800706a:	631a      	str	r2, [r3, #48]	; 0x30
 800706c:	e005      	b.n	800707a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800706e:	6978      	ldr	r0, [r7, #20]
 8007070:	f001 faf2 	bl	8008658 <vPortFree>
 8007074:	e001      	b.n	800707a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007076:	2300      	movs	r3, #0
 8007078:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d017      	beq.n	80070b0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8007080:	69fb      	ldr	r3, [r7, #28]
 8007082:	2200      	movs	r2, #0
 8007084:	f883 20b1 	strb.w	r2, [r3, #177]	; 0xb1
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007088:	88fa      	ldrh	r2, [r7, #6]
 800708a:	2300      	movs	r3, #0
 800708c:	9303      	str	r3, [sp, #12]
 800708e:	69fb      	ldr	r3, [r7, #28]
 8007090:	9302      	str	r3, [sp, #8]
 8007092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007094:	9301      	str	r3, [sp, #4]
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	9300      	str	r3, [sp, #0]
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	68b9      	ldr	r1, [r7, #8]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 f80e 	bl	80070c0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80070a4:	69f8      	ldr	r0, [r7, #28]
 80070a6:	f000 f8ab 	bl	8007200 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80070aa:	2301      	movs	r3, #1
 80070ac:	61bb      	str	r3, [r7, #24]
 80070ae:	e002      	b.n	80070b6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80070b0:	f04f 33ff 	mov.w	r3, #4294967295
 80070b4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80070b6:	69bb      	ldr	r3, [r7, #24]
	}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3720      	adds	r7, #32
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	60b9      	str	r1, [r7, #8]
 80070ca:	607a      	str	r2, [r7, #4]
 80070cc:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80070ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80070d2:	6879      	ldr	r1, [r7, #4]
 80070d4:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80070d8:	440b      	add	r3, r1
 80070da:	009b      	lsls	r3, r3, #2
 80070dc:	4413      	add	r3, r2
 80070de:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	f023 0307 	bic.w	r3, r3, #7
 80070e6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80070e8:	69bb      	ldr	r3, [r7, #24]
 80070ea:	f003 0307 	and.w	r3, r3, #7
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d00c      	beq.n	800710c <prvInitialiseNewTask+0x4c>
	__asm volatile
 80070f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070f6:	b672      	cpsid	i
 80070f8:	f383 8811 	msr	BASEPRI, r3
 80070fc:	f3bf 8f6f 	isb	sy
 8007100:	f3bf 8f4f 	dsb	sy
 8007104:	b662      	cpsie	i
 8007106:	617b      	str	r3, [r7, #20]
}
 8007108:	bf00      	nop
 800710a:	e7fe      	b.n	800710a <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d01f      	beq.n	8007152 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007112:	2300      	movs	r3, #0
 8007114:	61fb      	str	r3, [r7, #28]
 8007116:	e012      	b.n	800713e <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8007118:	68ba      	ldr	r2, [r7, #8]
 800711a:	69fb      	ldr	r3, [r7, #28]
 800711c:	4413      	add	r3, r2
 800711e:	7819      	ldrb	r1, [r3, #0]
 8007120:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007122:	69fb      	ldr	r3, [r7, #28]
 8007124:	4413      	add	r3, r2
 8007126:	3334      	adds	r3, #52	; 0x34
 8007128:	460a      	mov	r2, r1
 800712a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800712c:	68ba      	ldr	r2, [r7, #8]
 800712e:	69fb      	ldr	r3, [r7, #28]
 8007130:	4413      	add	r3, r2
 8007132:	781b      	ldrb	r3, [r3, #0]
 8007134:	2b00      	cmp	r3, #0
 8007136:	d006      	beq.n	8007146 <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	3301      	adds	r3, #1
 800713c:	61fb      	str	r3, [r7, #28]
 800713e:	69fb      	ldr	r3, [r7, #28]
 8007140:	2b0f      	cmp	r3, #15
 8007142:	d9e9      	bls.n	8007118 <prvInitialiseNewTask+0x58>
 8007144:	e000      	b.n	8007148 <prvInitialiseNewTask+0x88>
			{
				break;
 8007146:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007150:	e003      	b.n	800715a <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8007152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007154:	2200      	movs	r2, #0
 8007156:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800715a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800715c:	2b06      	cmp	r3, #6
 800715e:	d901      	bls.n	8007164 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007160:	2306      	movs	r3, #6
 8007162:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8007164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007166:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007168:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800716a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800716c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800716e:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8007170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007172:	2200      	movs	r2, #0
 8007174:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007178:	3304      	adds	r3, #4
 800717a:	4618      	mov	r0, r3
 800717c:	f7fe fee6 	bl	8005f4c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007180:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007182:	3318      	adds	r3, #24
 8007184:	4618      	mov	r0, r3
 8007186:	f7fe fee1 	bl	8005f4c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800718a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800718c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800718e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007192:	f1c3 0207 	rsb	r2, r3, #7
 8007196:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007198:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800719a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800719c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800719e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80071a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a2:	2200      	movs	r2, #0
 80071a4:	f8c3 20ac 	str.w	r2, [r3, #172]	; 0xac
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80071a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 20b0 	strb.w	r2, [r3, #176]	; 0xb0
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80071b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b2:	334c      	adds	r3, #76	; 0x4c
 80071b4:	2260      	movs	r2, #96	; 0x60
 80071b6:	2100      	movs	r1, #0
 80071b8:	4618      	mov	r0, r3
 80071ba:	f00f f92c 	bl	8016416 <memset>
 80071be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c0:	4a0c      	ldr	r2, [pc, #48]	; (80071f4 <prvInitialiseNewTask+0x134>)
 80071c2:	651a      	str	r2, [r3, #80]	; 0x50
 80071c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071c6:	4a0c      	ldr	r2, [pc, #48]	; (80071f8 <prvInitialiseNewTask+0x138>)
 80071c8:	655a      	str	r2, [r3, #84]	; 0x54
 80071ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071cc:	4a0b      	ldr	r2, [pc, #44]	; (80071fc <prvInitialiseNewTask+0x13c>)
 80071ce:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80071d0:	683a      	ldr	r2, [r7, #0]
 80071d2:	68f9      	ldr	r1, [r7, #12]
 80071d4:	69b8      	ldr	r0, [r7, #24]
 80071d6:	f000 ff3b 	bl	8008050 <pxPortInitialiseStack>
 80071da:	4602      	mov	r2, r0
 80071dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80071e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d002      	beq.n	80071ec <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80071e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80071ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80071ec:	bf00      	nop
 80071ee:	3720      	adds	r7, #32
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}
 80071f4:	0801ad64 	.word	0x0801ad64
 80071f8:	0801ad84 	.word	0x0801ad84
 80071fc:	0801ad44 	.word	0x0801ad44

08007200 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b082      	sub	sp, #8
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8007208:	f001 f830 	bl	800826c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800720c:	4b2a      	ldr	r3, [pc, #168]	; (80072b8 <prvAddNewTaskToReadyList+0xb8>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	3301      	adds	r3, #1
 8007212:	4a29      	ldr	r2, [pc, #164]	; (80072b8 <prvAddNewTaskToReadyList+0xb8>)
 8007214:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8007216:	4b29      	ldr	r3, [pc, #164]	; (80072bc <prvAddNewTaskToReadyList+0xbc>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	2b00      	cmp	r3, #0
 800721c:	d109      	bne.n	8007232 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800721e:	4a27      	ldr	r2, [pc, #156]	; (80072bc <prvAddNewTaskToReadyList+0xbc>)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007224:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <prvAddNewTaskToReadyList+0xb8>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	2b01      	cmp	r3, #1
 800722a:	d110      	bne.n	800724e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800722c:	f000 fc0c 	bl	8007a48 <prvInitialiseTaskLists>
 8007230:	e00d      	b.n	800724e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007232:	4b23      	ldr	r3, [pc, #140]	; (80072c0 <prvAddNewTaskToReadyList+0xc0>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d109      	bne.n	800724e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800723a:	4b20      	ldr	r3, [pc, #128]	; (80072bc <prvAddNewTaskToReadyList+0xbc>)
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007244:	429a      	cmp	r2, r3
 8007246:	d802      	bhi.n	800724e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007248:	4a1c      	ldr	r2, [pc, #112]	; (80072bc <prvAddNewTaskToReadyList+0xbc>)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800724e:	4b1d      	ldr	r3, [pc, #116]	; (80072c4 <prvAddNewTaskToReadyList+0xc4>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3301      	adds	r3, #1
 8007254:	4a1b      	ldr	r2, [pc, #108]	; (80072c4 <prvAddNewTaskToReadyList+0xc4>)
 8007256:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800725c:	2201      	movs	r2, #1
 800725e:	409a      	lsls	r2, r3
 8007260:	4b19      	ldr	r3, [pc, #100]	; (80072c8 <prvAddNewTaskToReadyList+0xc8>)
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4313      	orrs	r3, r2
 8007266:	4a18      	ldr	r2, [pc, #96]	; (80072c8 <prvAddNewTaskToReadyList+0xc8>)
 8007268:	6013      	str	r3, [r2, #0]
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800726e:	4613      	mov	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	4413      	add	r3, r2
 8007274:	009b      	lsls	r3, r3, #2
 8007276:	4a15      	ldr	r2, [pc, #84]	; (80072cc <prvAddNewTaskToReadyList+0xcc>)
 8007278:	441a      	add	r2, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	3304      	adds	r3, #4
 800727e:	4619      	mov	r1, r3
 8007280:	4610      	mov	r0, r2
 8007282:	f7fe fe70 	bl	8005f66 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007286:	f001 f825 	bl	80082d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800728a:	4b0d      	ldr	r3, [pc, #52]	; (80072c0 <prvAddNewTaskToReadyList+0xc0>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d00e      	beq.n	80072b0 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007292:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <prvAddNewTaskToReadyList+0xbc>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800729c:	429a      	cmp	r2, r3
 800729e:	d207      	bcs.n	80072b0 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80072a0:	4b0b      	ldr	r3, [pc, #44]	; (80072d0 <prvAddNewTaskToReadyList+0xd0>)
 80072a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80072a6:	601a      	str	r2, [r3, #0]
 80072a8:	f3bf 8f4f 	dsb	sy
 80072ac:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80072b0:	bf00      	nop
 80072b2:	3708      	adds	r7, #8
 80072b4:	46bd      	mov	sp, r7
 80072b6:	bd80      	pop	{r7, pc}
 80072b8:	20005174 	.word	0x20005174
 80072bc:	20005074 	.word	0x20005074
 80072c0:	20005180 	.word	0x20005180
 80072c4:	20005190 	.word	0x20005190
 80072c8:	2000517c 	.word	0x2000517c
 80072cc:	20005078 	.word	0x20005078
 80072d0:	e000ed04 	.word	0xe000ed04

080072d4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b084      	sub	sp, #16
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80072dc:	2300      	movs	r3, #0
 80072de:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d019      	beq.n	800731a <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80072e6:	4b14      	ldr	r3, [pc, #80]	; (8007338 <vTaskDelay+0x64>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00c      	beq.n	8007308 <vTaskDelay+0x34>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	b672      	cpsid	i
 80072f4:	f383 8811 	msr	BASEPRI, r3
 80072f8:	f3bf 8f6f 	isb	sy
 80072fc:	f3bf 8f4f 	dsb	sy
 8007300:	b662      	cpsie	i
 8007302:	60bb      	str	r3, [r7, #8]
}
 8007304:	bf00      	nop
 8007306:	e7fe      	b.n	8007306 <vTaskDelay+0x32>
			vTaskSuspendAll();
 8007308:	f000 f888 	bl	800741c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800730c:	2100      	movs	r1, #0
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 fe38 	bl	8007f84 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8007314:	f000 f890 	bl	8007438 <xTaskResumeAll>
 8007318:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d107      	bne.n	8007330 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8007320:	4b06      	ldr	r3, [pc, #24]	; (800733c <vTaskDelay+0x68>)
 8007322:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007326:	601a      	str	r2, [r3, #0]
 8007328:	f3bf 8f4f 	dsb	sy
 800732c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007330:	bf00      	nop
 8007332:	3710      	adds	r7, #16
 8007334:	46bd      	mov	sp, r7
 8007336:	bd80      	pop	{r7, pc}
 8007338:	2000519c 	.word	0x2000519c
 800733c:	e000ed04 	.word	0xe000ed04

08007340 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b08a      	sub	sp, #40	; 0x28
 8007344:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800734a:	2300      	movs	r3, #0
 800734c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800734e:	463a      	mov	r2, r7
 8007350:	1d39      	adds	r1, r7, #4
 8007352:	f107 0308 	add.w	r3, r7, #8
 8007356:	4618      	mov	r0, r3
 8007358:	f7f9 f94c 	bl	80005f4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800735c:	6839      	ldr	r1, [r7, #0]
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	68ba      	ldr	r2, [r7, #8]
 8007362:	9202      	str	r2, [sp, #8]
 8007364:	9301      	str	r3, [sp, #4]
 8007366:	2300      	movs	r3, #0
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	2300      	movs	r3, #0
 800736c:	460a      	mov	r2, r1
 800736e:	4923      	ldr	r1, [pc, #140]	; (80073fc <vTaskStartScheduler+0xbc>)
 8007370:	4823      	ldr	r0, [pc, #140]	; (8007400 <vTaskStartScheduler+0xc0>)
 8007372:	f7ff fdfd 	bl	8006f70 <xTaskCreateStatic>
 8007376:	4603      	mov	r3, r0
 8007378:	4a22      	ldr	r2, [pc, #136]	; (8007404 <vTaskStartScheduler+0xc4>)
 800737a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800737c:	4b21      	ldr	r3, [pc, #132]	; (8007404 <vTaskStartScheduler+0xc4>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d002      	beq.n	800738a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007384:	2301      	movs	r3, #1
 8007386:	617b      	str	r3, [r7, #20]
 8007388:	e001      	b.n	800738e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800738a:	2300      	movs	r3, #0
 800738c:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800738e:	697b      	ldr	r3, [r7, #20]
 8007390:	2b01      	cmp	r3, #1
 8007392:	d11d      	bne.n	80073d0 <vTaskStartScheduler+0x90>
	__asm volatile
 8007394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007398:	b672      	cpsid	i
 800739a:	f383 8811 	msr	BASEPRI, r3
 800739e:	f3bf 8f6f 	isb	sy
 80073a2:	f3bf 8f4f 	dsb	sy
 80073a6:	b662      	cpsie	i
 80073a8:	613b      	str	r3, [r7, #16]
}
 80073aa:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80073ac:	4b16      	ldr	r3, [pc, #88]	; (8007408 <vTaskStartScheduler+0xc8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	334c      	adds	r3, #76	; 0x4c
 80073b2:	4a16      	ldr	r2, [pc, #88]	; (800740c <vTaskStartScheduler+0xcc>)
 80073b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80073b6:	4b16      	ldr	r3, [pc, #88]	; (8007410 <vTaskStartScheduler+0xd0>)
 80073b8:	f04f 32ff 	mov.w	r2, #4294967295
 80073bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80073be:	4b15      	ldr	r3, [pc, #84]	; (8007414 <vTaskStartScheduler+0xd4>)
 80073c0:	2201      	movs	r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80073c4:	4b14      	ldr	r3, [pc, #80]	; (8007418 <vTaskStartScheduler+0xd8>)
 80073c6:	2200      	movs	r2, #0
 80073c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80073ca:	f000 fed1 	bl	8008170 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80073ce:	e010      	b.n	80073f2 <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073d6:	d10c      	bne.n	80073f2 <vTaskStartScheduler+0xb2>
	__asm volatile
 80073d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073dc:	b672      	cpsid	i
 80073de:	f383 8811 	msr	BASEPRI, r3
 80073e2:	f3bf 8f6f 	isb	sy
 80073e6:	f3bf 8f4f 	dsb	sy
 80073ea:	b662      	cpsie	i
 80073ec:	60fb      	str	r3, [r7, #12]
}
 80073ee:	bf00      	nop
 80073f0:	e7fe      	b.n	80073f0 <vTaskStartScheduler+0xb0>
}
 80073f2:	bf00      	nop
 80073f4:	3718      	adds	r7, #24
 80073f6:	46bd      	mov	sp, r7
 80073f8:	bd80      	pop	{r7, pc}
 80073fa:	bf00      	nop
 80073fc:	08017760 	.word	0x08017760
 8007400:	08007a19 	.word	0x08007a19
 8007404:	20005198 	.word	0x20005198
 8007408:	20005074 	.word	0x20005074
 800740c:	20000030 	.word	0x20000030
 8007410:	20005194 	.word	0x20005194
 8007414:	20005180 	.word	0x20005180
 8007418:	20005178 	.word	0x20005178

0800741c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800741c:	b480      	push	{r7}
 800741e:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007420:	4b04      	ldr	r3, [pc, #16]	; (8007434 <vTaskSuspendAll+0x18>)
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	3301      	adds	r3, #1
 8007426:	4a03      	ldr	r2, [pc, #12]	; (8007434 <vTaskSuspendAll+0x18>)
 8007428:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800742a:	bf00      	nop
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr
 8007434:	2000519c 	.word	0x2000519c

08007438 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007438:	b580      	push	{r7, lr}
 800743a:	b084      	sub	sp, #16
 800743c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800743e:	2300      	movs	r3, #0
 8007440:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007442:	2300      	movs	r3, #0
 8007444:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007446:	4b42      	ldr	r3, [pc, #264]	; (8007550 <xTaskResumeAll+0x118>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d10c      	bne.n	8007468 <xTaskResumeAll+0x30>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007452:	b672      	cpsid	i
 8007454:	f383 8811 	msr	BASEPRI, r3
 8007458:	f3bf 8f6f 	isb	sy
 800745c:	f3bf 8f4f 	dsb	sy
 8007460:	b662      	cpsie	i
 8007462:	603b      	str	r3, [r7, #0]
}
 8007464:	bf00      	nop
 8007466:	e7fe      	b.n	8007466 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007468:	f000 ff00 	bl	800826c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800746c:	4b38      	ldr	r3, [pc, #224]	; (8007550 <xTaskResumeAll+0x118>)
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	3b01      	subs	r3, #1
 8007472:	4a37      	ldr	r2, [pc, #220]	; (8007550 <xTaskResumeAll+0x118>)
 8007474:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007476:	4b36      	ldr	r3, [pc, #216]	; (8007550 <xTaskResumeAll+0x118>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d161      	bne.n	8007542 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800747e:	4b35      	ldr	r3, [pc, #212]	; (8007554 <xTaskResumeAll+0x11c>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2b00      	cmp	r3, #0
 8007484:	d05d      	beq.n	8007542 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007486:	e02e      	b.n	80074e6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007488:	4b33      	ldr	r3, [pc, #204]	; (8007558 <xTaskResumeAll+0x120>)
 800748a:	68db      	ldr	r3, [r3, #12]
 800748c:	68db      	ldr	r3, [r3, #12]
 800748e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	3318      	adds	r3, #24
 8007494:	4618      	mov	r0, r3
 8007496:	f7fe fdc3 	bl	8006020 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	3304      	adds	r3, #4
 800749e:	4618      	mov	r0, r3
 80074a0:	f7fe fdbe 	bl	8006020 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80074a4:	68fb      	ldr	r3, [r7, #12]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	2201      	movs	r2, #1
 80074aa:	409a      	lsls	r2, r3
 80074ac:	4b2b      	ldr	r3, [pc, #172]	; (800755c <xTaskResumeAll+0x124>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	4a2a      	ldr	r2, [pc, #168]	; (800755c <xTaskResumeAll+0x124>)
 80074b4:	6013      	str	r3, [r2, #0]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ba:	4613      	mov	r3, r2
 80074bc:	009b      	lsls	r3, r3, #2
 80074be:	4413      	add	r3, r2
 80074c0:	009b      	lsls	r3, r3, #2
 80074c2:	4a27      	ldr	r2, [pc, #156]	; (8007560 <xTaskResumeAll+0x128>)
 80074c4:	441a      	add	r2, r3
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	3304      	adds	r3, #4
 80074ca:	4619      	mov	r1, r3
 80074cc:	4610      	mov	r0, r2
 80074ce:	f7fe fd4a 	bl	8005f66 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074d6:	4b23      	ldr	r3, [pc, #140]	; (8007564 <xTaskResumeAll+0x12c>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074dc:	429a      	cmp	r2, r3
 80074de:	d302      	bcc.n	80074e6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80074e0:	4b21      	ldr	r3, [pc, #132]	; (8007568 <xTaskResumeAll+0x130>)
 80074e2:	2201      	movs	r2, #1
 80074e4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80074e6:	4b1c      	ldr	r3, [pc, #112]	; (8007558 <xTaskResumeAll+0x120>)
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	2b00      	cmp	r3, #0
 80074ec:	d1cc      	bne.n	8007488 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d001      	beq.n	80074f8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80074f4:	f000 fb4c 	bl	8007b90 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80074f8:	4b1c      	ldr	r3, [pc, #112]	; (800756c <xTaskResumeAll+0x134>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d010      	beq.n	8007526 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007504:	f000 f858 	bl	80075b8 <xTaskIncrementTick>
 8007508:	4603      	mov	r3, r0
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800750e:	4b16      	ldr	r3, [pc, #88]	; (8007568 <xTaskResumeAll+0x130>)
 8007510:	2201      	movs	r2, #1
 8007512:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	3b01      	subs	r3, #1
 8007518:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d1f1      	bne.n	8007504 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8007520:	4b12      	ldr	r3, [pc, #72]	; (800756c <xTaskResumeAll+0x134>)
 8007522:	2200      	movs	r2, #0
 8007524:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007526:	4b10      	ldr	r3, [pc, #64]	; (8007568 <xTaskResumeAll+0x130>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d009      	beq.n	8007542 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800752e:	2301      	movs	r3, #1
 8007530:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007532:	4b0f      	ldr	r3, [pc, #60]	; (8007570 <xTaskResumeAll+0x138>)
 8007534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007538:	601a      	str	r2, [r3, #0]
 800753a:	f3bf 8f4f 	dsb	sy
 800753e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007542:	f000 fec7 	bl	80082d4 <vPortExitCritical>

	return xAlreadyYielded;
 8007546:	68bb      	ldr	r3, [r7, #8]
}
 8007548:	4618      	mov	r0, r3
 800754a:	3710      	adds	r7, #16
 800754c:	46bd      	mov	sp, r7
 800754e:	bd80      	pop	{r7, pc}
 8007550:	2000519c 	.word	0x2000519c
 8007554:	20005174 	.word	0x20005174
 8007558:	20005134 	.word	0x20005134
 800755c:	2000517c 	.word	0x2000517c
 8007560:	20005078 	.word	0x20005078
 8007564:	20005074 	.word	0x20005074
 8007568:	20005188 	.word	0x20005188
 800756c:	20005184 	.word	0x20005184
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007574:	b480      	push	{r7}
 8007576:	b083      	sub	sp, #12
 8007578:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <xTaskGetTickCount+0x1c>)
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007580:	687b      	ldr	r3, [r7, #4]
}
 8007582:	4618      	mov	r0, r3
 8007584:	370c      	adds	r7, #12
 8007586:	46bd      	mov	sp, r7
 8007588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800758c:	4770      	bx	lr
 800758e:	bf00      	nop
 8007590:	20005178 	.word	0x20005178

08007594 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007594:	b580      	push	{r7, lr}
 8007596:	b082      	sub	sp, #8
 8007598:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800759a:	f000 ff4f 	bl	800843c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800759e:	2300      	movs	r3, #0
 80075a0:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 80075a2:	4b04      	ldr	r3, [pc, #16]	; (80075b4 <xTaskGetTickCountFromISR+0x20>)
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80075a8:	683b      	ldr	r3, [r7, #0]
}
 80075aa:	4618      	mov	r0, r3
 80075ac:	3708      	adds	r7, #8
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}
 80075b2:	bf00      	nop
 80075b4:	20005178 	.word	0x20005178

080075b8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b086      	sub	sp, #24
 80075bc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80075be:	2300      	movs	r3, #0
 80075c0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80075c2:	4b4f      	ldr	r3, [pc, #316]	; (8007700 <xTaskIncrementTick+0x148>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	f040 808a 	bne.w	80076e0 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80075cc:	4b4d      	ldr	r3, [pc, #308]	; (8007704 <xTaskIncrementTick+0x14c>)
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	3301      	adds	r3, #1
 80075d2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80075d4:	4a4b      	ldr	r2, [pc, #300]	; (8007704 <xTaskIncrementTick+0x14c>)
 80075d6:	693b      	ldr	r3, [r7, #16]
 80075d8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d122      	bne.n	8007626 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80075e0:	4b49      	ldr	r3, [pc, #292]	; (8007708 <xTaskIncrementTick+0x150>)
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d00c      	beq.n	8007604 <xTaskIncrementTick+0x4c>
	__asm volatile
 80075ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ee:	b672      	cpsid	i
 80075f0:	f383 8811 	msr	BASEPRI, r3
 80075f4:	f3bf 8f6f 	isb	sy
 80075f8:	f3bf 8f4f 	dsb	sy
 80075fc:	b662      	cpsie	i
 80075fe:	603b      	str	r3, [r7, #0]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <xTaskIncrementTick+0x4a>
 8007604:	4b40      	ldr	r3, [pc, #256]	; (8007708 <xTaskIncrementTick+0x150>)
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	60fb      	str	r3, [r7, #12]
 800760a:	4b40      	ldr	r3, [pc, #256]	; (800770c <xTaskIncrementTick+0x154>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	4a3e      	ldr	r2, [pc, #248]	; (8007708 <xTaskIncrementTick+0x150>)
 8007610:	6013      	str	r3, [r2, #0]
 8007612:	4a3e      	ldr	r2, [pc, #248]	; (800770c <xTaskIncrementTick+0x154>)
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	6013      	str	r3, [r2, #0]
 8007618:	4b3d      	ldr	r3, [pc, #244]	; (8007710 <xTaskIncrementTick+0x158>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	3301      	adds	r3, #1
 800761e:	4a3c      	ldr	r2, [pc, #240]	; (8007710 <xTaskIncrementTick+0x158>)
 8007620:	6013      	str	r3, [r2, #0]
 8007622:	f000 fab5 	bl	8007b90 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007626:	4b3b      	ldr	r3, [pc, #236]	; (8007714 <xTaskIncrementTick+0x15c>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	693a      	ldr	r2, [r7, #16]
 800762c:	429a      	cmp	r2, r3
 800762e:	d348      	bcc.n	80076c2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007630:	4b35      	ldr	r3, [pc, #212]	; (8007708 <xTaskIncrementTick+0x150>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d104      	bne.n	8007644 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800763a:	4b36      	ldr	r3, [pc, #216]	; (8007714 <xTaskIncrementTick+0x15c>)
 800763c:	f04f 32ff 	mov.w	r2, #4294967295
 8007640:	601a      	str	r2, [r3, #0]
					break;
 8007642:	e03e      	b.n	80076c2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007644:	4b30      	ldr	r3, [pc, #192]	; (8007708 <xTaskIncrementTick+0x150>)
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	68db      	ldr	r3, [r3, #12]
 800764a:	68db      	ldr	r3, [r3, #12]
 800764c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007654:	693a      	ldr	r2, [r7, #16]
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	429a      	cmp	r2, r3
 800765a:	d203      	bcs.n	8007664 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800765c:	4a2d      	ldr	r2, [pc, #180]	; (8007714 <xTaskIncrementTick+0x15c>)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007662:	e02e      	b.n	80076c2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	3304      	adds	r3, #4
 8007668:	4618      	mov	r0, r3
 800766a:	f7fe fcd9 	bl	8006020 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800766e:	68bb      	ldr	r3, [r7, #8]
 8007670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007672:	2b00      	cmp	r3, #0
 8007674:	d004      	beq.n	8007680 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	3318      	adds	r3, #24
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe fcd0 	bl	8006020 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007680:	68bb      	ldr	r3, [r7, #8]
 8007682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007684:	2201      	movs	r2, #1
 8007686:	409a      	lsls	r2, r3
 8007688:	4b23      	ldr	r3, [pc, #140]	; (8007718 <xTaskIncrementTick+0x160>)
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	4313      	orrs	r3, r2
 800768e:	4a22      	ldr	r2, [pc, #136]	; (8007718 <xTaskIncrementTick+0x160>)
 8007690:	6013      	str	r3, [r2, #0]
 8007692:	68bb      	ldr	r3, [r7, #8]
 8007694:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007696:	4613      	mov	r3, r2
 8007698:	009b      	lsls	r3, r3, #2
 800769a:	4413      	add	r3, r2
 800769c:	009b      	lsls	r3, r3, #2
 800769e:	4a1f      	ldr	r2, [pc, #124]	; (800771c <xTaskIncrementTick+0x164>)
 80076a0:	441a      	add	r2, r3
 80076a2:	68bb      	ldr	r3, [r7, #8]
 80076a4:	3304      	adds	r3, #4
 80076a6:	4619      	mov	r1, r3
 80076a8:	4610      	mov	r0, r2
 80076aa:	f7fe fc5c 	bl	8005f66 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80076ae:	68bb      	ldr	r3, [r7, #8]
 80076b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b2:	4b1b      	ldr	r3, [pc, #108]	; (8007720 <xTaskIncrementTick+0x168>)
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d3b9      	bcc.n	8007630 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80076bc:	2301      	movs	r3, #1
 80076be:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80076c0:	e7b6      	b.n	8007630 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <xTaskIncrementTick+0x168>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	4914      	ldr	r1, [pc, #80]	; (800771c <xTaskIncrementTick+0x164>)
 80076ca:	4613      	mov	r3, r2
 80076cc:	009b      	lsls	r3, r3, #2
 80076ce:	4413      	add	r3, r2
 80076d0:	009b      	lsls	r3, r3, #2
 80076d2:	440b      	add	r3, r1
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2b01      	cmp	r3, #1
 80076d8:	d907      	bls.n	80076ea <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80076da:	2301      	movs	r3, #1
 80076dc:	617b      	str	r3, [r7, #20]
 80076de:	e004      	b.n	80076ea <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80076e0:	4b10      	ldr	r3, [pc, #64]	; (8007724 <xTaskIncrementTick+0x16c>)
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	3301      	adds	r3, #1
 80076e6:	4a0f      	ldr	r2, [pc, #60]	; (8007724 <xTaskIncrementTick+0x16c>)
 80076e8:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80076ea:	4b0f      	ldr	r3, [pc, #60]	; (8007728 <xTaskIncrementTick+0x170>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d001      	beq.n	80076f6 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80076f2:	2301      	movs	r3, #1
 80076f4:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80076f6:	697b      	ldr	r3, [r7, #20]
}
 80076f8:	4618      	mov	r0, r3
 80076fa:	3718      	adds	r7, #24
 80076fc:	46bd      	mov	sp, r7
 80076fe:	bd80      	pop	{r7, pc}
 8007700:	2000519c 	.word	0x2000519c
 8007704:	20005178 	.word	0x20005178
 8007708:	2000512c 	.word	0x2000512c
 800770c:	20005130 	.word	0x20005130
 8007710:	2000518c 	.word	0x2000518c
 8007714:	20005194 	.word	0x20005194
 8007718:	2000517c 	.word	0x2000517c
 800771c:	20005078 	.word	0x20005078
 8007720:	20005074 	.word	0x20005074
 8007724:	20005184 	.word	0x20005184
 8007728:	20005188 	.word	0x20005188

0800772c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800772c:	b480      	push	{r7}
 800772e:	b087      	sub	sp, #28
 8007730:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007732:	4b2a      	ldr	r3, [pc, #168]	; (80077dc <vTaskSwitchContext+0xb0>)
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	2b00      	cmp	r3, #0
 8007738:	d003      	beq.n	8007742 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800773a:	4b29      	ldr	r3, [pc, #164]	; (80077e0 <vTaskSwitchContext+0xb4>)
 800773c:	2201      	movs	r2, #1
 800773e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007740:	e046      	b.n	80077d0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8007742:	4b27      	ldr	r3, [pc, #156]	; (80077e0 <vTaskSwitchContext+0xb4>)
 8007744:	2200      	movs	r2, #0
 8007746:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007748:	4b26      	ldr	r3, [pc, #152]	; (80077e4 <vTaskSwitchContext+0xb8>)
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	fab3 f383 	clz	r3, r3
 8007754:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8007756:	7afb      	ldrb	r3, [r7, #11]
 8007758:	f1c3 031f 	rsb	r3, r3, #31
 800775c:	617b      	str	r3, [r7, #20]
 800775e:	4922      	ldr	r1, [pc, #136]	; (80077e8 <vTaskSwitchContext+0xbc>)
 8007760:	697a      	ldr	r2, [r7, #20]
 8007762:	4613      	mov	r3, r2
 8007764:	009b      	lsls	r3, r3, #2
 8007766:	4413      	add	r3, r2
 8007768:	009b      	lsls	r3, r3, #2
 800776a:	440b      	add	r3, r1
 800776c:	681b      	ldr	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d10c      	bne.n	800778c <vTaskSwitchContext+0x60>
	__asm volatile
 8007772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007776:	b672      	cpsid	i
 8007778:	f383 8811 	msr	BASEPRI, r3
 800777c:	f3bf 8f6f 	isb	sy
 8007780:	f3bf 8f4f 	dsb	sy
 8007784:	b662      	cpsie	i
 8007786:	607b      	str	r3, [r7, #4]
}
 8007788:	bf00      	nop
 800778a:	e7fe      	b.n	800778a <vTaskSwitchContext+0x5e>
 800778c:	697a      	ldr	r2, [r7, #20]
 800778e:	4613      	mov	r3, r2
 8007790:	009b      	lsls	r3, r3, #2
 8007792:	4413      	add	r3, r2
 8007794:	009b      	lsls	r3, r3, #2
 8007796:	4a14      	ldr	r2, [pc, #80]	; (80077e8 <vTaskSwitchContext+0xbc>)
 8007798:	4413      	add	r3, r2
 800779a:	613b      	str	r3, [r7, #16]
 800779c:	693b      	ldr	r3, [r7, #16]
 800779e:	685b      	ldr	r3, [r3, #4]
 80077a0:	685a      	ldr	r2, [r3, #4]
 80077a2:	693b      	ldr	r3, [r7, #16]
 80077a4:	605a      	str	r2, [r3, #4]
 80077a6:	693b      	ldr	r3, [r7, #16]
 80077a8:	685a      	ldr	r2, [r3, #4]
 80077aa:	693b      	ldr	r3, [r7, #16]
 80077ac:	3308      	adds	r3, #8
 80077ae:	429a      	cmp	r2, r3
 80077b0:	d104      	bne.n	80077bc <vTaskSwitchContext+0x90>
 80077b2:	693b      	ldr	r3, [r7, #16]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	685a      	ldr	r2, [r3, #4]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	605a      	str	r2, [r3, #4]
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	68db      	ldr	r3, [r3, #12]
 80077c2:	4a0a      	ldr	r2, [pc, #40]	; (80077ec <vTaskSwitchContext+0xc0>)
 80077c4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80077c6:	4b09      	ldr	r3, [pc, #36]	; (80077ec <vTaskSwitchContext+0xc0>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	334c      	adds	r3, #76	; 0x4c
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <vTaskSwitchContext+0xc4>)
 80077ce:	6013      	str	r3, [r2, #0]
}
 80077d0:	bf00      	nop
 80077d2:	371c      	adds	r7, #28
 80077d4:	46bd      	mov	sp, r7
 80077d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077da:	4770      	bx	lr
 80077dc:	2000519c 	.word	0x2000519c
 80077e0:	20005188 	.word	0x20005188
 80077e4:	2000517c 	.word	0x2000517c
 80077e8:	20005078 	.word	0x20005078
 80077ec:	20005074 	.word	0x20005074
 80077f0:	20000030 	.word	0x20000030

080077f4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80077f4:	b580      	push	{r7, lr}
 80077f6:	b084      	sub	sp, #16
 80077f8:	af00      	add	r7, sp, #0
 80077fa:	6078      	str	r0, [r7, #4]
 80077fc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d10c      	bne.n	800781e <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 8007804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007808:	b672      	cpsid	i
 800780a:	f383 8811 	msr	BASEPRI, r3
 800780e:	f3bf 8f6f 	isb	sy
 8007812:	f3bf 8f4f 	dsb	sy
 8007816:	b662      	cpsie	i
 8007818:	60fb      	str	r3, [r7, #12]
}
 800781a:	bf00      	nop
 800781c:	e7fe      	b.n	800781c <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800781e:	4b07      	ldr	r3, [pc, #28]	; (800783c <vTaskPlaceOnEventList+0x48>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	3318      	adds	r3, #24
 8007824:	4619      	mov	r1, r3
 8007826:	6878      	ldr	r0, [r7, #4]
 8007828:	f7fe fbc1 	bl	8005fae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800782c:	2101      	movs	r1, #1
 800782e:	6838      	ldr	r0, [r7, #0]
 8007830:	f000 fba8 	bl	8007f84 <prvAddCurrentTaskToDelayedList>
}
 8007834:	bf00      	nop
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}
 800783c:	20005074 	.word	0x20005074

08007840 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007840:	b580      	push	{r7, lr}
 8007842:	b086      	sub	sp, #24
 8007844:	af00      	add	r7, sp, #0
 8007846:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	68db      	ldr	r3, [r3, #12]
 800784c:	68db      	ldr	r3, [r3, #12]
 800784e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d10c      	bne.n	8007870 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8007856:	f04f 0350 	mov.w	r3, #80	; 0x50
 800785a:	b672      	cpsid	i
 800785c:	f383 8811 	msr	BASEPRI, r3
 8007860:	f3bf 8f6f 	isb	sy
 8007864:	f3bf 8f4f 	dsb	sy
 8007868:	b662      	cpsie	i
 800786a:	60fb      	str	r3, [r7, #12]
}
 800786c:	bf00      	nop
 800786e:	e7fe      	b.n	800786e <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007870:	693b      	ldr	r3, [r7, #16]
 8007872:	3318      	adds	r3, #24
 8007874:	4618      	mov	r0, r3
 8007876:	f7fe fbd3 	bl	8006020 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800787a:	4b1d      	ldr	r3, [pc, #116]	; (80078f0 <xTaskRemoveFromEventList+0xb0>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2b00      	cmp	r3, #0
 8007880:	d11c      	bne.n	80078bc <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007882:	693b      	ldr	r3, [r7, #16]
 8007884:	3304      	adds	r3, #4
 8007886:	4618      	mov	r0, r3
 8007888:	f7fe fbca 	bl	8006020 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800788c:	693b      	ldr	r3, [r7, #16]
 800788e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007890:	2201      	movs	r2, #1
 8007892:	409a      	lsls	r2, r3
 8007894:	4b17      	ldr	r3, [pc, #92]	; (80078f4 <xTaskRemoveFromEventList+0xb4>)
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	4313      	orrs	r3, r2
 800789a:	4a16      	ldr	r2, [pc, #88]	; (80078f4 <xTaskRemoveFromEventList+0xb4>)
 800789c:	6013      	str	r3, [r2, #0]
 800789e:	693b      	ldr	r3, [r7, #16]
 80078a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a2:	4613      	mov	r3, r2
 80078a4:	009b      	lsls	r3, r3, #2
 80078a6:	4413      	add	r3, r2
 80078a8:	009b      	lsls	r3, r3, #2
 80078aa:	4a13      	ldr	r2, [pc, #76]	; (80078f8 <xTaskRemoveFromEventList+0xb8>)
 80078ac:	441a      	add	r2, r3
 80078ae:	693b      	ldr	r3, [r7, #16]
 80078b0:	3304      	adds	r3, #4
 80078b2:	4619      	mov	r1, r3
 80078b4:	4610      	mov	r0, r2
 80078b6:	f7fe fb56 	bl	8005f66 <vListInsertEnd>
 80078ba:	e005      	b.n	80078c8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80078bc:	693b      	ldr	r3, [r7, #16]
 80078be:	3318      	adds	r3, #24
 80078c0:	4619      	mov	r1, r3
 80078c2:	480e      	ldr	r0, [pc, #56]	; (80078fc <xTaskRemoveFromEventList+0xbc>)
 80078c4:	f7fe fb4f 	bl	8005f66 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078cc:	4b0c      	ldr	r3, [pc, #48]	; (8007900 <xTaskRemoveFromEventList+0xc0>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d905      	bls.n	80078e2 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80078d6:	2301      	movs	r3, #1
 80078d8:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80078da:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <xTaskRemoveFromEventList+0xc4>)
 80078dc:	2201      	movs	r2, #1
 80078de:	601a      	str	r2, [r3, #0]
 80078e0:	e001      	b.n	80078e6 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80078e2:	2300      	movs	r3, #0
 80078e4:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80078e6:	697b      	ldr	r3, [r7, #20]
}
 80078e8:	4618      	mov	r0, r3
 80078ea:	3718      	adds	r7, #24
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}
 80078f0:	2000519c 	.word	0x2000519c
 80078f4:	2000517c 	.word	0x2000517c
 80078f8:	20005078 	.word	0x20005078
 80078fc:	20005134 	.word	0x20005134
 8007900:	20005074 	.word	0x20005074
 8007904:	20005188 	.word	0x20005188

08007908 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007908:	b480      	push	{r7}
 800790a:	b083      	sub	sp, #12
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007910:	4b06      	ldr	r3, [pc, #24]	; (800792c <vTaskInternalSetTimeOutState+0x24>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007918:	4b05      	ldr	r3, [pc, #20]	; (8007930 <vTaskInternalSetTimeOutState+0x28>)
 800791a:	681a      	ldr	r2, [r3, #0]
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	605a      	str	r2, [r3, #4]
}
 8007920:	bf00      	nop
 8007922:	370c      	adds	r7, #12
 8007924:	46bd      	mov	sp, r7
 8007926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792a:	4770      	bx	lr
 800792c:	2000518c 	.word	0x2000518c
 8007930:	20005178 	.word	0x20005178

08007934 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b088      	sub	sp, #32
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	2b00      	cmp	r3, #0
 8007942:	d10c      	bne.n	800795e <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8007944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007948:	b672      	cpsid	i
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	b662      	cpsie	i
 8007958:	613b      	str	r3, [r7, #16]
}
 800795a:	bf00      	nop
 800795c:	e7fe      	b.n	800795c <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 800795e:	683b      	ldr	r3, [r7, #0]
 8007960:	2b00      	cmp	r3, #0
 8007962:	d10c      	bne.n	800797e <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8007964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007968:	b672      	cpsid	i
 800796a:	f383 8811 	msr	BASEPRI, r3
 800796e:	f3bf 8f6f 	isb	sy
 8007972:	f3bf 8f4f 	dsb	sy
 8007976:	b662      	cpsie	i
 8007978:	60fb      	str	r3, [r7, #12]
}
 800797a:	bf00      	nop
 800797c:	e7fe      	b.n	800797c <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 800797e:	f000 fc75 	bl	800826c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007982:	4b1d      	ldr	r3, [pc, #116]	; (80079f8 <xTaskCheckForTimeOut+0xc4>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	685b      	ldr	r3, [r3, #4]
 800798c:	69ba      	ldr	r2, [r7, #24]
 800798e:	1ad3      	subs	r3, r2, r3
 8007990:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799a:	d102      	bne.n	80079a2 <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800799c:	2300      	movs	r3, #0
 800799e:	61fb      	str	r3, [r7, #28]
 80079a0:	e023      	b.n	80079ea <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4b15      	ldr	r3, [pc, #84]	; (80079fc <xTaskCheckForTimeOut+0xc8>)
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	429a      	cmp	r2, r3
 80079ac:	d007      	beq.n	80079be <xTaskCheckForTimeOut+0x8a>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	685b      	ldr	r3, [r3, #4]
 80079b2:	69ba      	ldr	r2, [r7, #24]
 80079b4:	429a      	cmp	r2, r3
 80079b6:	d302      	bcc.n	80079be <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80079b8:	2301      	movs	r3, #1
 80079ba:	61fb      	str	r3, [r7, #28]
 80079bc:	e015      	b.n	80079ea <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	697a      	ldr	r2, [r7, #20]
 80079c4:	429a      	cmp	r2, r3
 80079c6:	d20b      	bcs.n	80079e0 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	681a      	ldr	r2, [r3, #0]
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	1ad2      	subs	r2, r2, r3
 80079d0:	683b      	ldr	r3, [r7, #0]
 80079d2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80079d4:	6878      	ldr	r0, [r7, #4]
 80079d6:	f7ff ff97 	bl	8007908 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80079da:	2300      	movs	r3, #0
 80079dc:	61fb      	str	r3, [r7, #28]
 80079de:	e004      	b.n	80079ea <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80079e0:	683b      	ldr	r3, [r7, #0]
 80079e2:	2200      	movs	r2, #0
 80079e4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80079e6:	2301      	movs	r3, #1
 80079e8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80079ea:	f000 fc73 	bl	80082d4 <vPortExitCritical>

	return xReturn;
 80079ee:	69fb      	ldr	r3, [r7, #28]
}
 80079f0:	4618      	mov	r0, r3
 80079f2:	3720      	adds	r7, #32
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20005178 	.word	0x20005178
 80079fc:	2000518c 	.word	0x2000518c

08007a00 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007a00:	b480      	push	{r7}
 8007a02:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007a04:	4b03      	ldr	r3, [pc, #12]	; (8007a14 <vTaskMissedYield+0x14>)
 8007a06:	2201      	movs	r2, #1
 8007a08:	601a      	str	r2, [r3, #0]
}
 8007a0a:	bf00      	nop
 8007a0c:	46bd      	mov	sp, r7
 8007a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a12:	4770      	bx	lr
 8007a14:	20005188 	.word	0x20005188

08007a18 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007a18:	b580      	push	{r7, lr}
 8007a1a:	b082      	sub	sp, #8
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007a20:	f000 f852 	bl	8007ac8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007a24:	4b06      	ldr	r3, [pc, #24]	; (8007a40 <prvIdleTask+0x28>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b01      	cmp	r3, #1
 8007a2a:	d9f9      	bls.n	8007a20 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007a2c:	4b05      	ldr	r3, [pc, #20]	; (8007a44 <prvIdleTask+0x2c>)
 8007a2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007a32:	601a      	str	r2, [r3, #0]
 8007a34:	f3bf 8f4f 	dsb	sy
 8007a38:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007a3c:	e7f0      	b.n	8007a20 <prvIdleTask+0x8>
 8007a3e:	bf00      	nop
 8007a40:	20005078 	.word	0x20005078
 8007a44:	e000ed04 	.word	0xe000ed04

08007a48 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a4e:	2300      	movs	r3, #0
 8007a50:	607b      	str	r3, [r7, #4]
 8007a52:	e00c      	b.n	8007a6e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007a54:	687a      	ldr	r2, [r7, #4]
 8007a56:	4613      	mov	r3, r2
 8007a58:	009b      	lsls	r3, r3, #2
 8007a5a:	4413      	add	r3, r2
 8007a5c:	009b      	lsls	r3, r3, #2
 8007a5e:	4a12      	ldr	r2, [pc, #72]	; (8007aa8 <prvInitialiseTaskLists+0x60>)
 8007a60:	4413      	add	r3, r2
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fe fa52 	bl	8005f0c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	3301      	adds	r3, #1
 8007a6c:	607b      	str	r3, [r7, #4]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b06      	cmp	r3, #6
 8007a72:	d9ef      	bls.n	8007a54 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007a74:	480d      	ldr	r0, [pc, #52]	; (8007aac <prvInitialiseTaskLists+0x64>)
 8007a76:	f7fe fa49 	bl	8005f0c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007a7a:	480d      	ldr	r0, [pc, #52]	; (8007ab0 <prvInitialiseTaskLists+0x68>)
 8007a7c:	f7fe fa46 	bl	8005f0c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007a80:	480c      	ldr	r0, [pc, #48]	; (8007ab4 <prvInitialiseTaskLists+0x6c>)
 8007a82:	f7fe fa43 	bl	8005f0c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007a86:	480c      	ldr	r0, [pc, #48]	; (8007ab8 <prvInitialiseTaskLists+0x70>)
 8007a88:	f7fe fa40 	bl	8005f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007a8c:	480b      	ldr	r0, [pc, #44]	; (8007abc <prvInitialiseTaskLists+0x74>)
 8007a8e:	f7fe fa3d 	bl	8005f0c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007a92:	4b0b      	ldr	r3, [pc, #44]	; (8007ac0 <prvInitialiseTaskLists+0x78>)
 8007a94:	4a05      	ldr	r2, [pc, #20]	; (8007aac <prvInitialiseTaskLists+0x64>)
 8007a96:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007a98:	4b0a      	ldr	r3, [pc, #40]	; (8007ac4 <prvInitialiseTaskLists+0x7c>)
 8007a9a:	4a05      	ldr	r2, [pc, #20]	; (8007ab0 <prvInitialiseTaskLists+0x68>)
 8007a9c:	601a      	str	r2, [r3, #0]
}
 8007a9e:	bf00      	nop
 8007aa0:	3708      	adds	r7, #8
 8007aa2:	46bd      	mov	sp, r7
 8007aa4:	bd80      	pop	{r7, pc}
 8007aa6:	bf00      	nop
 8007aa8:	20005078 	.word	0x20005078
 8007aac:	20005104 	.word	0x20005104
 8007ab0:	20005118 	.word	0x20005118
 8007ab4:	20005134 	.word	0x20005134
 8007ab8:	20005148 	.word	0x20005148
 8007abc:	20005160 	.word	0x20005160
 8007ac0:	2000512c 	.word	0x2000512c
 8007ac4:	20005130 	.word	0x20005130

08007ac8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007ac8:	b580      	push	{r7, lr}
 8007aca:	b082      	sub	sp, #8
 8007acc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007ace:	e019      	b.n	8007b04 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007ad0:	f000 fbcc 	bl	800826c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007ad4:	4b10      	ldr	r3, [pc, #64]	; (8007b18 <prvCheckTasksWaitingTermination+0x50>)
 8007ad6:	68db      	ldr	r3, [r3, #12]
 8007ad8:	68db      	ldr	r3, [r3, #12]
 8007ada:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	3304      	adds	r3, #4
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	f7fe fa9d 	bl	8006020 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007ae6:	4b0d      	ldr	r3, [pc, #52]	; (8007b1c <prvCheckTasksWaitingTermination+0x54>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <prvCheckTasksWaitingTermination+0x54>)
 8007aee:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007af0:	4b0b      	ldr	r3, [pc, #44]	; (8007b20 <prvCheckTasksWaitingTermination+0x58>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	3b01      	subs	r3, #1
 8007af6:	4a0a      	ldr	r2, [pc, #40]	; (8007b20 <prvCheckTasksWaitingTermination+0x58>)
 8007af8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8007afa:	f000 fbeb 	bl	80082d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007afe:	6878      	ldr	r0, [r7, #4]
 8007b00:	f000 f810 	bl	8007b24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007b04:	4b06      	ldr	r3, [pc, #24]	; (8007b20 <prvCheckTasksWaitingTermination+0x58>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d1e1      	bne.n	8007ad0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007b0c:	bf00      	nop
 8007b0e:	bf00      	nop
 8007b10:	3708      	adds	r7, #8
 8007b12:	46bd      	mov	sp, r7
 8007b14:	bd80      	pop	{r7, pc}
 8007b16:	bf00      	nop
 8007b18:	20005148 	.word	0x20005148
 8007b1c:	20005174 	.word	0x20005174
 8007b20:	2000515c 	.word	0x2000515c

08007b24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007b24:	b580      	push	{r7, lr}
 8007b26:	b084      	sub	sp, #16
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	334c      	adds	r3, #76	; 0x4c
 8007b30:	4618      	mov	r0, r3
 8007b32:	f00e fde7 	bl	8016704 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d108      	bne.n	8007b52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b44:	4618      	mov	r0, r3
 8007b46:	f000 fd87 	bl	8008658 <vPortFree>
				vPortFree( pxTCB );
 8007b4a:	6878      	ldr	r0, [r7, #4]
 8007b4c:	f000 fd84 	bl	8008658 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007b50:	e01a      	b.n	8007b88 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b58:	2b01      	cmp	r3, #1
 8007b5a:	d103      	bne.n	8007b64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 fd7b 	bl	8008658 <vPortFree>
	}
 8007b62:	e011      	b.n	8007b88 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f893 30b1 	ldrb.w	r3, [r3, #177]	; 0xb1
 8007b6a:	2b02      	cmp	r3, #2
 8007b6c:	d00c      	beq.n	8007b88 <prvDeleteTCB+0x64>
	__asm volatile
 8007b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b72:	b672      	cpsid	i
 8007b74:	f383 8811 	msr	BASEPRI, r3
 8007b78:	f3bf 8f6f 	isb	sy
 8007b7c:	f3bf 8f4f 	dsb	sy
 8007b80:	b662      	cpsie	i
 8007b82:	60fb      	str	r3, [r7, #12]
}
 8007b84:	bf00      	nop
 8007b86:	e7fe      	b.n	8007b86 <prvDeleteTCB+0x62>
	}
 8007b88:	bf00      	nop
 8007b8a:	3710      	adds	r7, #16
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	bd80      	pop	{r7, pc}

08007b90 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007b90:	b480      	push	{r7}
 8007b92:	b083      	sub	sp, #12
 8007b94:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007b96:	4b0c      	ldr	r3, [pc, #48]	; (8007bc8 <prvResetNextTaskUnblockTime+0x38>)
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	2b00      	cmp	r3, #0
 8007b9e:	d104      	bne.n	8007baa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <prvResetNextTaskUnblockTime+0x3c>)
 8007ba2:	f04f 32ff 	mov.w	r2, #4294967295
 8007ba6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007ba8:	e008      	b.n	8007bbc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007baa:	4b07      	ldr	r3, [pc, #28]	; (8007bc8 <prvResetNextTaskUnblockTime+0x38>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	68db      	ldr	r3, [r3, #12]
 8007bb0:	68db      	ldr	r3, [r3, #12]
 8007bb2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	4a04      	ldr	r2, [pc, #16]	; (8007bcc <prvResetNextTaskUnblockTime+0x3c>)
 8007bba:	6013      	str	r3, [r2, #0]
}
 8007bbc:	bf00      	nop
 8007bbe:	370c      	adds	r7, #12
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bc6:	4770      	bx	lr
 8007bc8:	2000512c 	.word	0x2000512c
 8007bcc:	20005194 	.word	0x20005194

08007bd0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007bd6:	4b0b      	ldr	r3, [pc, #44]	; (8007c04 <xTaskGetSchedulerState+0x34>)
 8007bd8:	681b      	ldr	r3, [r3, #0]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d102      	bne.n	8007be4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8007bde:	2301      	movs	r3, #1
 8007be0:	607b      	str	r3, [r7, #4]
 8007be2:	e008      	b.n	8007bf6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007be4:	4b08      	ldr	r3, [pc, #32]	; (8007c08 <xTaskGetSchedulerState+0x38>)
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d102      	bne.n	8007bf2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8007bec:	2302      	movs	r3, #2
 8007bee:	607b      	str	r3, [r7, #4]
 8007bf0:	e001      	b.n	8007bf6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007bf6:	687b      	ldr	r3, [r7, #4]
	}
 8007bf8:	4618      	mov	r0, r3
 8007bfa:	370c      	adds	r7, #12
 8007bfc:	46bd      	mov	sp, r7
 8007bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c02:	4770      	bx	lr
 8007c04:	20005180 	.word	0x20005180
 8007c08:	2000519c 	.word	0x2000519c

08007c0c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b084      	sub	sp, #16
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8007c18:	2300      	movs	r3, #0
 8007c1a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d069      	beq.n	8007cf6 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c26:	4b36      	ldr	r3, [pc, #216]	; (8007d00 <xTaskPriorityInherit+0xf4>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c2c:	429a      	cmp	r2, r3
 8007c2e:	d259      	bcs.n	8007ce4 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007c30:	68bb      	ldr	r3, [r7, #8]
 8007c32:	699b      	ldr	r3, [r3, #24]
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	db06      	blt.n	8007c46 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c38:	4b31      	ldr	r3, [pc, #196]	; (8007d00 <xTaskPriorityInherit+0xf4>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c3e:	f1c3 0207 	rsb	r2, r3, #7
 8007c42:	68bb      	ldr	r3, [r7, #8]
 8007c44:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8007c46:	68bb      	ldr	r3, [r7, #8]
 8007c48:	6959      	ldr	r1, [r3, #20]
 8007c4a:	68bb      	ldr	r3, [r7, #8]
 8007c4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4e:	4613      	mov	r3, r2
 8007c50:	009b      	lsls	r3, r3, #2
 8007c52:	4413      	add	r3, r2
 8007c54:	009b      	lsls	r3, r3, #2
 8007c56:	4a2b      	ldr	r2, [pc, #172]	; (8007d04 <xTaskPriorityInherit+0xf8>)
 8007c58:	4413      	add	r3, r2
 8007c5a:	4299      	cmp	r1, r3
 8007c5c:	d13a      	bne.n	8007cd4 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007c5e:	68bb      	ldr	r3, [r7, #8]
 8007c60:	3304      	adds	r3, #4
 8007c62:	4618      	mov	r0, r3
 8007c64:	f7fe f9dc 	bl	8006020 <uxListRemove>
 8007c68:	4603      	mov	r3, r0
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d115      	bne.n	8007c9a <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8007c6e:	68bb      	ldr	r3, [r7, #8]
 8007c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c72:	4924      	ldr	r1, [pc, #144]	; (8007d04 <xTaskPriorityInherit+0xf8>)
 8007c74:	4613      	mov	r3, r2
 8007c76:	009b      	lsls	r3, r3, #2
 8007c78:	4413      	add	r3, r2
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	440b      	add	r3, r1
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d10a      	bne.n	8007c9a <xTaskPriorityInherit+0x8e>
 8007c84:	68bb      	ldr	r3, [r7, #8]
 8007c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c88:	2201      	movs	r2, #1
 8007c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c8e:	43da      	mvns	r2, r3
 8007c90:	4b1d      	ldr	r3, [pc, #116]	; (8007d08 <xTaskPriorityInherit+0xfc>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	4013      	ands	r3, r2
 8007c96:	4a1c      	ldr	r2, [pc, #112]	; (8007d08 <xTaskPriorityInherit+0xfc>)
 8007c98:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007c9a:	4b19      	ldr	r3, [pc, #100]	; (8007d00 <xTaskPriorityInherit+0xf4>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca8:	2201      	movs	r2, #1
 8007caa:	409a      	lsls	r2, r3
 8007cac:	4b16      	ldr	r3, [pc, #88]	; (8007d08 <xTaskPriorityInherit+0xfc>)
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	4313      	orrs	r3, r2
 8007cb2:	4a15      	ldr	r2, [pc, #84]	; (8007d08 <xTaskPriorityInherit+0xfc>)
 8007cb4:	6013      	str	r3, [r2, #0]
 8007cb6:	68bb      	ldr	r3, [r7, #8]
 8007cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cba:	4613      	mov	r3, r2
 8007cbc:	009b      	lsls	r3, r3, #2
 8007cbe:	4413      	add	r3, r2
 8007cc0:	009b      	lsls	r3, r3, #2
 8007cc2:	4a10      	ldr	r2, [pc, #64]	; (8007d04 <xTaskPriorityInherit+0xf8>)
 8007cc4:	441a      	add	r2, r3
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	3304      	adds	r3, #4
 8007cca:	4619      	mov	r1, r3
 8007ccc:	4610      	mov	r0, r2
 8007cce:	f7fe f94a 	bl	8005f66 <vListInsertEnd>
 8007cd2:	e004      	b.n	8007cde <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8007cd4:	4b0a      	ldr	r3, [pc, #40]	; (8007d00 <xTaskPriorityInherit+0xf4>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007cda:	68bb      	ldr	r3, [r7, #8]
 8007cdc:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8007cde:	2301      	movs	r3, #1
 8007ce0:	60fb      	str	r3, [r7, #12]
 8007ce2:	e008      	b.n	8007cf6 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007ce8:	4b05      	ldr	r3, [pc, #20]	; (8007d00 <xTaskPriorityInherit+0xf4>)
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007cee:	429a      	cmp	r2, r3
 8007cf0:	d201      	bcs.n	8007cf6 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8007cf2:	2301      	movs	r3, #1
 8007cf4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
	}
 8007cf8:	4618      	mov	r0, r3
 8007cfa:	3710      	adds	r7, #16
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}
 8007d00:	20005074 	.word	0x20005074
 8007d04:	20005078 	.word	0x20005078
 8007d08:	2000517c 	.word	0x2000517c

08007d0c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007d0c:	b580      	push	{r7, lr}
 8007d0e:	b086      	sub	sp, #24
 8007d10:	af00      	add	r7, sp, #0
 8007d12:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007d18:	2300      	movs	r3, #0
 8007d1a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d072      	beq.n	8007e08 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007d22:	4b3c      	ldr	r3, [pc, #240]	; (8007e14 <xTaskPriorityDisinherit+0x108>)
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	429a      	cmp	r2, r3
 8007d2a:	d00c      	beq.n	8007d46 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8007d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d30:	b672      	cpsid	i
 8007d32:	f383 8811 	msr	BASEPRI, r3
 8007d36:	f3bf 8f6f 	isb	sy
 8007d3a:	f3bf 8f4f 	dsb	sy
 8007d3e:	b662      	cpsie	i
 8007d40:	60fb      	str	r3, [r7, #12]
}
 8007d42:	bf00      	nop
 8007d44:	e7fe      	b.n	8007d44 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8007d46:	693b      	ldr	r3, [r7, #16]
 8007d48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d10c      	bne.n	8007d68 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8007d4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007d52:	b672      	cpsid	i
 8007d54:	f383 8811 	msr	BASEPRI, r3
 8007d58:	f3bf 8f6f 	isb	sy
 8007d5c:	f3bf 8f4f 	dsb	sy
 8007d60:	b662      	cpsie	i
 8007d62:	60bb      	str	r3, [r7, #8]
}
 8007d64:	bf00      	nop
 8007d66:	e7fe      	b.n	8007d66 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8007d68:	693b      	ldr	r3, [r7, #16]
 8007d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6c:	1e5a      	subs	r2, r3, #1
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007d72:	693b      	ldr	r3, [r7, #16]
 8007d74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d76:	693b      	ldr	r3, [r7, #16]
 8007d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d044      	beq.n	8007e08 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007d7e:	693b      	ldr	r3, [r7, #16]
 8007d80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d82:	2b00      	cmp	r3, #0
 8007d84:	d140      	bne.n	8007e08 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007d86:	693b      	ldr	r3, [r7, #16]
 8007d88:	3304      	adds	r3, #4
 8007d8a:	4618      	mov	r0, r3
 8007d8c:	f7fe f948 	bl	8006020 <uxListRemove>
 8007d90:	4603      	mov	r3, r0
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d115      	bne.n	8007dc2 <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d9a:	491f      	ldr	r1, [pc, #124]	; (8007e18 <xTaskPriorityDisinherit+0x10c>)
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	009b      	lsls	r3, r3, #2
 8007da0:	4413      	add	r3, r2
 8007da2:	009b      	lsls	r3, r3, #2
 8007da4:	440b      	add	r3, r1
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d10a      	bne.n	8007dc2 <xTaskPriorityDisinherit+0xb6>
 8007dac:	693b      	ldr	r3, [r7, #16]
 8007dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007db0:	2201      	movs	r2, #1
 8007db2:	fa02 f303 	lsl.w	r3, r2, r3
 8007db6:	43da      	mvns	r2, r3
 8007db8:	4b18      	ldr	r3, [pc, #96]	; (8007e1c <xTaskPriorityDisinherit+0x110>)
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	4013      	ands	r3, r2
 8007dbe:	4a17      	ldr	r2, [pc, #92]	; (8007e1c <xTaskPriorityDisinherit+0x110>)
 8007dc0:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007dc2:	693b      	ldr	r3, [r7, #16]
 8007dc4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007dca:	693b      	ldr	r3, [r7, #16]
 8007dcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dce:	f1c3 0207 	rsb	r2, r3, #7
 8007dd2:	693b      	ldr	r3, [r7, #16]
 8007dd4:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007dd6:	693b      	ldr	r3, [r7, #16]
 8007dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007dda:	2201      	movs	r2, #1
 8007ddc:	409a      	lsls	r2, r3
 8007dde:	4b0f      	ldr	r3, [pc, #60]	; (8007e1c <xTaskPriorityDisinherit+0x110>)
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	4313      	orrs	r3, r2
 8007de4:	4a0d      	ldr	r2, [pc, #52]	; (8007e1c <xTaskPriorityDisinherit+0x110>)
 8007de6:	6013      	str	r3, [r2, #0]
 8007de8:	693b      	ldr	r3, [r7, #16]
 8007dea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007dec:	4613      	mov	r3, r2
 8007dee:	009b      	lsls	r3, r3, #2
 8007df0:	4413      	add	r3, r2
 8007df2:	009b      	lsls	r3, r3, #2
 8007df4:	4a08      	ldr	r2, [pc, #32]	; (8007e18 <xTaskPriorityDisinherit+0x10c>)
 8007df6:	441a      	add	r2, r3
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	3304      	adds	r3, #4
 8007dfc:	4619      	mov	r1, r3
 8007dfe:	4610      	mov	r0, r2
 8007e00:	f7fe f8b1 	bl	8005f66 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007e04:	2301      	movs	r3, #1
 8007e06:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007e08:	697b      	ldr	r3, [r7, #20]
	}
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	3718      	adds	r7, #24
 8007e0e:	46bd      	mov	sp, r7
 8007e10:	bd80      	pop	{r7, pc}
 8007e12:	bf00      	nop
 8007e14:	20005074 	.word	0x20005074
 8007e18:	20005078 	.word	0x20005078
 8007e1c:	2000517c 	.word	0x2000517c

08007e20 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8007e20:	b580      	push	{r7, lr}
 8007e22:	b088      	sub	sp, #32
 8007e24:	af00      	add	r7, sp, #0
 8007e26:	6078      	str	r0, [r7, #4]
 8007e28:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8007e2e:	2301      	movs	r3, #1
 8007e30:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2b00      	cmp	r3, #0
 8007e36:	f000 8087 	beq.w	8007f48 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8007e3a:	69bb      	ldr	r3, [r7, #24]
 8007e3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d10c      	bne.n	8007e5c <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8007e42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e46:	b672      	cpsid	i
 8007e48:	f383 8811 	msr	BASEPRI, r3
 8007e4c:	f3bf 8f6f 	isb	sy
 8007e50:	f3bf 8f4f 	dsb	sy
 8007e54:	b662      	cpsie	i
 8007e56:	60fb      	str	r3, [r7, #12]
}
 8007e58:	bf00      	nop
 8007e5a:	e7fe      	b.n	8007e5a <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8007e5c:	69bb      	ldr	r3, [r7, #24]
 8007e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e60:	683a      	ldr	r2, [r7, #0]
 8007e62:	429a      	cmp	r2, r3
 8007e64:	d902      	bls.n	8007e6c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8007e66:	683b      	ldr	r3, [r7, #0]
 8007e68:	61fb      	str	r3, [r7, #28]
 8007e6a:	e002      	b.n	8007e72 <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8007e6c:	69bb      	ldr	r3, [r7, #24]
 8007e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e70:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8007e72:	69bb      	ldr	r3, [r7, #24]
 8007e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e76:	69fa      	ldr	r2, [r7, #28]
 8007e78:	429a      	cmp	r2, r3
 8007e7a:	d065      	beq.n	8007f48 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8007e7c:	69bb      	ldr	r3, [r7, #24]
 8007e7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e80:	697a      	ldr	r2, [r7, #20]
 8007e82:	429a      	cmp	r2, r3
 8007e84:	d160      	bne.n	8007f48 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8007e86:	4b32      	ldr	r3, [pc, #200]	; (8007f50 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	69ba      	ldr	r2, [r7, #24]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d10c      	bne.n	8007eaa <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8007e90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e94:	b672      	cpsid	i
 8007e96:	f383 8811 	msr	BASEPRI, r3
 8007e9a:	f3bf 8f6f 	isb	sy
 8007e9e:	f3bf 8f4f 	dsb	sy
 8007ea2:	b662      	cpsie	i
 8007ea4:	60bb      	str	r3, [r7, #8]
}
 8007ea6:	bf00      	nop
 8007ea8:	e7fe      	b.n	8007ea8 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8007eaa:	69bb      	ldr	r3, [r7, #24]
 8007eac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007eae:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8007eb0:	69bb      	ldr	r3, [r7, #24]
 8007eb2:	69fa      	ldr	r2, [r7, #28]
 8007eb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	699b      	ldr	r3, [r3, #24]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	db04      	blt.n	8007ec8 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007ebe:	69fb      	ldr	r3, [r7, #28]
 8007ec0:	f1c3 0207 	rsb	r2, r3, #7
 8007ec4:	69bb      	ldr	r3, [r7, #24]
 8007ec6:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8007ec8:	69bb      	ldr	r3, [r7, #24]
 8007eca:	6959      	ldr	r1, [r3, #20]
 8007ecc:	693a      	ldr	r2, [r7, #16]
 8007ece:	4613      	mov	r3, r2
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	4413      	add	r3, r2
 8007ed4:	009b      	lsls	r3, r3, #2
 8007ed6:	4a1f      	ldr	r2, [pc, #124]	; (8007f54 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007ed8:	4413      	add	r3, r2
 8007eda:	4299      	cmp	r1, r3
 8007edc:	d134      	bne.n	8007f48 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ede:	69bb      	ldr	r3, [r7, #24]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	4618      	mov	r0, r3
 8007ee4:	f7fe f89c 	bl	8006020 <uxListRemove>
 8007ee8:	4603      	mov	r3, r0
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d115      	bne.n	8007f1a <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ef2:	4918      	ldr	r1, [pc, #96]	; (8007f54 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007ef4:	4613      	mov	r3, r2
 8007ef6:	009b      	lsls	r3, r3, #2
 8007ef8:	4413      	add	r3, r2
 8007efa:	009b      	lsls	r3, r3, #2
 8007efc:	440b      	add	r3, r1
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	d10a      	bne.n	8007f1a <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8007f04:	69bb      	ldr	r3, [r7, #24]
 8007f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f08:	2201      	movs	r2, #1
 8007f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f0e:	43da      	mvns	r2, r3
 8007f10:	4b11      	ldr	r3, [pc, #68]	; (8007f58 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	4013      	ands	r3, r2
 8007f16:	4a10      	ldr	r2, [pc, #64]	; (8007f58 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f18:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8007f1a:	69bb      	ldr	r3, [r7, #24]
 8007f1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007f1e:	2201      	movs	r2, #1
 8007f20:	409a      	lsls	r2, r3
 8007f22:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	4a0b      	ldr	r2, [pc, #44]	; (8007f58 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8007f2a:	6013      	str	r3, [r2, #0]
 8007f2c:	69bb      	ldr	r3, [r7, #24]
 8007f2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007f30:	4613      	mov	r3, r2
 8007f32:	009b      	lsls	r3, r3, #2
 8007f34:	4413      	add	r3, r2
 8007f36:	009b      	lsls	r3, r3, #2
 8007f38:	4a06      	ldr	r2, [pc, #24]	; (8007f54 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8007f3a:	441a      	add	r2, r3
 8007f3c:	69bb      	ldr	r3, [r7, #24]
 8007f3e:	3304      	adds	r3, #4
 8007f40:	4619      	mov	r1, r3
 8007f42:	4610      	mov	r0, r2
 8007f44:	f7fe f80f 	bl	8005f66 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007f48:	bf00      	nop
 8007f4a:	3720      	adds	r7, #32
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}
 8007f50:	20005074 	.word	0x20005074
 8007f54:	20005078 	.word	0x20005078
 8007f58:	2000517c 	.word	0x2000517c

08007f5c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8007f5c:	b480      	push	{r7}
 8007f5e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8007f60:	4b07      	ldr	r3, [pc, #28]	; (8007f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d004      	beq.n	8007f72 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8007f68:	4b05      	ldr	r3, [pc, #20]	; (8007f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f6e:	3201      	adds	r2, #1
 8007f70:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8007f72:	4b03      	ldr	r3, [pc, #12]	; (8007f80 <pvTaskIncrementMutexHeldCount+0x24>)
 8007f74:	681b      	ldr	r3, [r3, #0]
	}
 8007f76:	4618      	mov	r0, r3
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f7e:	4770      	bx	lr
 8007f80:	20005074 	.word	0x20005074

08007f84 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007f84:	b580      	push	{r7, lr}
 8007f86:	b084      	sub	sp, #16
 8007f88:	af00      	add	r7, sp, #0
 8007f8a:	6078      	str	r0, [r7, #4]
 8007f8c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007f8e:	4b29      	ldr	r3, [pc, #164]	; (8008034 <prvAddCurrentTaskToDelayedList+0xb0>)
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007f94:	4b28      	ldr	r3, [pc, #160]	; (8008038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	3304      	adds	r3, #4
 8007f9a:	4618      	mov	r0, r3
 8007f9c:	f7fe f840 	bl	8006020 <uxListRemove>
 8007fa0:	4603      	mov	r3, r0
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8007fa6:	4b24      	ldr	r3, [pc, #144]	; (8008038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007fac:	2201      	movs	r2, #1
 8007fae:	fa02 f303 	lsl.w	r3, r2, r3
 8007fb2:	43da      	mvns	r2, r3
 8007fb4:	4b21      	ldr	r3, [pc, #132]	; (800803c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	4a20      	ldr	r2, [pc, #128]	; (800803c <prvAddCurrentTaskToDelayedList+0xb8>)
 8007fbc:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007fc4:	d10a      	bne.n	8007fdc <prvAddCurrentTaskToDelayedList+0x58>
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	2b00      	cmp	r3, #0
 8007fca:	d007      	beq.n	8007fdc <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007fcc:	4b1a      	ldr	r3, [pc, #104]	; (8008038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	3304      	adds	r3, #4
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	481a      	ldr	r0, [pc, #104]	; (8008040 <prvAddCurrentTaskToDelayedList+0xbc>)
 8007fd6:	f7fd ffc6 	bl	8005f66 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007fda:	e026      	b.n	800802a <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007fdc:	68fa      	ldr	r2, [r7, #12]
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	4413      	add	r3, r2
 8007fe2:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007fe4:	4b14      	ldr	r3, [pc, #80]	; (8008038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	68ba      	ldr	r2, [r7, #8]
 8007fea:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007fec:	68ba      	ldr	r2, [r7, #8]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	429a      	cmp	r2, r3
 8007ff2:	d209      	bcs.n	8008008 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007ff4:	4b13      	ldr	r3, [pc, #76]	; (8008044 <prvAddCurrentTaskToDelayedList+0xc0>)
 8007ff6:	681a      	ldr	r2, [r3, #0]
 8007ff8:	4b0f      	ldr	r3, [pc, #60]	; (8008038 <prvAddCurrentTaskToDelayedList+0xb4>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	3304      	adds	r3, #4
 8007ffe:	4619      	mov	r1, r3
 8008000:	4610      	mov	r0, r2
 8008002:	f7fd ffd4 	bl	8005fae <vListInsert>
}
 8008006:	e010      	b.n	800802a <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008008:	4b0f      	ldr	r3, [pc, #60]	; (8008048 <prvAddCurrentTaskToDelayedList+0xc4>)
 800800a:	681a      	ldr	r2, [r3, #0]
 800800c:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <prvAddCurrentTaskToDelayedList+0xb4>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	3304      	adds	r3, #4
 8008012:	4619      	mov	r1, r3
 8008014:	4610      	mov	r0, r2
 8008016:	f7fd ffca 	bl	8005fae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800801a:	4b0c      	ldr	r3, [pc, #48]	; (800804c <prvAddCurrentTaskToDelayedList+0xc8>)
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	68ba      	ldr	r2, [r7, #8]
 8008020:	429a      	cmp	r2, r3
 8008022:	d202      	bcs.n	800802a <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008024:	4a09      	ldr	r2, [pc, #36]	; (800804c <prvAddCurrentTaskToDelayedList+0xc8>)
 8008026:	68bb      	ldr	r3, [r7, #8]
 8008028:	6013      	str	r3, [r2, #0]
}
 800802a:	bf00      	nop
 800802c:	3710      	adds	r7, #16
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20005178 	.word	0x20005178
 8008038:	20005074 	.word	0x20005074
 800803c:	2000517c 	.word	0x2000517c
 8008040:	20005160 	.word	0x20005160
 8008044:	20005130 	.word	0x20005130
 8008048:	2000512c 	.word	0x2000512c
 800804c:	20005194 	.word	0x20005194

08008050 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	60f8      	str	r0, [r7, #12]
 8008058:	60b9      	str	r1, [r7, #8]
 800805a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	3b04      	subs	r3, #4
 8008060:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008068:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b04      	subs	r3, #4
 800806e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008070:	68bb      	ldr	r3, [r7, #8]
 8008072:	f023 0201 	bic.w	r2, r3, #1
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	3b04      	subs	r3, #4
 800807e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008080:	4a0c      	ldr	r2, [pc, #48]	; (80080b4 <pxPortInitialiseStack+0x64>)
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	3b14      	subs	r3, #20
 800808a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800808c:	687a      	ldr	r2, [r7, #4]
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	3b04      	subs	r3, #4
 8008096:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	f06f 0202 	mvn.w	r2, #2
 800809e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80080a0:	68fb      	ldr	r3, [r7, #12]
 80080a2:	3b20      	subs	r3, #32
 80080a4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80080a6:	68fb      	ldr	r3, [r7, #12]
}
 80080a8:	4618      	mov	r0, r3
 80080aa:	3714      	adds	r7, #20
 80080ac:	46bd      	mov	sp, r7
 80080ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b2:	4770      	bx	lr
 80080b4:	080080b9 	.word	0x080080b9

080080b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080be:	2300      	movs	r3, #0
 80080c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080c2:	4b14      	ldr	r3, [pc, #80]	; (8008114 <prvTaskExitError+0x5c>)
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080ca:	d00c      	beq.n	80080e6 <prvTaskExitError+0x2e>
	__asm volatile
 80080cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080d0:	b672      	cpsid	i
 80080d2:	f383 8811 	msr	BASEPRI, r3
 80080d6:	f3bf 8f6f 	isb	sy
 80080da:	f3bf 8f4f 	dsb	sy
 80080de:	b662      	cpsie	i
 80080e0:	60fb      	str	r3, [r7, #12]
}
 80080e2:	bf00      	nop
 80080e4:	e7fe      	b.n	80080e4 <prvTaskExitError+0x2c>
	__asm volatile
 80080e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ea:	b672      	cpsid	i
 80080ec:	f383 8811 	msr	BASEPRI, r3
 80080f0:	f3bf 8f6f 	isb	sy
 80080f4:	f3bf 8f4f 	dsb	sy
 80080f8:	b662      	cpsie	i
 80080fa:	60bb      	str	r3, [r7, #8]
}
 80080fc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080fe:	bf00      	nop
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	2b00      	cmp	r3, #0
 8008104:	d0fc      	beq.n	8008100 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008106:	bf00      	nop
 8008108:	bf00      	nop
 800810a:	3714      	adds	r7, #20
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	20000020 	.word	0x20000020
	...

08008120 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008120:	4b07      	ldr	r3, [pc, #28]	; (8008140 <pxCurrentTCBConst2>)
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	6808      	ldr	r0, [r1, #0]
 8008126:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800812a:	f380 8809 	msr	PSP, r0
 800812e:	f3bf 8f6f 	isb	sy
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8811 	msr	BASEPRI, r0
 800813a:	4770      	bx	lr
 800813c:	f3af 8000 	nop.w

08008140 <pxCurrentTCBConst2>:
 8008140:	20005074 	.word	0x20005074
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008144:	bf00      	nop
 8008146:	bf00      	nop

08008148 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008148:	4808      	ldr	r0, [pc, #32]	; (800816c <prvPortStartFirstTask+0x24>)
 800814a:	6800      	ldr	r0, [r0, #0]
 800814c:	6800      	ldr	r0, [r0, #0]
 800814e:	f380 8808 	msr	MSP, r0
 8008152:	f04f 0000 	mov.w	r0, #0
 8008156:	f380 8814 	msr	CONTROL, r0
 800815a:	b662      	cpsie	i
 800815c:	b661      	cpsie	f
 800815e:	f3bf 8f4f 	dsb	sy
 8008162:	f3bf 8f6f 	isb	sy
 8008166:	df00      	svc	0
 8008168:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800816a:	bf00      	nop
 800816c:	e000ed08 	.word	0xe000ed08

08008170 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b084      	sub	sp, #16
 8008174:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008176:	4b37      	ldr	r3, [pc, #220]	; (8008254 <xPortStartScheduler+0xe4>)
 8008178:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	781b      	ldrb	r3, [r3, #0]
 800817e:	b2db      	uxtb	r3, r3
 8008180:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	22ff      	movs	r2, #255	; 0xff
 8008186:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	b2db      	uxtb	r3, r3
 800818e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008190:	78fb      	ldrb	r3, [r7, #3]
 8008192:	b2db      	uxtb	r3, r3
 8008194:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008198:	b2da      	uxtb	r2, r3
 800819a:	4b2f      	ldr	r3, [pc, #188]	; (8008258 <xPortStartScheduler+0xe8>)
 800819c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800819e:	4b2f      	ldr	r3, [pc, #188]	; (800825c <xPortStartScheduler+0xec>)
 80081a0:	2207      	movs	r2, #7
 80081a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081a4:	e009      	b.n	80081ba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 80081a6:	4b2d      	ldr	r3, [pc, #180]	; (800825c <xPortStartScheduler+0xec>)
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	3b01      	subs	r3, #1
 80081ac:	4a2b      	ldr	r2, [pc, #172]	; (800825c <xPortStartScheduler+0xec>)
 80081ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	005b      	lsls	r3, r3, #1
 80081b6:	b2db      	uxtb	r3, r3
 80081b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081ba:	78fb      	ldrb	r3, [r7, #3]
 80081bc:	b2db      	uxtb	r3, r3
 80081be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081c2:	2b80      	cmp	r3, #128	; 0x80
 80081c4:	d0ef      	beq.n	80081a6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081c6:	4b25      	ldr	r3, [pc, #148]	; (800825c <xPortStartScheduler+0xec>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	f1c3 0307 	rsb	r3, r3, #7
 80081ce:	2b04      	cmp	r3, #4
 80081d0:	d00c      	beq.n	80081ec <xPortStartScheduler+0x7c>
	__asm volatile
 80081d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081d6:	b672      	cpsid	i
 80081d8:	f383 8811 	msr	BASEPRI, r3
 80081dc:	f3bf 8f6f 	isb	sy
 80081e0:	f3bf 8f4f 	dsb	sy
 80081e4:	b662      	cpsie	i
 80081e6:	60bb      	str	r3, [r7, #8]
}
 80081e8:	bf00      	nop
 80081ea:	e7fe      	b.n	80081ea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80081ec:	4b1b      	ldr	r3, [pc, #108]	; (800825c <xPortStartScheduler+0xec>)
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	021b      	lsls	r3, r3, #8
 80081f2:	4a1a      	ldr	r2, [pc, #104]	; (800825c <xPortStartScheduler+0xec>)
 80081f4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80081f6:	4b19      	ldr	r3, [pc, #100]	; (800825c <xPortStartScheduler+0xec>)
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80081fe:	4a17      	ldr	r2, [pc, #92]	; (800825c <xPortStartScheduler+0xec>)
 8008200:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	b2da      	uxtb	r2, r3
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800820a:	4b15      	ldr	r3, [pc, #84]	; (8008260 <xPortStartScheduler+0xf0>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	4a14      	ldr	r2, [pc, #80]	; (8008260 <xPortStartScheduler+0xf0>)
 8008210:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008214:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008216:	4b12      	ldr	r3, [pc, #72]	; (8008260 <xPortStartScheduler+0xf0>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4a11      	ldr	r2, [pc, #68]	; (8008260 <xPortStartScheduler+0xf0>)
 800821c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008220:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008222:	f000 f8dd 	bl	80083e0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008226:	4b0f      	ldr	r3, [pc, #60]	; (8008264 <xPortStartScheduler+0xf4>)
 8008228:	2200      	movs	r2, #0
 800822a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800822c:	f000 f8fc 	bl	8008428 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008230:	4b0d      	ldr	r3, [pc, #52]	; (8008268 <xPortStartScheduler+0xf8>)
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	4a0c      	ldr	r2, [pc, #48]	; (8008268 <xPortStartScheduler+0xf8>)
 8008236:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800823a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800823c:	f7ff ff84 	bl	8008148 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008240:	f7ff fa74 	bl	800772c <vTaskSwitchContext>
	prvTaskExitError();
 8008244:	f7ff ff38 	bl	80080b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008248:	2300      	movs	r3, #0
}
 800824a:	4618      	mov	r0, r3
 800824c:	3710      	adds	r7, #16
 800824e:	46bd      	mov	sp, r7
 8008250:	bd80      	pop	{r7, pc}
 8008252:	bf00      	nop
 8008254:	e000e400 	.word	0xe000e400
 8008258:	200051a0 	.word	0x200051a0
 800825c:	200051a4 	.word	0x200051a4
 8008260:	e000ed20 	.word	0xe000ed20
 8008264:	20000020 	.word	0x20000020
 8008268:	e000ef34 	.word	0xe000ef34

0800826c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800826c:	b480      	push	{r7}
 800826e:	b083      	sub	sp, #12
 8008270:	af00      	add	r7, sp, #0
	__asm volatile
 8008272:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008276:	b672      	cpsid	i
 8008278:	f383 8811 	msr	BASEPRI, r3
 800827c:	f3bf 8f6f 	isb	sy
 8008280:	f3bf 8f4f 	dsb	sy
 8008284:	b662      	cpsie	i
 8008286:	607b      	str	r3, [r7, #4]
}
 8008288:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800828a:	4b10      	ldr	r3, [pc, #64]	; (80082cc <vPortEnterCritical+0x60>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	3301      	adds	r3, #1
 8008290:	4a0e      	ldr	r2, [pc, #56]	; (80082cc <vPortEnterCritical+0x60>)
 8008292:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008294:	4b0d      	ldr	r3, [pc, #52]	; (80082cc <vPortEnterCritical+0x60>)
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d111      	bne.n	80082c0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800829c:	4b0c      	ldr	r3, [pc, #48]	; (80082d0 <vPortEnterCritical+0x64>)
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	b2db      	uxtb	r3, r3
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	d00c      	beq.n	80082c0 <vPortEnterCritical+0x54>
	__asm volatile
 80082a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082aa:	b672      	cpsid	i
 80082ac:	f383 8811 	msr	BASEPRI, r3
 80082b0:	f3bf 8f6f 	isb	sy
 80082b4:	f3bf 8f4f 	dsb	sy
 80082b8:	b662      	cpsie	i
 80082ba:	603b      	str	r3, [r7, #0]
}
 80082bc:	bf00      	nop
 80082be:	e7fe      	b.n	80082be <vPortEnterCritical+0x52>
	}
}
 80082c0:	bf00      	nop
 80082c2:	370c      	adds	r7, #12
 80082c4:	46bd      	mov	sp, r7
 80082c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ca:	4770      	bx	lr
 80082cc:	20000020 	.word	0x20000020
 80082d0:	e000ed04 	.word	0xe000ed04

080082d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082da:	4b13      	ldr	r3, [pc, #76]	; (8008328 <vPortExitCritical+0x54>)
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	2b00      	cmp	r3, #0
 80082e0:	d10c      	bne.n	80082fc <vPortExitCritical+0x28>
	__asm volatile
 80082e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082e6:	b672      	cpsid	i
 80082e8:	f383 8811 	msr	BASEPRI, r3
 80082ec:	f3bf 8f6f 	isb	sy
 80082f0:	f3bf 8f4f 	dsb	sy
 80082f4:	b662      	cpsie	i
 80082f6:	607b      	str	r3, [r7, #4]
}
 80082f8:	bf00      	nop
 80082fa:	e7fe      	b.n	80082fa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80082fc:	4b0a      	ldr	r3, [pc, #40]	; (8008328 <vPortExitCritical+0x54>)
 80082fe:	681b      	ldr	r3, [r3, #0]
 8008300:	3b01      	subs	r3, #1
 8008302:	4a09      	ldr	r2, [pc, #36]	; (8008328 <vPortExitCritical+0x54>)
 8008304:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008306:	4b08      	ldr	r3, [pc, #32]	; (8008328 <vPortExitCritical+0x54>)
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	2b00      	cmp	r3, #0
 800830c:	d105      	bne.n	800831a <vPortExitCritical+0x46>
 800830e:	2300      	movs	r3, #0
 8008310:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008312:	683b      	ldr	r3, [r7, #0]
 8008314:	f383 8811 	msr	BASEPRI, r3
}
 8008318:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800831a:	bf00      	nop
 800831c:	370c      	adds	r7, #12
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	20000020 	.word	0x20000020
 800832c:	00000000 	.word	0x00000000

08008330 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008330:	f3ef 8009 	mrs	r0, PSP
 8008334:	f3bf 8f6f 	isb	sy
 8008338:	4b15      	ldr	r3, [pc, #84]	; (8008390 <pxCurrentTCBConst>)
 800833a:	681a      	ldr	r2, [r3, #0]
 800833c:	f01e 0f10 	tst.w	lr, #16
 8008340:	bf08      	it	eq
 8008342:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008346:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800834a:	6010      	str	r0, [r2, #0]
 800834c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008350:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008354:	b672      	cpsid	i
 8008356:	f380 8811 	msr	BASEPRI, r0
 800835a:	f3bf 8f4f 	dsb	sy
 800835e:	f3bf 8f6f 	isb	sy
 8008362:	b662      	cpsie	i
 8008364:	f7ff f9e2 	bl	800772c <vTaskSwitchContext>
 8008368:	f04f 0000 	mov.w	r0, #0
 800836c:	f380 8811 	msr	BASEPRI, r0
 8008370:	bc09      	pop	{r0, r3}
 8008372:	6819      	ldr	r1, [r3, #0]
 8008374:	6808      	ldr	r0, [r1, #0]
 8008376:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800837a:	f01e 0f10 	tst.w	lr, #16
 800837e:	bf08      	it	eq
 8008380:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8008384:	f380 8809 	msr	PSP, r0
 8008388:	f3bf 8f6f 	isb	sy
 800838c:	4770      	bx	lr
 800838e:	bf00      	nop

08008390 <pxCurrentTCBConst>:
 8008390:	20005074 	.word	0x20005074
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008394:	bf00      	nop
 8008396:	bf00      	nop

08008398 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008398:	b580      	push	{r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
	__asm volatile
 800839e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083a2:	b672      	cpsid	i
 80083a4:	f383 8811 	msr	BASEPRI, r3
 80083a8:	f3bf 8f6f 	isb	sy
 80083ac:	f3bf 8f4f 	dsb	sy
 80083b0:	b662      	cpsie	i
 80083b2:	607b      	str	r3, [r7, #4]
}
 80083b4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083b6:	f7ff f8ff 	bl	80075b8 <xTaskIncrementTick>
 80083ba:	4603      	mov	r3, r0
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d003      	beq.n	80083c8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083c0:	4b06      	ldr	r3, [pc, #24]	; (80083dc <SysTick_Handler+0x44>)
 80083c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083c6:	601a      	str	r2, [r3, #0]
 80083c8:	2300      	movs	r3, #0
 80083ca:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083cc:	683b      	ldr	r3, [r7, #0]
 80083ce:	f383 8811 	msr	BASEPRI, r3
}
 80083d2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083d4:	bf00      	nop
 80083d6:	3708      	adds	r7, #8
 80083d8:	46bd      	mov	sp, r7
 80083da:	bd80      	pop	{r7, pc}
 80083dc:	e000ed04 	.word	0xe000ed04

080083e0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083e0:	b480      	push	{r7}
 80083e2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80083e4:	4b0b      	ldr	r3, [pc, #44]	; (8008414 <vPortSetupTimerInterrupt+0x34>)
 80083e6:	2200      	movs	r2, #0
 80083e8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80083ea:	4b0b      	ldr	r3, [pc, #44]	; (8008418 <vPortSetupTimerInterrupt+0x38>)
 80083ec:	2200      	movs	r2, #0
 80083ee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80083f0:	4b0a      	ldr	r3, [pc, #40]	; (800841c <vPortSetupTimerInterrupt+0x3c>)
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	4a0a      	ldr	r2, [pc, #40]	; (8008420 <vPortSetupTimerInterrupt+0x40>)
 80083f6:	fba2 2303 	umull	r2, r3, r2, r3
 80083fa:	099b      	lsrs	r3, r3, #6
 80083fc:	4a09      	ldr	r2, [pc, #36]	; (8008424 <vPortSetupTimerInterrupt+0x44>)
 80083fe:	3b01      	subs	r3, #1
 8008400:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008402:	4b04      	ldr	r3, [pc, #16]	; (8008414 <vPortSetupTimerInterrupt+0x34>)
 8008404:	2207      	movs	r2, #7
 8008406:	601a      	str	r2, [r3, #0]
}
 8008408:	bf00      	nop
 800840a:	46bd      	mov	sp, r7
 800840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008410:	4770      	bx	lr
 8008412:	bf00      	nop
 8008414:	e000e010 	.word	0xe000e010
 8008418:	e000e018 	.word	0xe000e018
 800841c:	20000000 	.word	0x20000000
 8008420:	10624dd3 	.word	0x10624dd3
 8008424:	e000e014 	.word	0xe000e014

08008428 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008428:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008438 <vPortEnableVFP+0x10>
 800842c:	6801      	ldr	r1, [r0, #0]
 800842e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8008432:	6001      	str	r1, [r0, #0]
 8008434:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008436:	bf00      	nop
 8008438:	e000ed88 	.word	0xe000ed88

0800843c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800843c:	b480      	push	{r7}
 800843e:	b085      	sub	sp, #20
 8008440:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008442:	f3ef 8305 	mrs	r3, IPSR
 8008446:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	2b0f      	cmp	r3, #15
 800844c:	d916      	bls.n	800847c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800844e:	4a19      	ldr	r2, [pc, #100]	; (80084b4 <vPortValidateInterruptPriority+0x78>)
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	4413      	add	r3, r2
 8008454:	781b      	ldrb	r3, [r3, #0]
 8008456:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008458:	4b17      	ldr	r3, [pc, #92]	; (80084b8 <vPortValidateInterruptPriority+0x7c>)
 800845a:	781b      	ldrb	r3, [r3, #0]
 800845c:	7afa      	ldrb	r2, [r7, #11]
 800845e:	429a      	cmp	r2, r3
 8008460:	d20c      	bcs.n	800847c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8008462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008466:	b672      	cpsid	i
 8008468:	f383 8811 	msr	BASEPRI, r3
 800846c:	f3bf 8f6f 	isb	sy
 8008470:	f3bf 8f4f 	dsb	sy
 8008474:	b662      	cpsie	i
 8008476:	607b      	str	r3, [r7, #4]
}
 8008478:	bf00      	nop
 800847a:	e7fe      	b.n	800847a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800847c:	4b0f      	ldr	r3, [pc, #60]	; (80084bc <vPortValidateInterruptPriority+0x80>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008484:	4b0e      	ldr	r3, [pc, #56]	; (80084c0 <vPortValidateInterruptPriority+0x84>)
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	429a      	cmp	r2, r3
 800848a:	d90c      	bls.n	80084a6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 800848c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008490:	b672      	cpsid	i
 8008492:	f383 8811 	msr	BASEPRI, r3
 8008496:	f3bf 8f6f 	isb	sy
 800849a:	f3bf 8f4f 	dsb	sy
 800849e:	b662      	cpsie	i
 80084a0:	603b      	str	r3, [r7, #0]
}
 80084a2:	bf00      	nop
 80084a4:	e7fe      	b.n	80084a4 <vPortValidateInterruptPriority+0x68>
	}
 80084a6:	bf00      	nop
 80084a8:	3714      	adds	r7, #20
 80084aa:	46bd      	mov	sp, r7
 80084ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b0:	4770      	bx	lr
 80084b2:	bf00      	nop
 80084b4:	e000e3f0 	.word	0xe000e3f0
 80084b8:	200051a0 	.word	0x200051a0
 80084bc:	e000ed0c 	.word	0xe000ed0c
 80084c0:	200051a4 	.word	0x200051a4

080084c4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084c4:	b580      	push	{r7, lr}
 80084c6:	b08a      	sub	sp, #40	; 0x28
 80084c8:	af00      	add	r7, sp, #0
 80084ca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084cc:	2300      	movs	r3, #0
 80084ce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084d0:	f7fe ffa4 	bl	800741c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084d4:	4b5b      	ldr	r3, [pc, #364]	; (8008644 <pvPortMalloc+0x180>)
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d101      	bne.n	80084e0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084dc:	f000 f91a 	bl	8008714 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084e0:	4b59      	ldr	r3, [pc, #356]	; (8008648 <pvPortMalloc+0x184>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	4013      	ands	r3, r2
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	f040 8092 	bne.w	8008612 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d01f      	beq.n	8008534 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80084f4:	2208      	movs	r2, #8
 80084f6:	687b      	ldr	r3, [r7, #4]
 80084f8:	4413      	add	r3, r2
 80084fa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f003 0307 	and.w	r3, r3, #7
 8008502:	2b00      	cmp	r3, #0
 8008504:	d016      	beq.n	8008534 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	f023 0307 	bic.w	r3, r3, #7
 800850c:	3308      	adds	r3, #8
 800850e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	2b00      	cmp	r3, #0
 8008518:	d00c      	beq.n	8008534 <pvPortMalloc+0x70>
	__asm volatile
 800851a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800851e:	b672      	cpsid	i
 8008520:	f383 8811 	msr	BASEPRI, r3
 8008524:	f3bf 8f6f 	isb	sy
 8008528:	f3bf 8f4f 	dsb	sy
 800852c:	b662      	cpsie	i
 800852e:	617b      	str	r3, [r7, #20]
}
 8008530:	bf00      	nop
 8008532:	e7fe      	b.n	8008532 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d06b      	beq.n	8008612 <pvPortMalloc+0x14e>
 800853a:	4b44      	ldr	r3, [pc, #272]	; (800864c <pvPortMalloc+0x188>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	687a      	ldr	r2, [r7, #4]
 8008540:	429a      	cmp	r2, r3
 8008542:	d866      	bhi.n	8008612 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008544:	4b42      	ldr	r3, [pc, #264]	; (8008650 <pvPortMalloc+0x18c>)
 8008546:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008548:	4b41      	ldr	r3, [pc, #260]	; (8008650 <pvPortMalloc+0x18c>)
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800854e:	e004      	b.n	800855a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8008550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008552:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008556:	681b      	ldr	r3, [r3, #0]
 8008558:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800855a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	687a      	ldr	r2, [r7, #4]
 8008560:	429a      	cmp	r2, r3
 8008562:	d903      	bls.n	800856c <pvPortMalloc+0xa8>
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d1f1      	bne.n	8008550 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800856c:	4b35      	ldr	r3, [pc, #212]	; (8008644 <pvPortMalloc+0x180>)
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008572:	429a      	cmp	r2, r3
 8008574:	d04d      	beq.n	8008612 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	681b      	ldr	r3, [r3, #0]
 800857a:	2208      	movs	r2, #8
 800857c:	4413      	add	r3, r2
 800857e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008582:	681a      	ldr	r2, [r3, #0]
 8008584:	6a3b      	ldr	r3, [r7, #32]
 8008586:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	1ad2      	subs	r2, r2, r3
 8008590:	2308      	movs	r3, #8
 8008592:	005b      	lsls	r3, r3, #1
 8008594:	429a      	cmp	r2, r3
 8008596:	d921      	bls.n	80085dc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008598:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	4413      	add	r3, r2
 800859e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085a0:	69bb      	ldr	r3, [r7, #24]
 80085a2:	f003 0307 	and.w	r3, r3, #7
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d00c      	beq.n	80085c4 <pvPortMalloc+0x100>
	__asm volatile
 80085aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085ae:	b672      	cpsid	i
 80085b0:	f383 8811 	msr	BASEPRI, r3
 80085b4:	f3bf 8f6f 	isb	sy
 80085b8:	f3bf 8f4f 	dsb	sy
 80085bc:	b662      	cpsie	i
 80085be:	613b      	str	r3, [r7, #16]
}
 80085c0:	bf00      	nop
 80085c2:	e7fe      	b.n	80085c2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c6:	685a      	ldr	r2, [r3, #4]
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	1ad2      	subs	r2, r2, r3
 80085cc:	69bb      	ldr	r3, [r7, #24]
 80085ce:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	687a      	ldr	r2, [r7, #4]
 80085d4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085d6:	69b8      	ldr	r0, [r7, #24]
 80085d8:	f000 f8fe 	bl	80087d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085dc:	4b1b      	ldr	r3, [pc, #108]	; (800864c <pvPortMalloc+0x188>)
 80085de:	681a      	ldr	r2, [r3, #0]
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	685b      	ldr	r3, [r3, #4]
 80085e4:	1ad3      	subs	r3, r2, r3
 80085e6:	4a19      	ldr	r2, [pc, #100]	; (800864c <pvPortMalloc+0x188>)
 80085e8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085ea:	4b18      	ldr	r3, [pc, #96]	; (800864c <pvPortMalloc+0x188>)
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	4b19      	ldr	r3, [pc, #100]	; (8008654 <pvPortMalloc+0x190>)
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	429a      	cmp	r2, r3
 80085f4:	d203      	bcs.n	80085fe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80085f6:	4b15      	ldr	r3, [pc, #84]	; (800864c <pvPortMalloc+0x188>)
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	4a16      	ldr	r2, [pc, #88]	; (8008654 <pvPortMalloc+0x190>)
 80085fc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80085fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008600:	685a      	ldr	r2, [r3, #4]
 8008602:	4b11      	ldr	r3, [pc, #68]	; (8008648 <pvPortMalloc+0x184>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	431a      	orrs	r2, r3
 8008608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800860c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860e:	2200      	movs	r2, #0
 8008610:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008612:	f7fe ff11 	bl	8007438 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008616:	69fb      	ldr	r3, [r7, #28]
 8008618:	f003 0307 	and.w	r3, r3, #7
 800861c:	2b00      	cmp	r3, #0
 800861e:	d00c      	beq.n	800863a <pvPortMalloc+0x176>
	__asm volatile
 8008620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008624:	b672      	cpsid	i
 8008626:	f383 8811 	msr	BASEPRI, r3
 800862a:	f3bf 8f6f 	isb	sy
 800862e:	f3bf 8f4f 	dsb	sy
 8008632:	b662      	cpsie	i
 8008634:	60fb      	str	r3, [r7, #12]
}
 8008636:	bf00      	nop
 8008638:	e7fe      	b.n	8008638 <pvPortMalloc+0x174>
	return pvReturn;
 800863a:	69fb      	ldr	r3, [r7, #28]
}
 800863c:	4618      	mov	r0, r3
 800863e:	3728      	adds	r7, #40	; 0x28
 8008640:	46bd      	mov	sp, r7
 8008642:	bd80      	pop	{r7, pc}
 8008644:	20008db0 	.word	0x20008db0
 8008648:	20008dbc 	.word	0x20008dbc
 800864c:	20008db4 	.word	0x20008db4
 8008650:	20008da8 	.word	0x20008da8
 8008654:	20008db8 	.word	0x20008db8

08008658 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b086      	sub	sp, #24
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2b00      	cmp	r3, #0
 8008668:	d04c      	beq.n	8008704 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800866a:	2308      	movs	r3, #8
 800866c:	425b      	negs	r3, r3
 800866e:	697a      	ldr	r2, [r7, #20]
 8008670:	4413      	add	r3, r2
 8008672:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	685a      	ldr	r2, [r3, #4]
 800867c:	4b23      	ldr	r3, [pc, #140]	; (800870c <vPortFree+0xb4>)
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	4013      	ands	r3, r2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d10c      	bne.n	80086a0 <vPortFree+0x48>
	__asm volatile
 8008686:	f04f 0350 	mov.w	r3, #80	; 0x50
 800868a:	b672      	cpsid	i
 800868c:	f383 8811 	msr	BASEPRI, r3
 8008690:	f3bf 8f6f 	isb	sy
 8008694:	f3bf 8f4f 	dsb	sy
 8008698:	b662      	cpsie	i
 800869a:	60fb      	str	r3, [r7, #12]
}
 800869c:	bf00      	nop
 800869e:	e7fe      	b.n	800869e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086a0:	693b      	ldr	r3, [r7, #16]
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d00c      	beq.n	80086c2 <vPortFree+0x6a>
	__asm volatile
 80086a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086ac:	b672      	cpsid	i
 80086ae:	f383 8811 	msr	BASEPRI, r3
 80086b2:	f3bf 8f6f 	isb	sy
 80086b6:	f3bf 8f4f 	dsb	sy
 80086ba:	b662      	cpsie	i
 80086bc:	60bb      	str	r3, [r7, #8]
}
 80086be:	bf00      	nop
 80086c0:	e7fe      	b.n	80086c0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086c2:	693b      	ldr	r3, [r7, #16]
 80086c4:	685a      	ldr	r2, [r3, #4]
 80086c6:	4b11      	ldr	r3, [pc, #68]	; (800870c <vPortFree+0xb4>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	4013      	ands	r3, r2
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d019      	beq.n	8008704 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086d0:	693b      	ldr	r3, [r7, #16]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d115      	bne.n	8008704 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	685a      	ldr	r2, [r3, #4]
 80086dc:	4b0b      	ldr	r3, [pc, #44]	; (800870c <vPortFree+0xb4>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	43db      	mvns	r3, r3
 80086e2:	401a      	ands	r2, r3
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086e8:	f7fe fe98 	bl	800741c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086ec:	693b      	ldr	r3, [r7, #16]
 80086ee:	685a      	ldr	r2, [r3, #4]
 80086f0:	4b07      	ldr	r3, [pc, #28]	; (8008710 <vPortFree+0xb8>)
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	4413      	add	r3, r2
 80086f6:	4a06      	ldr	r2, [pc, #24]	; (8008710 <vPortFree+0xb8>)
 80086f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80086fa:	6938      	ldr	r0, [r7, #16]
 80086fc:	f000 f86c 	bl	80087d8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008700:	f7fe fe9a 	bl	8007438 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008704:	bf00      	nop
 8008706:	3718      	adds	r7, #24
 8008708:	46bd      	mov	sp, r7
 800870a:	bd80      	pop	{r7, pc}
 800870c:	20008dbc 	.word	0x20008dbc
 8008710:	20008db4 	.word	0x20008db4

08008714 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008714:	b480      	push	{r7}
 8008716:	b085      	sub	sp, #20
 8008718:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800871a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800871e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008720:	4b27      	ldr	r3, [pc, #156]	; (80087c0 <prvHeapInit+0xac>)
 8008722:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008724:	68fb      	ldr	r3, [r7, #12]
 8008726:	f003 0307 	and.w	r3, r3, #7
 800872a:	2b00      	cmp	r3, #0
 800872c:	d00c      	beq.n	8008748 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	3307      	adds	r3, #7
 8008732:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008734:	68fb      	ldr	r3, [r7, #12]
 8008736:	f023 0307 	bic.w	r3, r3, #7
 800873a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	1ad3      	subs	r3, r2, r3
 8008742:	4a1f      	ldr	r2, [pc, #124]	; (80087c0 <prvHeapInit+0xac>)
 8008744:	4413      	add	r3, r2
 8008746:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800874c:	4a1d      	ldr	r2, [pc, #116]	; (80087c4 <prvHeapInit+0xb0>)
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008752:	4b1c      	ldr	r3, [pc, #112]	; (80087c4 <prvHeapInit+0xb0>)
 8008754:	2200      	movs	r2, #0
 8008756:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	68ba      	ldr	r2, [r7, #8]
 800875c:	4413      	add	r3, r2
 800875e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008760:	2208      	movs	r2, #8
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	1a9b      	subs	r3, r3, r2
 8008766:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	f023 0307 	bic.w	r3, r3, #7
 800876e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	4a15      	ldr	r2, [pc, #84]	; (80087c8 <prvHeapInit+0xb4>)
 8008774:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008776:	4b14      	ldr	r3, [pc, #80]	; (80087c8 <prvHeapInit+0xb4>)
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	2200      	movs	r2, #0
 800877c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800877e:	4b12      	ldr	r3, [pc, #72]	; (80087c8 <prvHeapInit+0xb4>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	2200      	movs	r2, #0
 8008784:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800878a:	683b      	ldr	r3, [r7, #0]
 800878c:	68fa      	ldr	r2, [r7, #12]
 800878e:	1ad2      	subs	r2, r2, r3
 8008790:	683b      	ldr	r3, [r7, #0]
 8008792:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008794:	4b0c      	ldr	r3, [pc, #48]	; (80087c8 <prvHeapInit+0xb4>)
 8008796:	681a      	ldr	r2, [r3, #0]
 8008798:	683b      	ldr	r3, [r7, #0]
 800879a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800879c:	683b      	ldr	r3, [r7, #0]
 800879e:	685b      	ldr	r3, [r3, #4]
 80087a0:	4a0a      	ldr	r2, [pc, #40]	; (80087cc <prvHeapInit+0xb8>)
 80087a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087a4:	683b      	ldr	r3, [r7, #0]
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	4a09      	ldr	r2, [pc, #36]	; (80087d0 <prvHeapInit+0xbc>)
 80087aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087ac:	4b09      	ldr	r3, [pc, #36]	; (80087d4 <prvHeapInit+0xc0>)
 80087ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087b2:	601a      	str	r2, [r3, #0]
}
 80087b4:	bf00      	nop
 80087b6:	3714      	adds	r7, #20
 80087b8:	46bd      	mov	sp, r7
 80087ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087be:	4770      	bx	lr
 80087c0:	200051a8 	.word	0x200051a8
 80087c4:	20008da8 	.word	0x20008da8
 80087c8:	20008db0 	.word	0x20008db0
 80087cc:	20008db8 	.word	0x20008db8
 80087d0:	20008db4 	.word	0x20008db4
 80087d4:	20008dbc 	.word	0x20008dbc

080087d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087d8:	b480      	push	{r7}
 80087da:	b085      	sub	sp, #20
 80087dc:	af00      	add	r7, sp, #0
 80087de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80087e0:	4b28      	ldr	r3, [pc, #160]	; (8008884 <prvInsertBlockIntoFreeList+0xac>)
 80087e2:	60fb      	str	r3, [r7, #12]
 80087e4:	e002      	b.n	80087ec <prvInsertBlockIntoFreeList+0x14>
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	60fb      	str	r3, [r7, #12]
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	681b      	ldr	r3, [r3, #0]
 80087f0:	687a      	ldr	r2, [r7, #4]
 80087f2:	429a      	cmp	r2, r3
 80087f4:	d8f7      	bhi.n	80087e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80087f6:	68fb      	ldr	r3, [r7, #12]
 80087f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	685b      	ldr	r3, [r3, #4]
 80087fe:	68ba      	ldr	r2, [r7, #8]
 8008800:	4413      	add	r3, r2
 8008802:	687a      	ldr	r2, [r7, #4]
 8008804:	429a      	cmp	r2, r3
 8008806:	d108      	bne.n	800881a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	685a      	ldr	r2, [r3, #4]
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	685b      	ldr	r3, [r3, #4]
 8008810:	441a      	add	r2, r3
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	685b      	ldr	r3, [r3, #4]
 8008822:	68ba      	ldr	r2, [r7, #8]
 8008824:	441a      	add	r2, r3
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	681b      	ldr	r3, [r3, #0]
 800882a:	429a      	cmp	r2, r3
 800882c:	d118      	bne.n	8008860 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	681a      	ldr	r2, [r3, #0]
 8008832:	4b15      	ldr	r3, [pc, #84]	; (8008888 <prvInsertBlockIntoFreeList+0xb0>)
 8008834:	681b      	ldr	r3, [r3, #0]
 8008836:	429a      	cmp	r2, r3
 8008838:	d00d      	beq.n	8008856 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	685a      	ldr	r2, [r3, #4]
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	685b      	ldr	r3, [r3, #4]
 8008844:	441a      	add	r2, r3
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800884a:	68fb      	ldr	r3, [r7, #12]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	601a      	str	r2, [r3, #0]
 8008854:	e008      	b.n	8008868 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008856:	4b0c      	ldr	r3, [pc, #48]	; (8008888 <prvInsertBlockIntoFreeList+0xb0>)
 8008858:	681a      	ldr	r2, [r3, #0]
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	601a      	str	r2, [r3, #0]
 800885e:	e003      	b.n	8008868 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	681a      	ldr	r2, [r3, #0]
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008868:	68fa      	ldr	r2, [r7, #12]
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	429a      	cmp	r2, r3
 800886e:	d002      	beq.n	8008876 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	687a      	ldr	r2, [r7, #4]
 8008874:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008876:	bf00      	nop
 8008878:	3714      	adds	r7, #20
 800887a:	46bd      	mov	sp, r7
 800887c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008880:	4770      	bx	lr
 8008882:	bf00      	nop
 8008884:	20008da8 	.word	0x20008da8
 8008888:	20008db0 	.word	0x20008db0

0800888c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800888c:	b580      	push	{r7, lr}
 800888e:	b084      	sub	sp, #16
 8008890:	af00      	add	r7, sp, #0
 8008892:	6078      	str	r0, [r7, #4]
 8008894:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 8008896:	f00a fad3 	bl	8012e40 <sys_timeouts_sleeptime>
 800889a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800889c:	68fb      	ldr	r3, [r7, #12]
 800889e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088a2:	d10b      	bne.n	80088bc <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80088a4:	4813      	ldr	r0, [pc, #76]	; (80088f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80088a6:	f00d fc2a 	bl	80160fe <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80088aa:	2200      	movs	r2, #0
 80088ac:	6839      	ldr	r1, [r7, #0]
 80088ae:	6878      	ldr	r0, [r7, #4]
 80088b0:	f00d fb9c 	bl	8015fec <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80088b4:	480f      	ldr	r0, [pc, #60]	; (80088f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80088b6:	f00d fc13 	bl	80160e0 <sys_mutex_lock>
    return;
 80088ba:	e018      	b.n	80088ee <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d102      	bne.n	80088c8 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80088c2:	f00a fa83 	bl	8012dcc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80088c6:	e7e6      	b.n	8008896 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80088c8:	480a      	ldr	r0, [pc, #40]	; (80088f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80088ca:	f00d fc18 	bl	80160fe <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80088ce:	68fa      	ldr	r2, [r7, #12]
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f00d fb8a 	bl	8015fec <sys_arch_mbox_fetch>
 80088d8:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80088da:	4806      	ldr	r0, [pc, #24]	; (80088f4 <tcpip_timeouts_mbox_fetch+0x68>)
 80088dc:	f00d fc00 	bl	80160e0 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80088e0:	68bb      	ldr	r3, [r7, #8]
 80088e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088e6:	d102      	bne.n	80088ee <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80088e8:	f00a fa70 	bl	8012dcc <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80088ec:	e7d3      	b.n	8008896 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80088ee:	3710      	adds	r7, #16
 80088f0:	46bd      	mov	sp, r7
 80088f2:	bd80      	pop	{r7, pc}
 80088f4:	20008dcc 	.word	0x20008dcc

080088f8 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80088f8:	b580      	push	{r7, lr}
 80088fa:	b084      	sub	sp, #16
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8008900:	4810      	ldr	r0, [pc, #64]	; (8008944 <tcpip_thread+0x4c>)
 8008902:	f00d fbed 	bl	80160e0 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 8008906:	4b10      	ldr	r3, [pc, #64]	; (8008948 <tcpip_thread+0x50>)
 8008908:	681b      	ldr	r3, [r3, #0]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d005      	beq.n	800891a <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800890e:	4b0e      	ldr	r3, [pc, #56]	; (8008948 <tcpip_thread+0x50>)
 8008910:	681b      	ldr	r3, [r3, #0]
 8008912:	4a0e      	ldr	r2, [pc, #56]	; (800894c <tcpip_thread+0x54>)
 8008914:	6812      	ldr	r2, [r2, #0]
 8008916:	4610      	mov	r0, r2
 8008918:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800891a:	f107 030c 	add.w	r3, r7, #12
 800891e:	4619      	mov	r1, r3
 8008920:	480b      	ldr	r0, [pc, #44]	; (8008950 <tcpip_thread+0x58>)
 8008922:	f7ff ffb3 	bl	800888c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	2b00      	cmp	r3, #0
 800892a:	d106      	bne.n	800893a <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800892c:	4b09      	ldr	r3, [pc, #36]	; (8008954 <tcpip_thread+0x5c>)
 800892e:	2291      	movs	r2, #145	; 0x91
 8008930:	4909      	ldr	r1, [pc, #36]	; (8008958 <tcpip_thread+0x60>)
 8008932:	480a      	ldr	r0, [pc, #40]	; (800895c <tcpip_thread+0x64>)
 8008934:	f00d fe0c 	bl	8016550 <iprintf>
      continue;
 8008938:	e003      	b.n	8008942 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	4618      	mov	r0, r3
 800893e:	f000 f80f 	bl	8008960 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8008942:	e7ea      	b.n	800891a <tcpip_thread+0x22>
 8008944:	20008dcc 	.word	0x20008dcc
 8008948:	20008dc0 	.word	0x20008dc0
 800894c:	20008dc4 	.word	0x20008dc4
 8008950:	20008dc8 	.word	0x20008dc8
 8008954:	08017768 	.word	0x08017768
 8008958:	08017798 	.word	0x08017798
 800895c:	080177b8 	.word	0x080177b8

08008960 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8008960:	b580      	push	{r7, lr}
 8008962:	b082      	sub	sp, #8
 8008964:	af00      	add	r7, sp, #0
 8008966:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	781b      	ldrb	r3, [r3, #0]
 800896c:	2b02      	cmp	r3, #2
 800896e:	d026      	beq.n	80089be <tcpip_thread_handle_msg+0x5e>
 8008970:	2b02      	cmp	r3, #2
 8008972:	dc2b      	bgt.n	80089cc <tcpip_thread_handle_msg+0x6c>
 8008974:	2b00      	cmp	r3, #0
 8008976:	d002      	beq.n	800897e <tcpip_thread_handle_msg+0x1e>
 8008978:	2b01      	cmp	r3, #1
 800897a:	d015      	beq.n	80089a8 <tcpip_thread_handle_msg+0x48>
 800897c:	e026      	b.n	80089cc <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	68db      	ldr	r3, [r3, #12]
 8008982:	687a      	ldr	r2, [r7, #4]
 8008984:	6850      	ldr	r0, [r2, #4]
 8008986:	687a      	ldr	r2, [r7, #4]
 8008988:	6892      	ldr	r2, [r2, #8]
 800898a:	4611      	mov	r1, r2
 800898c:	4798      	blx	r3
 800898e:	4603      	mov	r3, r0
 8008990:	2b00      	cmp	r3, #0
 8008992:	d004      	beq.n	800899e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	4618      	mov	r0, r3
 800899a:	f003 fc37 	bl	800c20c <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	2009      	movs	r0, #9
 80089a2:	f002 fd99 	bl	800b4d8 <memp_free>
      break;
 80089a6:	e018      	b.n	80089da <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	685b      	ldr	r3, [r3, #4]
 80089ac:	687a      	ldr	r2, [r7, #4]
 80089ae:	6892      	ldr	r2, [r2, #8]
 80089b0:	4610      	mov	r0, r2
 80089b2:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80089b4:	6879      	ldr	r1, [r7, #4]
 80089b6:	2008      	movs	r0, #8
 80089b8:	f002 fd8e 	bl	800b4d8 <memp_free>
      break;
 80089bc:	e00d      	b.n	80089da <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	687a      	ldr	r2, [r7, #4]
 80089c4:	6892      	ldr	r2, [r2, #8]
 80089c6:	4610      	mov	r0, r2
 80089c8:	4798      	blx	r3
      break;
 80089ca:	e006      	b.n	80089da <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80089cc:	4b05      	ldr	r3, [pc, #20]	; (80089e4 <tcpip_thread_handle_msg+0x84>)
 80089ce:	22cf      	movs	r2, #207	; 0xcf
 80089d0:	4905      	ldr	r1, [pc, #20]	; (80089e8 <tcpip_thread_handle_msg+0x88>)
 80089d2:	4806      	ldr	r0, [pc, #24]	; (80089ec <tcpip_thread_handle_msg+0x8c>)
 80089d4:	f00d fdbc 	bl	8016550 <iprintf>
      break;
 80089d8:	bf00      	nop
  }
}
 80089da:	bf00      	nop
 80089dc:	3708      	adds	r7, #8
 80089de:	46bd      	mov	sp, r7
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	bf00      	nop
 80089e4:	08017768 	.word	0x08017768
 80089e8:	08017798 	.word	0x08017798
 80089ec:	080177b8 	.word	0x080177b8

080089f0 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80089f0:	b580      	push	{r7, lr}
 80089f2:	b086      	sub	sp, #24
 80089f4:	af00      	add	r7, sp, #0
 80089f6:	60f8      	str	r0, [r7, #12]
 80089f8:	60b9      	str	r1, [r7, #8]
 80089fa:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80089fc:	481a      	ldr	r0, [pc, #104]	; (8008a68 <tcpip_inpkt+0x78>)
 80089fe:	f00d fb34 	bl	801606a <sys_mbox_valid>
 8008a02:	4603      	mov	r3, r0
 8008a04:	2b00      	cmp	r3, #0
 8008a06:	d105      	bne.n	8008a14 <tcpip_inpkt+0x24>
 8008a08:	4b18      	ldr	r3, [pc, #96]	; (8008a6c <tcpip_inpkt+0x7c>)
 8008a0a:	22fc      	movs	r2, #252	; 0xfc
 8008a0c:	4918      	ldr	r1, [pc, #96]	; (8008a70 <tcpip_inpkt+0x80>)
 8008a0e:	4819      	ldr	r0, [pc, #100]	; (8008a74 <tcpip_inpkt+0x84>)
 8008a10:	f00d fd9e 	bl	8016550 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8008a14:	2009      	movs	r0, #9
 8008a16:	f002 fce9 	bl	800b3ec <memp_malloc>
 8008a1a:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8008a1c:	697b      	ldr	r3, [r7, #20]
 8008a1e:	2b00      	cmp	r3, #0
 8008a20:	d102      	bne.n	8008a28 <tcpip_inpkt+0x38>
    return ERR_MEM;
 8008a22:	f04f 33ff 	mov.w	r3, #4294967295
 8008a26:	e01a      	b.n	8008a5e <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8008a28:	697b      	ldr	r3, [r7, #20]
 8008a2a:	2200      	movs	r2, #0
 8008a2c:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8008a2e:	697b      	ldr	r3, [r7, #20]
 8008a30:	68fa      	ldr	r2, [r7, #12]
 8008a32:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8008a34:	697b      	ldr	r3, [r7, #20]
 8008a36:	68ba      	ldr	r2, [r7, #8]
 8008a38:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8008a3a:	697b      	ldr	r3, [r7, #20]
 8008a3c:	687a      	ldr	r2, [r7, #4]
 8008a3e:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008a40:	6979      	ldr	r1, [r7, #20]
 8008a42:	4809      	ldr	r0, [pc, #36]	; (8008a68 <tcpip_inpkt+0x78>)
 8008a44:	f00d fab8 	bl	8015fb8 <sys_mbox_trypost>
 8008a48:	4603      	mov	r3, r0
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d006      	beq.n	8008a5c <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8008a4e:	6979      	ldr	r1, [r7, #20]
 8008a50:	2009      	movs	r0, #9
 8008a52:	f002 fd41 	bl	800b4d8 <memp_free>
    return ERR_MEM;
 8008a56:	f04f 33ff 	mov.w	r3, #4294967295
 8008a5a:	e000      	b.n	8008a5e <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8008a5c:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8008a5e:	4618      	mov	r0, r3
 8008a60:	3718      	adds	r7, #24
 8008a62:	46bd      	mov	sp, r7
 8008a64:	bd80      	pop	{r7, pc}
 8008a66:	bf00      	nop
 8008a68:	20008dc8 	.word	0x20008dc8
 8008a6c:	08017768 	.word	0x08017768
 8008a70:	080177e0 	.word	0x080177e0
 8008a74:	080177b8 	.word	0x080177b8

08008a78 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8008a78:	b580      	push	{r7, lr}
 8008a7a:	b082      	sub	sp, #8
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
 8008a80:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8008a82:	683b      	ldr	r3, [r7, #0]
 8008a84:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8008a88:	f003 0318 	and.w	r3, r3, #24
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d006      	beq.n	8008a9e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8008a90:	4a08      	ldr	r2, [pc, #32]	; (8008ab4 <tcpip_input+0x3c>)
 8008a92:	6839      	ldr	r1, [r7, #0]
 8008a94:	6878      	ldr	r0, [r7, #4]
 8008a96:	f7ff ffab 	bl	80089f0 <tcpip_inpkt>
 8008a9a:	4603      	mov	r3, r0
 8008a9c:	e005      	b.n	8008aaa <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8008a9e:	4a06      	ldr	r2, [pc, #24]	; (8008ab8 <tcpip_input+0x40>)
 8008aa0:	6839      	ldr	r1, [r7, #0]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f7ff ffa4 	bl	80089f0 <tcpip_inpkt>
 8008aa8:	4603      	mov	r3, r0
}
 8008aaa:	4618      	mov	r0, r3
 8008aac:	3708      	adds	r7, #8
 8008aae:	46bd      	mov	sp, r7
 8008ab0:	bd80      	pop	{r7, pc}
 8008ab2:	bf00      	nop
 8008ab4:	08015dc9 	.word	0x08015dc9
 8008ab8:	08014a7d 	.word	0x08014a7d

08008abc <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8008abc:	b580      	push	{r7, lr}
 8008abe:	b084      	sub	sp, #16
 8008ac0:	af00      	add	r7, sp, #0
 8008ac2:	6078      	str	r0, [r7, #4]
 8008ac4:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8008ac6:	4819      	ldr	r0, [pc, #100]	; (8008b2c <tcpip_try_callback+0x70>)
 8008ac8:	f00d facf 	bl	801606a <sys_mbox_valid>
 8008acc:	4603      	mov	r3, r0
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d106      	bne.n	8008ae0 <tcpip_try_callback+0x24>
 8008ad2:	4b17      	ldr	r3, [pc, #92]	; (8008b30 <tcpip_try_callback+0x74>)
 8008ad4:	f240 125d 	movw	r2, #349	; 0x15d
 8008ad8:	4916      	ldr	r1, [pc, #88]	; (8008b34 <tcpip_try_callback+0x78>)
 8008ada:	4817      	ldr	r0, [pc, #92]	; (8008b38 <tcpip_try_callback+0x7c>)
 8008adc:	f00d fd38 	bl	8016550 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8008ae0:	2008      	movs	r0, #8
 8008ae2:	f002 fc83 	bl	800b3ec <memp_malloc>
 8008ae6:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d102      	bne.n	8008af4 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8008aee:	f04f 33ff 	mov.w	r3, #4294967295
 8008af2:	e017      	b.n	8008b24 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2201      	movs	r2, #1
 8008af8:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	687a      	ldr	r2, [r7, #4]
 8008afe:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	683a      	ldr	r2, [r7, #0]
 8008b04:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8008b06:	68f9      	ldr	r1, [r7, #12]
 8008b08:	4808      	ldr	r0, [pc, #32]	; (8008b2c <tcpip_try_callback+0x70>)
 8008b0a:	f00d fa55 	bl	8015fb8 <sys_mbox_trypost>
 8008b0e:	4603      	mov	r3, r0
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d006      	beq.n	8008b22 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8008b14:	68f9      	ldr	r1, [r7, #12]
 8008b16:	2008      	movs	r0, #8
 8008b18:	f002 fcde 	bl	800b4d8 <memp_free>
    return ERR_MEM;
 8008b1c:	f04f 33ff 	mov.w	r3, #4294967295
 8008b20:	e000      	b.n	8008b24 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8008b22:	2300      	movs	r3, #0
}
 8008b24:	4618      	mov	r0, r3
 8008b26:	3710      	adds	r7, #16
 8008b28:	46bd      	mov	sp, r7
 8008b2a:	bd80      	pop	{r7, pc}
 8008b2c:	20008dc8 	.word	0x20008dc8
 8008b30:	08017768 	.word	0x08017768
 8008b34:	080177e0 	.word	0x080177e0
 8008b38:	080177b8 	.word	0x080177b8

08008b3c <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8008b3c:	b580      	push	{r7, lr}
 8008b3e:	b084      	sub	sp, #16
 8008b40:	af02      	add	r7, sp, #8
 8008b42:	6078      	str	r0, [r7, #4]
 8008b44:	6039      	str	r1, [r7, #0]
  lwip_init();
 8008b46:	f001 ff7e 	bl	800aa46 <lwip_init>

  tcpip_init_done = initfunc;
 8008b4a:	4a17      	ldr	r2, [pc, #92]	; (8008ba8 <tcpip_init+0x6c>)
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8008b50:	4a16      	ldr	r2, [pc, #88]	; (8008bac <tcpip_init+0x70>)
 8008b52:	683b      	ldr	r3, [r7, #0]
 8008b54:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8008b56:	2106      	movs	r1, #6
 8008b58:	4815      	ldr	r0, [pc, #84]	; (8008bb0 <tcpip_init+0x74>)
 8008b5a:	f00d fa0b 	bl	8015f74 <sys_mbox_new>
 8008b5e:	4603      	mov	r3, r0
 8008b60:	2b00      	cmp	r3, #0
 8008b62:	d006      	beq.n	8008b72 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8008b64:	4b13      	ldr	r3, [pc, #76]	; (8008bb4 <tcpip_init+0x78>)
 8008b66:	f240 2261 	movw	r2, #609	; 0x261
 8008b6a:	4913      	ldr	r1, [pc, #76]	; (8008bb8 <tcpip_init+0x7c>)
 8008b6c:	4813      	ldr	r0, [pc, #76]	; (8008bbc <tcpip_init+0x80>)
 8008b6e:	f00d fcef 	bl	8016550 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8008b72:	4813      	ldr	r0, [pc, #76]	; (8008bc0 <tcpip_init+0x84>)
 8008b74:	f00d fa98 	bl	80160a8 <sys_mutex_new>
 8008b78:	4603      	mov	r3, r0
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d006      	beq.n	8008b8c <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8008b7e:	4b0d      	ldr	r3, [pc, #52]	; (8008bb4 <tcpip_init+0x78>)
 8008b80:	f240 2265 	movw	r2, #613	; 0x265
 8008b84:	490f      	ldr	r1, [pc, #60]	; (8008bc4 <tcpip_init+0x88>)
 8008b86:	480d      	ldr	r0, [pc, #52]	; (8008bbc <tcpip_init+0x80>)
 8008b88:	f00d fce2 	bl	8016550 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8008b8c:	2300      	movs	r3, #0
 8008b8e:	9300      	str	r3, [sp, #0]
 8008b90:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008b94:	2200      	movs	r2, #0
 8008b96:	490c      	ldr	r1, [pc, #48]	; (8008bc8 <tcpip_init+0x8c>)
 8008b98:	480c      	ldr	r0, [pc, #48]	; (8008bcc <tcpip_init+0x90>)
 8008b9a:	f00d fabd 	bl	8016118 <sys_thread_new>
}
 8008b9e:	bf00      	nop
 8008ba0:	3708      	adds	r7, #8
 8008ba2:	46bd      	mov	sp, r7
 8008ba4:	bd80      	pop	{r7, pc}
 8008ba6:	bf00      	nop
 8008ba8:	20008dc0 	.word	0x20008dc0
 8008bac:	20008dc4 	.word	0x20008dc4
 8008bb0:	20008dc8 	.word	0x20008dc8
 8008bb4:	08017768 	.word	0x08017768
 8008bb8:	080177f0 	.word	0x080177f0
 8008bbc:	080177b8 	.word	0x080177b8
 8008bc0:	20008dcc 	.word	0x20008dcc
 8008bc4:	08017814 	.word	0x08017814
 8008bc8:	080088f9 	.word	0x080088f9
 8008bcc:	08017838 	.word	0x08017838

08008bd0 <msg_generate_packet_id>:
 * @param client MQTT client
 * @return New packet identifier, range 1 to 65535
 */
static u16_t
msg_generate_packet_id(mqtt_client_t *client)
{
 8008bd0:	b480      	push	{r7}
 8008bd2:	b083      	sub	sp, #12
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
  client->pkt_id_seq++;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	88db      	ldrh	r3, [r3, #6]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	b29a      	uxth	r2, r3
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	80da      	strh	r2, [r3, #6]
  if (client->pkt_id_seq == 0) {
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	88db      	ldrh	r3, [r3, #6]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	d105      	bne.n	8008bf8 <msg_generate_packet_id+0x28>
    client->pkt_id_seq++;
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	88db      	ldrh	r3, [r3, #6]
 8008bf0:	3301      	adds	r3, #1
 8008bf2:	b29a      	uxth	r2, r3
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	80da      	strh	r2, [r3, #6]
  }
  return client->pkt_id_seq;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	88db      	ldrh	r3, [r3, #6]
}
 8008bfc:	4618      	mov	r0, r3
 8008bfe:	370c      	adds	r7, #12
 8008c00:	46bd      	mov	sp, r7
 8008c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c06:	4770      	bx	lr

08008c08 <mqtt_ringbuf_put>:
/* Output ring buffer */

/** Add single item to ring buffer */
static void
mqtt_ringbuf_put(struct mqtt_ringbuf_t *rb, u8_t item)
{
 8008c08:	b480      	push	{r7}
 8008c0a:	b083      	sub	sp, #12
 8008c0c:	af00      	add	r7, sp, #0
 8008c0e:	6078      	str	r0, [r7, #4]
 8008c10:	460b      	mov	r3, r1
 8008c12:	70fb      	strb	r3, [r7, #3]
  rb->buf[rb->put] = item;
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	881b      	ldrh	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	4413      	add	r3, r2
 8008c1e:	78fa      	ldrb	r2, [r7, #3]
 8008c20:	711a      	strb	r2, [r3, #4]
  rb->put++;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	3301      	adds	r3, #1
 8008c28:	b29a      	uxth	r2, r3
 8008c2a:	687b      	ldr	r3, [r7, #4]
 8008c2c:	801a      	strh	r2, [r3, #0]
  if (rb->put >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	881b      	ldrh	r3, [r3, #0]
 8008c32:	2bff      	cmp	r3, #255	; 0xff
 8008c34:	d902      	bls.n	8008c3c <mqtt_ringbuf_put+0x34>
    rb->put = 0;
 8008c36:	687b      	ldr	r3, [r7, #4]
 8008c38:	2200      	movs	r2, #0
 8008c3a:	801a      	strh	r2, [r3, #0]
  }
}
 8008c3c:	bf00      	nop
 8008c3e:	370c      	adds	r7, #12
 8008c40:	46bd      	mov	sp, r7
 8008c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c46:	4770      	bx	lr

08008c48 <mqtt_ringbuf_get_ptr>:

/** Return pointer to ring buffer get position */
static u8_t *
mqtt_ringbuf_get_ptr(struct mqtt_ringbuf_t *rb)
{
 8008c48:	b480      	push	{r7}
 8008c4a:	b083      	sub	sp, #12
 8008c4c:	af00      	add	r7, sp, #0
 8008c4e:	6078      	str	r0, [r7, #4]
  return &rb->buf[rb->get];
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	885b      	ldrh	r3, [r3, #2]
 8008c54:	461a      	mov	r2, r3
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	4413      	add	r3, r2
 8008c5a:	3304      	adds	r3, #4
}
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	370c      	adds	r7, #12
 8008c60:	46bd      	mov	sp, r7
 8008c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c66:	4770      	bx	lr

08008c68 <mqtt_ringbuf_advance_get_idx>:

static void
mqtt_ringbuf_advance_get_idx(struct mqtt_ringbuf_t *rb, u16_t len)
{
 8008c68:	b580      	push	{r7, lr}
 8008c6a:	b082      	sub	sp, #8
 8008c6c:	af00      	add	r7, sp, #0
 8008c6e:	6078      	str	r0, [r7, #4]
 8008c70:	460b      	mov	r3, r1
 8008c72:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_ringbuf_advance_get_idx: len < MQTT_OUTPUT_RINGBUF_SIZE", len < MQTT_OUTPUT_RINGBUF_SIZE);
 8008c74:	887b      	ldrh	r3, [r7, #2]
 8008c76:	2bff      	cmp	r3, #255	; 0xff
 8008c78:	d905      	bls.n	8008c86 <mqtt_ringbuf_advance_get_idx+0x1e>
 8008c7a:	4b0e      	ldr	r3, [pc, #56]	; (8008cb4 <mqtt_ringbuf_advance_get_idx+0x4c>)
 8008c7c:	22cb      	movs	r2, #203	; 0xcb
 8008c7e:	490e      	ldr	r1, [pc, #56]	; (8008cb8 <mqtt_ringbuf_advance_get_idx+0x50>)
 8008c80:	480e      	ldr	r0, [pc, #56]	; (8008cbc <mqtt_ringbuf_advance_get_idx+0x54>)
 8008c82:	f00d fc65 	bl	8016550 <iprintf>

  rb->get += len;
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	885a      	ldrh	r2, [r3, #2]
 8008c8a:	887b      	ldrh	r3, [r7, #2]
 8008c8c:	4413      	add	r3, r2
 8008c8e:	b29a      	uxth	r2, r3
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	805a      	strh	r2, [r3, #2]
  if (rb->get >= MQTT_OUTPUT_RINGBUF_SIZE) {
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	885b      	ldrh	r3, [r3, #2]
 8008c98:	2bff      	cmp	r3, #255	; 0xff
 8008c9a:	d906      	bls.n	8008caa <mqtt_ringbuf_advance_get_idx+0x42>
    rb->get = rb->get - MQTT_OUTPUT_RINGBUF_SIZE;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	885b      	ldrh	r3, [r3, #2]
 8008ca0:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8008ca4:	b29a      	uxth	r2, r3
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	805a      	strh	r2, [r3, #2]
  }
}
 8008caa:	bf00      	nop
 8008cac:	3708      	adds	r7, #8
 8008cae:	46bd      	mov	sp, r7
 8008cb0:	bd80      	pop	{r7, pc}
 8008cb2:	bf00      	nop
 8008cb4:	08017848 	.word	0x08017848
 8008cb8:	08017880 	.word	0x08017880
 8008cbc:	080178c0 	.word	0x080178c0

08008cc0 <mqtt_ringbuf_len>:

/** Return number of bytes in ring buffer */
static u16_t
mqtt_ringbuf_len(struct mqtt_ringbuf_t *rb)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b085      	sub	sp, #20
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	6078      	str	r0, [r7, #4]
  u32_t len = rb->put - rb->get;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	881b      	ldrh	r3, [r3, #0]
 8008ccc:	461a      	mov	r2, r3
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	885b      	ldrh	r3, [r3, #2]
 8008cd2:	1ad3      	subs	r3, r2, r3
 8008cd4:	60fb      	str	r3, [r7, #12]
  if (len > 0xFFFF) {
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cdc:	d303      	bcc.n	8008ce6 <mqtt_ringbuf_len+0x26>
    len += MQTT_OUTPUT_RINGBUF_SIZE;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8008ce4:	60fb      	str	r3, [r7, #12]
  }
  return (u16_t)len;
 8008ce6:	68fb      	ldr	r3, [r7, #12]
 8008ce8:	b29b      	uxth	r3, r3
}
 8008cea:	4618      	mov	r0, r3
 8008cec:	3714      	adds	r7, #20
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf4:	4770      	bx	lr
	...

08008cf8 <mqtt_output_send>:
 * @param rb Output ring buffer
 * @param tpcb TCP connection handle
 */
static void
mqtt_output_send(struct mqtt_ringbuf_t *rb, struct altcp_pcb *tpcb)
{
 8008cf8:	b590      	push	{r4, r7, lr}
 8008cfa:	b085      	sub	sp, #20
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
 8008d00:	6039      	str	r1, [r7, #0]
  err_t err;
  u8_t wrap = 0;
 8008d02:	2300      	movs	r3, #0
 8008d04:	73bb      	strb	r3, [r7, #14]
  u16_t ringbuf_lin_len = mqtt_ringbuf_linear_read_length(rb);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff ffda 	bl	8008cc0 <mqtt_ringbuf_len>
 8008d0c:	4603      	mov	r3, r0
 8008d0e:	461a      	mov	r2, r3
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	885b      	ldrh	r3, [r3, #2]
 8008d14:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008d18:	429a      	cmp	r2, r3
 8008d1a:	da04      	bge.n	8008d26 <mqtt_output_send+0x2e>
 8008d1c:	6878      	ldr	r0, [r7, #4]
 8008d1e:	f7ff ffcf 	bl	8008cc0 <mqtt_ringbuf_len>
 8008d22:	4603      	mov	r3, r0
 8008d24:	e004      	b.n	8008d30 <mqtt_output_send+0x38>
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	885b      	ldrh	r3, [r3, #2]
 8008d2a:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008d2e:	b29b      	uxth	r3, r3
 8008d30:	817b      	strh	r3, [r7, #10]
  u16_t send_len = altcp_sndbuf(tpcb);
 8008d32:	683b      	ldr	r3, [r7, #0]
 8008d34:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008d38:	81bb      	strh	r3, [r7, #12]
  LWIP_ASSERT("mqtt_output_send: tpcb != NULL", tpcb != NULL);
 8008d3a:	683b      	ldr	r3, [r7, #0]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d105      	bne.n	8008d4c <mqtt_output_send+0x54>
 8008d40:	4b44      	ldr	r3, [pc, #272]	; (8008e54 <mqtt_output_send+0x15c>)
 8008d42:	22f0      	movs	r2, #240	; 0xf0
 8008d44:	4944      	ldr	r1, [pc, #272]	; (8008e58 <mqtt_output_send+0x160>)
 8008d46:	4845      	ldr	r0, [pc, #276]	; (8008e5c <mqtt_output_send+0x164>)
 8008d48:	f00d fc02 	bl	8016550 <iprintf>

  if (send_len == 0 || ringbuf_lin_len == 0) {
 8008d4c:	89bb      	ldrh	r3, [r7, #12]
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d07c      	beq.n	8008e4c <mqtt_output_send+0x154>
 8008d52:	897b      	ldrh	r3, [r7, #10]
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d079      	beq.n	8008e4c <mqtt_output_send+0x154>
  }

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_output_send: tcp_sndbuf: %d bytes, ringbuf_linear_available: %d, get %d, put %d\n",
                                 send_len, ringbuf_lin_len, rb->get, rb->put));

  if (send_len > ringbuf_lin_len) {
 8008d58:	89ba      	ldrh	r2, [r7, #12]
 8008d5a:	897b      	ldrh	r3, [r7, #10]
 8008d5c:	429a      	cmp	r2, r3
 8008d5e:	d90d      	bls.n	8008d7c <mqtt_output_send+0x84>
    /* Space in TCP output buffer is larger than available in ring buffer linear portion */
    send_len = ringbuf_lin_len;
 8008d60:	897b      	ldrh	r3, [r7, #10]
 8008d62:	81bb      	strh	r3, [r7, #12]
    /* Wrap around if more data in ring buffer after linear portion */
    wrap = (mqtt_ringbuf_len(rb) > ringbuf_lin_len);
 8008d64:	6878      	ldr	r0, [r7, #4]
 8008d66:	f7ff ffab 	bl	8008cc0 <mqtt_ringbuf_len>
 8008d6a:	4603      	mov	r3, r0
 8008d6c:	461a      	mov	r2, r3
 8008d6e:	897b      	ldrh	r3, [r7, #10]
 8008d70:	4293      	cmp	r3, r2
 8008d72:	bf34      	ite	cc
 8008d74:	2301      	movcc	r3, #1
 8008d76:	2300      	movcs	r3, #0
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	73bb      	strb	r3, [r7, #14]
  }
  err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY | (wrap ? TCP_WRITE_FLAG_MORE : 0));
 8008d7c:	6878      	ldr	r0, [r7, #4]
 8008d7e:	f7ff ff63 	bl	8008c48 <mqtt_ringbuf_get_ptr>
 8008d82:	4601      	mov	r1, r0
 8008d84:	7bbb      	ldrb	r3, [r7, #14]
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <mqtt_output_send+0x96>
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e000      	b.n	8008d90 <mqtt_output_send+0x98>
 8008d8e:	2301      	movs	r3, #1
 8008d90:	89ba      	ldrh	r2, [r7, #12]
 8008d92:	6838      	ldr	r0, [r7, #0]
 8008d94:	f008 f978 	bl	8011088 <tcp_write>
 8008d98:	4603      	mov	r3, r0
 8008d9a:	73fb      	strb	r3, [r7, #15]
  if ((err == ERR_OK) && wrap) {
 8008d9c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d146      	bne.n	8008e32 <mqtt_output_send+0x13a>
 8008da4:	7bbb      	ldrb	r3, [r7, #14]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d043      	beq.n	8008e32 <mqtt_output_send+0x13a>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8008daa:	89bb      	ldrh	r3, [r7, #12]
 8008dac:	4619      	mov	r1, r3
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f7ff ff5a 	bl	8008c68 <mqtt_ringbuf_advance_get_idx>
    /* Use the lesser one of ring buffer linear length and TCP send buffer size */
    send_len = LWIP_MIN(altcp_sndbuf(tpcb), mqtt_ringbuf_linear_read_length(rb));
 8008db4:	683b      	ldr	r3, [r7, #0]
 8008db6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008dba:	461c      	mov	r4, r3
 8008dbc:	6878      	ldr	r0, [r7, #4]
 8008dbe:	f7ff ff7f 	bl	8008cc0 <mqtt_ringbuf_len>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	885b      	ldrh	r3, [r3, #2]
 8008dca:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	da04      	bge.n	8008ddc <mqtt_output_send+0xe4>
 8008dd2:	6878      	ldr	r0, [r7, #4]
 8008dd4:	f7ff ff74 	bl	8008cc0 <mqtt_ringbuf_len>
 8008dd8:	4603      	mov	r3, r0
 8008dda:	e003      	b.n	8008de4 <mqtt_output_send+0xec>
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	885b      	ldrh	r3, [r3, #2]
 8008de0:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	dd03      	ble.n	8008df0 <mqtt_output_send+0xf8>
 8008de8:	683b      	ldr	r3, [r7, #0]
 8008dea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8008dee:	e014      	b.n	8008e1a <mqtt_output_send+0x122>
 8008df0:	6878      	ldr	r0, [r7, #4]
 8008df2:	f7ff ff65 	bl	8008cc0 <mqtt_ringbuf_len>
 8008df6:	4603      	mov	r3, r0
 8008df8:	461a      	mov	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	885b      	ldrh	r3, [r3, #2]
 8008dfe:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008e02:	429a      	cmp	r2, r3
 8008e04:	da04      	bge.n	8008e10 <mqtt_output_send+0x118>
 8008e06:	6878      	ldr	r0, [r7, #4]
 8008e08:	f7ff ff5a 	bl	8008cc0 <mqtt_ringbuf_len>
 8008e0c:	4603      	mov	r3, r0
 8008e0e:	e004      	b.n	8008e1a <mqtt_output_send+0x122>
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	885b      	ldrh	r3, [r3, #2]
 8008e14:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 8008e18:	b29b      	uxth	r3, r3
 8008e1a:	81bb      	strh	r3, [r7, #12]
    err = altcp_write(tpcb, mqtt_ringbuf_get_ptr(rb), send_len, TCP_WRITE_FLAG_COPY);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f7ff ff13 	bl	8008c48 <mqtt_ringbuf_get_ptr>
 8008e22:	4601      	mov	r1, r0
 8008e24:	89ba      	ldrh	r2, [r7, #12]
 8008e26:	2301      	movs	r3, #1
 8008e28:	6838      	ldr	r0, [r7, #0]
 8008e2a:	f008 f92d 	bl	8011088 <tcp_write>
 8008e2e:	4603      	mov	r3, r0
 8008e30:	73fb      	strb	r3, [r7, #15]
  }

  if (err == ERR_OK) {
 8008e32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	d109      	bne.n	8008e4e <mqtt_output_send+0x156>
    mqtt_ringbuf_advance_get_idx(rb, send_len);
 8008e3a:	89bb      	ldrh	r3, [r7, #12]
 8008e3c:	4619      	mov	r1, r3
 8008e3e:	6878      	ldr	r0, [r7, #4]
 8008e40:	f7ff ff12 	bl	8008c68 <mqtt_ringbuf_advance_get_idx>
    /* Flush */
    altcp_output(tpcb);
 8008e44:	6838      	ldr	r0, [r7, #0]
 8008e46:	f008 ff09 	bl	8011c5c <tcp_output>
 8008e4a:	e000      	b.n	8008e4e <mqtt_output_send+0x156>
    return;
 8008e4c:	bf00      	nop
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_output_send: Send failed with err %d (\"%s\")\n", err, lwip_strerr(err)));
  }
}
 8008e4e:	3714      	adds	r7, #20
 8008e50:	46bd      	mov	sp, r7
 8008e52:	bd90      	pop	{r4, r7, pc}
 8008e54:	08017848 	.word	0x08017848
 8008e58:	080178e8 	.word	0x080178e8
 8008e5c:	080178c0 	.word	0x080178c0

08008e60 <mqtt_create_request>:
 * @param arg Parameter following callback
 * @return Request or NULL if failed to create
 */
static struct mqtt_request_t *
mqtt_create_request(struct mqtt_request_t *r_objs, size_t r_objs_len, u16_t pkt_id, mqtt_request_cb_t cb, void *arg)
{
 8008e60:	b580      	push	{r7, lr}
 8008e62:	b086      	sub	sp, #24
 8008e64:	af00      	add	r7, sp, #0
 8008e66:	60f8      	str	r0, [r7, #12]
 8008e68:	60b9      	str	r1, [r7, #8]
 8008e6a:	603b      	str	r3, [r7, #0]
 8008e6c:	4613      	mov	r3, r2
 8008e6e:	80fb      	strh	r3, [r7, #6]
  struct mqtt_request_t *r = NULL;
 8008e70:	2300      	movs	r3, #0
 8008e72:	617b      	str	r3, [r7, #20]
  u8_t n;
  LWIP_ASSERT("mqtt_create_request: r_objs != NULL", r_objs != NULL);
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d106      	bne.n	8008e88 <mqtt_create_request+0x28>
 8008e7a:	4b19      	ldr	r3, [pc, #100]	; (8008ee0 <mqtt_create_request+0x80>)
 8008e7c:	f240 1223 	movw	r2, #291	; 0x123
 8008e80:	4918      	ldr	r1, [pc, #96]	; (8008ee4 <mqtt_create_request+0x84>)
 8008e82:	4819      	ldr	r0, [pc, #100]	; (8008ee8 <mqtt_create_request+0x88>)
 8008e84:	f00d fb64 	bl	8016550 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 8008e88:	2300      	movs	r3, #0
 8008e8a:	74fb      	strb	r3, [r7, #19]
 8008e8c:	e01f      	b.n	8008ece <mqtt_create_request+0x6e>
    /* Item point to itself if not in use */
    if (r_objs[n].next == &r_objs[n]) {
 8008e8e:	7cfb      	ldrb	r3, [r7, #19]
 8008e90:	011b      	lsls	r3, r3, #4
 8008e92:	68fa      	ldr	r2, [r7, #12]
 8008e94:	4413      	add	r3, r2
 8008e96:	681a      	ldr	r2, [r3, #0]
 8008e98:	7cfb      	ldrb	r3, [r7, #19]
 8008e9a:	011b      	lsls	r3, r3, #4
 8008e9c:	68f9      	ldr	r1, [r7, #12]
 8008e9e:	440b      	add	r3, r1
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d111      	bne.n	8008ec8 <mqtt_create_request+0x68>
      r = &r_objs[n];
 8008ea4:	7cfb      	ldrb	r3, [r7, #19]
 8008ea6:	011b      	lsls	r3, r3, #4
 8008ea8:	68fa      	ldr	r2, [r7, #12]
 8008eaa:	4413      	add	r3, r2
 8008eac:	617b      	str	r3, [r7, #20]
      r->next = NULL;
 8008eae:	697b      	ldr	r3, [r7, #20]
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	601a      	str	r2, [r3, #0]
      r->cb = cb;
 8008eb4:	697b      	ldr	r3, [r7, #20]
 8008eb6:	683a      	ldr	r2, [r7, #0]
 8008eb8:	605a      	str	r2, [r3, #4]
      r->arg = arg;
 8008eba:	697b      	ldr	r3, [r7, #20]
 8008ebc:	6a3a      	ldr	r2, [r7, #32]
 8008ebe:	609a      	str	r2, [r3, #8]
      r->pkt_id = pkt_id;
 8008ec0:	697b      	ldr	r3, [r7, #20]
 8008ec2:	88fa      	ldrh	r2, [r7, #6]
 8008ec4:	819a      	strh	r2, [r3, #12]
      break;
 8008ec6:	e006      	b.n	8008ed6 <mqtt_create_request+0x76>
  for (n = 0; n < r_objs_len; n++) {
 8008ec8:	7cfb      	ldrb	r3, [r7, #19]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	74fb      	strb	r3, [r7, #19]
 8008ece:	7cfb      	ldrb	r3, [r7, #19]
 8008ed0:	68ba      	ldr	r2, [r7, #8]
 8008ed2:	429a      	cmp	r2, r3
 8008ed4:	d8db      	bhi.n	8008e8e <mqtt_create_request+0x2e>
    }
  }
  return r;
 8008ed6:	697b      	ldr	r3, [r7, #20]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	3718      	adds	r7, #24
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bd80      	pop	{r7, pc}
 8008ee0:	08017848 	.word	0x08017848
 8008ee4:	08017908 	.word	0x08017908
 8008ee8:	080178c0 	.word	0x080178c0

08008eec <mqtt_append_request>:
 * @param tail Pointer to request queue tail pointer
 * @param r Request to append
 */
static void
mqtt_append_request(struct mqtt_request_t **tail, struct mqtt_request_t *r)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  struct mqtt_request_t *head = NULL;
 8008ef6:	2300      	movs	r3, #0
 8008ef8:	617b      	str	r3, [r7, #20]
  s16_t time_before = 0;
 8008efa:	2300      	movs	r3, #0
 8008efc:	827b      	strh	r3, [r7, #18]
  struct mqtt_request_t *iter;

  LWIP_ASSERT("mqtt_append_request: tail != NULL", tail != NULL);
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	d106      	bne.n	8008f12 <mqtt_append_request+0x26>
 8008f04:	4b1b      	ldr	r3, [pc, #108]	; (8008f74 <mqtt_append_request+0x88>)
 8008f06:	f240 123f 	movw	r2, #319	; 0x13f
 8008f0a:	491b      	ldr	r1, [pc, #108]	; (8008f78 <mqtt_append_request+0x8c>)
 8008f0c:	481b      	ldr	r0, [pc, #108]	; (8008f7c <mqtt_append_request+0x90>)
 8008f0e:	f00d fb1f 	bl	8016550 <iprintf>

  /* Iterate trough queue to find head, and count total timeout time */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	60fb      	str	r3, [r7, #12]
 8008f18:	e00a      	b.n	8008f30 <mqtt_append_request+0x44>
    time_before += iter->timeout_diff;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	89da      	ldrh	r2, [r3, #14]
 8008f1e:	8a7b      	ldrh	r3, [r7, #18]
 8008f20:	4413      	add	r3, r2
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	827b      	strh	r3, [r7, #18]
    head = iter;
 8008f26:	68fb      	ldr	r3, [r7, #12]
 8008f28:	617b      	str	r3, [r7, #20]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	60fb      	str	r3, [r7, #12]
 8008f30:	68fb      	ldr	r3, [r7, #12]
 8008f32:	2b00      	cmp	r3, #0
 8008f34:	d1f1      	bne.n	8008f1a <mqtt_append_request+0x2e>
  }

  LWIP_ASSERT("mqtt_append_request: time_before <= MQTT_REQ_TIMEOUT", time_before <= MQTT_REQ_TIMEOUT);
 8008f36:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8008f3a:	2b1e      	cmp	r3, #30
 8008f3c:	dd06      	ble.n	8008f4c <mqtt_append_request+0x60>
 8008f3e:	4b0d      	ldr	r3, [pc, #52]	; (8008f74 <mqtt_append_request+0x88>)
 8008f40:	f240 1247 	movw	r2, #327	; 0x147
 8008f44:	490e      	ldr	r1, [pc, #56]	; (8008f80 <mqtt_append_request+0x94>)
 8008f46:	480d      	ldr	r0, [pc, #52]	; (8008f7c <mqtt_append_request+0x90>)
 8008f48:	f00d fb02 	bl	8016550 <iprintf>
  r->timeout_diff = MQTT_REQ_TIMEOUT - time_before;
 8008f4c:	8a7b      	ldrh	r3, [r7, #18]
 8008f4e:	f1c3 031e 	rsb	r3, r3, #30
 8008f52:	b29a      	uxth	r2, r3
 8008f54:	683b      	ldr	r3, [r7, #0]
 8008f56:	81da      	strh	r2, [r3, #14]
  if (head == NULL) {
 8008f58:	697b      	ldr	r3, [r7, #20]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d103      	bne.n	8008f66 <mqtt_append_request+0x7a>
    *tail = r;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	683a      	ldr	r2, [r7, #0]
 8008f62:	601a      	str	r2, [r3, #0]
  } else {
    head->next = r;
  }
}
 8008f64:	e002      	b.n	8008f6c <mqtt_append_request+0x80>
    head->next = r;
 8008f66:	697b      	ldr	r3, [r7, #20]
 8008f68:	683a      	ldr	r2, [r7, #0]
 8008f6a:	601a      	str	r2, [r3, #0]
}
 8008f6c:	bf00      	nop
 8008f6e:	3718      	adds	r7, #24
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	08017848 	.word	0x08017848
 8008f78:	0801792c 	.word	0x0801792c
 8008f7c:	080178c0 	.word	0x080178c0
 8008f80:	08017950 	.word	0x08017950

08008f84 <mqtt_delete_request>:
 * Delete request item
 * @param r Request item to delete
 */
static void
mqtt_delete_request(struct mqtt_request_t *r)
{
 8008f84:	b480      	push	{r7}
 8008f86:	b083      	sub	sp, #12
 8008f88:	af00      	add	r7, sp, #0
 8008f8a:	6078      	str	r0, [r7, #4]
  if (r != NULL) {
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	2b00      	cmp	r3, #0
 8008f90:	d002      	beq.n	8008f98 <mqtt_delete_request+0x14>
    r->next = r;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	687a      	ldr	r2, [r7, #4]
 8008f96:	601a      	str	r2, [r3, #0]
  }
}
 8008f98:	bf00      	nop
 8008f9a:	370c      	adds	r7, #12
 8008f9c:	46bd      	mov	sp, r7
 8008f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa2:	4770      	bx	lr

08008fa4 <mqtt_take_request>:
 * @param pkt_id Packet identifier of request to take
 * @return Request item if found, NULL if not
 */
static struct mqtt_request_t *
mqtt_take_request(struct mqtt_request_t **tail, u16_t pkt_id)
{
 8008fa4:	b580      	push	{r7, lr}
 8008fa6:	b084      	sub	sp, #16
 8008fa8:	af00      	add	r7, sp, #0
 8008faa:	6078      	str	r0, [r7, #4]
 8008fac:	460b      	mov	r3, r1
 8008fae:	807b      	strh	r3, [r7, #2]
  struct mqtt_request_t *iter = NULL, *prev = NULL;
 8008fb0:	2300      	movs	r3, #0
 8008fb2:	60fb      	str	r3, [r7, #12]
 8008fb4:	2300      	movs	r3, #0
 8008fb6:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_take_request: tail != NULL", tail != NULL);
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d106      	bne.n	8008fcc <mqtt_take_request+0x28>
 8008fbe:	4b1f      	ldr	r3, [pc, #124]	; (800903c <mqtt_take_request+0x98>)
 8008fc0:	f240 1267 	movw	r2, #359	; 0x167
 8008fc4:	491e      	ldr	r1, [pc, #120]	; (8009040 <mqtt_take_request+0x9c>)
 8008fc6:	481f      	ldr	r0, [pc, #124]	; (8009044 <mqtt_take_request+0xa0>)
 8008fc8:	f00d fac2 	bl	8016550 <iprintf>
  /* Search all request for pkt_id */
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	60fb      	str	r3, [r7, #12]
 8008fd2:	e009      	b.n	8008fe8 <mqtt_take_request+0x44>
    if (iter->pkt_id == pkt_id) {
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	899b      	ldrh	r3, [r3, #12]
 8008fd8:	887a      	ldrh	r2, [r7, #2]
 8008fda:	429a      	cmp	r2, r3
 8008fdc:	d008      	beq.n	8008ff0 <mqtt_take_request+0x4c>
      break;
    }
    prev = iter;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	60bb      	str	r3, [r7, #8]
  for (iter = *tail; iter != NULL; iter = iter->next) {
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	60fb      	str	r3, [r7, #12]
 8008fe8:	68fb      	ldr	r3, [r7, #12]
 8008fea:	2b00      	cmp	r3, #0
 8008fec:	d1f2      	bne.n	8008fd4 <mqtt_take_request+0x30>
 8008fee:	e000      	b.n	8008ff2 <mqtt_take_request+0x4e>
      break;
 8008ff0:	bf00      	nop
  }

  /* If request was found */
  if (iter != NULL) {
 8008ff2:	68fb      	ldr	r3, [r7, #12]
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d01c      	beq.n	8009032 <mqtt_take_request+0x8e>
    /* unchain */
    if (prev == NULL) {
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d104      	bne.n	8009008 <mqtt_take_request+0x64>
      *tail = iter->next;
 8008ffe:	68fb      	ldr	r3, [r7, #12]
 8009000:	681a      	ldr	r2, [r3, #0]
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	601a      	str	r2, [r3, #0]
 8009006:	e003      	b.n	8009010 <mqtt_take_request+0x6c>
    } else {
      prev->next = iter->next;
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	68bb      	ldr	r3, [r7, #8]
 800900e:	601a      	str	r2, [r3, #0]
    }
    /* If exists, add remaining timeout time for the request to next */
    if (iter->next != NULL) {
 8009010:	68fb      	ldr	r3, [r7, #12]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d009      	beq.n	800902c <mqtt_take_request+0x88>
      iter->next->timeout_diff += iter->timeout_diff;
 8009018:	68fb      	ldr	r3, [r7, #12]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	89d9      	ldrh	r1, [r3, #14]
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	89da      	ldrh	r2, [r3, #14]
 8009022:	68fb      	ldr	r3, [r7, #12]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	440a      	add	r2, r1
 8009028:	b292      	uxth	r2, r2
 800902a:	81da      	strh	r2, [r3, #14]
    }
    iter->next = NULL;
 800902c:	68fb      	ldr	r3, [r7, #12]
 800902e:	2200      	movs	r2, #0
 8009030:	601a      	str	r2, [r3, #0]
  }
  return iter;
 8009032:	68fb      	ldr	r3, [r7, #12]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	08017848 	.word	0x08017848
 8009040:	08017988 	.word	0x08017988
 8009044:	080178c0 	.word	0x080178c0

08009048 <mqtt_request_time_elapsed>:
 * @param tail Pointer to request queue tail pointer
 * @param t Time since last call in seconds
 */
static void
mqtt_request_time_elapsed(struct mqtt_request_t **tail, u8_t t)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	460b      	mov	r3, r1
 8009052:	70fb      	strb	r3, [r7, #3]
  struct mqtt_request_t *r;
  LWIP_ASSERT("mqtt_request_time_elapsed: tail != NULL", tail != NULL);
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d106      	bne.n	8009068 <mqtt_request_time_elapsed+0x20>
 800905a:	4b21      	ldr	r3, [pc, #132]	; (80090e0 <mqtt_request_time_elapsed+0x98>)
 800905c:	f44f 72c5 	mov.w	r2, #394	; 0x18a
 8009060:	4920      	ldr	r1, [pc, #128]	; (80090e4 <mqtt_request_time_elapsed+0x9c>)
 8009062:	4821      	ldr	r0, [pc, #132]	; (80090e8 <mqtt_request_time_elapsed+0xa0>)
 8009064:	f00d fa74 	bl	8016550 <iprintf>
  r = *tail;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	60fb      	str	r3, [r7, #12]
  while (t > 0 && r != NULL) {
 800906e:	e02c      	b.n	80090ca <mqtt_request_time_elapsed+0x82>
    if (t >= r->timeout_diff) {
 8009070:	78fb      	ldrb	r3, [r7, #3]
 8009072:	b29a      	uxth	r2, r3
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	89db      	ldrh	r3, [r3, #14]
 8009078:	429a      	cmp	r2, r3
 800907a:	d31c      	bcc.n	80090b6 <mqtt_request_time_elapsed+0x6e>
      t -= (u8_t)r->timeout_diff;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	89db      	ldrh	r3, [r3, #14]
 8009080:	b2db      	uxtb	r3, r3
 8009082:	78fa      	ldrb	r2, [r7, #3]
 8009084:	1ad3      	subs	r3, r2, r3
 8009086:	70fb      	strb	r3, [r7, #3]
      /* Unchain */
      *tail = r->next;
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681a      	ldr	r2, [r3, #0]
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	601a      	str	r2, [r3, #0]
      /* Notify upper layer about timeout */
      if (r->cb != NULL) {
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	685b      	ldr	r3, [r3, #4]
 8009094:	2b00      	cmp	r3, #0
 8009096:	d007      	beq.n	80090a8 <mqtt_request_time_elapsed+0x60>
        r->cb(r->arg, ERR_TIMEOUT);
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	685b      	ldr	r3, [r3, #4]
 800909c:	68fa      	ldr	r2, [r7, #12]
 800909e:	6892      	ldr	r2, [r2, #8]
 80090a0:	f06f 0102 	mvn.w	r1, #2
 80090a4:	4610      	mov	r0, r2
 80090a6:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 80090a8:	68f8      	ldr	r0, [r7, #12]
 80090aa:	f7ff ff6b 	bl	8008f84 <mqtt_delete_request>
      /* Tail might be be modified in callback, so re-read it in every iteration */
      r = *(struct mqtt_request_t *const volatile *)tail;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	60fb      	str	r3, [r7, #12]
 80090b4:	e009      	b.n	80090ca <mqtt_request_time_elapsed+0x82>
    } else {
      r->timeout_diff -= t;
 80090b6:	68fb      	ldr	r3, [r7, #12]
 80090b8:	89da      	ldrh	r2, [r3, #14]
 80090ba:	78fb      	ldrb	r3, [r7, #3]
 80090bc:	b29b      	uxth	r3, r3
 80090be:	1ad3      	subs	r3, r2, r3
 80090c0:	b29a      	uxth	r2, r3
 80090c2:	68fb      	ldr	r3, [r7, #12]
 80090c4:	81da      	strh	r2, [r3, #14]
      t = 0;
 80090c6:	2300      	movs	r3, #0
 80090c8:	70fb      	strb	r3, [r7, #3]
  while (t > 0 && r != NULL) {
 80090ca:	78fb      	ldrb	r3, [r7, #3]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d002      	beq.n	80090d6 <mqtt_request_time_elapsed+0x8e>
 80090d0:	68fb      	ldr	r3, [r7, #12]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d1cc      	bne.n	8009070 <mqtt_request_time_elapsed+0x28>
    }
  }
}
 80090d6:	bf00      	nop
 80090d8:	3710      	adds	r7, #16
 80090da:	46bd      	mov	sp, r7
 80090dc:	bd80      	pop	{r7, pc}
 80090de:	bf00      	nop
 80090e0:	08017848 	.word	0x08017848
 80090e4:	080179a8 	.word	0x080179a8
 80090e8:	080178c0 	.word	0x080178c0

080090ec <mqtt_clear_requests>:
 * Free all request items
 * @param tail Pointer to request queue tail pointer
 */
static void
mqtt_clear_requests(struct mqtt_request_t **tail)
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b084      	sub	sp, #16
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
  struct mqtt_request_t *iter, *next;
  LWIP_ASSERT("mqtt_clear_requests: tail != NULL", tail != NULL);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d106      	bne.n	8009108 <mqtt_clear_requests+0x1c>
 80090fa:	4b0e      	ldr	r3, [pc, #56]	; (8009134 <mqtt_clear_requests+0x48>)
 80090fc:	f240 12a7 	movw	r2, #423	; 0x1a7
 8009100:	490d      	ldr	r1, [pc, #52]	; (8009138 <mqtt_clear_requests+0x4c>)
 8009102:	480e      	ldr	r0, [pc, #56]	; (800913c <mqtt_clear_requests+0x50>)
 8009104:	f00d fa24 	bl	8016550 <iprintf>
  for (iter = *tail; iter != NULL; iter = next) {
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	e007      	b.n	8009120 <mqtt_clear_requests+0x34>
    next = iter->next;
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	681b      	ldr	r3, [r3, #0]
 8009114:	60bb      	str	r3, [r7, #8]
    mqtt_delete_request(iter);
 8009116:	68f8      	ldr	r0, [r7, #12]
 8009118:	f7ff ff34 	bl	8008f84 <mqtt_delete_request>
  for (iter = *tail; iter != NULL; iter = next) {
 800911c:	68bb      	ldr	r3, [r7, #8]
 800911e:	60fb      	str	r3, [r7, #12]
 8009120:	68fb      	ldr	r3, [r7, #12]
 8009122:	2b00      	cmp	r3, #0
 8009124:	d1f4      	bne.n	8009110 <mqtt_clear_requests+0x24>
  }
  *tail = NULL;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2200      	movs	r2, #0
 800912a:	601a      	str	r2, [r3, #0]
}
 800912c:	bf00      	nop
 800912e:	3710      	adds	r7, #16
 8009130:	46bd      	mov	sp, r7
 8009132:	bd80      	pop	{r7, pc}
 8009134:	08017848 	.word	0x08017848
 8009138:	080179d0 	.word	0x080179d0
 800913c:	080178c0 	.word	0x080178c0

08009140 <mqtt_init_requests>:
 * @param r_objs Pointer to request objects
 * @param r_objs_len Number of array entries
 */
static void
mqtt_init_requests(struct mqtt_request_t *r_objs, size_t r_objs_len)
{
 8009140:	b580      	push	{r7, lr}
 8009142:	b084      	sub	sp, #16
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
 8009148:	6039      	str	r1, [r7, #0]
  u8_t n;
  LWIP_ASSERT("mqtt_init_requests: r_objs != NULL", r_objs != NULL);
 800914a:	687b      	ldr	r3, [r7, #4]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d106      	bne.n	800915e <mqtt_init_requests+0x1e>
 8009150:	4b0f      	ldr	r3, [pc, #60]	; (8009190 <mqtt_init_requests+0x50>)
 8009152:	f240 12b7 	movw	r2, #439	; 0x1b7
 8009156:	490f      	ldr	r1, [pc, #60]	; (8009194 <mqtt_init_requests+0x54>)
 8009158:	480f      	ldr	r0, [pc, #60]	; (8009198 <mqtt_init_requests+0x58>)
 800915a:	f00d f9f9 	bl	8016550 <iprintf>
  for (n = 0; n < r_objs_len; n++) {
 800915e:	2300      	movs	r3, #0
 8009160:	73fb      	strb	r3, [r7, #15]
 8009162:	e00b      	b.n	800917c <mqtt_init_requests+0x3c>
    /* Item pointing to itself indicates unused */
    r_objs[n].next = &r_objs[n];
 8009164:	7bfb      	ldrb	r3, [r7, #15]
 8009166:	011a      	lsls	r2, r3, #4
 8009168:	7bfb      	ldrb	r3, [r7, #15]
 800916a:	011b      	lsls	r3, r3, #4
 800916c:	6879      	ldr	r1, [r7, #4]
 800916e:	440b      	add	r3, r1
 8009170:	6879      	ldr	r1, [r7, #4]
 8009172:	440a      	add	r2, r1
 8009174:	601a      	str	r2, [r3, #0]
  for (n = 0; n < r_objs_len; n++) {
 8009176:	7bfb      	ldrb	r3, [r7, #15]
 8009178:	3301      	adds	r3, #1
 800917a:	73fb      	strb	r3, [r7, #15]
 800917c:	7bfb      	ldrb	r3, [r7, #15]
 800917e:	683a      	ldr	r2, [r7, #0]
 8009180:	429a      	cmp	r2, r3
 8009182:	d8ef      	bhi.n	8009164 <mqtt_init_requests+0x24>
  }
}
 8009184:	bf00      	nop
 8009186:	bf00      	nop
 8009188:	3710      	adds	r7, #16
 800918a:	46bd      	mov	sp, r7
 800918c:	bd80      	pop	{r7, pc}
 800918e:	bf00      	nop
 8009190:	08017848 	.word	0x08017848
 8009194:	080179f4 	.word	0x080179f4
 8009198:	080178c0 	.word	0x080178c0

0800919c <mqtt_output_append_u8>:
/* Output message build helpers */


static void
mqtt_output_append_u8(struct mqtt_ringbuf_t *rb, u8_t value)
{
 800919c:	b580      	push	{r7, lr}
 800919e:	b082      	sub	sp, #8
 80091a0:	af00      	add	r7, sp, #0
 80091a2:	6078      	str	r0, [r7, #4]
 80091a4:	460b      	mov	r3, r1
 80091a6:	70fb      	strb	r3, [r7, #3]
  mqtt_ringbuf_put(rb, value);
 80091a8:	78fb      	ldrb	r3, [r7, #3]
 80091aa:	4619      	mov	r1, r3
 80091ac:	6878      	ldr	r0, [r7, #4]
 80091ae:	f7ff fd2b 	bl	8008c08 <mqtt_ringbuf_put>
}
 80091b2:	bf00      	nop
 80091b4:	3708      	adds	r7, #8
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}

080091ba <mqtt_output_append_u16>:

static
void mqtt_output_append_u16(struct mqtt_ringbuf_t *rb, u16_t value)
{
 80091ba:	b580      	push	{r7, lr}
 80091bc:	b082      	sub	sp, #8
 80091be:	af00      	add	r7, sp, #0
 80091c0:	6078      	str	r0, [r7, #4]
 80091c2:	460b      	mov	r3, r1
 80091c4:	807b      	strh	r3, [r7, #2]
  mqtt_ringbuf_put(rb, value >> 8);
 80091c6:	887b      	ldrh	r3, [r7, #2]
 80091c8:	0a1b      	lsrs	r3, r3, #8
 80091ca:	b29b      	uxth	r3, r3
 80091cc:	b2db      	uxtb	r3, r3
 80091ce:	4619      	mov	r1, r3
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff fd19 	bl	8008c08 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, value & 0xff);
 80091d6:	887b      	ldrh	r3, [r7, #2]
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	4619      	mov	r1, r3
 80091dc:	6878      	ldr	r0, [r7, #4]
 80091de:	f7ff fd13 	bl	8008c08 <mqtt_ringbuf_put>
}
 80091e2:	bf00      	nop
 80091e4:	3708      	adds	r7, #8
 80091e6:	46bd      	mov	sp, r7
 80091e8:	bd80      	pop	{r7, pc}

080091ea <mqtt_output_append_buf>:

static void
mqtt_output_append_buf(struct mqtt_ringbuf_t *rb, const void *data, u16_t length)
{
 80091ea:	b580      	push	{r7, lr}
 80091ec:	b086      	sub	sp, #24
 80091ee:	af00      	add	r7, sp, #0
 80091f0:	60f8      	str	r0, [r7, #12]
 80091f2:	60b9      	str	r1, [r7, #8]
 80091f4:	4613      	mov	r3, r2
 80091f6:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  for (n = 0; n < length; n++) {
 80091f8:	2300      	movs	r3, #0
 80091fa:	82fb      	strh	r3, [r7, #22]
 80091fc:	e00a      	b.n	8009214 <mqtt_output_append_buf+0x2a>
    mqtt_ringbuf_put(rb, ((const u8_t *)data)[n]);
 80091fe:	8afb      	ldrh	r3, [r7, #22]
 8009200:	68ba      	ldr	r2, [r7, #8]
 8009202:	4413      	add	r3, r2
 8009204:	781b      	ldrb	r3, [r3, #0]
 8009206:	4619      	mov	r1, r3
 8009208:	68f8      	ldr	r0, [r7, #12]
 800920a:	f7ff fcfd 	bl	8008c08 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 800920e:	8afb      	ldrh	r3, [r7, #22]
 8009210:	3301      	adds	r3, #1
 8009212:	82fb      	strh	r3, [r7, #22]
 8009214:	8afa      	ldrh	r2, [r7, #22]
 8009216:	88fb      	ldrh	r3, [r7, #6]
 8009218:	429a      	cmp	r2, r3
 800921a:	d3f0      	bcc.n	80091fe <mqtt_output_append_buf+0x14>
  }
}
 800921c:	bf00      	nop
 800921e:	bf00      	nop
 8009220:	3718      	adds	r7, #24
 8009222:	46bd      	mov	sp, r7
 8009224:	bd80      	pop	{r7, pc}

08009226 <mqtt_output_append_string>:

static void
mqtt_output_append_string(struct mqtt_ringbuf_t *rb, const char *str, u16_t length)
{
 8009226:	b580      	push	{r7, lr}
 8009228:	b086      	sub	sp, #24
 800922a:	af00      	add	r7, sp, #0
 800922c:	60f8      	str	r0, [r7, #12]
 800922e:	60b9      	str	r1, [r7, #8]
 8009230:	4613      	mov	r3, r2
 8009232:	80fb      	strh	r3, [r7, #6]
  u16_t n;
  mqtt_ringbuf_put(rb, length >> 8);
 8009234:	88fb      	ldrh	r3, [r7, #6]
 8009236:	0a1b      	lsrs	r3, r3, #8
 8009238:	b29b      	uxth	r3, r3
 800923a:	b2db      	uxtb	r3, r3
 800923c:	4619      	mov	r1, r3
 800923e:	68f8      	ldr	r0, [r7, #12]
 8009240:	f7ff fce2 	bl	8008c08 <mqtt_ringbuf_put>
  mqtt_ringbuf_put(rb, length & 0xff);
 8009244:	88fb      	ldrh	r3, [r7, #6]
 8009246:	b2db      	uxtb	r3, r3
 8009248:	4619      	mov	r1, r3
 800924a:	68f8      	ldr	r0, [r7, #12]
 800924c:	f7ff fcdc 	bl	8008c08 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8009250:	2300      	movs	r3, #0
 8009252:	82fb      	strh	r3, [r7, #22]
 8009254:	e00a      	b.n	800926c <mqtt_output_append_string+0x46>
    mqtt_ringbuf_put(rb, str[n]);
 8009256:	8afb      	ldrh	r3, [r7, #22]
 8009258:	68ba      	ldr	r2, [r7, #8]
 800925a:	4413      	add	r3, r2
 800925c:	781b      	ldrb	r3, [r3, #0]
 800925e:	4619      	mov	r1, r3
 8009260:	68f8      	ldr	r0, [r7, #12]
 8009262:	f7ff fcd1 	bl	8008c08 <mqtt_ringbuf_put>
  for (n = 0; n < length; n++) {
 8009266:	8afb      	ldrh	r3, [r7, #22]
 8009268:	3301      	adds	r3, #1
 800926a:	82fb      	strh	r3, [r7, #22]
 800926c:	8afa      	ldrh	r2, [r7, #22]
 800926e:	88fb      	ldrh	r3, [r7, #6]
 8009270:	429a      	cmp	r2, r3
 8009272:	d3f0      	bcc.n	8009256 <mqtt_output_append_string+0x30>
  }
}
 8009274:	bf00      	nop
 8009276:	bf00      	nop
 8009278:	3718      	adds	r7, #24
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}

0800927e <mqtt_output_append_fixed_header>:
 */

static void
mqtt_output_append_fixed_header(struct mqtt_ringbuf_t *rb, u8_t msg_type, u8_t fdup,
                                u8_t fqos, u8_t fretain, u16_t r_length)
{
 800927e:	b580      	push	{r7, lr}
 8009280:	b082      	sub	sp, #8
 8009282:	af00      	add	r7, sp, #0
 8009284:	6078      	str	r0, [r7, #4]
 8009286:	4608      	mov	r0, r1
 8009288:	4611      	mov	r1, r2
 800928a:	461a      	mov	r2, r3
 800928c:	4603      	mov	r3, r0
 800928e:	70fb      	strb	r3, [r7, #3]
 8009290:	460b      	mov	r3, r1
 8009292:	70bb      	strb	r3, [r7, #2]
 8009294:	4613      	mov	r3, r2
 8009296:	707b      	strb	r3, [r7, #1]
  /* Start with control byte */
  mqtt_output_append_u8(rb, (((msg_type & 0x0f) << 4) | ((fdup & 1) << 3) | ((fqos & 3) << 1) | (fretain & 1)));
 8009298:	78fb      	ldrb	r3, [r7, #3]
 800929a:	011b      	lsls	r3, r3, #4
 800929c:	b25a      	sxtb	r2, r3
 800929e:	78bb      	ldrb	r3, [r7, #2]
 80092a0:	00db      	lsls	r3, r3, #3
 80092a2:	b25b      	sxtb	r3, r3
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	b25b      	sxtb	r3, r3
 80092aa:	4313      	orrs	r3, r2
 80092ac:	b25a      	sxtb	r2, r3
 80092ae:	787b      	ldrb	r3, [r7, #1]
 80092b0:	005b      	lsls	r3, r3, #1
 80092b2:	b25b      	sxtb	r3, r3
 80092b4:	f003 0306 	and.w	r3, r3, #6
 80092b8:	b25b      	sxtb	r3, r3
 80092ba:	4313      	orrs	r3, r2
 80092bc:	b25a      	sxtb	r2, r3
 80092be:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80092c2:	f003 0301 	and.w	r3, r3, #1
 80092c6:	b25b      	sxtb	r3, r3
 80092c8:	4313      	orrs	r3, r2
 80092ca:	b25b      	sxtb	r3, r3
 80092cc:	b2db      	uxtb	r3, r3
 80092ce:	4619      	mov	r1, r3
 80092d0:	6878      	ldr	r0, [r7, #4]
 80092d2:	f7ff ff63 	bl	800919c <mqtt_output_append_u8>
  /* Encode remaining length field */
  do {
    mqtt_output_append_u8(rb, (r_length & 0x7f) | (r_length >= 128 ? 0x80 : 0));
 80092d6:	8abb      	ldrh	r3, [r7, #20]
 80092d8:	b25b      	sxtb	r3, r3
 80092da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80092de:	b25b      	sxtb	r3, r3
 80092e0:	8aba      	ldrh	r2, [r7, #20]
 80092e2:	2a7f      	cmp	r2, #127	; 0x7f
 80092e4:	d902      	bls.n	80092ec <mqtt_output_append_fixed_header+0x6e>
 80092e6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80092ea:	e000      	b.n	80092ee <mqtt_output_append_fixed_header+0x70>
 80092ec:	2200      	movs	r2, #0
 80092ee:	4313      	orrs	r3, r2
 80092f0:	b25b      	sxtb	r3, r3
 80092f2:	b2db      	uxtb	r3, r3
 80092f4:	4619      	mov	r1, r3
 80092f6:	6878      	ldr	r0, [r7, #4]
 80092f8:	f7ff ff50 	bl	800919c <mqtt_output_append_u8>
    r_length >>= 7;
 80092fc:	8abb      	ldrh	r3, [r7, #20]
 80092fe:	09db      	lsrs	r3, r3, #7
 8009300:	82bb      	strh	r3, [r7, #20]
  } while (r_length > 0);
 8009302:	8abb      	ldrh	r3, [r7, #20]
 8009304:	2b00      	cmp	r3, #0
 8009306:	d1e6      	bne.n	80092d6 <mqtt_output_append_fixed_header+0x58>
}
 8009308:	bf00      	nop
 800930a:	bf00      	nop
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
	...

08009314 <mqtt_output_check_space>:
 * @param r_length Remaining length after fixed header
 * @return 1 if message will fit, 0 if not enough buffer space
 */
static u8_t
mqtt_output_check_space(struct mqtt_ringbuf_t *rb, u16_t r_length)
{
 8009314:	b590      	push	{r4, r7, lr}
 8009316:	b085      	sub	sp, #20
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
 800931c:	460b      	mov	r3, r1
 800931e:	807b      	strh	r3, [r7, #2]
  /* Start with length of type byte + remaining length */
  u16_t total_len = 1 + r_length;
 8009320:	887b      	ldrh	r3, [r7, #2]
 8009322:	3301      	adds	r3, #1
 8009324:	81fb      	strh	r3, [r7, #14]

  LWIP_ASSERT("mqtt_output_check_space: rb != NULL", rb != NULL);
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	2b00      	cmp	r3, #0
 800932a:	d106      	bne.n	800933a <mqtt_output_check_space+0x26>
 800932c:	4b0f      	ldr	r3, [pc, #60]	; (800936c <mqtt_output_check_space+0x58>)
 800932e:	f240 2207 	movw	r2, #519	; 0x207
 8009332:	490f      	ldr	r1, [pc, #60]	; (8009370 <mqtt_output_check_space+0x5c>)
 8009334:	480f      	ldr	r0, [pc, #60]	; (8009374 <mqtt_output_check_space+0x60>)
 8009336:	f00d f90b 	bl	8016550 <iprintf>

  /* Calculate number of required bytes to contain the remaining bytes field and add to total*/
  do {
    total_len++;
 800933a:	89fb      	ldrh	r3, [r7, #14]
 800933c:	3301      	adds	r3, #1
 800933e:	81fb      	strh	r3, [r7, #14]
    r_length >>= 7;
 8009340:	887b      	ldrh	r3, [r7, #2]
 8009342:	09db      	lsrs	r3, r3, #7
 8009344:	807b      	strh	r3, [r7, #2]
  } while (r_length > 0);
 8009346:	887b      	ldrh	r3, [r7, #2]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d1f6      	bne.n	800933a <mqtt_output_check_space+0x26>

  return (total_len <= mqtt_ringbuf_free(rb));
 800934c:	89fc      	ldrh	r4, [r7, #14]
 800934e:	6878      	ldr	r0, [r7, #4]
 8009350:	f7ff fcb6 	bl	8008cc0 <mqtt_ringbuf_len>
 8009354:	4603      	mov	r3, r0
 8009356:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800935a:	429c      	cmp	r4, r3
 800935c:	bfd4      	ite	le
 800935e:	2301      	movle	r3, #1
 8009360:	2300      	movgt	r3, #0
 8009362:	b2db      	uxtb	r3, r3
}
 8009364:	4618      	mov	r0, r3
 8009366:	3714      	adds	r7, #20
 8009368:	46bd      	mov	sp, r7
 800936a:	bd90      	pop	{r4, r7, pc}
 800936c:	08017848 	.word	0x08017848
 8009370:	08017a18 	.word	0x08017a18
 8009374:	080178c0 	.word	0x080178c0

08009378 <mqtt_close>:
 * @param client MQTT client
 * @param reason Reason for disconnection
 */
static void
mqtt_close(mqtt_client_t *client, mqtt_connection_status_t reason)
{
 8009378:	b580      	push	{r7, lr}
 800937a:	b084      	sub	sp, #16
 800937c:	af00      	add	r7, sp, #0
 800937e:	6078      	str	r0, [r7, #4]
 8009380:	460b      	mov	r3, r1
 8009382:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("mqtt_close: client != NULL", client != NULL);
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	2b00      	cmp	r3, #0
 8009388:	d106      	bne.n	8009398 <mqtt_close+0x20>
 800938a:	4b27      	ldr	r3, [pc, #156]	; (8009428 <mqtt_close+0xb0>)
 800938c:	f240 221b 	movw	r2, #539	; 0x21b
 8009390:	4926      	ldr	r1, [pc, #152]	; (800942c <mqtt_close+0xb4>)
 8009392:	4827      	ldr	r0, [pc, #156]	; (8009430 <mqtt_close+0xb8>)
 8009394:	f00d f8dc 	bl	8016550 <iprintf>

  /* Bring down TCP connection if not already done */
  if (client->conn != NULL) {
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	68db      	ldr	r3, [r3, #12]
 800939c:	2b00      	cmp	r3, #0
 800939e:	d024      	beq.n	80093ea <mqtt_close+0x72>
    err_t res;
    altcp_recv(client->conn, NULL);
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	68db      	ldr	r3, [r3, #12]
 80093a4:	2100      	movs	r1, #0
 80093a6:	4618      	mov	r0, r3
 80093a8:	f004 ff56 	bl	800e258 <tcp_recv>
    altcp_err(client->conn,  NULL);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	68db      	ldr	r3, [r3, #12]
 80093b0:	2100      	movs	r1, #0
 80093b2:	4618      	mov	r0, r3
 80093b4:	f004 ff94 	bl	800e2e0 <tcp_err>
    altcp_sent(client->conn, NULL);
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	68db      	ldr	r3, [r3, #12]
 80093bc:	2100      	movs	r1, #0
 80093be:	4618      	mov	r0, r3
 80093c0:	f004 ff6c 	bl	800e29c <tcp_sent>
    res = altcp_close(client->conn);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	68db      	ldr	r3, [r3, #12]
 80093c8:	4618      	mov	r0, r3
 80093ca:	f003 fd6d 	bl	800cea8 <tcp_close>
 80093ce:	4603      	mov	r3, r0
 80093d0:	73fb      	strb	r3, [r7, #15]
    if (res != ERR_OK) {
 80093d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	d004      	beq.n	80093e4 <mqtt_close+0x6c>
      altcp_abort(client->conn);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	68db      	ldr	r3, [r3, #12]
 80093de:	4618      	mov	r0, r3
 80093e0:	f003 fe4c 	bl	800d07c <tcp_abort>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_close: Close err=%s\n", lwip_strerr(res)));
    }
    client->conn = NULL;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2200      	movs	r2, #0
 80093e8:	60da      	str	r2, [r3, #12]
  }

  /* Remove all pending requests */
  mqtt_clear_requests(&client->pend_req_queue);
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	3318      	adds	r3, #24
 80093ee:	4618      	mov	r0, r3
 80093f0:	f7ff fe7c 	bl	80090ec <mqtt_clear_requests>
  /* Stop cyclic timer */
  sys_untimeout(mqtt_cyclic_timer, client);
 80093f4:	6879      	ldr	r1, [r7, #4]
 80093f6:	480f      	ldr	r0, [pc, #60]	; (8009434 <mqtt_close+0xbc>)
 80093f8:	f009 fcae 	bl	8012d58 <sys_untimeout>

  /* Notify upper layer of disconnection if changed state */
  if (client->conn_state != TCP_DISCONNECTED) {
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	7a9b      	ldrb	r3, [r3, #10]
 8009400:	2b00      	cmp	r3, #0
 8009402:	d00d      	beq.n	8009420 <mqtt_close+0xa8>

    client->conn_state = TCP_DISCONNECTED;
 8009404:	687b      	ldr	r3, [r7, #4]
 8009406:	2200      	movs	r2, #0
 8009408:	729a      	strb	r2, [r3, #10]
    if (client->connect_cb != NULL) {
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	695b      	ldr	r3, [r3, #20]
 800940e:	2b00      	cmp	r3, #0
 8009410:	d006      	beq.n	8009420 <mqtt_close+0xa8>
      client->connect_cb(client, client->connect_arg, reason);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	695b      	ldr	r3, [r3, #20]
 8009416:	687a      	ldr	r2, [r7, #4]
 8009418:	6911      	ldr	r1, [r2, #16]
 800941a:	887a      	ldrh	r2, [r7, #2]
 800941c:	6878      	ldr	r0, [r7, #4]
 800941e:	4798      	blx	r3
    }
  }
}
 8009420:	bf00      	nop
 8009422:	3710      	adds	r7, #16
 8009424:	46bd      	mov	sp, r7
 8009426:	bd80      	pop	{r7, pc}
 8009428:	08017848 	.word	0x08017848
 800942c:	08017a3c 	.word	0x08017a3c
 8009430:	080178c0 	.word	0x080178c0
 8009434:	08009439 	.word	0x08009439

08009438 <mqtt_cyclic_timer>:
 * Interval timer, called every MQTT_CYCLIC_TIMER_INTERVAL seconds in MQTT_CONNECTING and MQTT_CONNECTED states
 * @param arg MQTT client
 */
static void
mqtt_cyclic_timer(void *arg)
{
 8009438:	b580      	push	{r7, lr}
 800943a:	b086      	sub	sp, #24
 800943c:	af02      	add	r7, sp, #8
 800943e:	6078      	str	r0, [r7, #4]
  u8_t restart_timer = 1;
 8009440:	2301      	movs	r3, #1
 8009442:	73fb      	strb	r3, [r7, #15]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	60bb      	str	r3, [r7, #8]
  LWIP_ASSERT("mqtt_cyclic_timer: client != NULL", client != NULL);
 8009448:	68bb      	ldr	r3, [r7, #8]
 800944a:	2b00      	cmp	r3, #0
 800944c:	d106      	bne.n	800945c <mqtt_cyclic_timer+0x24>
 800944e:	4b42      	ldr	r3, [pc, #264]	; (8009558 <mqtt_cyclic_timer+0x120>)
 8009450:	f44f 7211 	mov.w	r2, #580	; 0x244
 8009454:	4941      	ldr	r1, [pc, #260]	; (800955c <mqtt_cyclic_timer+0x124>)
 8009456:	4842      	ldr	r0, [pc, #264]	; (8009560 <mqtt_cyclic_timer+0x128>)
 8009458:	f00d f87a 	bl	8016550 <iprintf>

  if (client->conn_state == MQTT_CONNECTING) {
 800945c:	68bb      	ldr	r3, [r7, #8]
 800945e:	7a9b      	ldrb	r3, [r3, #10]
 8009460:	2b02      	cmp	r3, #2
 8009462:	d115      	bne.n	8009490 <mqtt_cyclic_timer+0x58>
    client->cyclic_tick++;
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	881b      	ldrh	r3, [r3, #0]
 8009468:	3301      	adds	r3, #1
 800946a:	b29a      	uxth	r2, r3
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	801a      	strh	r2, [r3, #0]
    if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= MQTT_CONNECT_TIMOUT) {
 8009470:	68bb      	ldr	r3, [r7, #8]
 8009472:	881b      	ldrh	r3, [r3, #0]
 8009474:	461a      	mov	r2, r3
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	2b63      	cmp	r3, #99	; 0x63
 800947e:	dd5e      	ble.n	800953e <mqtt_cyclic_timer+0x106>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: CONNECT attempt to server timed out\n"));
      /* Disconnect TCP */
      mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 8009480:	f240 1101 	movw	r1, #257	; 0x101
 8009484:	68b8      	ldr	r0, [r7, #8]
 8009486:	f7ff ff77 	bl	8009378 <mqtt_close>
      restart_timer = 0;
 800948a:	2300      	movs	r3, #0
 800948c:	73fb      	strb	r3, [r7, #15]
 800948e:	e056      	b.n	800953e <mqtt_cyclic_timer+0x106>
    }
  } else if (client->conn_state == MQTT_CONNECTED) {
 8009490:	68bb      	ldr	r3, [r7, #8]
 8009492:	7a9b      	ldrb	r3, [r3, #10]
 8009494:	2b03      	cmp	r3, #3
 8009496:	d150      	bne.n	800953a <mqtt_cyclic_timer+0x102>
    /* Handle timeout for pending requests */
    mqtt_request_time_elapsed(&client->pend_req_queue, MQTT_CYCLIC_TIMER_INTERVAL);
 8009498:	68bb      	ldr	r3, [r7, #8]
 800949a:	3318      	adds	r3, #24
 800949c:	2105      	movs	r1, #5
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff fdd2 	bl	8009048 <mqtt_request_time_elapsed>

    /* keep_alive > 0 means keep alive functionality shall be used */
    if (client->keep_alive > 0) {
 80094a4:	68bb      	ldr	r3, [r7, #8]
 80094a6:	885b      	ldrh	r3, [r3, #2]
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d048      	beq.n	800953e <mqtt_cyclic_timer+0x106>

      client->server_watchdog++;
 80094ac:	68bb      	ldr	r3, [r7, #8]
 80094ae:	889b      	ldrh	r3, [r3, #4]
 80094b0:	3301      	adds	r3, #1
 80094b2:	b29a      	uxth	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	809a      	strh	r2, [r3, #4]
      /* If reception from server has been idle for 1.5*keep_alive time, server is considered unresponsive */
      if ((client->server_watchdog * MQTT_CYCLIC_TIMER_INTERVAL) > (client->keep_alive + client->keep_alive / 2)) {
 80094b8:	68bb      	ldr	r3, [r7, #8]
 80094ba:	889b      	ldrh	r3, [r3, #4]
 80094bc:	461a      	mov	r2, r3
 80094be:	4613      	mov	r3, r2
 80094c0:	009b      	lsls	r3, r3, #2
 80094c2:	441a      	add	r2, r3
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	885b      	ldrh	r3, [r3, #2]
 80094c8:	4619      	mov	r1, r3
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	885b      	ldrh	r3, [r3, #2]
 80094ce:	085b      	lsrs	r3, r3, #1
 80094d0:	b29b      	uxth	r3, r3
 80094d2:	440b      	add	r3, r1
 80094d4:	429a      	cmp	r2, r3
 80094d6:	dd06      	ble.n	80094e6 <mqtt_cyclic_timer+0xae>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Server incoming keep-alive timeout\n"));
        mqtt_close(client, MQTT_CONNECT_TIMEOUT);
 80094d8:	f240 1101 	movw	r1, #257	; 0x101
 80094dc:	68b8      	ldr	r0, [r7, #8]
 80094de:	f7ff ff4b 	bl	8009378 <mqtt_close>
        restart_timer = 0;
 80094e2:	2300      	movs	r3, #0
 80094e4:	73fb      	strb	r3, [r7, #15]
      }

      /* If time for a keep alive message to be sent, transmission has been idle for keep_alive time */
      if ((client->cyclic_tick * MQTT_CYCLIC_TIMER_INTERVAL) >= client->keep_alive) {
 80094e6:	68bb      	ldr	r3, [r7, #8]
 80094e8:	881b      	ldrh	r3, [r3, #0]
 80094ea:	461a      	mov	r2, r3
 80094ec:	4613      	mov	r3, r2
 80094ee:	009b      	lsls	r3, r3, #2
 80094f0:	4413      	add	r3, r2
 80094f2:	68ba      	ldr	r2, [r7, #8]
 80094f4:	8852      	ldrh	r2, [r2, #2]
 80094f6:	4293      	cmp	r3, r2
 80094f8:	db18      	blt.n	800952c <mqtt_cyclic_timer+0xf4>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_cyclic_timer: Sending keep-alive message to server\n"));
        if (mqtt_output_check_space(&client->output, 0) != 0) {
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	33ec      	adds	r3, #236	; 0xec
 80094fe:	2100      	movs	r1, #0
 8009500:	4618      	mov	r0, r3
 8009502:	f7ff ff07 	bl	8009314 <mqtt_output_check_space>
 8009506:	4603      	mov	r3, r0
 8009508:	2b00      	cmp	r3, #0
 800950a:	d018      	beq.n	800953e <mqtt_cyclic_timer+0x106>
          mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PINGREQ, 0, 0, 0, 0);
 800950c:	68bb      	ldr	r3, [r7, #8]
 800950e:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009512:	2300      	movs	r3, #0
 8009514:	9301      	str	r3, [sp, #4]
 8009516:	2300      	movs	r3, #0
 8009518:	9300      	str	r3, [sp, #0]
 800951a:	2300      	movs	r3, #0
 800951c:	2200      	movs	r2, #0
 800951e:	210c      	movs	r1, #12
 8009520:	f7ff fead 	bl	800927e <mqtt_output_append_fixed_header>
          client->cyclic_tick = 0;
 8009524:	68bb      	ldr	r3, [r7, #8]
 8009526:	2200      	movs	r2, #0
 8009528:	801a      	strh	r2, [r3, #0]
 800952a:	e008      	b.n	800953e <mqtt_cyclic_timer+0x106>
        }
      } else {
        client->cyclic_tick++;
 800952c:	68bb      	ldr	r3, [r7, #8]
 800952e:	881b      	ldrh	r3, [r3, #0]
 8009530:	3301      	adds	r3, #1
 8009532:	b29a      	uxth	r2, r3
 8009534:	68bb      	ldr	r3, [r7, #8]
 8009536:	801a      	strh	r2, [r3, #0]
 8009538:	e001      	b.n	800953e <mqtt_cyclic_timer+0x106>
      }
    }
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_cyclic_timer: Timer should not be running in state %d\n", client->conn_state));
    restart_timer = 0;
 800953a:	2300      	movs	r3, #0
 800953c:	73fb      	strb	r3, [r7, #15]
  }
  if (restart_timer) {
 800953e:	7bfb      	ldrb	r3, [r7, #15]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d005      	beq.n	8009550 <mqtt_cyclic_timer+0x118>
    sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, arg);
 8009544:	687a      	ldr	r2, [r7, #4]
 8009546:	4907      	ldr	r1, [pc, #28]	; (8009564 <mqtt_cyclic_timer+0x12c>)
 8009548:	f241 3088 	movw	r0, #5000	; 0x1388
 800954c:	f009 fbde 	bl	8012d0c <sys_timeout>
  }
}
 8009550:	bf00      	nop
 8009552:	3710      	adds	r7, #16
 8009554:	46bd      	mov	sp, r7
 8009556:	bd80      	pop	{r7, pc}
 8009558:	08017848 	.word	0x08017848
 800955c:	08017a58 	.word	0x08017a58
 8009560:	080178c0 	.word	0x080178c0
 8009564:	08009439 	.word	0x08009439

08009568 <pub_ack_rec_rel_response>:
 * @param qos QoS value
 * @return ERR_OK if successful, ERR_MEM if out of memory
 */
static err_t
pub_ack_rec_rel_response(mqtt_client_t *client, u8_t msg, u16_t pkt_id, u8_t qos)
{
 8009568:	b580      	push	{r7, lr}
 800956a:	b086      	sub	sp, #24
 800956c:	af02      	add	r7, sp, #8
 800956e:	6078      	str	r0, [r7, #4]
 8009570:	4608      	mov	r0, r1
 8009572:	4611      	mov	r1, r2
 8009574:	461a      	mov	r2, r3
 8009576:	4603      	mov	r3, r0
 8009578:	70fb      	strb	r3, [r7, #3]
 800957a:	460b      	mov	r3, r1
 800957c:	803b      	strh	r3, [r7, #0]
 800957e:	4613      	mov	r3, r2
 8009580:	70bb      	strb	r3, [r7, #2]
  err_t err = ERR_OK;
 8009582:	2300      	movs	r3, #0
 8009584:	73fb      	strb	r3, [r7, #15]
  if (mqtt_output_check_space(&client->output, 2)) {
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	33ec      	adds	r3, #236	; 0xec
 800958a:	2102      	movs	r1, #2
 800958c:	4618      	mov	r0, r3
 800958e:	f7ff fec1 	bl	8009314 <mqtt_output_check_space>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d01c      	beq.n	80095d2 <pub_ack_rec_rel_response+0x6a>
    mqtt_output_append_fixed_header(&client->output, msg, 0, qos, 0, 2);
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800959e:	78bb      	ldrb	r3, [r7, #2]
 80095a0:	78f9      	ldrb	r1, [r7, #3]
 80095a2:	2202      	movs	r2, #2
 80095a4:	9201      	str	r2, [sp, #4]
 80095a6:	2200      	movs	r2, #0
 80095a8:	9200      	str	r2, [sp, #0]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f7ff fe67 	bl	800927e <mqtt_output_append_fixed_header>
    mqtt_output_append_u16(&client->output, pkt_id);
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	33ec      	adds	r3, #236	; 0xec
 80095b4:	883a      	ldrh	r2, [r7, #0]
 80095b6:	4611      	mov	r1, r2
 80095b8:	4618      	mov	r0, r3
 80095ba:	f7ff fdfe 	bl	80091ba <mqtt_output_append_u16>
    mqtt_output_send(&client->output, client->conn);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68db      	ldr	r3, [r3, #12]
 80095c8:	4619      	mov	r1, r3
 80095ca:	4610      	mov	r0, r2
 80095cc:	f7ff fb94 	bl	8008cf8 <mqtt_output_send>
 80095d0:	e001      	b.n	80095d6 <pub_ack_rec_rel_response+0x6e>
  } else {
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("pub_ack_rec_rel_response: OOM creating response: %s with pkt_id: %d\n",
                                   mqtt_msg_type_to_str(msg), pkt_id));
    err = ERR_MEM;
 80095d2:	23ff      	movs	r3, #255	; 0xff
 80095d4:	73fb      	strb	r3, [r7, #15]
  }
  return err;
 80095d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3710      	adds	r7, #16
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}

080095e2 <mqtt_incomming_suback>:
 * @param r Matching request
 * @param result Result code from server
 */
static void
mqtt_incomming_suback(struct mqtt_request_t *r, u8_t result)
{
 80095e2:	b580      	push	{r7, lr}
 80095e4:	b082      	sub	sp, #8
 80095e6:	af00      	add	r7, sp, #0
 80095e8:	6078      	str	r0, [r7, #4]
 80095ea:	460b      	mov	r3, r1
 80095ec:	70fb      	strb	r3, [r7, #3]
  if (r->cb != NULL) {
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	685b      	ldr	r3, [r3, #4]
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00c      	beq.n	8009610 <mqtt_incomming_suback+0x2e>
    r->cb(r->arg, result < 3 ? ERR_OK : ERR_ABRT);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	685b      	ldr	r3, [r3, #4]
 80095fa:	687a      	ldr	r2, [r7, #4]
 80095fc:	6890      	ldr	r0, [r2, #8]
 80095fe:	78fa      	ldrb	r2, [r7, #3]
 8009600:	2a02      	cmp	r2, #2
 8009602:	d801      	bhi.n	8009608 <mqtt_incomming_suback+0x26>
 8009604:	2200      	movs	r2, #0
 8009606:	e001      	b.n	800960c <mqtt_incomming_suback+0x2a>
 8009608:	f06f 020c 	mvn.w	r2, #12
 800960c:	4611      	mov	r1, r2
 800960e:	4798      	blx	r3
  }
}
 8009610:	bf00      	nop
 8009612:	3708      	adds	r7, #8
 8009614:	46bd      	mov	sp, r7
 8009616:	bd80      	pop	{r7, pc}

08009618 <mqtt_message_received>:
 * @param length length received part
 * @param remaining_length Remaining length of complete message
 */
static mqtt_connection_status_t
mqtt_message_received(mqtt_client_t *client, u8_t fixed_hdr_idx, u16_t length, u32_t remaining_length)
{
 8009618:	b590      	push	{r4, r7, lr}
 800961a:	b08f      	sub	sp, #60	; 0x3c
 800961c:	af00      	add	r7, sp, #0
 800961e:	60f8      	str	r0, [r7, #12]
 8009620:	607b      	str	r3, [r7, #4]
 8009622:	460b      	mov	r3, r1
 8009624:	72fb      	strb	r3, [r7, #11]
 8009626:	4613      	mov	r3, r2
 8009628:	813b      	strh	r3, [r7, #8]
  mqtt_connection_status_t res = MQTT_CONNECT_ACCEPTED;
 800962a:	2300      	movs	r3, #0
 800962c:	86fb      	strh	r3, [r7, #54]	; 0x36

  u8_t *var_hdr_payload = client->rx_buffer + fixed_hdr_idx;
 800962e:	68fb      	ldr	r3, [r7, #12]
 8009630:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009634:	7afb      	ldrb	r3, [r7, #11]
 8009636:	4413      	add	r3, r2
 8009638:	62fb      	str	r3, [r7, #44]	; 0x2c
  size_t var_hdr_payload_bufsize = sizeof(client->rx_buffer) - fixed_hdr_idx;
 800963a:	7afb      	ldrb	r3, [r7, #11]
 800963c:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009640:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Control packet type */
  u8_t pkt_type = MQTT_CTL_PACKET_TYPE(client->rx_buffer[0]);
 8009642:	68fb      	ldr	r3, [r7, #12]
 8009644:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009648:	091b      	lsrs	r3, r3, #4
 800964a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  u16_t pkt_id = 0;
 800964e:	2300      	movs	r3, #0
 8009650:	84bb      	strh	r3, [r7, #36]	; 0x24

  LWIP_ASSERT("client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN", client->msg_idx < MQTT_VAR_HEADER_BUFFER_LEN);
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009656:	2b7f      	cmp	r3, #127	; 0x7f
 8009658:	d906      	bls.n	8009668 <mqtt_message_received+0x50>
 800965a:	4b97      	ldr	r3, [pc, #604]	; (80098b8 <mqtt_message_received+0x2a0>)
 800965c:	f240 22ab 	movw	r2, #683	; 0x2ab
 8009660:	4996      	ldr	r1, [pc, #600]	; (80098bc <mqtt_message_received+0x2a4>)
 8009662:	4897      	ldr	r0, [pc, #604]	; (80098c0 <mqtt_message_received+0x2a8>)
 8009664:	f00c ff74 	bl	8016550 <iprintf>
  LWIP_ASSERT("fixed_hdr_idx <= client->msg_idx", fixed_hdr_idx <= client->msg_idx);
 8009668:	7afa      	ldrb	r2, [r7, #11]
 800966a:	68fb      	ldr	r3, [r7, #12]
 800966c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800966e:	429a      	cmp	r2, r3
 8009670:	d906      	bls.n	8009680 <mqtt_message_received+0x68>
 8009672:	4b91      	ldr	r3, [pc, #580]	; (80098b8 <mqtt_message_received+0x2a0>)
 8009674:	f44f 722b 	mov.w	r2, #684	; 0x2ac
 8009678:	4992      	ldr	r1, [pc, #584]	; (80098c4 <mqtt_message_received+0x2ac>)
 800967a:	4891      	ldr	r0, [pc, #580]	; (80098c0 <mqtt_message_received+0x2a8>)
 800967c:	f00c ff68 	bl	8016550 <iprintf>
  LWIP_ERROR("buffer length mismatch", fixed_hdr_idx + length <= MQTT_VAR_HEADER_BUFFER_LEN,
 8009680:	7afa      	ldrb	r2, [r7, #11]
 8009682:	893b      	ldrh	r3, [r7, #8]
 8009684:	4413      	add	r3, r2
 8009686:	2b80      	cmp	r3, #128	; 0x80
 8009688:	dd09      	ble.n	800969e <mqtt_message_received+0x86>
 800968a:	4b8b      	ldr	r3, [pc, #556]	; (80098b8 <mqtt_message_received+0x2a0>)
 800968c:	f240 22ad 	movw	r2, #685	; 0x2ad
 8009690:	498d      	ldr	r1, [pc, #564]	; (80098c8 <mqtt_message_received+0x2b0>)
 8009692:	488b      	ldr	r0, [pc, #556]	; (80098c0 <mqtt_message_received+0x2a8>)
 8009694:	f00c ff5c 	bl	8016550 <iprintf>
 8009698:	f44f 7380 	mov.w	r3, #256	; 0x100
 800969c:	e16f      	b.n	800997e <mqtt_message_received+0x366>
             return MQTT_CONNECT_DISCONNECTED);

  if (pkt_type == MQTT_MSG_TYPE_CONNACK) {
 800969e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096a2:	2b02      	cmp	r3, #2
 80096a4:	d123      	bne.n	80096ee <mqtt_message_received+0xd6>
    if (client->conn_state == MQTT_CONNECTING) {
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	7a9b      	ldrb	r3, [r3, #10]
 80096aa:	2b02      	cmp	r3, #2
 80096ac:	f040 8152 	bne.w	8009954 <mqtt_message_received+0x33c>
      if (length < 2) {
 80096b0:	893b      	ldrh	r3, [r7, #8]
 80096b2:	2b01      	cmp	r3, #1
 80096b4:	f240 8150 	bls.w	8009958 <mqtt_message_received+0x340>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short CONNACK message\n"));
        goto out_disconnect;
      }
      /* Get result code from CONNACK */
      res = (mqtt_connection_status_t)var_hdr_payload[1];
 80096b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096ba:	3301      	adds	r3, #1
 80096bc:	781b      	ldrb	r3, [r3, #0]
 80096be:	86fb      	strh	r3, [r7, #54]	; 0x36
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: Connect response code %d\n", res));
      if (res == MQTT_CONNECT_ACCEPTED) {
 80096c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	f040 8146 	bne.w	8009954 <mqtt_message_received+0x33c>
        /* Reset cyclic_tick when changing to connected state */
        client->cyclic_tick = 0;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	2200      	movs	r2, #0
 80096cc:	801a      	strh	r2, [r3, #0]
        client->conn_state = MQTT_CONNECTED;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2203      	movs	r2, #3
 80096d2:	729a      	strb	r2, [r3, #10]
        /* Notify upper layer */
        if (client->connect_cb != 0) {
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	695b      	ldr	r3, [r3, #20]
 80096d8:	2b00      	cmp	r3, #0
 80096da:	f000 813b 	beq.w	8009954 <mqtt_message_received+0x33c>
          client->connect_cb(client, client->connect_arg, res);
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	695b      	ldr	r3, [r3, #20]
 80096e2:	68fa      	ldr	r2, [r7, #12]
 80096e4:	6911      	ldr	r1, [r2, #16]
 80096e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80096e8:	68f8      	ldr	r0, [r7, #12]
 80096ea:	4798      	blx	r3
 80096ec:	e132      	b.n	8009954 <mqtt_message_received+0x33c>
        }
      }
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Received CONNACK in connected state\n"));
    }
  } else if (pkt_type == MQTT_MSG_TYPE_PINGRESP) {
 80096ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096f2:	2b0d      	cmp	r3, #13
 80096f4:	f000 812e 	beq.w	8009954 <mqtt_message_received+0x33c>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ( "mqtt_message_received: Received PINGRESP from server\n"));

  } else if (pkt_type == MQTT_MSG_TYPE_PUBLISH) {
 80096f8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	f040 80c0 	bne.w	8009882 <mqtt_message_received+0x26a>
    u16_t payload_offset = 0;
 8009702:	2300      	movs	r3, #0
 8009704:	86bb      	strh	r3, [r7, #52]	; 0x34
    u16_t payload_length = length;
 8009706:	893b      	ldrh	r3, [r7, #8]
 8009708:	867b      	strh	r3, [r7, #50]	; 0x32
    u8_t qos = MQTT_CTL_PACKET_QOS(client->rx_buffer[0]);
 800970a:	68fb      	ldr	r3, [r7, #12]
 800970c:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 8009710:	105b      	asrs	r3, r3, #1
 8009712:	b2db      	uxtb	r3, r3
 8009714:	f003 0303 	and.w	r3, r3, #3
 8009718:	77fb      	strb	r3, [r7, #31]

    if (client->msg_idx <= MQTT_VAR_HEADER_BUFFER_LEN) {
 800971a:	68fb      	ldr	r3, [r7, #12]
 800971c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800971e:	2b80      	cmp	r3, #128	; 0x80
 8009720:	d87d      	bhi.n	800981e <mqtt_message_received+0x206>
      /* Should have topic and pkt id*/
      u8_t *topic;
      u16_t after_topic;
      u8_t bkp;
      u16_t topic_len;
      u16_t qos_len = (qos ? 2U : 0U);
 8009722:	7ffb      	ldrb	r3, [r7, #31]
 8009724:	2b00      	cmp	r3, #0
 8009726:	d001      	beq.n	800972c <mqtt_message_received+0x114>
 8009728:	2302      	movs	r3, #2
 800972a:	e000      	b.n	800972e <mqtt_message_received+0x116>
 800972c:	2300      	movs	r3, #0
 800972e:	83bb      	strh	r3, [r7, #28]
      if (length < 2 + qos_len) {
 8009730:	8bbb      	ldrh	r3, [r7, #28]
 8009732:	1c5a      	adds	r2, r3, #1
 8009734:	893b      	ldrh	r3, [r7, #8]
 8009736:	429a      	cmp	r2, r3
 8009738:	f280 8110 	bge.w	800995c <mqtt_message_received+0x344>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet\n"));
        goto out_disconnect;
      }
      topic_len = var_hdr_payload[0];
 800973c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	837b      	strh	r3, [r7, #26]
      topic_len = (topic_len << 8) + (u16_t)(var_hdr_payload[1]);
 8009742:	8b7b      	ldrh	r3, [r7, #26]
 8009744:	021b      	lsls	r3, r3, #8
 8009746:	b29a      	uxth	r2, r3
 8009748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800974a:	3301      	adds	r3, #1
 800974c:	781b      	ldrb	r3, [r3, #0]
 800974e:	b29b      	uxth	r3, r3
 8009750:	4413      	add	r3, r2
 8009752:	837b      	strh	r3, [r7, #26]
      if ((topic_len > length - (2 + qos_len)) ||
 8009754:	8b7a      	ldrh	r2, [r7, #26]
 8009756:	8939      	ldrh	r1, [r7, #8]
 8009758:	8bbb      	ldrh	r3, [r7, #28]
 800975a:	3302      	adds	r3, #2
 800975c:	1acb      	subs	r3, r1, r3
 800975e:	429a      	cmp	r2, r3
 8009760:	f300 80fe 	bgt.w	8009960 <mqtt_message_received+0x348>
          (topic_len > var_hdr_payload_bufsize - (2 + qos_len))) {
 8009764:	8b7a      	ldrh	r2, [r7, #26]
 8009766:	8bbb      	ldrh	r3, [r7, #28]
 8009768:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800976a:	1acb      	subs	r3, r1, r3
 800976c:	3b02      	subs	r3, #2
      if ((topic_len > length - (2 + qos_len)) ||
 800976e:	429a      	cmp	r2, r3
 8009770:	f200 80f6 	bhi.w	8009960 <mqtt_message_received+0x348>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (topic)\n"));
        goto out_disconnect;
      }

      topic = var_hdr_payload + 2;
 8009774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009776:	3302      	adds	r3, #2
 8009778:	617b      	str	r3, [r7, #20]
      after_topic = 2 + topic_len;
 800977a:	8b7b      	ldrh	r3, [r7, #26]
 800977c:	3302      	adds	r3, #2
 800977e:	863b      	strh	r3, [r7, #48]	; 0x30
      /* Check buffer length, add one byte even for QoS 0 so that zero termination will fit */
      if ((after_topic + (qos ? 2U : 1U)) > var_hdr_payload_bufsize) {
 8009780:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8009782:	7ffa      	ldrb	r2, [r7, #31]
 8009784:	2a00      	cmp	r2, #0
 8009786:	d001      	beq.n	800978c <mqtt_message_received+0x174>
 8009788:	2202      	movs	r2, #2
 800978a:	e000      	b.n	800978e <mqtt_message_received+0x176>
 800978c:	2201      	movs	r2, #1
 800978e:	4413      	add	r3, r2
 8009790:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009792:	429a      	cmp	r2, r3
 8009794:	f0c0 80e6 	bcc.w	8009964 <mqtt_message_received+0x34c>
        LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Receive buffer can not fit topic + pkt_id\n"));
        goto out_disconnect;
      }

      /* id for QoS 1 and 2 */
      if (qos > 0) {
 8009798:	7ffb      	ldrb	r3, [r7, #31]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d01a      	beq.n	80097d4 <mqtt_message_received+0x1bc>
        if (length < after_topic + 2U) {
 800979e:	893a      	ldrh	r2, [r7, #8]
 80097a0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097a2:	3302      	adds	r3, #2
 80097a4:	429a      	cmp	r2, r3
 80097a6:	f0c0 80df 	bcc.w	8009968 <mqtt_message_received+0x350>
          LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short PUBLISH packet (after_topic)\n"));
          goto out_disconnect;
        }
        client->inpub_pkt_id = ((u16_t)var_hdr_payload[after_topic] << 8) + (u16_t)var_hdr_payload[after_topic + 1];
 80097aa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097ae:	4413      	add	r3, r2
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	b29b      	uxth	r3, r3
 80097b4:	021b      	lsls	r3, r3, #8
 80097b6:	b29a      	uxth	r2, r3
 80097b8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097ba:	3301      	adds	r3, #1
 80097bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80097be:	440b      	add	r3, r1
 80097c0:	781b      	ldrb	r3, [r3, #0]
 80097c2:	b29b      	uxth	r3, r3
 80097c4:	4413      	add	r3, r2
 80097c6:	b29a      	uxth	r2, r3
 80097c8:	68fb      	ldr	r3, [r7, #12]
 80097ca:	811a      	strh	r2, [r3, #8]
        after_topic += 2;
 80097cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097ce:	3302      	adds	r3, #2
 80097d0:	863b      	strh	r3, [r7, #48]	; 0x30
 80097d2:	e002      	b.n	80097da <mqtt_message_received+0x1c2>
      } else {
        client->inpub_pkt_id = 0;
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	2200      	movs	r2, #0
 80097d8:	811a      	strh	r2, [r3, #8]
      }
      /* Take backup of byte after topic */
      bkp = topic[topic_len];
 80097da:	8b7b      	ldrh	r3, [r7, #26]
 80097dc:	697a      	ldr	r2, [r7, #20]
 80097de:	4413      	add	r3, r2
 80097e0:	781b      	ldrb	r3, [r3, #0]
 80097e2:	74fb      	strb	r3, [r7, #19]
      /* Zero terminate string */
      topic[topic_len] = 0;
 80097e4:	8b7b      	ldrh	r3, [r7, #26]
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	4413      	add	r3, r2
 80097ea:	2200      	movs	r2, #0
 80097ec:	701a      	strb	r2, [r3, #0]
      /* Payload data remaining in receive buffer */
      payload_length = length - after_topic;
 80097ee:	893a      	ldrh	r2, [r7, #8]
 80097f0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097f2:	1ad3      	subs	r3, r2, r3
 80097f4:	867b      	strh	r3, [r7, #50]	; 0x32
      payload_offset = after_topic;
 80097f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80097f8:	86bb      	strh	r3, [r7, #52]	; 0x34

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Received message with QoS %d at topic: %s, payload length %"U32_F"\n",
                                     qos, topic, remaining_length + payload_length));
      if (client->pub_cb != NULL) {
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d008      	beq.n	8009814 <mqtt_message_received+0x1fc>
        client->pub_cb(client->inpub_arg, (const char *)topic, remaining_length + payload_length);
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009806:	68fa      	ldr	r2, [r7, #12]
 8009808:	6dd0      	ldr	r0, [r2, #92]	; 0x5c
 800980a:	8e79      	ldrh	r1, [r7, #50]	; 0x32
 800980c:	687a      	ldr	r2, [r7, #4]
 800980e:	440a      	add	r2, r1
 8009810:	6979      	ldr	r1, [r7, #20]
 8009812:	4798      	blx	r3
      }
      /* Restore byte after topic */
      topic[topic_len] = bkp;
 8009814:	8b7b      	ldrh	r3, [r7, #26]
 8009816:	697a      	ldr	r2, [r7, #20]
 8009818:	4413      	add	r3, r2
 800981a:	7cfa      	ldrb	r2, [r7, #19]
 800981c:	701a      	strb	r2, [r3, #0]
    }
    if (payload_length > 0 || remaining_length == 0) {
 800981e:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009820:	2b00      	cmp	r3, #0
 8009822:	d103      	bne.n	800982c <mqtt_message_received+0x214>
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	2b00      	cmp	r3, #0
 8009828:	f040 8094 	bne.w	8009954 <mqtt_message_received+0x33c>
      if (length < (size_t)(payload_offset + payload_length)) {
 800982c:	893b      	ldrh	r3, [r7, #8]
 800982e:	8eb9      	ldrh	r1, [r7, #52]	; 0x34
 8009830:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009832:	440a      	add	r2, r1
 8009834:	4293      	cmp	r3, r2
 8009836:	f0c0 8099 	bcc.w	800996c <mqtt_message_received+0x354>
        LWIP_DEBUGF(MQTT_DEBUG_WARN,( "mqtt_message_received: Received short packet (payload)\n"));
        goto out_disconnect;
      }
      client->data_cb(client->inpub_arg, var_hdr_payload + payload_offset, payload_length, remaining_length == 0 ? MQTT_DATA_FLAG_LAST : 0);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	6dd8      	ldr	r0, [r3, #92]	; 0x5c
 8009842:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009844:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009846:	18d1      	adds	r1, r2, r3
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	bf0c      	ite	eq
 800984e:	2301      	moveq	r3, #1
 8009850:	2300      	movne	r3, #0
 8009852:	b2db      	uxtb	r3, r3
 8009854:	8e7a      	ldrh	r2, [r7, #50]	; 0x32
 8009856:	47a0      	blx	r4
      /* Reply if QoS > 0 */
      if (remaining_length == 0 && qos > 0) {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d17a      	bne.n	8009954 <mqtt_message_received+0x33c>
 800985e:	7ffb      	ldrb	r3, [r7, #31]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d077      	beq.n	8009954 <mqtt_message_received+0x33c>
        /* Send PUBACK for QoS 1 or PUBREC for QoS 2 */
        u8_t resp_msg = (qos == 1) ? MQTT_MSG_TYPE_PUBACK : MQTT_MSG_TYPE_PUBREC;
 8009864:	7ffb      	ldrb	r3, [r7, #31]
 8009866:	2b01      	cmp	r3, #1
 8009868:	d101      	bne.n	800986e <mqtt_message_received+0x256>
 800986a:	2304      	movs	r3, #4
 800986c:	e000      	b.n	8009870 <mqtt_message_received+0x258>
 800986e:	2305      	movs	r3, #5
 8009870:	74bb      	strb	r3, [r7, #18]
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_incomming_publish: Sending publish response: %s with pkt_id: %d\n",
                                       mqtt_msg_type_to_str(resp_msg), client->inpub_pkt_id));
        pub_ack_rec_rel_response(client, resp_msg, client->inpub_pkt_id, 0);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	891a      	ldrh	r2, [r3, #8]
 8009876:	7cb9      	ldrb	r1, [r7, #18]
 8009878:	2300      	movs	r3, #0
 800987a:	68f8      	ldr	r0, [r7, #12]
 800987c:	f7ff fe74 	bl	8009568 <pub_ack_rec_rel_response>
 8009880:	e068      	b.n	8009954 <mqtt_message_received+0x33c>
      }
    }
  } else {
    /* Get packet identifier */
    pkt_id = (u16_t)var_hdr_payload[0] << 8;
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	781b      	ldrb	r3, [r3, #0]
 8009886:	b29b      	uxth	r3, r3
 8009888:	021b      	lsls	r3, r3, #8
 800988a:	84bb      	strh	r3, [r7, #36]	; 0x24
    pkt_id |= (u16_t)var_hdr_payload[1];
 800988c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800988e:	3301      	adds	r3, #1
 8009890:	781b      	ldrb	r3, [r3, #0]
 8009892:	b29a      	uxth	r2, r3
 8009894:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009896:	4313      	orrs	r3, r2
 8009898:	84bb      	strh	r3, [r7, #36]	; 0x24
    if (pkt_id == 0) {
 800989a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800989c:	2b00      	cmp	r3, #0
 800989e:	d067      	beq.n	8009970 <mqtt_message_received+0x358>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: Got message with illegal packet identifier: 0\n"));
      goto out_disconnect;
    }
    if (pkt_type == MQTT_MSG_TYPE_PUBREC) {
 80098a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098a4:	2b05      	cmp	r3, #5
 80098a6:	d111      	bne.n	80098cc <mqtt_message_received+0x2b4>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREC, sending PUBREL with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBREL, pkt_id, 1);
 80098a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80098aa:	2301      	movs	r3, #1
 80098ac:	2106      	movs	r1, #6
 80098ae:	68f8      	ldr	r0, [r7, #12]
 80098b0:	f7ff fe5a 	bl	8009568 <pub_ack_rec_rel_response>
 80098b4:	e04e      	b.n	8009954 <mqtt_message_received+0x33c>
 80098b6:	bf00      	nop
 80098b8:	08017848 	.word	0x08017848
 80098bc:	08017a7c 	.word	0x08017a7c
 80098c0:	080178c0 	.word	0x080178c0
 80098c4:	08017aac 	.word	0x08017aac
 80098c8:	08017ad0 	.word	0x08017ad0

    } else if (pkt_type == MQTT_MSG_TYPE_PUBREL) {
 80098cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098d0:	2b06      	cmp	r3, #6
 80098d2:	d106      	bne.n	80098e2 <mqtt_message_received+0x2ca>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: PUBREL, sending PUBCOMP response with pkt_id: %d\n", pkt_id));
      pub_ack_rec_rel_response(client, MQTT_MSG_TYPE_PUBCOMP, pkt_id, 0);
 80098d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80098d6:	2300      	movs	r3, #0
 80098d8:	2107      	movs	r1, #7
 80098da:	68f8      	ldr	r0, [r7, #12]
 80098dc:	f7ff fe44 	bl	8009568 <pub_ack_rec_rel_response>
 80098e0:	e038      	b.n	8009954 <mqtt_message_received+0x33c>

    } else if (pkt_type == MQTT_MSG_TYPE_SUBACK || pkt_type == MQTT_MSG_TYPE_UNSUBACK ||
 80098e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098e6:	2b09      	cmp	r3, #9
 80098e8:	d00b      	beq.n	8009902 <mqtt_message_received+0x2ea>
 80098ea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098ee:	2b0b      	cmp	r3, #11
 80098f0:	d007      	beq.n	8009902 <mqtt_message_received+0x2ea>
 80098f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098f6:	2b07      	cmp	r3, #7
 80098f8:	d003      	beq.n	8009902 <mqtt_message_received+0x2ea>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 80098fa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80098fe:	2b04      	cmp	r3, #4
 8009900:	d138      	bne.n	8009974 <mqtt_message_received+0x35c>
      struct mqtt_request_t *r = mqtt_take_request(&client->pend_req_queue, pkt_id);
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	3318      	adds	r3, #24
 8009906:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009908:	4611      	mov	r1, r2
 800990a:	4618      	mov	r0, r3
 800990c:	f7ff fb4a 	bl	8008fa4 <mqtt_take_request>
 8009910:	6238      	str	r0, [r7, #32]
      if (r != NULL) {
 8009912:	6a3b      	ldr	r3, [r7, #32]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d01c      	beq.n	8009952 <mqtt_message_received+0x33a>
        LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_message_received: %s response with id %d\n", mqtt_msg_type_to_str(pkt_type), pkt_id));
        if (pkt_type == MQTT_MSG_TYPE_SUBACK) {
 8009918:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800991c:	2b09      	cmp	r3, #9
 800991e:	d10a      	bne.n	8009936 <mqtt_message_received+0x31e>
          if (length < 3) {
 8009920:	893b      	ldrh	r3, [r7, #8]
 8009922:	2b02      	cmp	r3, #2
 8009924:	d928      	bls.n	8009978 <mqtt_message_received+0x360>
            LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_message_received: To small SUBACK packet\n"));
            goto out_disconnect;
          } else {
            mqtt_incomming_suback(r, var_hdr_payload[2]);
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	3302      	adds	r3, #2
 800992a:	781b      	ldrb	r3, [r3, #0]
 800992c:	4619      	mov	r1, r3
 800992e:	6a38      	ldr	r0, [r7, #32]
 8009930:	f7ff fe57 	bl	80095e2 <mqtt_incomming_suback>
 8009934:	e00a      	b.n	800994c <mqtt_message_received+0x334>
          }
        } else if (r->cb != NULL) {
 8009936:	6a3b      	ldr	r3, [r7, #32]
 8009938:	685b      	ldr	r3, [r3, #4]
 800993a:	2b00      	cmp	r3, #0
 800993c:	d006      	beq.n	800994c <mqtt_message_received+0x334>
          r->cb(r->arg, ERR_OK);
 800993e:	6a3b      	ldr	r3, [r7, #32]
 8009940:	685b      	ldr	r3, [r3, #4]
 8009942:	6a3a      	ldr	r2, [r7, #32]
 8009944:	6892      	ldr	r2, [r2, #8]
 8009946:	2100      	movs	r1, #0
 8009948:	4610      	mov	r0, r2
 800994a:	4798      	blx	r3
        }
        mqtt_delete_request(r);
 800994c:	6a38      	ldr	r0, [r7, #32]
 800994e:	f7ff fb19 	bl	8008f84 <mqtt_delete_request>
               pkt_type == MQTT_MSG_TYPE_PUBCOMP || pkt_type == MQTT_MSG_TYPE_PUBACK) {
 8009952:	bf00      	nop
    } else {
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ( "mqtt_message_received: Received unknown message type: %d\n", pkt_type));
      goto out_disconnect;
    }
  }
  return res;
 8009954:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009956:	e012      	b.n	800997e <mqtt_message_received+0x366>
        goto out_disconnect;
 8009958:	bf00      	nop
 800995a:	e00e      	b.n	800997a <mqtt_message_received+0x362>
        goto out_disconnect;
 800995c:	bf00      	nop
 800995e:	e00c      	b.n	800997a <mqtt_message_received+0x362>
        goto out_disconnect;
 8009960:	bf00      	nop
 8009962:	e00a      	b.n	800997a <mqtt_message_received+0x362>
        goto out_disconnect;
 8009964:	bf00      	nop
 8009966:	e008      	b.n	800997a <mqtt_message_received+0x362>
          goto out_disconnect;
 8009968:	bf00      	nop
 800996a:	e006      	b.n	800997a <mqtt_message_received+0x362>
        goto out_disconnect;
 800996c:	bf00      	nop
 800996e:	e004      	b.n	800997a <mqtt_message_received+0x362>
      goto out_disconnect;
 8009970:	bf00      	nop
 8009972:	e002      	b.n	800997a <mqtt_message_received+0x362>
      goto out_disconnect;
 8009974:	bf00      	nop
 8009976:	e000      	b.n	800997a <mqtt_message_received+0x362>
            goto out_disconnect;
 8009978:	bf00      	nop
out_disconnect:
  return MQTT_CONNECT_DISCONNECTED;
 800997a:	f44f 7380 	mov.w	r3, #256	; 0x100
}
 800997e:	4618      	mov	r0, r3
 8009980:	373c      	adds	r7, #60	; 0x3c
 8009982:	46bd      	mov	sp, r7
 8009984:	bd90      	pop	{r4, r7, pc}
 8009986:	bf00      	nop

08009988 <mqtt_parse_incoming>:
 * @param p PBUF chain of received data
 * @return Connection status
 */
static mqtt_connection_status_t
mqtt_parse_incoming(mqtt_client_t *client, struct pbuf *p)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b088      	sub	sp, #32
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  u16_t in_offset = 0;
 8009992:	2300      	movs	r3, #0
 8009994:	83fb      	strh	r3, [r7, #30]
  u32_t msg_rem_len = 0;
 8009996:	2300      	movs	r3, #0
 8009998:	61bb      	str	r3, [r7, #24]
  u8_t fixed_hdr_idx = 0;
 800999a:	2300      	movs	r3, #0
 800999c:	75fb      	strb	r3, [r7, #23]
  u8_t b = 0;
 800999e:	2300      	movs	r3, #0
 80099a0:	75bb      	strb	r3, [r7, #22]

  while (p->tot_len > in_offset) {
 80099a2:	e0bc      	b.n	8009b1e <mqtt_parse_incoming+0x196>
    /* We ALWAYS parse the header here first. Even if the header was not
       included in this segment, we re-parse it here by buffering it in
       client->rx_buffer. client->msg_idx keeps track of this. */
    if ((fixed_hdr_idx < 2) || ((b & 0x80) != 0)) {
 80099a4:	7dfb      	ldrb	r3, [r7, #23]
 80099a6:	2b01      	cmp	r3, #1
 80099a8:	d903      	bls.n	80099b2 <mqtt_parse_incoming+0x2a>
 80099aa:	f997 3016 	ldrsb.w	r3, [r7, #22]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	da4d      	bge.n	8009a4e <mqtt_parse_incoming+0xc6>

      if (fixed_hdr_idx < client->msg_idx) {
 80099b2:	7dfa      	ldrb	r2, [r7, #23]
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099b8:	429a      	cmp	r2, r3
 80099ba:	d206      	bcs.n	80099ca <mqtt_parse_incoming+0x42>
        /* parse header from old pbuf (buffered in client->rx_buffer) */
        b = client->rx_buffer[fixed_hdr_idx];
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	687a      	ldr	r2, [r7, #4]
 80099c0:	4413      	add	r3, r2
 80099c2:	f893 306c 	ldrb.w	r3, [r3, #108]	; 0x6c
 80099c6:	75bb      	strb	r3, [r7, #22]
 80099c8:	e012      	b.n	80099f0 <mqtt_parse_incoming+0x68>
      } else {
        /* parse header from this pbuf and save it in client->rx_buffer in case
           it comes in segmented */
        b = pbuf_get_at(p, in_offset++);
 80099ca:	8bfb      	ldrh	r3, [r7, #30]
 80099cc:	1c5a      	adds	r2, r3, #1
 80099ce:	83fa      	strh	r2, [r7, #30]
 80099d0:	4619      	mov	r1, r3
 80099d2:	6838      	ldr	r0, [r7, #0]
 80099d4:	f002 fffc 	bl	800c9d0 <pbuf_get_at>
 80099d8:	4603      	mov	r3, r0
 80099da:	75bb      	strb	r3, [r7, #22]
        client->rx_buffer[client->msg_idx++] = b;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80099e0:	1c59      	adds	r1, r3, #1
 80099e2:	687a      	ldr	r2, [r7, #4]
 80099e4:	6691      	str	r1, [r2, #104]	; 0x68
 80099e6:	687a      	ldr	r2, [r7, #4]
 80099e8:	4413      	add	r3, r2
 80099ea:	7dba      	ldrb	r2, [r7, #22]
 80099ec:	f883 206c 	strb.w	r2, [r3, #108]	; 0x6c
      }
      fixed_hdr_idx++;
 80099f0:	7dfb      	ldrb	r3, [r7, #23]
 80099f2:	3301      	adds	r3, #1
 80099f4:	75fb      	strb	r3, [r7, #23]

      if (fixed_hdr_idx >= 2) {
 80099f6:	7dfb      	ldrb	r3, [r7, #23]
 80099f8:	2b01      	cmp	r3, #1
 80099fa:	f240 8090 	bls.w	8009b1e <mqtt_parse_incoming+0x196>
        /* fixed header contains at least 2 bytes but can contain more, depending on
           'remaining length'. All bytes but the last of this have 0x80 set to
           indicate more bytes are coming. */
        msg_rem_len |= (u32_t)(b & 0x7f) << ((fixed_hdr_idx - 2) * 7);
 80099fe:	7dbb      	ldrb	r3, [r7, #22]
 8009a00:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8009a04:	7dfb      	ldrb	r3, [r7, #23]
 8009a06:	1e9a      	subs	r2, r3, #2
 8009a08:	4613      	mov	r3, r2
 8009a0a:	00db      	lsls	r3, r3, #3
 8009a0c:	1a9b      	subs	r3, r3, r2
 8009a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8009a12:	69ba      	ldr	r2, [r7, #24]
 8009a14:	4313      	orrs	r3, r2
 8009a16:	61bb      	str	r3, [r7, #24]
        if ((b & 0x80) == 0) {
 8009a18:	f997 3016 	ldrsb.w	r3, [r7, #22]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	db7e      	blt.n	8009b1e <mqtt_parse_incoming+0x196>
          /* fixed header is done */
          LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: Remaining length after fixed header: %"U32_F"\n", msg_rem_len));
          if (msg_rem_len == 0) {
 8009a20:	69bb      	ldr	r3, [r7, #24]
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d10b      	bne.n	8009a3e <mqtt_parse_incoming+0xb6>
            /* Complete message with no extra headers of payload received */
            mqtt_message_received(client, fixed_hdr_idx, 0, 0);
 8009a26:	7df9      	ldrb	r1, [r7, #23]
 8009a28:	2300      	movs	r3, #0
 8009a2a:	2200      	movs	r2, #0
 8009a2c:	6878      	ldr	r0, [r7, #4]
 8009a2e:	f7ff fdf3 	bl	8009618 <mqtt_message_received>
            client->msg_idx = 0;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	2200      	movs	r2, #0
 8009a36:	669a      	str	r2, [r3, #104]	; 0x68
            fixed_hdr_idx = 0;
 8009a38:	2300      	movs	r3, #0
 8009a3a:	75fb      	strb	r3, [r7, #23]
 8009a3c:	e06f      	b.n	8009b1e <mqtt_parse_incoming+0x196>
          } else {
            /* Bytes remaining in message (changes remaining length if this is
               not the first segment of this message) */
            msg_rem_len = (msg_rem_len + fixed_hdr_idx) - client->msg_idx;
 8009a3e:	7dfa      	ldrb	r2, [r7, #23]
 8009a40:	69bb      	ldr	r3, [r7, #24]
 8009a42:	441a      	add	r2, r3
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	61bb      	str	r3, [r7, #24]
      if (fixed_hdr_idx >= 2) {
 8009a4c:	e067      	b.n	8009b1e <mqtt_parse_incoming+0x196>
      }
    } else {
      /* Fixed header has been parsed, parse variable header */
      u16_t cpy_len, cpy_start, buffer_space;

      cpy_start = (client->msg_idx - fixed_hdr_idx) % (MQTT_VAR_HEADER_BUFFER_LEN - fixed_hdr_idx) + fixed_hdr_idx;
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009a52:	7dfb      	ldrb	r3, [r7, #23]
 8009a54:	1ad3      	subs	r3, r2, r3
 8009a56:	7dfa      	ldrb	r2, [r7, #23]
 8009a58:	f1c2 0280 	rsb	r2, r2, #128	; 0x80
 8009a5c:	fbb3 f1f2 	udiv	r1, r3, r2
 8009a60:	fb01 f202 	mul.w	r2, r1, r2
 8009a64:	1a9b      	subs	r3, r3, r2
 8009a66:	b29a      	uxth	r2, r3
 8009a68:	7dfb      	ldrb	r3, [r7, #23]
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	4413      	add	r3, r2
 8009a6e:	827b      	strh	r3, [r7, #18]

      /* Allow to copy the lesser one of available length in input data or bytes remaining in message */
      cpy_len = (u16_t)LWIP_MIN((u16_t)(p->tot_len - in_offset), msg_rem_len);
 8009a70:	683b      	ldr	r3, [r7, #0]
 8009a72:	891a      	ldrh	r2, [r3, #8]
 8009a74:	8bfb      	ldrh	r3, [r7, #30]
 8009a76:	1ad3      	subs	r3, r2, r3
 8009a78:	b29b      	uxth	r3, r3
 8009a7a:	461a      	mov	r2, r3
 8009a7c:	69bb      	ldr	r3, [r7, #24]
 8009a7e:	4293      	cmp	r3, r2
 8009a80:	d905      	bls.n	8009a8e <mqtt_parse_incoming+0x106>
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	891a      	ldrh	r2, [r3, #8]
 8009a86:	8bfb      	ldrh	r3, [r7, #30]
 8009a88:	1ad3      	subs	r3, r2, r3
 8009a8a:	b29b      	uxth	r3, r3
 8009a8c:	e001      	b.n	8009a92 <mqtt_parse_incoming+0x10a>
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	b29b      	uxth	r3, r3
 8009a92:	82bb      	strh	r3, [r7, #20]

      /* Limit to available space in buffer */
      buffer_space = MQTT_VAR_HEADER_BUFFER_LEN - cpy_start;
 8009a94:	8a7b      	ldrh	r3, [r7, #18]
 8009a96:	f1c3 0380 	rsb	r3, r3, #128	; 0x80
 8009a9a:	823b      	strh	r3, [r7, #16]
      if (cpy_len > buffer_space) {
 8009a9c:	8aba      	ldrh	r2, [r7, #20]
 8009a9e:	8a3b      	ldrh	r3, [r7, #16]
 8009aa0:	429a      	cmp	r2, r3
 8009aa2:	d901      	bls.n	8009aa8 <mqtt_parse_incoming+0x120>
        cpy_len = buffer_space;
 8009aa4:	8a3b      	ldrh	r3, [r7, #16]
 8009aa6:	82bb      	strh	r3, [r7, #20]
      }
      pbuf_copy_partial(p, client->rx_buffer + cpy_start, cpy_len, in_offset);
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f103 026c 	add.w	r2, r3, #108	; 0x6c
 8009aae:	8a7b      	ldrh	r3, [r7, #18]
 8009ab0:	18d1      	adds	r1, r2, r3
 8009ab2:	8bfb      	ldrh	r3, [r7, #30]
 8009ab4:	8aba      	ldrh	r2, [r7, #20]
 8009ab6:	6838      	ldr	r0, [r7, #0]
 8009ab8:	f002 fdae 	bl	800c618 <pbuf_copy_partial>

      /* Advance get and put indexes  */
      client->msg_idx += cpy_len;
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8009ac0:	8abb      	ldrh	r3, [r7, #20]
 8009ac2:	441a      	add	r2, r3
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	669a      	str	r2, [r3, #104]	; 0x68
      in_offset += cpy_len;
 8009ac8:	8bfa      	ldrh	r2, [r7, #30]
 8009aca:	8abb      	ldrh	r3, [r7, #20]
 8009acc:	4413      	add	r3, r2
 8009ace:	83fb      	strh	r3, [r7, #30]
      msg_rem_len -= cpy_len;
 8009ad0:	8abb      	ldrh	r3, [r7, #20]
 8009ad2:	69ba      	ldr	r2, [r7, #24]
 8009ad4:	1ad3      	subs	r3, r2, r3
 8009ad6:	61bb      	str	r3, [r7, #24]

      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_parse_incoming: msg_idx: %"U32_F", cpy_len: %"U16_F", remaining %"U32_F"\n", client->msg_idx, cpy_len, msg_rem_len));
      if ((msg_rem_len == 0) || (cpy_len == buffer_space)) {
 8009ad8:	69bb      	ldr	r3, [r7, #24]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d003      	beq.n	8009ae6 <mqtt_parse_incoming+0x15e>
 8009ade:	8aba      	ldrh	r2, [r7, #20]
 8009ae0:	8a3b      	ldrh	r3, [r7, #16]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d11b      	bne.n	8009b1e <mqtt_parse_incoming+0x196>
        /* Whole message received or buffer is full */
        mqtt_connection_status_t res = mqtt_message_received(client, fixed_hdr_idx, (cpy_start + cpy_len) - fixed_hdr_idx, msg_rem_len);
 8009ae6:	8a7a      	ldrh	r2, [r7, #18]
 8009ae8:	8abb      	ldrh	r3, [r7, #20]
 8009aea:	4413      	add	r3, r2
 8009aec:	b29a      	uxth	r2, r3
 8009aee:	7dfb      	ldrb	r3, [r7, #23]
 8009af0:	b29b      	uxth	r3, r3
 8009af2:	1ad3      	subs	r3, r2, r3
 8009af4:	b29a      	uxth	r2, r3
 8009af6:	7df9      	ldrb	r1, [r7, #23]
 8009af8:	69bb      	ldr	r3, [r7, #24]
 8009afa:	6878      	ldr	r0, [r7, #4]
 8009afc:	f7ff fd8c 	bl	8009618 <mqtt_message_received>
 8009b00:	4603      	mov	r3, r0
 8009b02:	81fb      	strh	r3, [r7, #14]
        if (res != MQTT_CONNECT_ACCEPTED) {
 8009b04:	89fb      	ldrh	r3, [r7, #14]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d001      	beq.n	8009b0e <mqtt_parse_incoming+0x186>
          return res;
 8009b0a:	89fb      	ldrh	r3, [r7, #14]
 8009b0c:	e00e      	b.n	8009b2c <mqtt_parse_incoming+0x1a4>
        }
        if (msg_rem_len == 0) {
 8009b0e:	69bb      	ldr	r3, [r7, #24]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <mqtt_parse_incoming+0x196>
          /* Reset parser state */
          client->msg_idx = 0;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2200      	movs	r2, #0
 8009b18:	669a      	str	r2, [r3, #104]	; 0x68
          /* msg_tot_len = 0; */
          fixed_hdr_idx = 0;
 8009b1a:	2300      	movs	r3, #0
 8009b1c:	75fb      	strb	r3, [r7, #23]
  while (p->tot_len > in_offset) {
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	891b      	ldrh	r3, [r3, #8]
 8009b22:	8bfa      	ldrh	r2, [r7, #30]
 8009b24:	429a      	cmp	r2, r3
 8009b26:	f4ff af3d 	bcc.w	80099a4 <mqtt_parse_incoming+0x1c>
        }
      }
    }
  }
  return MQTT_CONNECT_ACCEPTED;
 8009b2a:	2300      	movs	r3, #0
}
 8009b2c:	4618      	mov	r0, r3
 8009b2e:	3720      	adds	r7, #32
 8009b30:	46bd      	mov	sp, r7
 8009b32:	bd80      	pop	{r7, pc}

08009b34 <mqtt_tcp_recv_cb>:
 * @param err Passed as return value if not ERR_OK
 * @return ERR_OK or err passed into callback
 */
static err_t
mqtt_tcp_recv_cb(void *arg, struct altcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8009b34:	b580      	push	{r7, lr}
 8009b36:	b086      	sub	sp, #24
 8009b38:	af00      	add	r7, sp, #0
 8009b3a:	60f8      	str	r0, [r7, #12]
 8009b3c:	60b9      	str	r1, [r7, #8]
 8009b3e:	607a      	str	r2, [r7, #4]
 8009b40:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	617b      	str	r3, [r7, #20]
  LWIP_ASSERT("mqtt_tcp_recv_cb: client != NULL", client != NULL);
 8009b46:	697b      	ldr	r3, [r7, #20]
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d106      	bne.n	8009b5a <mqtt_tcp_recv_cb+0x26>
 8009b4c:	4b24      	ldr	r3, [pc, #144]	; (8009be0 <mqtt_tcp_recv_cb+0xac>)
 8009b4e:	f240 32a7 	movw	r2, #935	; 0x3a7
 8009b52:	4924      	ldr	r1, [pc, #144]	; (8009be4 <mqtt_tcp_recv_cb+0xb0>)
 8009b54:	4824      	ldr	r0, [pc, #144]	; (8009be8 <mqtt_tcp_recv_cb+0xb4>)
 8009b56:	f00c fcfb 	bl	8016550 <iprintf>
  LWIP_ASSERT("mqtt_tcp_recv_cb: client->conn == pcb", client->conn == pcb);
 8009b5a:	697b      	ldr	r3, [r7, #20]
 8009b5c:	68db      	ldr	r3, [r3, #12]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	429a      	cmp	r2, r3
 8009b62:	d006      	beq.n	8009b72 <mqtt_tcp_recv_cb+0x3e>
 8009b64:	4b1e      	ldr	r3, [pc, #120]	; (8009be0 <mqtt_tcp_recv_cb+0xac>)
 8009b66:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8009b6a:	4920      	ldr	r1, [pc, #128]	; (8009bec <mqtt_tcp_recv_cb+0xb8>)
 8009b6c:	481e      	ldr	r0, [pc, #120]	; (8009be8 <mqtt_tcp_recv_cb+0xb4>)
 8009b6e:	f00c fcef 	bl	8016550 <iprintf>

  if (p == NULL) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d105      	bne.n	8009b84 <mqtt_tcp_recv_cb+0x50>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_recv_cb: Recv pbuf=NULL, remote has closed connection\n"));
    mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8009b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009b7c:	6978      	ldr	r0, [r7, #20]
 8009b7e:	f7ff fbfb 	bl	8009378 <mqtt_close>
 8009b82:	e027      	b.n	8009bd4 <mqtt_tcp_recv_cb+0xa0>
  } else {
    mqtt_connection_status_t res;
    if (err != ERR_OK) {
 8009b84:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d005      	beq.n	8009b98 <mqtt_tcp_recv_cb+0x64>
      LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_recv_cb: Recv err=%d\n", err));
      pbuf_free(p);
 8009b8c:	6878      	ldr	r0, [r7, #4]
 8009b8e:	f002 fb3d 	bl	800c20c <pbuf_free>
      return err;
 8009b92:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8009b96:	e01e      	b.n	8009bd6 <mqtt_tcp_recv_cb+0xa2>
    }

    /* Tell remote that data has been received */
    altcp_recved(pcb, p->tot_len);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	891b      	ldrh	r3, [r3, #8]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	68b8      	ldr	r0, [r7, #8]
 8009ba0:	f003 fb6a 	bl	800d278 <tcp_recved>
    res = mqtt_parse_incoming(client, p);
 8009ba4:	6879      	ldr	r1, [r7, #4]
 8009ba6:	6978      	ldr	r0, [r7, #20]
 8009ba8:	f7ff feee 	bl	8009988 <mqtt_parse_incoming>
 8009bac:	4603      	mov	r3, r0
 8009bae:	827b      	strh	r3, [r7, #18]
    pbuf_free(p);
 8009bb0:	6878      	ldr	r0, [r7, #4]
 8009bb2:	f002 fb2b 	bl	800c20c <pbuf_free>

    if (res != MQTT_CONNECT_ACCEPTED) {
 8009bb6:	8a7b      	ldrh	r3, [r7, #18]
 8009bb8:	2b00      	cmp	r3, #0
 8009bba:	d004      	beq.n	8009bc6 <mqtt_tcp_recv_cb+0x92>
      mqtt_close(client, res);
 8009bbc:	8a7b      	ldrh	r3, [r7, #18]
 8009bbe:	4619      	mov	r1, r3
 8009bc0:	6978      	ldr	r0, [r7, #20]
 8009bc2:	f7ff fbd9 	bl	8009378 <mqtt_close>
    }
    /* If keep alive functionality is used */
    if (client->keep_alive != 0) {
 8009bc6:	697b      	ldr	r3, [r7, #20]
 8009bc8:	885b      	ldrh	r3, [r3, #2]
 8009bca:	2b00      	cmp	r3, #0
 8009bcc:	d002      	beq.n	8009bd4 <mqtt_tcp_recv_cb+0xa0>
      /* Reset server alive watchdog */
      client->server_watchdog = 0;
 8009bce:	697b      	ldr	r3, [r7, #20]
 8009bd0:	2200      	movs	r2, #0
 8009bd2:	809a      	strh	r2, [r3, #4]
    }

  }
  return ERR_OK;
 8009bd4:	2300      	movs	r3, #0
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3718      	adds	r7, #24
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}
 8009bde:	bf00      	nop
 8009be0:	08017848 	.word	0x08017848
 8009be4:	08017ae8 	.word	0x08017ae8
 8009be8:	080178c0 	.word	0x080178c0
 8009bec:	08017b0c 	.word	0x08017b0c

08009bf0 <mqtt_tcp_sent_cb>:
 * @param len Number of bytes sent
 * @return ERR_OK
 */
static err_t
mqtt_tcp_sent_cb(void *arg, struct altcp_pcb *tpcb, u16_t len)
{
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b086      	sub	sp, #24
 8009bf4:	af00      	add	r7, sp, #0
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	4613      	mov	r3, r2
 8009bfc:	80fb      	strh	r3, [r7, #6]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009bfe:	68fb      	ldr	r3, [r7, #12]
 8009c00:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(tpcb);
  LWIP_UNUSED_ARG(len);

  if (client->conn_state == MQTT_CONNECTED) {
 8009c02:	697b      	ldr	r3, [r7, #20]
 8009c04:	7a9b      	ldrb	r3, [r3, #10]
 8009c06:	2b03      	cmp	r3, #3
 8009c08:	d127      	bne.n	8009c5a <mqtt_tcp_sent_cb+0x6a>
    struct mqtt_request_t *r;

    /* Reset keep-alive send timer and server watchdog */
    client->cyclic_tick = 0;
 8009c0a:	697b      	ldr	r3, [r7, #20]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	801a      	strh	r2, [r3, #0]
    client->server_watchdog = 0;
 8009c10:	697b      	ldr	r3, [r7, #20]
 8009c12:	2200      	movs	r2, #0
 8009c14:	809a      	strh	r2, [r3, #4]
    /* QoS 0 publish has no response from server, so call its callbacks here */
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8009c16:	e00d      	b.n	8009c34 <mqtt_tcp_sent_cb+0x44>
      LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_sent_cb: Calling QoS 0 publish complete callback\n"));
      if (r->cb != NULL) {
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	685b      	ldr	r3, [r3, #4]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d006      	beq.n	8009c2e <mqtt_tcp_sent_cb+0x3e>
        r->cb(r->arg, ERR_OK);
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	693a      	ldr	r2, [r7, #16]
 8009c26:	6892      	ldr	r2, [r2, #8]
 8009c28:	2100      	movs	r1, #0
 8009c2a:	4610      	mov	r0, r2
 8009c2c:	4798      	blx	r3
      }
      mqtt_delete_request(r);
 8009c2e:	6938      	ldr	r0, [r7, #16]
 8009c30:	f7ff f9a8 	bl	8008f84 <mqtt_delete_request>
    while ((r = mqtt_take_request(&client->pend_req_queue, 0)) != NULL) {
 8009c34:	697b      	ldr	r3, [r7, #20]
 8009c36:	3318      	adds	r3, #24
 8009c38:	2100      	movs	r1, #0
 8009c3a:	4618      	mov	r0, r3
 8009c3c:	f7ff f9b2 	bl	8008fa4 <mqtt_take_request>
 8009c40:	6138      	str	r0, [r7, #16]
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1e7      	bne.n	8009c18 <mqtt_tcp_sent_cb+0x28>
    }
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, client->conn);
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	68db      	ldr	r3, [r3, #12]
 8009c52:	4619      	mov	r1, r3
 8009c54:	4610      	mov	r0, r2
 8009c56:	f7ff f84f 	bl	8008cf8 <mqtt_output_send>
  }
  return ERR_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3718      	adds	r7, #24
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}

08009c64 <mqtt_tcp_err_cb>:
 * @param arg MQTT client
 * @param err Error encountered
 */
static void
mqtt_tcp_err_cb(void *arg, err_t err)
{
 8009c64:	b580      	push	{r7, lr}
 8009c66:	b084      	sub	sp, #16
 8009c68:	af00      	add	r7, sp, #0
 8009c6a:	6078      	str	r0, [r7, #4]
 8009c6c:	460b      	mov	r3, r1
 8009c6e:	70fb      	strb	r3, [r7, #3]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	60fb      	str	r3, [r7, #12]
  LWIP_UNUSED_ARG(err); /* only used for debug output */
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_err_cb: TCP error callback: error %d, arg: %p\n", err, arg));
  LWIP_ASSERT("mqtt_tcp_err_cb: client != NULL", client != NULL);
 8009c74:	68fb      	ldr	r3, [r7, #12]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d106      	bne.n	8009c88 <mqtt_tcp_err_cb+0x24>
 8009c7a:	4b09      	ldr	r3, [pc, #36]	; (8009ca0 <mqtt_tcp_err_cb+0x3c>)
 8009c7c:	f240 32f6 	movw	r2, #1014	; 0x3f6
 8009c80:	4908      	ldr	r1, [pc, #32]	; (8009ca4 <mqtt_tcp_err_cb+0x40>)
 8009c82:	4809      	ldr	r0, [pc, #36]	; (8009ca8 <mqtt_tcp_err_cb+0x44>)
 8009c84:	f00c fc64 	bl	8016550 <iprintf>
  /* Set conn to null before calling close as pcb is already deallocated*/
  client->conn = 0;
 8009c88:	68fb      	ldr	r3, [r7, #12]
 8009c8a:	2200      	movs	r2, #0
 8009c8c:	60da      	str	r2, [r3, #12]
  mqtt_close(client, MQTT_CONNECT_DISCONNECTED);
 8009c8e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8009c92:	68f8      	ldr	r0, [r7, #12]
 8009c94:	f7ff fb70 	bl	8009378 <mqtt_close>
}
 8009c98:	bf00      	nop
 8009c9a:	3710      	adds	r7, #16
 8009c9c:	46bd      	mov	sp, r7
 8009c9e:	bd80      	pop	{r7, pc}
 8009ca0:	08017848 	.word	0x08017848
 8009ca4:	08017b34 	.word	0x08017b34
 8009ca8:	080178c0 	.word	0x080178c0

08009cac <mqtt_tcp_poll_cb>:
 * @param tpcb TCP connection handle
 * @return err ERR_OK
 */
static err_t
mqtt_tcp_poll_cb(void *arg, struct altcp_pcb *tpcb)
{
 8009cac:	b580      	push	{r7, lr}
 8009cae:	b084      	sub	sp, #16
 8009cb0:	af00      	add	r7, sp, #0
 8009cb2:	6078      	str	r0, [r7, #4]
 8009cb4:	6039      	str	r1, [r7, #0]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	60fb      	str	r3, [r7, #12]
  if (client->conn_state == MQTT_CONNECTED) {
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	7a9b      	ldrb	r3, [r3, #10]
 8009cbe:	2b03      	cmp	r3, #3
 8009cc0:	d105      	bne.n	8009cce <mqtt_tcp_poll_cb+0x22>
    /* Try send any remaining buffers from output queue */
    mqtt_output_send(&client->output, tpcb);
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	33ec      	adds	r3, #236	; 0xec
 8009cc6:	6839      	ldr	r1, [r7, #0]
 8009cc8:	4618      	mov	r0, r3
 8009cca:	f7ff f815 	bl	8008cf8 <mqtt_output_send>
  }
  return ERR_OK;
 8009cce:	2300      	movs	r3, #0
}
 8009cd0:	4618      	mov	r0, r3
 8009cd2:	3710      	adds	r7, #16
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}

08009cd8 <mqtt_tcp_connect_cb>:
 * @param err Always ERR_OK, mqtt_tcp_err_cb is called in case of error
 * @return ERR_OK
 */
static err_t
mqtt_tcp_connect_cb(void *arg, struct altcp_pcb *tpcb, err_t err)
{
 8009cd8:	b580      	push	{r7, lr}
 8009cda:	b086      	sub	sp, #24
 8009cdc:	af00      	add	r7, sp, #0
 8009cde:	60f8      	str	r0, [r7, #12]
 8009ce0:	60b9      	str	r1, [r7, #8]
 8009ce2:	4613      	mov	r3, r2
 8009ce4:	71fb      	strb	r3, [r7, #7]
  mqtt_client_t *client = (mqtt_client_t *)arg;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	617b      	str	r3, [r7, #20]

  if (err != ERR_OK) {
 8009cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d002      	beq.n	8009cf8 <mqtt_tcp_connect_cb+0x20>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_tcp_connect_cb: TCP connect error %d\n", err));
    return err;
 8009cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009cf6:	e025      	b.n	8009d44 <mqtt_tcp_connect_cb+0x6c>
  }

  /* Initiate receiver state */
  client->msg_idx = 0;
 8009cf8:	697b      	ldr	r3, [r7, #20]
 8009cfa:	2200      	movs	r2, #0
 8009cfc:	669a      	str	r2, [r3, #104]	; 0x68

  /* Setup TCP callbacks */
  altcp_recv(tpcb, mqtt_tcp_recv_cb);
 8009cfe:	4913      	ldr	r1, [pc, #76]	; (8009d4c <mqtt_tcp_connect_cb+0x74>)
 8009d00:	68b8      	ldr	r0, [r7, #8]
 8009d02:	f004 faa9 	bl	800e258 <tcp_recv>
  altcp_sent(tpcb, mqtt_tcp_sent_cb);
 8009d06:	4912      	ldr	r1, [pc, #72]	; (8009d50 <mqtt_tcp_connect_cb+0x78>)
 8009d08:	68b8      	ldr	r0, [r7, #8]
 8009d0a:	f004 fac7 	bl	800e29c <tcp_sent>
  altcp_poll(tpcb, mqtt_tcp_poll_cb, 2);
 8009d0e:	2202      	movs	r2, #2
 8009d10:	4910      	ldr	r1, [pc, #64]	; (8009d54 <mqtt_tcp_connect_cb+0x7c>)
 8009d12:	68b8      	ldr	r0, [r7, #8]
 8009d14:	f004 fb06 	bl	800e324 <tcp_poll>

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_tcp_connect_cb: TCP connection established to server\n"));
  /* Enter MQTT connect state */
  client->conn_state = MQTT_CONNECTING;
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2202      	movs	r2, #2
 8009d1c:	729a      	strb	r2, [r3, #10]

  /* Start cyclic timer */
  sys_timeout(MQTT_CYCLIC_TIMER_INTERVAL * 1000, mqtt_cyclic_timer, client);
 8009d1e:	697a      	ldr	r2, [r7, #20]
 8009d20:	490d      	ldr	r1, [pc, #52]	; (8009d58 <mqtt_tcp_connect_cb+0x80>)
 8009d22:	f241 3088 	movw	r0, #5000	; 0x1388
 8009d26:	f008 fff1 	bl	8012d0c <sys_timeout>
  client->cyclic_tick = 0;
 8009d2a:	697b      	ldr	r3, [r7, #20]
 8009d2c:	2200      	movs	r2, #0
 8009d2e:	801a      	strh	r2, [r3, #0]

  /* Start transmission from output queue, connect message is the first one out*/
  mqtt_output_send(&client->output, client->conn);
 8009d30:	697b      	ldr	r3, [r7, #20]
 8009d32:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	68db      	ldr	r3, [r3, #12]
 8009d3a:	4619      	mov	r1, r3
 8009d3c:	4610      	mov	r0, r2
 8009d3e:	f7fe ffdb 	bl	8008cf8 <mqtt_output_send>

  return ERR_OK;
 8009d42:	2300      	movs	r3, #0
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	3718      	adds	r7, #24
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	bd80      	pop	{r7, pc}
 8009d4c:	08009b35 	.word	0x08009b35
 8009d50:	08009bf1 	.word	0x08009bf1
 8009d54:	08009cad 	.word	0x08009cad
 8009d58:	08009439 	.word	0x08009439

08009d5c <mqtt_publish>:
 *         ERR_MEM if short on memory
 */
err_t
mqtt_publish(mqtt_client_t *client, const char *topic, const void *payload, u16_t payload_length, u8_t qos, u8_t retain,
             mqtt_request_cb_t cb, void *arg)
{
 8009d5c:	b580      	push	{r7, lr}
 8009d5e:	b08c      	sub	sp, #48	; 0x30
 8009d60:	af02      	add	r7, sp, #8
 8009d62:	60f8      	str	r0, [r7, #12]
 8009d64:	60b9      	str	r1, [r7, #8]
 8009d66:	607a      	str	r2, [r7, #4]
 8009d68:	807b      	strh	r3, [r7, #2]
  size_t total_len;
  u16_t topic_len;
  u16_t remaining_length;

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_publish: client != NULL", client);
 8009d6a:	68fb      	ldr	r3, [r7, #12]
 8009d6c:	2b00      	cmp	r3, #0
 8009d6e:	d106      	bne.n	8009d7e <mqtt_publish+0x22>
 8009d70:	4b5d      	ldr	r3, [pc, #372]	; (8009ee8 <mqtt_publish+0x18c>)
 8009d72:	f240 4254 	movw	r2, #1108	; 0x454
 8009d76:	495d      	ldr	r1, [pc, #372]	; (8009eec <mqtt_publish+0x190>)
 8009d78:	485d      	ldr	r0, [pc, #372]	; (8009ef0 <mqtt_publish+0x194>)
 8009d7a:	f00c fbe9 	bl	8016550 <iprintf>
  LWIP_ASSERT("mqtt_publish: topic != NULL", topic);
 8009d7e:	68bb      	ldr	r3, [r7, #8]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d106      	bne.n	8009d92 <mqtt_publish+0x36>
 8009d84:	4b58      	ldr	r3, [pc, #352]	; (8009ee8 <mqtt_publish+0x18c>)
 8009d86:	f240 4255 	movw	r2, #1109	; 0x455
 8009d8a:	495a      	ldr	r1, [pc, #360]	; (8009ef4 <mqtt_publish+0x198>)
 8009d8c:	4858      	ldr	r0, [pc, #352]	; (8009ef0 <mqtt_publish+0x194>)
 8009d8e:	f00c fbdf 	bl	8016550 <iprintf>
  LWIP_ERROR("mqtt_publish: TCP disconnected", (client->conn_state != TCP_DISCONNECTED), return ERR_CONN);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	7a9b      	ldrb	r3, [r3, #10]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d109      	bne.n	8009dae <mqtt_publish+0x52>
 8009d9a:	4b53      	ldr	r3, [pc, #332]	; (8009ee8 <mqtt_publish+0x18c>)
 8009d9c:	f240 4256 	movw	r2, #1110	; 0x456
 8009da0:	4955      	ldr	r1, [pc, #340]	; (8009ef8 <mqtt_publish+0x19c>)
 8009da2:	4853      	ldr	r0, [pc, #332]	; (8009ef0 <mqtt_publish+0x194>)
 8009da4:	f00c fbd4 	bl	8016550 <iprintf>
 8009da8:	f06f 030a 	mvn.w	r3, #10
 8009dac:	e097      	b.n	8009ede <mqtt_publish+0x182>

  topic_strlen = strlen(topic);
 8009dae:	68b8      	ldr	r0, [r7, #8]
 8009db0:	f7f6 fa46 	bl	8000240 <strlen>
 8009db4:	61f8      	str	r0, [r7, #28]
  LWIP_ERROR("mqtt_publish: topic length overflow", (topic_strlen <= (0xFFFF - 2)), return ERR_ARG);
 8009db6:	69fb      	ldr	r3, [r7, #28]
 8009db8:	f64f 72fd 	movw	r2, #65533	; 0xfffd
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d909      	bls.n	8009dd4 <mqtt_publish+0x78>
 8009dc0:	4b49      	ldr	r3, [pc, #292]	; (8009ee8 <mqtt_publish+0x18c>)
 8009dc2:	f240 4259 	movw	r2, #1113	; 0x459
 8009dc6:	494d      	ldr	r1, [pc, #308]	; (8009efc <mqtt_publish+0x1a0>)
 8009dc8:	4849      	ldr	r0, [pc, #292]	; (8009ef0 <mqtt_publish+0x194>)
 8009dca:	f00c fbc1 	bl	8016550 <iprintf>
 8009dce:	f06f 030f 	mvn.w	r3, #15
 8009dd2:	e084      	b.n	8009ede <mqtt_publish+0x182>
  topic_len = (u16_t)topic_strlen;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	837b      	strh	r3, [r7, #26]
  total_len = 2 + topic_len + payload_length;
 8009dd8:	8b7b      	ldrh	r3, [r7, #26]
 8009dda:	1c9a      	adds	r2, r3, #2
 8009ddc:	887b      	ldrh	r3, [r7, #2]
 8009dde:	4413      	add	r3, r2
 8009de0:	623b      	str	r3, [r7, #32]

  if (qos > 0) {
 8009de2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009de6:	2b00      	cmp	r3, #0
 8009de8:	d008      	beq.n	8009dfc <mqtt_publish+0xa0>
    total_len += 2;
 8009dea:	6a3b      	ldr	r3, [r7, #32]
 8009dec:	3302      	adds	r3, #2
 8009dee:	623b      	str	r3, [r7, #32]
    /* Generate pkt_id id for QoS1 and 2 */
    pkt_id = msg_generate_packet_id(client);
 8009df0:	68f8      	ldr	r0, [r7, #12]
 8009df2:	f7fe feed 	bl	8008bd0 <msg_generate_packet_id>
 8009df6:	4603      	mov	r3, r0
 8009df8:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009dfa:	e001      	b.n	8009e00 <mqtt_publish+0xa4>
  } else {
    /* Use reserved value pkt_id 0 for QoS 0 in request handle */
    pkt_id = 0;
 8009dfc:	2300      	movs	r3, #0
 8009dfe:	84fb      	strh	r3, [r7, #38]	; 0x26
  }
  LWIP_ERROR("mqtt_publish: total length overflow", (total_len <= 0xFFFF), return ERR_ARG);
 8009e00:	6a3b      	ldr	r3, [r7, #32]
 8009e02:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009e06:	d309      	bcc.n	8009e1c <mqtt_publish+0xc0>
 8009e08:	4b37      	ldr	r3, [pc, #220]	; (8009ee8 <mqtt_publish+0x18c>)
 8009e0a:	f240 4265 	movw	r2, #1125	; 0x465
 8009e0e:	493c      	ldr	r1, [pc, #240]	; (8009f00 <mqtt_publish+0x1a4>)
 8009e10:	4837      	ldr	r0, [pc, #220]	; (8009ef0 <mqtt_publish+0x194>)
 8009e12:	f00c fb9d 	bl	8016550 <iprintf>
 8009e16:	f06f 030f 	mvn.w	r3, #15
 8009e1a:	e060      	b.n	8009ede <mqtt_publish+0x182>
  remaining_length = (u16_t)total_len;
 8009e1c:	6a3b      	ldr	r3, [r7, #32]
 8009e1e:	833b      	strh	r3, [r7, #24]

  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_publish: Publish with payload length %d to topic \"%s\"\n", payload_length, topic));

  r = mqtt_create_request(client->req_list, LWIP_ARRAYSIZE(client->req_list), pkt_id, cb, arg);
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	f103 001c 	add.w	r0, r3, #28
 8009e26:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e28:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009e2a:	9300      	str	r3, [sp, #0]
 8009e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009e2e:	2104      	movs	r1, #4
 8009e30:	f7ff f816 	bl	8008e60 <mqtt_create_request>
 8009e34:	6178      	str	r0, [r7, #20]
  if (r == NULL) {
 8009e36:	697b      	ldr	r3, [r7, #20]
 8009e38:	2b00      	cmp	r3, #0
 8009e3a:	d102      	bne.n	8009e42 <mqtt_publish+0xe6>
    return ERR_MEM;
 8009e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e40:	e04d      	b.n	8009ede <mqtt_publish+0x182>
  }

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	33ec      	adds	r3, #236	; 0xec
 8009e46:	8b3a      	ldrh	r2, [r7, #24]
 8009e48:	4611      	mov	r1, r2
 8009e4a:	4618      	mov	r0, r3
 8009e4c:	f7ff fa62 	bl	8009314 <mqtt_output_check_space>
 8009e50:	4603      	mov	r3, r0
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d105      	bne.n	8009e62 <mqtt_publish+0x106>
    mqtt_delete_request(r);
 8009e56:	6978      	ldr	r0, [r7, #20]
 8009e58:	f7ff f894 	bl	8008f84 <mqtt_delete_request>
    return ERR_MEM;
 8009e5c:	f04f 33ff 	mov.w	r3, #4294967295
 8009e60:	e03d      	b.n	8009ede <mqtt_publish+0x182>
  }
  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_PUBLISH, 0, qos, retain, remaining_length);
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 8009e68:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8009e6c:	8b3b      	ldrh	r3, [r7, #24]
 8009e6e:	9301      	str	r3, [sp, #4]
 8009e70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8009e74:	9300      	str	r3, [sp, #0]
 8009e76:	4613      	mov	r3, r2
 8009e78:	2200      	movs	r2, #0
 8009e7a:	2103      	movs	r1, #3
 8009e7c:	f7ff f9ff 	bl	800927e <mqtt_output_append_fixed_header>

  /* Append Topic */
  mqtt_output_append_string(&client->output, topic, topic_len);
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	33ec      	adds	r3, #236	; 0xec
 8009e84:	8b7a      	ldrh	r2, [r7, #26]
 8009e86:	68b9      	ldr	r1, [r7, #8]
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7ff f9cc 	bl	8009226 <mqtt_output_append_string>

  /* Append packet if for QoS 1 and 2*/
  if (qos > 0) {
 8009e8e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d006      	beq.n	8009ea4 <mqtt_publish+0x148>
    mqtt_output_append_u16(&client->output, pkt_id);
 8009e96:	68fb      	ldr	r3, [r7, #12]
 8009e98:	33ec      	adds	r3, #236	; 0xec
 8009e9a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	f7ff f98b 	bl	80091ba <mqtt_output_append_u16>
  }

  /* Append optional publish payload */
  if ((payload != NULL) && (payload_length > 0)) {
 8009ea4:	687b      	ldr	r3, [r7, #4]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d009      	beq.n	8009ebe <mqtt_publish+0x162>
 8009eaa:	887b      	ldrh	r3, [r7, #2]
 8009eac:	2b00      	cmp	r3, #0
 8009eae:	d006      	beq.n	8009ebe <mqtt_publish+0x162>
    mqtt_output_append_buf(&client->output, payload, payload_length);
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	33ec      	adds	r3, #236	; 0xec
 8009eb4:	887a      	ldrh	r2, [r7, #2]
 8009eb6:	6879      	ldr	r1, [r7, #4]
 8009eb8:	4618      	mov	r0, r3
 8009eba:	f7ff f996 	bl	80091ea <mqtt_output_append_buf>
  }

  mqtt_append_request(&client->pend_req_queue, r);
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	3318      	adds	r3, #24
 8009ec2:	6979      	ldr	r1, [r7, #20]
 8009ec4:	4618      	mov	r0, r3
 8009ec6:	f7ff f811 	bl	8008eec <mqtt_append_request>
  mqtt_output_send(&client->output, client->conn);
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	68db      	ldr	r3, [r3, #12]
 8009ed4:	4619      	mov	r1, r3
 8009ed6:	4610      	mov	r0, r2
 8009ed8:	f7fe ff0e 	bl	8008cf8 <mqtt_output_send>
  return ERR_OK;
 8009edc:	2300      	movs	r3, #0
}
 8009ede:	4618      	mov	r0, r3
 8009ee0:	3728      	adds	r7, #40	; 0x28
 8009ee2:	46bd      	mov	sp, r7
 8009ee4:	bd80      	pop	{r7, pc}
 8009ee6:	bf00      	nop
 8009ee8:	08017848 	.word	0x08017848
 8009eec:	08017b54 	.word	0x08017b54
 8009ef0:	080178c0 	.word	0x080178c0
 8009ef4:	08017b74 	.word	0x08017b74
 8009ef8:	08017b90 	.word	0x08017b90
 8009efc:	08017bb0 	.word	0x08017bb0
 8009f00:	08017bd4 	.word	0x08017bd4

08009f04 <mqtt_set_inpub_callback>:
 * @param arg User supplied argument to both callbacks
 */
void
mqtt_set_inpub_callback(mqtt_client_t *client, mqtt_incoming_publish_cb_t pub_cb,
                        mqtt_incoming_data_cb_t data_cb, void *arg)
{
 8009f04:	b580      	push	{r7, lr}
 8009f06:	b084      	sub	sp, #16
 8009f08:	af00      	add	r7, sp, #0
 8009f0a:	60f8      	str	r0, [r7, #12]
 8009f0c:	60b9      	str	r1, [r7, #8]
 8009f0e:	607a      	str	r2, [r7, #4]
 8009f10:	603b      	str	r3, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_set_inpub_callback: client != NULL", client != NULL);
 8009f12:	68fb      	ldr	r3, [r7, #12]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d106      	bne.n	8009f26 <mqtt_set_inpub_callback+0x22>
 8009f18:	4b09      	ldr	r3, [pc, #36]	; (8009f40 <mqtt_set_inpub_callback+0x3c>)
 8009f1a:	f240 42da 	movw	r2, #1242	; 0x4da
 8009f1e:	4909      	ldr	r1, [pc, #36]	; (8009f44 <mqtt_set_inpub_callback+0x40>)
 8009f20:	4809      	ldr	r0, [pc, #36]	; (8009f48 <mqtt_set_inpub_callback+0x44>)
 8009f22:	f00c fb15 	bl	8016550 <iprintf>
  client->data_cb = data_cb;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	687a      	ldr	r2, [r7, #4]
 8009f2a:	661a      	str	r2, [r3, #96]	; 0x60
  client->pub_cb = pub_cb;
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	68ba      	ldr	r2, [r7, #8]
 8009f30:	665a      	str	r2, [r3, #100]	; 0x64
  client->inpub_arg = arg;
 8009f32:	68fb      	ldr	r3, [r7, #12]
 8009f34:	683a      	ldr	r2, [r7, #0]
 8009f36:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8009f38:	bf00      	nop
 8009f3a:	3710      	adds	r7, #16
 8009f3c:	46bd      	mov	sp, r7
 8009f3e:	bd80      	pop	{r7, pc}
 8009f40:	08017848 	.word	0x08017848
 8009f44:	08017ca0 	.word	0x08017ca0
 8009f48:	080178c0 	.word	0x080178c0

08009f4c <mqtt_client_new>:
 * Create a new MQTT client instance
 * @return Pointer to instance on success, NULL otherwise
 */
mqtt_client_t *
mqtt_client_new(void)
{
 8009f4c:	b580      	push	{r7, lr}
 8009f4e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();
  return (mqtt_client_t *)mem_calloc(1, sizeof(mqtt_client_t));
 8009f50:	f44f 71f8 	mov.w	r1, #496	; 0x1f0
 8009f54:	2001      	movs	r0, #1
 8009f56:	f001 f983 	bl	800b260 <mem_calloc>
 8009f5a:	4603      	mov	r3, r0
}
 8009f5c:	4618      	mov	r0, r3
 8009f5e:	bd80      	pop	{r7, pc}

08009f60 <mqtt_client_connect>:
 * @return ERR_OK if successful, @see err_t enum for other results
 */
err_t
mqtt_client_connect(mqtt_client_t *client, const ip_addr_t *ip_addr, u16_t port, mqtt_connection_cb_t cb, void *arg,
                    const struct mqtt_connect_client_info_t *client_info)
{
 8009f60:	b580      	push	{r7, lr}
 8009f62:	b08c      	sub	sp, #48	; 0x30
 8009f64:	af02      	add	r7, sp, #8
 8009f66:	60f8      	str	r0, [r7, #12]
 8009f68:	60b9      	str	r1, [r7, #8]
 8009f6a:	603b      	str	r3, [r7, #0]
 8009f6c:	4613      	mov	r3, r2
 8009f6e:	80fb      	strh	r3, [r7, #6]
  err_t err;
  size_t len;
  u16_t client_id_length;
  /* Length is the sum of 2+"MQTT", protocol level, flags and keep alive */
  u16_t remaining_length = 2 + 4 + 1 + 1 + 2;
 8009f70:	230a      	movs	r3, #10
 8009f72:	84bb      	strh	r3, [r7, #36]	; 0x24
  u8_t flags = 0, will_topic_len = 0, will_msg_len = 0;
 8009f74:	2300      	movs	r3, #0
 8009f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009f80:	2300      	movs	r3, #0
 8009f82:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
  u16_t client_user_len = 0, client_pass_len = 0;
 8009f86:	2300      	movs	r3, #0
 8009f88:	83fb      	strh	r3, [r7, #30]
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	83bb      	strh	r3, [r7, #28]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("mqtt_client_connect: client != NULL", client != NULL);
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	2b00      	cmp	r3, #0
 8009f92:	d106      	bne.n	8009fa2 <mqtt_client_connect+0x42>
 8009f94:	4b9e      	ldr	r3, [pc, #632]	; (800a210 <mqtt_client_connect+0x2b0>)
 8009f96:	f240 520f 	movw	r2, #1295	; 0x50f
 8009f9a:	499e      	ldr	r1, [pc, #632]	; (800a214 <mqtt_client_connect+0x2b4>)
 8009f9c:	489e      	ldr	r0, [pc, #632]	; (800a218 <mqtt_client_connect+0x2b8>)
 8009f9e:	f00c fad7 	bl	8016550 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: ip_addr != NULL", ip_addr != NULL);
 8009fa2:	68bb      	ldr	r3, [r7, #8]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d106      	bne.n	8009fb6 <mqtt_client_connect+0x56>
 8009fa8:	4b99      	ldr	r3, [pc, #612]	; (800a210 <mqtt_client_connect+0x2b0>)
 8009faa:	f44f 62a2 	mov.w	r2, #1296	; 0x510
 8009fae:	499b      	ldr	r1, [pc, #620]	; (800a21c <mqtt_client_connect+0x2bc>)
 8009fb0:	4899      	ldr	r0, [pc, #612]	; (800a218 <mqtt_client_connect+0x2b8>)
 8009fb2:	f00c facd 	bl	8016550 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info != NULL", client_info != NULL);
 8009fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fb8:	2b00      	cmp	r3, #0
 8009fba:	d106      	bne.n	8009fca <mqtt_client_connect+0x6a>
 8009fbc:	4b94      	ldr	r3, [pc, #592]	; (800a210 <mqtt_client_connect+0x2b0>)
 8009fbe:	f240 5211 	movw	r2, #1297	; 0x511
 8009fc2:	4997      	ldr	r1, [pc, #604]	; (800a220 <mqtt_client_connect+0x2c0>)
 8009fc4:	4894      	ldr	r0, [pc, #592]	; (800a218 <mqtt_client_connect+0x2b8>)
 8009fc6:	f00c fac3 	bl	8016550 <iprintf>
  LWIP_ASSERT("mqtt_client_connect: client_info->client_id != NULL", client_info->client_id != NULL);
 8009fca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009fcc:	681b      	ldr	r3, [r3, #0]
 8009fce:	2b00      	cmp	r3, #0
 8009fd0:	d106      	bne.n	8009fe0 <mqtt_client_connect+0x80>
 8009fd2:	4b8f      	ldr	r3, [pc, #572]	; (800a210 <mqtt_client_connect+0x2b0>)
 8009fd4:	f240 5212 	movw	r2, #1298	; 0x512
 8009fd8:	4992      	ldr	r1, [pc, #584]	; (800a224 <mqtt_client_connect+0x2c4>)
 8009fda:	488f      	ldr	r0, [pc, #572]	; (800a218 <mqtt_client_connect+0x2b8>)
 8009fdc:	f00c fab8 	bl	8016550 <iprintf>

  if (client->conn_state != TCP_DISCONNECTED) {
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	7a9b      	ldrb	r3, [r3, #10]
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d002      	beq.n	8009fee <mqtt_client_connect+0x8e>
    LWIP_DEBUGF(MQTT_DEBUG_WARN, ("mqtt_client_connect: Already connected\n"));
    return ERR_ISCONN;
 8009fe8:	f06f 0309 	mvn.w	r3, #9
 8009fec:	e21f      	b.n	800a42e <mqtt_client_connect+0x4ce>
  }

  /* Wipe clean */
  memset(client, 0, sizeof(mqtt_client_t));
 8009fee:	f44f 72f8 	mov.w	r2, #496	; 0x1f0
 8009ff2:	2100      	movs	r1, #0
 8009ff4:	68f8      	ldr	r0, [r7, #12]
 8009ff6:	f00c fa0e 	bl	8016416 <memset>
  client->connect_arg = arg;
 8009ffa:	68fb      	ldr	r3, [r7, #12]
 8009ffc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ffe:	611a      	str	r2, [r3, #16]
  client->connect_cb = cb;
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	683a      	ldr	r2, [r7, #0]
 800a004:	615a      	str	r2, [r3, #20]
  client->keep_alive = client_info->keep_alive;
 800a006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a008:	899a      	ldrh	r2, [r3, #12]
 800a00a:	68fb      	ldr	r3, [r7, #12]
 800a00c:	805a      	strh	r2, [r3, #2]
  mqtt_init_requests(client->req_list, LWIP_ARRAYSIZE(client->req_list));
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	331c      	adds	r3, #28
 800a012:	2104      	movs	r1, #4
 800a014:	4618      	mov	r0, r3
 800a016:	f7ff f893 	bl	8009140 <mqtt_init_requests>

  /* Build connect message */
  if (client_info->will_topic != NULL && client_info->will_msg != NULL) {
 800a01a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a01c:	691b      	ldr	r3, [r3, #16]
 800a01e:	2b00      	cmp	r3, #0
 800a020:	d073      	beq.n	800a10a <mqtt_client_connect+0x1aa>
 800a022:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a024:	695b      	ldr	r3, [r3, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d06f      	beq.n	800a10a <mqtt_client_connect+0x1aa>
    flags |= MQTT_CONNECT_FLAG_WILL;
 800a02a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a02e:	f043 0304 	orr.w	r3, r3, #4
 800a032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    flags |= (client_info->will_qos & 3) << 3;
 800a036:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a038:	7e1b      	ldrb	r3, [r3, #24]
 800a03a:	00db      	lsls	r3, r3, #3
 800a03c:	b25b      	sxtb	r3, r3
 800a03e:	f003 0318 	and.w	r3, r3, #24
 800a042:	b25a      	sxtb	r2, r3
 800a044:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a048:	4313      	orrs	r3, r2
 800a04a:	b25b      	sxtb	r3, r3
 800a04c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (client_info->will_retain) {
 800a050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a052:	7e5b      	ldrb	r3, [r3, #25]
 800a054:	2b00      	cmp	r3, #0
 800a056:	d005      	beq.n	800a064 <mqtt_client_connect+0x104>
      flags |= MQTT_CONNECT_FLAG_WILL_RETAIN;
 800a058:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a05c:	f043 0320 	orr.w	r3, r3, #32
 800a060:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    }
    len = strlen(client_info->will_topic);
 800a064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a066:	691b      	ldr	r3, [r3, #16]
 800a068:	4618      	mov	r0, r3
 800a06a:	f7f6 f8e9 	bl	8000240 <strlen>
 800a06e:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length overflow", len <= 0xFF, return ERR_VAL);
 800a070:	69bb      	ldr	r3, [r7, #24]
 800a072:	2bff      	cmp	r3, #255	; 0xff
 800a074:	d909      	bls.n	800a08a <mqtt_client_connect+0x12a>
 800a076:	4b66      	ldr	r3, [pc, #408]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a078:	f44f 62a5 	mov.w	r2, #1320	; 0x528
 800a07c:	496a      	ldr	r1, [pc, #424]	; (800a228 <mqtt_client_connect+0x2c8>)
 800a07e:	4866      	ldr	r0, [pc, #408]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a080:	f00c fa66 	bl	8016550 <iprintf>
 800a084:	f06f 0305 	mvn.w	r3, #5
 800a088:	e1d1      	b.n	800a42e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->will_topic length must be > 0", len > 0, return ERR_VAL);
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d109      	bne.n	800a0a4 <mqtt_client_connect+0x144>
 800a090:	4b5f      	ldr	r3, [pc, #380]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a092:	f240 5229 	movw	r2, #1321	; 0x529
 800a096:	4965      	ldr	r1, [pc, #404]	; (800a22c <mqtt_client_connect+0x2cc>)
 800a098:	485f      	ldr	r0, [pc, #380]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a09a:	f00c fa59 	bl	8016550 <iprintf>
 800a09e:	f06f 0305 	mvn.w	r3, #5
 800a0a2:	e1c4      	b.n	800a42e <mqtt_client_connect+0x4ce>
    will_topic_len = (u8_t)len;
 800a0a4:	69bb      	ldr	r3, [r7, #24]
 800a0a6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    len = strlen(client_info->will_msg);
 800a0aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a0ac:	695b      	ldr	r3, [r3, #20]
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7f6 f8c6 	bl	8000240 <strlen>
 800a0b4:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->will_msg length overflow", len <= 0xFF, return ERR_VAL);
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	2bff      	cmp	r3, #255	; 0xff
 800a0ba:	d909      	bls.n	800a0d0 <mqtt_client_connect+0x170>
 800a0bc:	4b54      	ldr	r3, [pc, #336]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a0be:	f240 522c 	movw	r2, #1324	; 0x52c
 800a0c2:	495b      	ldr	r1, [pc, #364]	; (800a230 <mqtt_client_connect+0x2d0>)
 800a0c4:	4854      	ldr	r0, [pc, #336]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a0c6:	f00c fa43 	bl	8016550 <iprintf>
 800a0ca:	f06f 0305 	mvn.w	r3, #5
 800a0ce:	e1ae      	b.n	800a42e <mqtt_client_connect+0x4ce>
    will_msg_len = (u8_t)len;
 800a0d0:	69bb      	ldr	r3, [r7, #24]
 800a0d2:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
    len = remaining_length + 2 + will_topic_len + 2 + will_msg_len;
 800a0d6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0d8:	1c9a      	adds	r2, r3, #2
 800a0da:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800a0de:	4413      	add	r3, r2
 800a0e0:	1c9a      	adds	r2, r3, #2
 800a0e2:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800a0e6:	4413      	add	r3, r2
 800a0e8:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800a0ea:	69bb      	ldr	r3, [r7, #24]
 800a0ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a0f0:	d309      	bcc.n	800a106 <mqtt_client_connect+0x1a6>
 800a0f2:	4b47      	ldr	r3, [pc, #284]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a0f4:	f240 522f 	movw	r2, #1327	; 0x52f
 800a0f8:	494e      	ldr	r1, [pc, #312]	; (800a234 <mqtt_client_connect+0x2d4>)
 800a0fa:	4847      	ldr	r0, [pc, #284]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a0fc:	f00c fa28 	bl	8016550 <iprintf>
 800a100:	f06f 0305 	mvn.w	r3, #5
 800a104:	e193      	b.n	800a42e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800a106:	69bb      	ldr	r3, [r7, #24]
 800a108:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_user != NULL) {
 800a10a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a10c:	685b      	ldr	r3, [r3, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d03d      	beq.n	800a18e <mqtt_client_connect+0x22e>
    flags |= MQTT_CONNECT_FLAG_USERNAME;
 800a112:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a116:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a11a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_user);
 800a11e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a120:	685b      	ldr	r3, [r3, #4]
 800a122:	4618      	mov	r0, r3
 800a124:	f7f6 f88c 	bl	8000240 <strlen>
 800a128:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length overflow", len <= 0xFFFF, return ERR_VAL);
 800a12a:	69bb      	ldr	r3, [r7, #24]
 800a12c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a130:	d309      	bcc.n	800a146 <mqtt_client_connect+0x1e6>
 800a132:	4b37      	ldr	r3, [pc, #220]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a134:	f240 5235 	movw	r2, #1333	; 0x535
 800a138:	493f      	ldr	r1, [pc, #252]	; (800a238 <mqtt_client_connect+0x2d8>)
 800a13a:	4837      	ldr	r0, [pc, #220]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a13c:	f00c fa08 	bl	8016550 <iprintf>
 800a140:	f06f 0305 	mvn.w	r3, #5
 800a144:	e173      	b.n	800a42e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_user length must be > 0", len > 0, return ERR_VAL);
 800a146:	69bb      	ldr	r3, [r7, #24]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d109      	bne.n	800a160 <mqtt_client_connect+0x200>
 800a14c:	4b30      	ldr	r3, [pc, #192]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a14e:	f240 5236 	movw	r2, #1334	; 0x536
 800a152:	493a      	ldr	r1, [pc, #232]	; (800a23c <mqtt_client_connect+0x2dc>)
 800a154:	4830      	ldr	r0, [pc, #192]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a156:	f00c f9fb 	bl	8016550 <iprintf>
 800a15a:	f06f 0305 	mvn.w	r3, #5
 800a15e:	e166      	b.n	800a42e <mqtt_client_connect+0x4ce>
    client_user_len = (u16_t)len;
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	83fb      	strh	r3, [r7, #30]
    len = remaining_length + 2 + client_user_len;
 800a164:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a166:	1c9a      	adds	r2, r3, #2
 800a168:	8bfb      	ldrh	r3, [r7, #30]
 800a16a:	4413      	add	r3, r2
 800a16c:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800a16e:	69bb      	ldr	r3, [r7, #24]
 800a170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a174:	d309      	bcc.n	800a18a <mqtt_client_connect+0x22a>
 800a176:	4b26      	ldr	r3, [pc, #152]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a178:	f240 5239 	movw	r2, #1337	; 0x539
 800a17c:	492d      	ldr	r1, [pc, #180]	; (800a234 <mqtt_client_connect+0x2d4>)
 800a17e:	4826      	ldr	r0, [pc, #152]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a180:	f00c f9e6 	bl	8016550 <iprintf>
 800a184:	f06f 0305 	mvn.w	r3, #5
 800a188:	e151      	b.n	800a42e <mqtt_client_connect+0x4ce>
    remaining_length = (u16_t)len;
 800a18a:	69bb      	ldr	r3, [r7, #24]
 800a18c:	84bb      	strh	r3, [r7, #36]	; 0x24
  }
  if (client_info->client_pass != NULL) {
 800a18e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a190:	689b      	ldr	r3, [r3, #8]
 800a192:	2b00      	cmp	r3, #0
 800a194:	d05a      	beq.n	800a24c <mqtt_client_connect+0x2ec>
    flags |= MQTT_CONNECT_FLAG_PASSWORD;
 800a196:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a19a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800a19e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    len = strlen(client_info->client_pass);
 800a1a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a4:	689b      	ldr	r3, [r3, #8]
 800a1a6:	4618      	mov	r0, r3
 800a1a8:	f7f6 f84a 	bl	8000240 <strlen>
 800a1ac:	61b8      	str	r0, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length overflow", len <= 0xFFFF, return ERR_VAL);
 800a1ae:	69bb      	ldr	r3, [r7, #24]
 800a1b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1b4:	d309      	bcc.n	800a1ca <mqtt_client_connect+0x26a>
 800a1b6:	4b16      	ldr	r3, [pc, #88]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a1b8:	f240 523f 	movw	r2, #1343	; 0x53f
 800a1bc:	4920      	ldr	r1, [pc, #128]	; (800a240 <mqtt_client_connect+0x2e0>)
 800a1be:	4816      	ldr	r0, [pc, #88]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a1c0:	f00c f9c6 	bl	8016550 <iprintf>
 800a1c4:	f06f 0305 	mvn.w	r3, #5
 800a1c8:	e131      	b.n	800a42e <mqtt_client_connect+0x4ce>
    LWIP_ERROR("mqtt_client_connect: client_info->client_pass length must be > 0", len > 0, return ERR_VAL);
 800a1ca:	69bb      	ldr	r3, [r7, #24]
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d109      	bne.n	800a1e4 <mqtt_client_connect+0x284>
 800a1d0:	4b0f      	ldr	r3, [pc, #60]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a1d2:	f44f 62a8 	mov.w	r2, #1344	; 0x540
 800a1d6:	491b      	ldr	r1, [pc, #108]	; (800a244 <mqtt_client_connect+0x2e4>)
 800a1d8:	480f      	ldr	r0, [pc, #60]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a1da:	f00c f9b9 	bl	8016550 <iprintf>
 800a1de:	f06f 0305 	mvn.w	r3, #5
 800a1e2:	e124      	b.n	800a42e <mqtt_client_connect+0x4ce>
    client_pass_len = (u16_t)len;
 800a1e4:	69bb      	ldr	r3, [r7, #24]
 800a1e6:	83bb      	strh	r3, [r7, #28]
    len = remaining_length + 2 + client_pass_len;
 800a1e8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a1ea:	1c9a      	adds	r2, r3, #2
 800a1ec:	8bbb      	ldrh	r3, [r7, #28]
 800a1ee:	4413      	add	r3, r2
 800a1f0:	61bb      	str	r3, [r7, #24]
    LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800a1f2:	69bb      	ldr	r3, [r7, #24]
 800a1f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a1f8:	d326      	bcc.n	800a248 <mqtt_client_connect+0x2e8>
 800a1fa:	4b05      	ldr	r3, [pc, #20]	; (800a210 <mqtt_client_connect+0x2b0>)
 800a1fc:	f240 5243 	movw	r2, #1347	; 0x543
 800a200:	490c      	ldr	r1, [pc, #48]	; (800a234 <mqtt_client_connect+0x2d4>)
 800a202:	4805      	ldr	r0, [pc, #20]	; (800a218 <mqtt_client_connect+0x2b8>)
 800a204:	f00c f9a4 	bl	8016550 <iprintf>
 800a208:	f06f 0305 	mvn.w	r3, #5
 800a20c:	e10f      	b.n	800a42e <mqtt_client_connect+0x4ce>
 800a20e:	bf00      	nop
 800a210:	08017848 	.word	0x08017848
 800a214:	08017cc8 	.word	0x08017cc8
 800a218:	080178c0 	.word	0x080178c0
 800a21c:	08017cec 	.word	0x08017cec
 800a220:	08017d14 	.word	0x08017d14
 800a224:	08017d40 	.word	0x08017d40
 800a228:	08017d74 	.word	0x08017d74
 800a22c:	08017db4 	.word	0x08017db4
 800a230:	08017df4 	.word	0x08017df4
 800a234:	08017e30 	.word	0x08017e30
 800a238:	08017e60 	.word	0x08017e60
 800a23c:	08017ea0 	.word	0x08017ea0
 800a240:	08017ee4 	.word	0x08017ee4
 800a244:	08017f24 	.word	0x08017f24
    remaining_length = (u16_t)len;
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	84bb      	strh	r3, [r7, #36]	; 0x24
  }

  /* Don't complicate things, always connect using clean session */
  flags |= MQTT_CONNECT_FLAG_CLEAN_SESSION;
 800a24c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a250:	f043 0302 	orr.w	r3, r3, #2
 800a254:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  len = strlen(client_info->client_id);
 800a258:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4618      	mov	r0, r3
 800a25e:	f7f5 ffef 	bl	8000240 <strlen>
 800a262:	61b8      	str	r0, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: client_info->client_id length overflow", len <= 0xFFFF, return ERR_VAL);
 800a264:	69bb      	ldr	r3, [r7, #24]
 800a266:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a26a:	d309      	bcc.n	800a280 <mqtt_client_connect+0x320>
 800a26c:	4b72      	ldr	r3, [pc, #456]	; (800a438 <mqtt_client_connect+0x4d8>)
 800a26e:	f240 524b 	movw	r2, #1355	; 0x54b
 800a272:	4972      	ldr	r1, [pc, #456]	; (800a43c <mqtt_client_connect+0x4dc>)
 800a274:	4872      	ldr	r0, [pc, #456]	; (800a440 <mqtt_client_connect+0x4e0>)
 800a276:	f00c f96b 	bl	8016550 <iprintf>
 800a27a:	f06f 0305 	mvn.w	r3, #5
 800a27e:	e0d6      	b.n	800a42e <mqtt_client_connect+0x4ce>
  client_id_length = (u16_t)len;
 800a280:	69bb      	ldr	r3, [r7, #24]
 800a282:	82fb      	strh	r3, [r7, #22]
  len = remaining_length + 2 + client_id_length;
 800a284:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a286:	1c9a      	adds	r2, r3, #2
 800a288:	8afb      	ldrh	r3, [r7, #22]
 800a28a:	4413      	add	r3, r2
 800a28c:	61bb      	str	r3, [r7, #24]
  LWIP_ERROR("mqtt_client_connect: remaining_length overflow", len <= 0xFFFF, return ERR_VAL);
 800a28e:	69bb      	ldr	r3, [r7, #24]
 800a290:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a294:	d309      	bcc.n	800a2aa <mqtt_client_connect+0x34a>
 800a296:	4b68      	ldr	r3, [pc, #416]	; (800a438 <mqtt_client_connect+0x4d8>)
 800a298:	f240 524e 	movw	r2, #1358	; 0x54e
 800a29c:	4969      	ldr	r1, [pc, #420]	; (800a444 <mqtt_client_connect+0x4e4>)
 800a29e:	4868      	ldr	r0, [pc, #416]	; (800a440 <mqtt_client_connect+0x4e0>)
 800a2a0:	f00c f956 	bl	8016550 <iprintf>
 800a2a4:	f06f 0305 	mvn.w	r3, #5
 800a2a8:	e0c1      	b.n	800a42e <mqtt_client_connect+0x4ce>
  remaining_length = (u16_t)len;
 800a2aa:	69bb      	ldr	r3, [r7, #24]
 800a2ac:	84bb      	strh	r3, [r7, #36]	; 0x24

  if (mqtt_output_check_space(&client->output, remaining_length) == 0) {
 800a2ae:	68fb      	ldr	r3, [r7, #12]
 800a2b0:	33ec      	adds	r3, #236	; 0xec
 800a2b2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f7ff f82c 	bl	8009314 <mqtt_output_check_space>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d102      	bne.n	800a2c8 <mqtt_client_connect+0x368>
    return ERR_MEM;
 800a2c2:	f04f 33ff 	mov.w	r3, #4294967295
 800a2c6:	e0b2      	b.n	800a42e <mqtt_client_connect+0x4ce>
  if (client_info->tls_config) {
    client->conn = altcp_tls_new(client_info->tls_config, IP_GET_TYPE(ip_addr));
  } else
#endif
  {
    client->conn = altcp_tcp_new_ip_type(IP_GET_TYPE(ip_addr));
 800a2c8:	2000      	movs	r0, #0
 800a2ca:	f003 ffa5 	bl	800e218 <tcp_new_ip_type>
 800a2ce:	4602      	mov	r2, r0
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	60da      	str	r2, [r3, #12]
  }
  if (client->conn == NULL) {
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	68db      	ldr	r3, [r3, #12]
 800a2d8:	2b00      	cmp	r3, #0
 800a2da:	d102      	bne.n	800a2e2 <mqtt_client_connect+0x382>
    return ERR_MEM;
 800a2dc:	f04f 33ff 	mov.w	r3, #4294967295
 800a2e0:	e0a5      	b.n	800a42e <mqtt_client_connect+0x4ce>
  }

  /* Set arg pointer for callbacks */
  altcp_arg(client->conn, client);
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	68db      	ldr	r3, [r3, #12]
 800a2e6:	68f9      	ldr	r1, [r7, #12]
 800a2e8:	4618      	mov	r0, r3
 800a2ea:	f003 ffa3 	bl	800e234 <tcp_arg>
  /* Any local address, pick random local port number */
  err = altcp_bind(client->conn, IP_ADDR_ANY, 0);
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	68db      	ldr	r3, [r3, #12]
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	4954      	ldr	r1, [pc, #336]	; (800a448 <mqtt_client_connect+0x4e8>)
 800a2f6:	4618      	mov	r0, r3
 800a2f8:	f002 fecc 	bl	800d094 <tcp_bind>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800a302:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a306:	2b00      	cmp	r3, #0
 800a308:	f040 8084 	bne.w	800a414 <mqtt_client_connect+0x4b4>
    goto tcp_fail;
  }
  LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Connecting to host: %s at port:%"U16_F"\n", ipaddr_ntoa(ip_addr), port));

  /* Connect to server */
  err = altcp_connect(client->conn, ip_addr, port, mqtt_tcp_connect_cb);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	68d8      	ldr	r0, [r3, #12]
 800a310:	88fa      	ldrh	r2, [r7, #6]
 800a312:	4b4e      	ldr	r3, [pc, #312]	; (800a44c <mqtt_client_connect+0x4ec>)
 800a314:	68b9      	ldr	r1, [r7, #8]
 800a316:	f003 f845 	bl	800d3a4 <tcp_connect>
 800a31a:	4603      	mov	r3, r0
 800a31c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (err != ERR_OK) {
 800a320:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a324:	2b00      	cmp	r3, #0
 800a326:	d177      	bne.n	800a418 <mqtt_client_connect+0x4b8>
    LWIP_DEBUGF(MQTT_DEBUG_TRACE, ("mqtt_client_connect: Error connecting to remote ip/port, %d\n", err));
    goto tcp_fail;
  }
  /* Set error callback */
  altcp_err(client->conn, mqtt_tcp_err_cb);
 800a328:	68fb      	ldr	r3, [r7, #12]
 800a32a:	68db      	ldr	r3, [r3, #12]
 800a32c:	4948      	ldr	r1, [pc, #288]	; (800a450 <mqtt_client_connect+0x4f0>)
 800a32e:	4618      	mov	r0, r3
 800a330:	f003 ffd6 	bl	800e2e0 <tcp_err>
  client->conn_state = TCP_CONNECTING;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2201      	movs	r2, #1
 800a338:	729a      	strb	r2, [r3, #10]

  /* Append fixed header */
  mqtt_output_append_fixed_header(&client->output, MQTT_MSG_TYPE_CONNECT, 0, 0, 0, remaining_length);
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a342:	9301      	str	r3, [sp, #4]
 800a344:	2300      	movs	r3, #0
 800a346:	9300      	str	r3, [sp, #0]
 800a348:	2300      	movs	r3, #0
 800a34a:	2200      	movs	r2, #0
 800a34c:	2101      	movs	r1, #1
 800a34e:	f7fe ff96 	bl	800927e <mqtt_output_append_fixed_header>
  /* Append Protocol string */
  mqtt_output_append_string(&client->output, "MQTT", 4);
 800a352:	68fb      	ldr	r3, [r7, #12]
 800a354:	33ec      	adds	r3, #236	; 0xec
 800a356:	2204      	movs	r2, #4
 800a358:	493e      	ldr	r1, [pc, #248]	; (800a454 <mqtt_client_connect+0x4f4>)
 800a35a:	4618      	mov	r0, r3
 800a35c:	f7fe ff63 	bl	8009226 <mqtt_output_append_string>
  /* Append Protocol level */
  mqtt_output_append_u8(&client->output, 4);
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	33ec      	adds	r3, #236	; 0xec
 800a364:	2104      	movs	r1, #4
 800a366:	4618      	mov	r0, r3
 800a368:	f7fe ff18 	bl	800919c <mqtt_output_append_u8>
  /* Append connect flags */
  mqtt_output_append_u8(&client->output, flags);
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	33ec      	adds	r3, #236	; 0xec
 800a370:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800a374:	4611      	mov	r1, r2
 800a376:	4618      	mov	r0, r3
 800a378:	f7fe ff10 	bl	800919c <mqtt_output_append_u8>
  /* Append keep-alive */
  mqtt_output_append_u16(&client->output, client_info->keep_alive);
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	f103 02ec 	add.w	r2, r3, #236	; 0xec
 800a382:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a384:	899b      	ldrh	r3, [r3, #12]
 800a386:	4619      	mov	r1, r3
 800a388:	4610      	mov	r0, r2
 800a38a:	f7fe ff16 	bl	80091ba <mqtt_output_append_u16>
  /* Append client id */
  mqtt_output_append_string(&client->output, client_info->client_id, client_id_length);
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	8afa      	ldrh	r2, [r7, #22]
 800a39a:	4619      	mov	r1, r3
 800a39c:	f7fe ff43 	bl	8009226 <mqtt_output_append_string>
  /* Append will message if used */
  if ((flags & MQTT_CONNECT_FLAG_WILL) != 0) {
 800a3a0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3a4:	f003 0304 	and.w	r3, r3, #4
 800a3a8:	2b00      	cmp	r3, #0
 800a3aa:	d015      	beq.n	800a3d8 <mqtt_client_connect+0x478>
    mqtt_output_append_string(&client->output, client_info->will_topic, will_topic_len);
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a3b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3b4:	691b      	ldr	r3, [r3, #16]
 800a3b6:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 800a3ba:	b292      	uxth	r2, r2
 800a3bc:	4619      	mov	r1, r3
 800a3be:	f7fe ff32 	bl	8009226 <mqtt_output_append_string>
    mqtt_output_append_string(&client->output, client_info->will_msg, will_msg_len);
 800a3c2:	68fb      	ldr	r3, [r7, #12]
 800a3c4:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a3c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3ca:	695b      	ldr	r3, [r3, #20]
 800a3cc:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 800a3d0:	b292      	uxth	r2, r2
 800a3d2:	4619      	mov	r1, r3
 800a3d4:	f7fe ff27 	bl	8009226 <mqtt_output_append_string>
  }
  /* Append user name if given */
  if ((flags & MQTT_CONNECT_FLAG_USERNAME) != 0) {
 800a3d8:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	da08      	bge.n	800a3f2 <mqtt_client_connect+0x492>
    mqtt_output_append_string(&client->output, client_info->client_user, client_user_len);
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a3e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a3e8:	685b      	ldr	r3, [r3, #4]
 800a3ea:	8bfa      	ldrh	r2, [r7, #30]
 800a3ec:	4619      	mov	r1, r3
 800a3ee:	f7fe ff1a 	bl	8009226 <mqtt_output_append_string>
  }
  /* Append password if given */
  if ((flags & MQTT_CONNECT_FLAG_PASSWORD) != 0) {
 800a3f2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a3f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d008      	beq.n	800a410 <mqtt_client_connect+0x4b0>
    mqtt_output_append_string(&client->output, client_info->client_pass, client_pass_len);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	f103 00ec 	add.w	r0, r3, #236	; 0xec
 800a404:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a406:	689b      	ldr	r3, [r3, #8]
 800a408:	8bba      	ldrh	r2, [r7, #28]
 800a40a:	4619      	mov	r1, r3
 800a40c:	f7fe ff0b 	bl	8009226 <mqtt_output_append_string>
  }
  return ERR_OK;
 800a410:	2300      	movs	r3, #0
 800a412:	e00c      	b.n	800a42e <mqtt_client_connect+0x4ce>
    goto tcp_fail;
 800a414:	bf00      	nop
 800a416:	e000      	b.n	800a41a <mqtt_client_connect+0x4ba>
    goto tcp_fail;
 800a418:	bf00      	nop

tcp_fail:
  altcp_abort(client->conn);
 800a41a:	68fb      	ldr	r3, [r7, #12]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	4618      	mov	r0, r3
 800a420:	f002 fe2c 	bl	800d07c <tcp_abort>
  client->conn = NULL;
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	2200      	movs	r2, #0
 800a428:	60da      	str	r2, [r3, #12]
  return err;
 800a42a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 800a42e:	4618      	mov	r0, r3
 800a430:	3728      	adds	r7, #40	; 0x28
 800a432:	46bd      	mov	sp, r7
 800a434:	bd80      	pop	{r7, pc}
 800a436:	bf00      	nop
 800a438:	08017848 	.word	0x08017848
 800a43c:	08017f68 	.word	0x08017f68
 800a440:	080178c0 	.word	0x080178c0
 800a444:	08017e30 	.word	0x08017e30
 800a448:	0801ac24 	.word	0x0801ac24
 800a44c:	08009cd9 	.word	0x08009cd9
 800a450:	08009c65 	.word	0x08009c65
 800a454:	08017fa4 	.word	0x08017fa4

0800a458 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800a458:	b480      	push	{r7}
 800a45a:	b083      	sub	sp, #12
 800a45c:	af00      	add	r7, sp, #0
 800a45e:	4603      	mov	r3, r0
 800a460:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800a462:	88fb      	ldrh	r3, [r7, #6]
 800a464:	021b      	lsls	r3, r3, #8
 800a466:	b21a      	sxth	r2, r3
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	0a1b      	lsrs	r3, r3, #8
 800a46c:	b29b      	uxth	r3, r3
 800a46e:	b21b      	sxth	r3, r3
 800a470:	4313      	orrs	r3, r2
 800a472:	b21b      	sxth	r3, r3
 800a474:	b29b      	uxth	r3, r3
}
 800a476:	4618      	mov	r0, r3
 800a478:	370c      	adds	r7, #12
 800a47a:	46bd      	mov	sp, r7
 800a47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a480:	4770      	bx	lr

0800a482 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800a482:	b480      	push	{r7}
 800a484:	b083      	sub	sp, #12
 800a486:	af00      	add	r7, sp, #0
 800a488:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	061a      	lsls	r2, r3, #24
 800a48e:	687b      	ldr	r3, [r7, #4]
 800a490:	021b      	lsls	r3, r3, #8
 800a492:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800a496:	431a      	orrs	r2, r3
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	0a1b      	lsrs	r3, r3, #8
 800a49c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800a4a0:	431a      	orrs	r2, r3
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	0e1b      	lsrs	r3, r3, #24
 800a4a6:	4313      	orrs	r3, r2
}
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	370c      	adds	r7, #12
 800a4ac:	46bd      	mov	sp, r7
 800a4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4b2:	4770      	bx	lr

0800a4b4 <dns_init>:
 * Initialize the resolver: set up the UDP pcb and configure the default server
 * (if DNS_SERVER_ADDRESS is set).
 */
void
dns_init(void)
{
 800a4b4:	b480      	push	{r7}
 800a4b6:	af00      	add	r7, sp, #0
#endif

#if DNS_LOCAL_HOSTLIST
  dns_init_local();
#endif
}
 800a4b8:	bf00      	nop
 800a4ba:	46bd      	mov	sp, r7
 800a4bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4c0:	4770      	bx	lr

0800a4c2 <dns_tmr>:
 * The DNS resolver client timer - handle retries and timeouts and should
 * be called every DNS_TMR_INTERVAL milliseconds (every second by default).
 */
void
dns_tmr(void)
{
 800a4c2:	b580      	push	{r7, lr}
 800a4c4:	af00      	add	r7, sp, #0
  LWIP_DEBUGF(DNS_DEBUG, ("dns_tmr: dns_check_entries\n"));
  dns_check_entries();
 800a4c6:	f000 faa9 	bl	800aa1c <dns_check_entries>
}
 800a4ca:	bf00      	nop
 800a4cc:	bd80      	pop	{r7, pc}
	...

0800a4d0 <dns_send>:
 * @param idx the DNS table entry index for which to send a request
 * @return ERR_OK if packet is sent; an err_t indicating the problem otherwise
 */
static err_t
dns_send(u8_t idx)
{
 800a4d0:	b580      	push	{r7, lr}
 800a4d2:	b090      	sub	sp, #64	; 0x40
 800a4d4:	af00      	add	r7, sp, #0
 800a4d6:	4603      	mov	r3, r0
 800a4d8:	71fb      	strb	r3, [r7, #7]
  struct pbuf *p;
  u16_t query_idx, copy_len;
  const char *hostname, *hostname_part;
  u8_t n;
  u8_t pcb_idx;
  struct dns_table_entry *entry = &dns_table[idx];
 800a4da:	79fa      	ldrb	r2, [r7, #7]
 800a4dc:	4613      	mov	r3, r2
 800a4de:	011b      	lsls	r3, r3, #4
 800a4e0:	4413      	add	r3, r2
 800a4e2:	011b      	lsls	r3, r3, #4
 800a4e4:	4a6c      	ldr	r2, [pc, #432]	; (800a698 <dns_send+0x1c8>)
 800a4e6:	4413      	add	r3, r2
 800a4e8:	633b      	str	r3, [r7, #48]	; 0x30

  LWIP_DEBUGF(DNS_DEBUG, ("dns_send: dns_servers[%"U16_F"] \"%s\": request\n",
                          (u16_t)(entry->server_idx), entry->name));
  LWIP_ASSERT("dns server out of array", entry->server_idx < DNS_MAX_SERVERS);
 800a4ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a4ec:	7adb      	ldrb	r3, [r3, #11]
 800a4ee:	2b01      	cmp	r3, #1
 800a4f0:	d906      	bls.n	800a500 <dns_send+0x30>
 800a4f2:	4b6a      	ldr	r3, [pc, #424]	; (800a69c <dns_send+0x1cc>)
 800a4f4:	f240 22fa 	movw	r2, #762	; 0x2fa
 800a4f8:	4969      	ldr	r1, [pc, #420]	; (800a6a0 <dns_send+0x1d0>)
 800a4fa:	486a      	ldr	r0, [pc, #424]	; (800a6a4 <dns_send+0x1d4>)
 800a4fc:	f00c f828 	bl	8016550 <iprintf>
  if (ip_addr_isany_val(dns_servers[entry->server_idx])
 800a500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a502:	7adb      	ldrb	r3, [r3, #11]
 800a504:	461a      	mov	r2, r3
 800a506:	4b68      	ldr	r3, [pc, #416]	; (800a6a8 <dns_send+0x1d8>)
 800a508:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d109      	bne.n	800a524 <dns_send+0x54>
      && !entry->is_mdns
#endif
     ) {
    /* DNS server not valid anymore, e.g. PPP netif has been shut down */
    /* call specified callback function if provided */
    dns_call_found(idx, NULL);
 800a510:	79fb      	ldrb	r3, [r7, #7]
 800a512:	2100      	movs	r1, #0
 800a514:	4618      	mov	r0, r3
 800a516:	f000 f8cb 	bl	800a6b0 <dns_call_found>
    /* flush this entry */
    entry->state = DNS_STATE_UNUSED;
 800a51a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a51c:	2200      	movs	r2, #0
 800a51e:	729a      	strb	r2, [r3, #10]
    return ERR_OK;
 800a520:	2300      	movs	r3, #0
 800a522:	e0b4      	b.n	800a68e <dns_send+0x1be>
  }

  /* if here, we have either a new query or a retry on a previous query to process */
  p = pbuf_alloc(PBUF_TRANSPORT, (u16_t)(SIZEOF_DNS_HDR + strlen(entry->name) + 2 +
 800a524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a526:	3310      	adds	r3, #16
 800a528:	4618      	mov	r0, r3
 800a52a:	f7f5 fe89 	bl	8000240 <strlen>
 800a52e:	4603      	mov	r3, r0
 800a530:	b29b      	uxth	r3, r3
 800a532:	3312      	adds	r3, #18
 800a534:	b29b      	uxth	r3, r3
 800a536:	f44f 7220 	mov.w	r2, #640	; 0x280
 800a53a:	4619      	mov	r1, r3
 800a53c:	2036      	movs	r0, #54	; 0x36
 800a53e:	f001 fb81 	bl	800bc44 <pbuf_alloc>
 800a542:	62f8      	str	r0, [r7, #44]	; 0x2c
                                         SIZEOF_DNS_QUERY), PBUF_RAM);
  if (p != NULL) {
 800a544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a546:	2b00      	cmp	r3, #0
 800a548:	f000 8095 	beq.w	800a676 <dns_send+0x1a6>
    const ip_addr_t *dst;
    u16_t dst_port;
    /* fill dns header */
    memset(&hdr, 0, SIZEOF_DNS_HDR);
 800a54c:	f107 0310 	add.w	r3, r7, #16
 800a550:	220c      	movs	r2, #12
 800a552:	2100      	movs	r1, #0
 800a554:	4618      	mov	r0, r3
 800a556:	f00b ff5e 	bl	8016416 <memset>
    hdr.id = lwip_htons(entry->txid);
 800a55a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a55c:	891b      	ldrh	r3, [r3, #8]
 800a55e:	4618      	mov	r0, r3
 800a560:	f7ff ff7a 	bl	800a458 <lwip_htons>
 800a564:	4603      	mov	r3, r0
 800a566:	823b      	strh	r3, [r7, #16]
    hdr.flags1 = DNS_FLAG1_RD;
 800a568:	2301      	movs	r3, #1
 800a56a:	74bb      	strb	r3, [r7, #18]
    hdr.numquestions = PP_HTONS(1);
 800a56c:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a570:	82bb      	strh	r3, [r7, #20]
    pbuf_take(p, &hdr, SIZEOF_DNS_HDR);
 800a572:	f107 0310 	add.w	r3, r7, #16
 800a576:	220c      	movs	r2, #12
 800a578:	4619      	mov	r1, r3
 800a57a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a57c:	f002 f8fa 	bl	800c774 <pbuf_take>
    hostname = entry->name;
 800a580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a582:	3310      	adds	r3, #16
 800a584:	63bb      	str	r3, [r7, #56]	; 0x38
    --hostname;
 800a586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a588:	3b01      	subs	r3, #1
 800a58a:	63bb      	str	r3, [r7, #56]	; 0x38

    /* convert hostname into suitable query format. */
    query_idx = SIZEOF_DNS_HDR;
 800a58c:	230c      	movs	r3, #12
 800a58e:	87bb      	strh	r3, [r7, #60]	; 0x3c
    do {
      ++hostname;
 800a590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a592:	3301      	adds	r3, #1
 800a594:	63bb      	str	r3, [r7, #56]	; 0x38
      hostname_part = hostname;
 800a596:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a598:	62bb      	str	r3, [r7, #40]	; 0x28
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800a59a:	2300      	movs	r3, #0
 800a59c:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800a5a0:	e007      	b.n	800a5b2 <dns_send+0xe2>
        ++n;
 800a5a2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5a6:	3301      	adds	r3, #1
 800a5a8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      for (n = 0; *hostname != '.' && *hostname != 0; ++hostname) {
 800a5ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5ae:	3301      	adds	r3, #1
 800a5b0:	63bb      	str	r3, [r7, #56]	; 0x38
 800a5b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5b4:	781b      	ldrb	r3, [r3, #0]
 800a5b6:	2b2e      	cmp	r3, #46	; 0x2e
 800a5b8:	d003      	beq.n	800a5c2 <dns_send+0xf2>
 800a5ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a5bc:	781b      	ldrb	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d1ef      	bne.n	800a5a2 <dns_send+0xd2>
      }
      copy_len = (u16_t)(hostname - hostname_part);
 800a5c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5c6:	1ad3      	subs	r3, r2, r3
 800a5c8:	84fb      	strh	r3, [r7, #38]	; 0x26
      if (query_idx + n + 1 > 0xFFFF) {
 800a5ca:	8fba      	ldrh	r2, [r7, #60]	; 0x3c
 800a5cc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5d0:	4413      	add	r3, r2
 800a5d2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	dc53      	bgt.n	800a682 <dns_send+0x1b2>
        /* u16_t overflow */
        goto overflow_return;
      }
      pbuf_put_at(p, query_idx, n);
 800a5da:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 800a5de:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5e0:	4619      	mov	r1, r3
 800a5e2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5e4:	f002 fa2d 	bl	800ca42 <pbuf_put_at>
      pbuf_take_at(p, hostname_part, copy_len, (u16_t)(query_idx + 1));
 800a5e8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a5ea:	3301      	adds	r3, #1
 800a5ec:	b29b      	uxth	r3, r3
 800a5ee:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800a5f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a5f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a5f4:	f002 f950 	bl	800c898 <pbuf_take_at>
      query_idx = (u16_t)(query_idx + n + 1);
 800a5f8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800a5fc:	b29a      	uxth	r2, r3
 800a5fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a600:	4413      	add	r3, r2
 800a602:	b29b      	uxth	r3, r3
 800a604:	3301      	adds	r3, #1
 800a606:	87bb      	strh	r3, [r7, #60]	; 0x3c
    } while (*hostname != 0);
 800a608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a60a:	781b      	ldrb	r3, [r3, #0]
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	d1bf      	bne.n	800a590 <dns_send+0xc0>
    pbuf_put_at(p, query_idx, 0);
 800a610:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a612:	2200      	movs	r2, #0
 800a614:	4619      	mov	r1, r3
 800a616:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a618:	f002 fa13 	bl	800ca42 <pbuf_put_at>
    query_idx++;
 800a61c:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a61e:	3301      	adds	r3, #1
 800a620:	87bb      	strh	r3, [r7, #60]	; 0x3c

    /* fill dns query */
    if (LWIP_DNS_ADDRTYPE_IS_IPV6(entry->reqaddrtype)) {
      qry.type = PP_HTONS(DNS_RRTYPE_AAAA);
    } else {
      qry.type = PP_HTONS(DNS_RRTYPE_A);
 800a622:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a626:	81bb      	strh	r3, [r7, #12]
    }
    qry.cls = PP_HTONS(DNS_RRCLASS_IN);
 800a628:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a62c:	81fb      	strh	r3, [r7, #14]
    pbuf_take_at(p, &qry, SIZEOF_DNS_QUERY, query_idx);
 800a62e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 800a630:	f107 010c 	add.w	r1, r7, #12
 800a634:	2204      	movs	r2, #4
 800a636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a638:	f002 f92e 	bl	800c898 <pbuf_take_at>

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
    pcb_idx = entry->pcb_idx;
 800a63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a63e:	7bdb      	ldrb	r3, [r3, #15]
 800a640:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
      }
#endif
    } else
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
    {
      dst_port = DNS_SERVER_PORT;
 800a644:	2335      	movs	r3, #53	; 0x35
 800a646:	847b      	strh	r3, [r7, #34]	; 0x22
      dst = &dns_servers[entry->server_idx];
 800a648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a64a:	7adb      	ldrb	r3, [r3, #11]
 800a64c:	009b      	lsls	r3, r3, #2
 800a64e:	4a16      	ldr	r2, [pc, #88]	; (800a6a8 <dns_send+0x1d8>)
 800a650:	4413      	add	r3, r2
 800a652:	61fb      	str	r3, [r7, #28]
    }
    err = udp_sendto(dns_pcbs[pcb_idx], p, dst, dst_port);
 800a654:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800a658:	4a14      	ldr	r2, [pc, #80]	; (800a6ac <dns_send+0x1dc>)
 800a65a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800a65e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a660:	69fa      	ldr	r2, [r7, #28]
 800a662:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a664:	f008 fde6 	bl	8013234 <udp_sendto>
 800a668:	4603      	mov	r3, r0
 800a66a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

    /* free pbuf */
    pbuf_free(p);
 800a66e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a670:	f001 fdcc 	bl	800c20c <pbuf_free>
 800a674:	e002      	b.n	800a67c <dns_send+0x1ac>
  } else {
    err = ERR_MEM;
 800a676:	23ff      	movs	r3, #255	; 0xff
 800a678:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  }

  return err;
 800a67c:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 800a680:	e005      	b.n	800a68e <dns_send+0x1be>
        goto overflow_return;
 800a682:	bf00      	nop
overflow_return:
  pbuf_free(p);
 800a684:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a686:	f001 fdc1 	bl	800c20c <pbuf_free>
  return ERR_VAL;
 800a68a:	f06f 0305 	mvn.w	r3, #5
}
 800a68e:	4618      	mov	r0, r3
 800a690:	3740      	adds	r7, #64	; 0x40
 800a692:	46bd      	mov	sp, r7
 800a694:	bd80      	pop	{r7, pc}
 800a696:	bf00      	nop
 800a698:	20008de0 	.word	0x20008de0
 800a69c:	08017ff8 	.word	0x08017ff8
 800a6a0:	08018028 	.word	0x08018028
 800a6a4:	08018040 	.word	0x08018040
 800a6a8:	20009250 	.word	0x20009250
 800a6ac:	20008dd0 	.word	0x20008dd0

0800a6b0 <dns_call_found>:
 * @param idx dns table index of the entry that is resolved or removed
 * @param addr IP address for the hostname (or NULL on error or memory shortage)
 */
static void
dns_call_found(u8_t idx, ip_addr_t *addr)
{
 800a6b0:	b590      	push	{r4, r7, lr}
 800a6b2:	b085      	sub	sp, #20
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	4603      	mov	r3, r0
 800a6b8:	6039      	str	r1, [r7, #0]
 800a6ba:	71fb      	strb	r3, [r7, #7]
    }
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_NO_MULTIPLE_OUTSTANDING) != 0)
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a6bc:	2300      	movs	r3, #0
 800a6be:	73fb      	strb	r3, [r7, #15]
 800a6c0:	e03d      	b.n	800a73e <dns_call_found+0x8e>
    if (dns_requests[i].found && (dns_requests[i].dns_table_idx == idx)) {
 800a6c2:	7bfa      	ldrb	r2, [r7, #15]
 800a6c4:	4957      	ldr	r1, [pc, #348]	; (800a824 <dns_call_found+0x174>)
 800a6c6:	4613      	mov	r3, r2
 800a6c8:	005b      	lsls	r3, r3, #1
 800a6ca:	4413      	add	r3, r2
 800a6cc:	009b      	lsls	r3, r3, #2
 800a6ce:	440b      	add	r3, r1
 800a6d0:	681b      	ldr	r3, [r3, #0]
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d030      	beq.n	800a738 <dns_call_found+0x88>
 800a6d6:	7bfa      	ldrb	r2, [r7, #15]
 800a6d8:	4952      	ldr	r1, [pc, #328]	; (800a824 <dns_call_found+0x174>)
 800a6da:	4613      	mov	r3, r2
 800a6dc:	005b      	lsls	r3, r3, #1
 800a6de:	4413      	add	r3, r2
 800a6e0:	009b      	lsls	r3, r3, #2
 800a6e2:	440b      	add	r3, r1
 800a6e4:	3308      	adds	r3, #8
 800a6e6:	781b      	ldrb	r3, [r3, #0]
 800a6e8:	79fa      	ldrb	r2, [r7, #7]
 800a6ea:	429a      	cmp	r2, r3
 800a6ec:	d124      	bne.n	800a738 <dns_call_found+0x88>
      (*dns_requests[i].found)(dns_table[idx].name, addr, dns_requests[i].arg);
 800a6ee:	7bfa      	ldrb	r2, [r7, #15]
 800a6f0:	494c      	ldr	r1, [pc, #304]	; (800a824 <dns_call_found+0x174>)
 800a6f2:	4613      	mov	r3, r2
 800a6f4:	005b      	lsls	r3, r3, #1
 800a6f6:	4413      	add	r3, r2
 800a6f8:	009b      	lsls	r3, r3, #2
 800a6fa:	440b      	add	r3, r1
 800a6fc:	681c      	ldr	r4, [r3, #0]
 800a6fe:	79fa      	ldrb	r2, [r7, #7]
 800a700:	4613      	mov	r3, r2
 800a702:	011b      	lsls	r3, r3, #4
 800a704:	4413      	add	r3, r2
 800a706:	011b      	lsls	r3, r3, #4
 800a708:	3310      	adds	r3, #16
 800a70a:	4a47      	ldr	r2, [pc, #284]	; (800a828 <dns_call_found+0x178>)
 800a70c:	1898      	adds	r0, r3, r2
 800a70e:	7bfa      	ldrb	r2, [r7, #15]
 800a710:	4944      	ldr	r1, [pc, #272]	; (800a824 <dns_call_found+0x174>)
 800a712:	4613      	mov	r3, r2
 800a714:	005b      	lsls	r3, r3, #1
 800a716:	4413      	add	r3, r2
 800a718:	009b      	lsls	r3, r3, #2
 800a71a:	440b      	add	r3, r1
 800a71c:	3304      	adds	r3, #4
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	461a      	mov	r2, r3
 800a722:	6839      	ldr	r1, [r7, #0]
 800a724:	47a0      	blx	r4
      /* flush this entry */
      dns_requests[i].found = NULL;
 800a726:	7bfa      	ldrb	r2, [r7, #15]
 800a728:	493e      	ldr	r1, [pc, #248]	; (800a824 <dns_call_found+0x174>)
 800a72a:	4613      	mov	r3, r2
 800a72c:	005b      	lsls	r3, r3, #1
 800a72e:	4413      	add	r3, r2
 800a730:	009b      	lsls	r3, r3, #2
 800a732:	440b      	add	r3, r1
 800a734:	2200      	movs	r2, #0
 800a736:	601a      	str	r2, [r3, #0]
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a738:	7bfb      	ldrb	r3, [r7, #15]
 800a73a:	3301      	adds	r3, #1
 800a73c:	73fb      	strb	r3, [r7, #15]
 800a73e:	7bfb      	ldrb	r3, [r7, #15]
 800a740:	2b03      	cmp	r3, #3
 800a742:	d9be      	bls.n	800a6c2 <dns_call_found+0x12>
  }
  dns_requests[idx].found = NULL;
#endif
#if ((LWIP_DNS_SECURE & LWIP_DNS_SECURE_RAND_SRC_PORT) != 0)
  /* close the pcb used unless other request are using it */
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a744:	2300      	movs	r3, #0
 800a746:	73fb      	strb	r3, [r7, #15]
 800a748:	e031      	b.n	800a7ae <dns_call_found+0xfe>
    if (i == idx) {
 800a74a:	7bfa      	ldrb	r2, [r7, #15]
 800a74c:	79fb      	ldrb	r3, [r7, #7]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d029      	beq.n	800a7a6 <dns_call_found+0xf6>
      continue; /* only check other requests */
    }
    if (dns_table[i].state == DNS_STATE_ASKING) {
 800a752:	7bfa      	ldrb	r2, [r7, #15]
 800a754:	4934      	ldr	r1, [pc, #208]	; (800a828 <dns_call_found+0x178>)
 800a756:	4613      	mov	r3, r2
 800a758:	011b      	lsls	r3, r3, #4
 800a75a:	4413      	add	r3, r2
 800a75c:	011b      	lsls	r3, r3, #4
 800a75e:	440b      	add	r3, r1
 800a760:	330a      	adds	r3, #10
 800a762:	781b      	ldrb	r3, [r3, #0]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d11f      	bne.n	800a7a8 <dns_call_found+0xf8>
      if (dns_table[i].pcb_idx == dns_table[idx].pcb_idx) {
 800a768:	7bfa      	ldrb	r2, [r7, #15]
 800a76a:	492f      	ldr	r1, [pc, #188]	; (800a828 <dns_call_found+0x178>)
 800a76c:	4613      	mov	r3, r2
 800a76e:	011b      	lsls	r3, r3, #4
 800a770:	4413      	add	r3, r2
 800a772:	011b      	lsls	r3, r3, #4
 800a774:	440b      	add	r3, r1
 800a776:	330f      	adds	r3, #15
 800a778:	7819      	ldrb	r1, [r3, #0]
 800a77a:	79fa      	ldrb	r2, [r7, #7]
 800a77c:	482a      	ldr	r0, [pc, #168]	; (800a828 <dns_call_found+0x178>)
 800a77e:	4613      	mov	r3, r2
 800a780:	011b      	lsls	r3, r3, #4
 800a782:	4413      	add	r3, r2
 800a784:	011b      	lsls	r3, r3, #4
 800a786:	4403      	add	r3, r0
 800a788:	330f      	adds	r3, #15
 800a78a:	781b      	ldrb	r3, [r3, #0]
 800a78c:	4299      	cmp	r1, r3
 800a78e:	d10b      	bne.n	800a7a8 <dns_call_found+0xf8>
        /* another request is still using the same pcb */
        dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800a790:	79fa      	ldrb	r2, [r7, #7]
 800a792:	4925      	ldr	r1, [pc, #148]	; (800a828 <dns_call_found+0x178>)
 800a794:	4613      	mov	r3, r2
 800a796:	011b      	lsls	r3, r3, #4
 800a798:	4413      	add	r3, r2
 800a79a:	011b      	lsls	r3, r3, #4
 800a79c:	440b      	add	r3, r1
 800a79e:	330f      	adds	r3, #15
 800a7a0:	2204      	movs	r2, #4
 800a7a2:	701a      	strb	r2, [r3, #0]
        break;
 800a7a4:	e006      	b.n	800a7b4 <dns_call_found+0x104>
      continue; /* only check other requests */
 800a7a6:	bf00      	nop
  for (i = 0; i < DNS_MAX_REQUESTS; i++) {
 800a7a8:	7bfb      	ldrb	r3, [r7, #15]
 800a7aa:	3301      	adds	r3, #1
 800a7ac:	73fb      	strb	r3, [r7, #15]
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	2b03      	cmp	r3, #3
 800a7b2:	d9ca      	bls.n	800a74a <dns_call_found+0x9a>
      }
    }
  }
  if (dns_table[idx].pcb_idx < DNS_MAX_SOURCE_PORTS) {
 800a7b4:	79fa      	ldrb	r2, [r7, #7]
 800a7b6:	491c      	ldr	r1, [pc, #112]	; (800a828 <dns_call_found+0x178>)
 800a7b8:	4613      	mov	r3, r2
 800a7ba:	011b      	lsls	r3, r3, #4
 800a7bc:	4413      	add	r3, r2
 800a7be:	011b      	lsls	r3, r3, #4
 800a7c0:	440b      	add	r3, r1
 800a7c2:	330f      	adds	r3, #15
 800a7c4:	781b      	ldrb	r3, [r3, #0]
 800a7c6:	2b03      	cmp	r3, #3
 800a7c8:	d827      	bhi.n	800a81a <dns_call_found+0x16a>
    /* if we come here, the pcb is not used any more and can be removed */
    udp_remove(dns_pcbs[dns_table[idx].pcb_idx]);
 800a7ca:	79fa      	ldrb	r2, [r7, #7]
 800a7cc:	4916      	ldr	r1, [pc, #88]	; (800a828 <dns_call_found+0x178>)
 800a7ce:	4613      	mov	r3, r2
 800a7d0:	011b      	lsls	r3, r3, #4
 800a7d2:	4413      	add	r3, r2
 800a7d4:	011b      	lsls	r3, r3, #4
 800a7d6:	440b      	add	r3, r1
 800a7d8:	330f      	adds	r3, #15
 800a7da:	781b      	ldrb	r3, [r3, #0]
 800a7dc:	461a      	mov	r2, r3
 800a7de:	4b13      	ldr	r3, [pc, #76]	; (800a82c <dns_call_found+0x17c>)
 800a7e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a7e4:	4618      	mov	r0, r3
 800a7e6:	f008 ff63 	bl	80136b0 <udp_remove>
    dns_pcbs[dns_table[idx].pcb_idx] = NULL;
 800a7ea:	79fa      	ldrb	r2, [r7, #7]
 800a7ec:	490e      	ldr	r1, [pc, #56]	; (800a828 <dns_call_found+0x178>)
 800a7ee:	4613      	mov	r3, r2
 800a7f0:	011b      	lsls	r3, r3, #4
 800a7f2:	4413      	add	r3, r2
 800a7f4:	011b      	lsls	r3, r3, #4
 800a7f6:	440b      	add	r3, r1
 800a7f8:	330f      	adds	r3, #15
 800a7fa:	781b      	ldrb	r3, [r3, #0]
 800a7fc:	4619      	mov	r1, r3
 800a7fe:	4b0b      	ldr	r3, [pc, #44]	; (800a82c <dns_call_found+0x17c>)
 800a800:	2200      	movs	r2, #0
 800a802:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
    dns_table[idx].pcb_idx = DNS_MAX_SOURCE_PORTS;
 800a806:	79fa      	ldrb	r2, [r7, #7]
 800a808:	4907      	ldr	r1, [pc, #28]	; (800a828 <dns_call_found+0x178>)
 800a80a:	4613      	mov	r3, r2
 800a80c:	011b      	lsls	r3, r3, #4
 800a80e:	4413      	add	r3, r2
 800a810:	011b      	lsls	r3, r3, #4
 800a812:	440b      	add	r3, r1
 800a814:	330f      	adds	r3, #15
 800a816:	2204      	movs	r2, #4
 800a818:	701a      	strb	r2, [r3, #0]
  }
#endif
}
 800a81a:	bf00      	nop
 800a81c:	3714      	adds	r7, #20
 800a81e:	46bd      	mov	sp, r7
 800a820:	bd90      	pop	{r4, r7, pc}
 800a822:	bf00      	nop
 800a824:	20009220 	.word	0x20009220
 800a828:	20008de0 	.word	0x20008de0
 800a82c:	20008dd0 	.word	0x20008dd0

0800a830 <dns_create_txid>:

/* Create a query transmission ID that is unique for all outstanding queries */
static u16_t
dns_create_txid(void)
{
 800a830:	b580      	push	{r7, lr}
 800a832:	b082      	sub	sp, #8
 800a834:	af00      	add	r7, sp, #0
  u16_t txid;
  u8_t i;

again:
  txid = (u16_t)DNS_RAND_TXID();
 800a836:	f00b ff19 	bl	801666c <rand>
 800a83a:	4603      	mov	r3, r0
 800a83c:	80bb      	strh	r3, [r7, #4]

  /* check whether the ID is unique */
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a83e:	2300      	movs	r3, #0
 800a840:	71fb      	strb	r3, [r7, #7]
 800a842:	e01a      	b.n	800a87a <dns_create_txid+0x4a>
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a844:	79fa      	ldrb	r2, [r7, #7]
 800a846:	4911      	ldr	r1, [pc, #68]	; (800a88c <dns_create_txid+0x5c>)
 800a848:	4613      	mov	r3, r2
 800a84a:	011b      	lsls	r3, r3, #4
 800a84c:	4413      	add	r3, r2
 800a84e:	011b      	lsls	r3, r3, #4
 800a850:	440b      	add	r3, r1
 800a852:	330a      	adds	r3, #10
 800a854:	781b      	ldrb	r3, [r3, #0]
 800a856:	2b02      	cmp	r3, #2
 800a858:	d10c      	bne.n	800a874 <dns_create_txid+0x44>
        (dns_table[i].txid == txid)) {
 800a85a:	79fa      	ldrb	r2, [r7, #7]
 800a85c:	490b      	ldr	r1, [pc, #44]	; (800a88c <dns_create_txid+0x5c>)
 800a85e:	4613      	mov	r3, r2
 800a860:	011b      	lsls	r3, r3, #4
 800a862:	4413      	add	r3, r2
 800a864:	011b      	lsls	r3, r3, #4
 800a866:	440b      	add	r3, r1
 800a868:	3308      	adds	r3, #8
 800a86a:	881b      	ldrh	r3, [r3, #0]
    if ((dns_table[i].state == DNS_STATE_ASKING) &&
 800a86c:	88ba      	ldrh	r2, [r7, #4]
 800a86e:	429a      	cmp	r2, r3
 800a870:	d100      	bne.n	800a874 <dns_create_txid+0x44>
      /* ID already used by another pending query */
      goto again;
 800a872:	e7e0      	b.n	800a836 <dns_create_txid+0x6>
  for (i = 0; i < DNS_TABLE_SIZE; i++) {
 800a874:	79fb      	ldrb	r3, [r7, #7]
 800a876:	3301      	adds	r3, #1
 800a878:	71fb      	strb	r3, [r7, #7]
 800a87a:	79fb      	ldrb	r3, [r7, #7]
 800a87c:	2b03      	cmp	r3, #3
 800a87e:	d9e1      	bls.n	800a844 <dns_create_txid+0x14>
    }
  }

  return txid;
 800a880:	88bb      	ldrh	r3, [r7, #4]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}
 800a88a:	bf00      	nop
 800a88c:	20008de0 	.word	0x20008de0

0800a890 <dns_backupserver_available>:
/**
 * Check whether there are other backup DNS servers available to try
 */
static u8_t
dns_backupserver_available(struct dns_table_entry *pentry)
{
 800a890:	b480      	push	{r7}
 800a892:	b085      	sub	sp, #20
 800a894:	af00      	add	r7, sp, #0
 800a896:	6078      	str	r0, [r7, #4]
  u8_t ret = 0;
 800a898:	2300      	movs	r3, #0
 800a89a:	73fb      	strb	r3, [r7, #15]

  if (pentry) {
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	2b00      	cmp	r3, #0
 800a8a0:	d00d      	beq.n	800a8be <dns_backupserver_available+0x2e>
    if ((pentry->server_idx + 1 < DNS_MAX_SERVERS) && !ip_addr_isany_val(dns_servers[pentry->server_idx + 1])) {
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	7adb      	ldrb	r3, [r3, #11]
 800a8a6:	2b00      	cmp	r3, #0
 800a8a8:	d109      	bne.n	800a8be <dns_backupserver_available+0x2e>
 800a8aa:	687b      	ldr	r3, [r7, #4]
 800a8ac:	7adb      	ldrb	r3, [r3, #11]
 800a8ae:	3301      	adds	r3, #1
 800a8b0:	4a06      	ldr	r2, [pc, #24]	; (800a8cc <dns_backupserver_available+0x3c>)
 800a8b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d001      	beq.n	800a8be <dns_backupserver_available+0x2e>
      ret = 1;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800a8be:	7bfb      	ldrb	r3, [r7, #15]
}
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	3714      	adds	r7, #20
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	20009250 	.word	0x20009250

0800a8d0 <dns_check_entry>:
 *
 * @param i index of the dns_table entry to check
 */
static void
dns_check_entry(u8_t i)
{
 800a8d0:	b580      	push	{r7, lr}
 800a8d2:	b084      	sub	sp, #16
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	4603      	mov	r3, r0
 800a8d8:	71fb      	strb	r3, [r7, #7]
  err_t err;
  struct dns_table_entry *entry = &dns_table[i];
 800a8da:	79fa      	ldrb	r2, [r7, #7]
 800a8dc:	4613      	mov	r3, r2
 800a8de:	011b      	lsls	r3, r3, #4
 800a8e0:	4413      	add	r3, r2
 800a8e2:	011b      	lsls	r3, r3, #4
 800a8e4:	4a48      	ldr	r2, [pc, #288]	; (800aa08 <dns_check_entry+0x138>)
 800a8e6:	4413      	add	r3, r2
 800a8e8:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("array index out of bounds", i < DNS_TABLE_SIZE);
 800a8ea:	79fb      	ldrb	r3, [r7, #7]
 800a8ec:	2b03      	cmp	r3, #3
 800a8ee:	d906      	bls.n	800a8fe <dns_check_entry+0x2e>
 800a8f0:	4b46      	ldr	r3, [pc, #280]	; (800aa0c <dns_check_entry+0x13c>)
 800a8f2:	f240 421c 	movw	r2, #1052	; 0x41c
 800a8f6:	4946      	ldr	r1, [pc, #280]	; (800aa10 <dns_check_entry+0x140>)
 800a8f8:	4846      	ldr	r0, [pc, #280]	; (800aa14 <dns_check_entry+0x144>)
 800a8fa:	f00b fe29 	bl	8016550 <iprintf>

  switch (entry->state) {
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	7a9b      	ldrb	r3, [r3, #10]
 800a902:	2b03      	cmp	r3, #3
 800a904:	d86f      	bhi.n	800a9e6 <dns_check_entry+0x116>
 800a906:	a201      	add	r2, pc, #4	; (adr r2, 800a90c <dns_check_entry+0x3c>)
 800a908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a90c:	0800a9f7 	.word	0x0800a9f7
 800a910:	0800a91d 	.word	0x0800a91d
 800a914:	0800a94f 	.word	0x0800a94f
 800a918:	0800a9c5 	.word	0x0800a9c5
    case DNS_STATE_NEW:
      /* initialize new entry */
      entry->txid = dns_create_txid();
 800a91c:	f7ff ff88 	bl	800a830 <dns_create_txid>
 800a920:	4603      	mov	r3, r0
 800a922:	461a      	mov	r2, r3
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	811a      	strh	r2, [r3, #8]
      entry->state = DNS_STATE_ASKING;
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	2202      	movs	r2, #2
 800a92c:	729a      	strb	r2, [r3, #10]
      entry->server_idx = 0;
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	2200      	movs	r2, #0
 800a932:	72da      	strb	r2, [r3, #11]
      entry->tmr = 1;
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	2201      	movs	r2, #1
 800a938:	731a      	strb	r2, [r3, #12]
      entry->retries = 0;
 800a93a:	68fb      	ldr	r3, [r7, #12]
 800a93c:	2200      	movs	r2, #0
 800a93e:	735a      	strb	r2, [r3, #13]

      /* send DNS packet for this entry */
      err = dns_send(i);
 800a940:	79fb      	ldrb	r3, [r7, #7]
 800a942:	4618      	mov	r0, r3
 800a944:	f7ff fdc4 	bl	800a4d0 <dns_send>
 800a948:	4603      	mov	r3, r0
 800a94a:	72fb      	strb	r3, [r7, #11]
      if (err != ERR_OK) {
        LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                    ("dns_send returned error: %s\n", lwip_strerr(err)));
      }
      break;
 800a94c:	e058      	b.n	800aa00 <dns_check_entry+0x130>
    case DNS_STATE_ASKING:
      if (--entry->tmr == 0) {
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	7b1b      	ldrb	r3, [r3, #12]
 800a952:	3b01      	subs	r3, #1
 800a954:	b2da      	uxtb	r2, r3
 800a956:	68fb      	ldr	r3, [r7, #12]
 800a958:	731a      	strb	r2, [r3, #12]
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	7b1b      	ldrb	r3, [r3, #12]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d14b      	bne.n	800a9fa <dns_check_entry+0x12a>
        if (++entry->retries == DNS_MAX_RETRIES) {
 800a962:	68fb      	ldr	r3, [r7, #12]
 800a964:	7b5b      	ldrb	r3, [r3, #13]
 800a966:	3301      	adds	r3, #1
 800a968:	b2da      	uxtb	r2, r3
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	735a      	strb	r2, [r3, #13]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	7b5b      	ldrb	r3, [r3, #13]
 800a972:	2b04      	cmp	r3, #4
 800a974:	d11b      	bne.n	800a9ae <dns_check_entry+0xde>
          if (dns_backupserver_available(entry)
 800a976:	68f8      	ldr	r0, [r7, #12]
 800a978:	f7ff ff8a 	bl	800a890 <dns_backupserver_available>
 800a97c:	4603      	mov	r3, r0
 800a97e:	2b00      	cmp	r3, #0
 800a980:	d00c      	beq.n	800a99c <dns_check_entry+0xcc>
#if LWIP_DNS_SUPPORT_MDNS_QUERIES
              && !entry->is_mdns
#endif /* LWIP_DNS_SUPPORT_MDNS_QUERIES */
             ) {
            /* change of server */
            entry->server_idx++;
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	7adb      	ldrb	r3, [r3, #11]
 800a986:	3301      	adds	r3, #1
 800a988:	b2da      	uxtb	r2, r3
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	72da      	strb	r2, [r3, #11]
            entry->tmr = 1;
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	2201      	movs	r2, #1
 800a992:	731a      	strb	r2, [r3, #12]
            entry->retries = 0;
 800a994:	68fb      	ldr	r3, [r7, #12]
 800a996:	2200      	movs	r2, #0
 800a998:	735a      	strb	r2, [r3, #13]
 800a99a:	e00c      	b.n	800a9b6 <dns_check_entry+0xe6>
          } else {
            LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": timeout\n", entry->name));
            /* call specified callback function if provided */
            dns_call_found(i, NULL);
 800a99c:	79fb      	ldrb	r3, [r7, #7]
 800a99e:	2100      	movs	r1, #0
 800a9a0:	4618      	mov	r0, r3
 800a9a2:	f7ff fe85 	bl	800a6b0 <dns_call_found>
            /* flush this entry */
            entry->state = DNS_STATE_UNUSED;
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	2200      	movs	r2, #0
 800a9aa:	729a      	strb	r2, [r3, #10]
            break;
 800a9ac:	e028      	b.n	800aa00 <dns_check_entry+0x130>
          }
        } else {
          /* wait longer for the next retry */
          entry->tmr = entry->retries;
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	7b5a      	ldrb	r2, [r3, #13]
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	731a      	strb	r2, [r3, #12]
        }

        /* send DNS packet for this entry */
        err = dns_send(i);
 800a9b6:	79fb      	ldrb	r3, [r7, #7]
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fd89 	bl	800a4d0 <dns_send>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	72fb      	strb	r3, [r7, #11]
        if (err != ERR_OK) {
          LWIP_DEBUGF(DNS_DEBUG | LWIP_DBG_LEVEL_WARNING,
                      ("dns_send returned error: %s\n", lwip_strerr(err)));
        }
      }
      break;
 800a9c2:	e01a      	b.n	800a9fa <dns_check_entry+0x12a>
    case DNS_STATE_DONE:
      /* if the time to live is nul */
      if ((entry->ttl == 0) || (--entry->ttl == 0)) {
 800a9c4:	68fb      	ldr	r3, [r7, #12]
 800a9c6:	681b      	ldr	r3, [r3, #0]
 800a9c8:	2b00      	cmp	r3, #0
 800a9ca:	d008      	beq.n	800a9de <dns_check_entry+0x10e>
 800a9cc:	68fb      	ldr	r3, [r7, #12]
 800a9ce:	681b      	ldr	r3, [r3, #0]
 800a9d0:	1e5a      	subs	r2, r3, #1
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	601a      	str	r2, [r3, #0]
 800a9d6:	68fb      	ldr	r3, [r7, #12]
 800a9d8:	681b      	ldr	r3, [r3, #0]
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	d10f      	bne.n	800a9fe <dns_check_entry+0x12e>
        LWIP_DEBUGF(DNS_DEBUG, ("dns_check_entry: \"%s\": flush\n", entry->name));
        /* flush this entry, there cannot be any related pending entries in this state */
        entry->state = DNS_STATE_UNUSED;
 800a9de:	68fb      	ldr	r3, [r7, #12]
 800a9e0:	2200      	movs	r2, #0
 800a9e2:	729a      	strb	r2, [r3, #10]
      }
      break;
 800a9e4:	e00b      	b.n	800a9fe <dns_check_entry+0x12e>
    case DNS_STATE_UNUSED:
      /* nothing to do */
      break;
    default:
      LWIP_ASSERT("unknown dns_table entry state:", 0);
 800a9e6:	4b09      	ldr	r3, [pc, #36]	; (800aa0c <dns_check_entry+0x13c>)
 800a9e8:	f240 425b 	movw	r2, #1115	; 0x45b
 800a9ec:	490a      	ldr	r1, [pc, #40]	; (800aa18 <dns_check_entry+0x148>)
 800a9ee:	4809      	ldr	r0, [pc, #36]	; (800aa14 <dns_check_entry+0x144>)
 800a9f0:	f00b fdae 	bl	8016550 <iprintf>
      break;
 800a9f4:	e004      	b.n	800aa00 <dns_check_entry+0x130>
      break;
 800a9f6:	bf00      	nop
 800a9f8:	e002      	b.n	800aa00 <dns_check_entry+0x130>
      break;
 800a9fa:	bf00      	nop
 800a9fc:	e000      	b.n	800aa00 <dns_check_entry+0x130>
      break;
 800a9fe:	bf00      	nop
  }
}
 800aa00:	bf00      	nop
 800aa02:	3710      	adds	r7, #16
 800aa04:	46bd      	mov	sp, r7
 800aa06:	bd80      	pop	{r7, pc}
 800aa08:	20008de0 	.word	0x20008de0
 800aa0c:	08017ff8 	.word	0x08017ff8
 800aa10:	08018068 	.word	0x08018068
 800aa14:	08018040 	.word	0x08018040
 800aa18:	08018084 	.word	0x08018084

0800aa1c <dns_check_entries>:
/**
 * Call dns_check_entry for each entry in dns_table - check all entries.
 */
static void
dns_check_entries(void)
{
 800aa1c:	b580      	push	{r7, lr}
 800aa1e:	b082      	sub	sp, #8
 800aa20:	af00      	add	r7, sp, #0
  u8_t i;

  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800aa22:	2300      	movs	r3, #0
 800aa24:	71fb      	strb	r3, [r7, #7]
 800aa26:	e006      	b.n	800aa36 <dns_check_entries+0x1a>
    dns_check_entry(i);
 800aa28:	79fb      	ldrb	r3, [r7, #7]
 800aa2a:	4618      	mov	r0, r3
 800aa2c:	f7ff ff50 	bl	800a8d0 <dns_check_entry>
  for (i = 0; i < DNS_TABLE_SIZE; ++i) {
 800aa30:	79fb      	ldrb	r3, [r7, #7]
 800aa32:	3301      	adds	r3, #1
 800aa34:	71fb      	strb	r3, [r7, #7]
 800aa36:	79fb      	ldrb	r3, [r7, #7]
 800aa38:	2b03      	cmp	r3, #3
 800aa3a:	d9f5      	bls.n	800aa28 <dns_check_entries+0xc>
  }
}
 800aa3c:	bf00      	nop
 800aa3e:	bf00      	nop
 800aa40:	3708      	adds	r7, #8
 800aa42:	46bd      	mov	sp, r7
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	b082      	sub	sp, #8
 800aa4a:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800aa4c:	2300      	movs	r3, #0
 800aa4e:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800aa50:	f00b fb1c 	bl	801608c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800aa54:	f000 f8d6 	bl	800ac04 <mem_init>
  memp_init();
 800aa58:	f000 fc5a 	bl	800b310 <memp_init>
  pbuf_init();
  netif_init();
 800aa5c:	f000 fd66 	bl	800b52c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800aa60:	f008 fa26 	bl	8012eb0 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800aa64:	f002 f810 	bl	800ca88 <tcp_init>
#endif /* LWIP_TCP */
#if LWIP_IGMP
  igmp_init();
#endif /* LWIP_IGMP */
#if LWIP_DNS
  dns_init();
 800aa68:	f7ff fd24 	bl	800a4b4 <dns_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800aa6c:	f008 f92c 	bl	8012cc8 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800aa70:	bf00      	nop
 800aa72:	3708      	adds	r7, #8
 800aa74:	46bd      	mov	sp, r7
 800aa76:	bd80      	pop	{r7, pc}

0800aa78 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800aa78:	b480      	push	{r7}
 800aa7a:	b083      	sub	sp, #12
 800aa7c:	af00      	add	r7, sp, #0
 800aa7e:	4603      	mov	r3, r0
 800aa80:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800aa82:	4b05      	ldr	r3, [pc, #20]	; (800aa98 <ptr_to_mem+0x20>)
 800aa84:	681a      	ldr	r2, [r3, #0]
 800aa86:	88fb      	ldrh	r3, [r7, #6]
 800aa88:	4413      	add	r3, r2
}
 800aa8a:	4618      	mov	r0, r3
 800aa8c:	370c      	adds	r7, #12
 800aa8e:	46bd      	mov	sp, r7
 800aa90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa94:	4770      	bx	lr
 800aa96:	bf00      	nop
 800aa98:	200098c4 	.word	0x200098c4

0800aa9c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800aa9c:	b480      	push	{r7}
 800aa9e:	b083      	sub	sp, #12
 800aaa0:	af00      	add	r7, sp, #0
 800aaa2:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800aaa4:	4b05      	ldr	r3, [pc, #20]	; (800aabc <mem_to_ptr+0x20>)
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	687a      	ldr	r2, [r7, #4]
 800aaaa:	1ad3      	subs	r3, r2, r3
 800aaac:	b29b      	uxth	r3, r3
}
 800aaae:	4618      	mov	r0, r3
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr
 800aaba:	bf00      	nop
 800aabc:	200098c4 	.word	0x200098c4

0800aac0 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800aac0:	b590      	push	{r4, r7, lr}
 800aac2:	b085      	sub	sp, #20
 800aac4:	af00      	add	r7, sp, #0
 800aac6:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800aac8:	4b45      	ldr	r3, [pc, #276]	; (800abe0 <plug_holes+0x120>)
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	687a      	ldr	r2, [r7, #4]
 800aace:	429a      	cmp	r2, r3
 800aad0:	d206      	bcs.n	800aae0 <plug_holes+0x20>
 800aad2:	4b44      	ldr	r3, [pc, #272]	; (800abe4 <plug_holes+0x124>)
 800aad4:	f240 12df 	movw	r2, #479	; 0x1df
 800aad8:	4943      	ldr	r1, [pc, #268]	; (800abe8 <plug_holes+0x128>)
 800aada:	4844      	ldr	r0, [pc, #272]	; (800abec <plug_holes+0x12c>)
 800aadc:	f00b fd38 	bl	8016550 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800aae0:	4b43      	ldr	r3, [pc, #268]	; (800abf0 <plug_holes+0x130>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	687a      	ldr	r2, [r7, #4]
 800aae6:	429a      	cmp	r2, r3
 800aae8:	d306      	bcc.n	800aaf8 <plug_holes+0x38>
 800aaea:	4b3e      	ldr	r3, [pc, #248]	; (800abe4 <plug_holes+0x124>)
 800aaec:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800aaf0:	4940      	ldr	r1, [pc, #256]	; (800abf4 <plug_holes+0x134>)
 800aaf2:	483e      	ldr	r0, [pc, #248]	; (800abec <plug_holes+0x12c>)
 800aaf4:	f00b fd2c 	bl	8016550 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	791b      	ldrb	r3, [r3, #4]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d006      	beq.n	800ab0e <plug_holes+0x4e>
 800ab00:	4b38      	ldr	r3, [pc, #224]	; (800abe4 <plug_holes+0x124>)
 800ab02:	f240 12e1 	movw	r2, #481	; 0x1e1
 800ab06:	493c      	ldr	r1, [pc, #240]	; (800abf8 <plug_holes+0x138>)
 800ab08:	4838      	ldr	r0, [pc, #224]	; (800abec <plug_holes+0x12c>)
 800ab0a:	f00b fd21 	bl	8016550 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	881b      	ldrh	r3, [r3, #0]
 800ab12:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab16:	d906      	bls.n	800ab26 <plug_holes+0x66>
 800ab18:	4b32      	ldr	r3, [pc, #200]	; (800abe4 <plug_holes+0x124>)
 800ab1a:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800ab1e:	4937      	ldr	r1, [pc, #220]	; (800abfc <plug_holes+0x13c>)
 800ab20:	4832      	ldr	r0, [pc, #200]	; (800abec <plug_holes+0x12c>)
 800ab22:	f00b fd15 	bl	8016550 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	881b      	ldrh	r3, [r3, #0]
 800ab2a:	4618      	mov	r0, r3
 800ab2c:	f7ff ffa4 	bl	800aa78 <ptr_to_mem>
 800ab30:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800ab32:	687a      	ldr	r2, [r7, #4]
 800ab34:	68fb      	ldr	r3, [r7, #12]
 800ab36:	429a      	cmp	r2, r3
 800ab38:	d024      	beq.n	800ab84 <plug_holes+0xc4>
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	791b      	ldrb	r3, [r3, #4]
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d120      	bne.n	800ab84 <plug_holes+0xc4>
 800ab42:	4b2b      	ldr	r3, [pc, #172]	; (800abf0 <plug_holes+0x130>)
 800ab44:	681b      	ldr	r3, [r3, #0]
 800ab46:	68fa      	ldr	r2, [r7, #12]
 800ab48:	429a      	cmp	r2, r3
 800ab4a:	d01b      	beq.n	800ab84 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800ab4c:	4b2c      	ldr	r3, [pc, #176]	; (800ac00 <plug_holes+0x140>)
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	68fa      	ldr	r2, [r7, #12]
 800ab52:	429a      	cmp	r2, r3
 800ab54:	d102      	bne.n	800ab5c <plug_holes+0x9c>
      lfree = mem;
 800ab56:	4a2a      	ldr	r2, [pc, #168]	; (800ac00 <plug_holes+0x140>)
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	881a      	ldrh	r2, [r3, #0]
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800ab64:	68fb      	ldr	r3, [r7, #12]
 800ab66:	881b      	ldrh	r3, [r3, #0]
 800ab68:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ab6c:	d00a      	beq.n	800ab84 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	881b      	ldrh	r3, [r3, #0]
 800ab72:	4618      	mov	r0, r3
 800ab74:	f7ff ff80 	bl	800aa78 <ptr_to_mem>
 800ab78:	4604      	mov	r4, r0
 800ab7a:	6878      	ldr	r0, [r7, #4]
 800ab7c:	f7ff ff8e 	bl	800aa9c <mem_to_ptr>
 800ab80:	4603      	mov	r3, r0
 800ab82:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800ab84:	687b      	ldr	r3, [r7, #4]
 800ab86:	885b      	ldrh	r3, [r3, #2]
 800ab88:	4618      	mov	r0, r3
 800ab8a:	f7ff ff75 	bl	800aa78 <ptr_to_mem>
 800ab8e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800ab90:	68ba      	ldr	r2, [r7, #8]
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	429a      	cmp	r2, r3
 800ab96:	d01f      	beq.n	800abd8 <plug_holes+0x118>
 800ab98:	68bb      	ldr	r3, [r7, #8]
 800ab9a:	791b      	ldrb	r3, [r3, #4]
 800ab9c:	2b00      	cmp	r3, #0
 800ab9e:	d11b      	bne.n	800abd8 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800aba0:	4b17      	ldr	r3, [pc, #92]	; (800ac00 <plug_holes+0x140>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	687a      	ldr	r2, [r7, #4]
 800aba6:	429a      	cmp	r2, r3
 800aba8:	d102      	bne.n	800abb0 <plug_holes+0xf0>
      lfree = pmem;
 800abaa:	4a15      	ldr	r2, [pc, #84]	; (800ac00 <plug_holes+0x140>)
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800abb0:	687b      	ldr	r3, [r7, #4]
 800abb2:	881a      	ldrh	r2, [r3, #0]
 800abb4:	68bb      	ldr	r3, [r7, #8]
 800abb6:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	881b      	ldrh	r3, [r3, #0]
 800abbc:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800abc0:	d00a      	beq.n	800abd8 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	881b      	ldrh	r3, [r3, #0]
 800abc6:	4618      	mov	r0, r3
 800abc8:	f7ff ff56 	bl	800aa78 <ptr_to_mem>
 800abcc:	4604      	mov	r4, r0
 800abce:	68b8      	ldr	r0, [r7, #8]
 800abd0:	f7ff ff64 	bl	800aa9c <mem_to_ptr>
 800abd4:	4603      	mov	r3, r0
 800abd6:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800abd8:	bf00      	nop
 800abda:	3714      	adds	r7, #20
 800abdc:	46bd      	mov	sp, r7
 800abde:	bd90      	pop	{r4, r7, pc}
 800abe0:	200098c4 	.word	0x200098c4
 800abe4:	080180a4 	.word	0x080180a4
 800abe8:	080180d4 	.word	0x080180d4
 800abec:	080180ec 	.word	0x080180ec
 800abf0:	200098c8 	.word	0x200098c8
 800abf4:	08018114 	.word	0x08018114
 800abf8:	08018130 	.word	0x08018130
 800abfc:	0801814c 	.word	0x0801814c
 800ac00:	200098d0 	.word	0x200098d0

0800ac04 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800ac04:	b580      	push	{r7, lr}
 800ac06:	b082      	sub	sp, #8
 800ac08:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800ac0a:	4b1f      	ldr	r3, [pc, #124]	; (800ac88 <mem_init+0x84>)
 800ac0c:	3303      	adds	r3, #3
 800ac0e:	f023 0303 	bic.w	r3, r3, #3
 800ac12:	461a      	mov	r2, r3
 800ac14:	4b1d      	ldr	r3, [pc, #116]	; (800ac8c <mem_init+0x88>)
 800ac16:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800ac18:	4b1c      	ldr	r3, [pc, #112]	; (800ac8c <mem_init+0x88>)
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac24:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	2200      	movs	r2, #0
 800ac30:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800ac32:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 800ac36:	f7ff ff1f 	bl	800aa78 <ptr_to_mem>
 800ac3a:	4603      	mov	r3, r0
 800ac3c:	4a14      	ldr	r2, [pc, #80]	; (800ac90 <mem_init+0x8c>)
 800ac3e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800ac40:	4b13      	ldr	r3, [pc, #76]	; (800ac90 <mem_init+0x8c>)
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	2201      	movs	r2, #1
 800ac46:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800ac48:	4b11      	ldr	r3, [pc, #68]	; (800ac90 <mem_init+0x8c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac50:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800ac52:	4b0f      	ldr	r3, [pc, #60]	; (800ac90 <mem_init+0x8c>)
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 800ac5a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800ac5c:	4b0b      	ldr	r3, [pc, #44]	; (800ac8c <mem_init+0x88>)
 800ac5e:	681b      	ldr	r3, [r3, #0]
 800ac60:	4a0c      	ldr	r2, [pc, #48]	; (800ac94 <mem_init+0x90>)
 800ac62:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800ac64:	480c      	ldr	r0, [pc, #48]	; (800ac98 <mem_init+0x94>)
 800ac66:	f00b fa1f 	bl	80160a8 <sys_mutex_new>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d006      	beq.n	800ac7e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800ac70:	4b0a      	ldr	r3, [pc, #40]	; (800ac9c <mem_init+0x98>)
 800ac72:	f240 221f 	movw	r2, #543	; 0x21f
 800ac76:	490a      	ldr	r1, [pc, #40]	; (800aca0 <mem_init+0x9c>)
 800ac78:	480a      	ldr	r0, [pc, #40]	; (800aca4 <mem_init+0xa0>)
 800ac7a:	f00b fc69 	bl	8016550 <iprintf>
  }
}
 800ac7e:	bf00      	nop
 800ac80:	3708      	adds	r7, #8
 800ac82:	46bd      	mov	sp, r7
 800ac84:	bd80      	pop	{r7, pc}
 800ac86:	bf00      	nop
 800ac88:	20009270 	.word	0x20009270
 800ac8c:	200098c4 	.word	0x200098c4
 800ac90:	200098c8 	.word	0x200098c8
 800ac94:	200098d0 	.word	0x200098d0
 800ac98:	200098cc 	.word	0x200098cc
 800ac9c:	080180a4 	.word	0x080180a4
 800aca0:	08018178 	.word	0x08018178
 800aca4:	080180ec 	.word	0x080180ec

0800aca8 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800aca8:	b580      	push	{r7, lr}
 800acaa:	b086      	sub	sp, #24
 800acac:	af00      	add	r7, sp, #0
 800acae:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800acb0:	6878      	ldr	r0, [r7, #4]
 800acb2:	f7ff fef3 	bl	800aa9c <mem_to_ptr>
 800acb6:	4603      	mov	r3, r0
 800acb8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800acba:	687b      	ldr	r3, [r7, #4]
 800acbc:	881b      	ldrh	r3, [r3, #0]
 800acbe:	4618      	mov	r0, r3
 800acc0:	f7ff feda 	bl	800aa78 <ptr_to_mem>
 800acc4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	885b      	ldrh	r3, [r3, #2]
 800acca:	4618      	mov	r0, r3
 800accc:	f7ff fed4 	bl	800aa78 <ptr_to_mem>
 800acd0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	881b      	ldrh	r3, [r3, #0]
 800acd6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800acda:	d818      	bhi.n	800ad0e <mem_link_valid+0x66>
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	885b      	ldrh	r3, [r3, #2]
 800ace0:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ace4:	d813      	bhi.n	800ad0e <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800acea:	8afa      	ldrh	r2, [r7, #22]
 800acec:	429a      	cmp	r2, r3
 800acee:	d004      	beq.n	800acfa <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800acf0:	68fb      	ldr	r3, [r7, #12]
 800acf2:	881b      	ldrh	r3, [r3, #0]
 800acf4:	8afa      	ldrh	r2, [r7, #22]
 800acf6:	429a      	cmp	r2, r3
 800acf8:	d109      	bne.n	800ad0e <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800acfa:	4b08      	ldr	r3, [pc, #32]	; (800ad1c <mem_link_valid+0x74>)
 800acfc:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800acfe:	693a      	ldr	r2, [r7, #16]
 800ad00:	429a      	cmp	r2, r3
 800ad02:	d006      	beq.n	800ad12 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800ad04:	693b      	ldr	r3, [r7, #16]
 800ad06:	885b      	ldrh	r3, [r3, #2]
 800ad08:	8afa      	ldrh	r2, [r7, #22]
 800ad0a:	429a      	cmp	r2, r3
 800ad0c:	d001      	beq.n	800ad12 <mem_link_valid+0x6a>
    return 0;
 800ad0e:	2300      	movs	r3, #0
 800ad10:	e000      	b.n	800ad14 <mem_link_valid+0x6c>
  }
  return 1;
 800ad12:	2301      	movs	r3, #1
}
 800ad14:	4618      	mov	r0, r3
 800ad16:	3718      	adds	r7, #24
 800ad18:	46bd      	mov	sp, r7
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	200098c8 	.word	0x200098c8

0800ad20 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800ad20:	b580      	push	{r7, lr}
 800ad22:	b088      	sub	sp, #32
 800ad24:	af00      	add	r7, sp, #0
 800ad26:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	d070      	beq.n	800ae10 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	f003 0303 	and.w	r3, r3, #3
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d00d      	beq.n	800ad54 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800ad38:	4b37      	ldr	r3, [pc, #220]	; (800ae18 <mem_free+0xf8>)
 800ad3a:	f240 2273 	movw	r2, #627	; 0x273
 800ad3e:	4937      	ldr	r1, [pc, #220]	; (800ae1c <mem_free+0xfc>)
 800ad40:	4837      	ldr	r0, [pc, #220]	; (800ae20 <mem_free+0x100>)
 800ad42:	f00b fc05 	bl	8016550 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad46:	f00b fa0d 	bl	8016164 <sys_arch_protect>
 800ad4a:	60f8      	str	r0, [r7, #12]
 800ad4c:	68f8      	ldr	r0, [r7, #12]
 800ad4e:	f00b fa17 	bl	8016180 <sys_arch_unprotect>
    return;
 800ad52:	e05e      	b.n	800ae12 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	3b08      	subs	r3, #8
 800ad58:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800ad5a:	4b32      	ldr	r3, [pc, #200]	; (800ae24 <mem_free+0x104>)
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	69fa      	ldr	r2, [r7, #28]
 800ad60:	429a      	cmp	r2, r3
 800ad62:	d306      	bcc.n	800ad72 <mem_free+0x52>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	f103 020c 	add.w	r2, r3, #12
 800ad6a:	4b2f      	ldr	r3, [pc, #188]	; (800ae28 <mem_free+0x108>)
 800ad6c:	681b      	ldr	r3, [r3, #0]
 800ad6e:	429a      	cmp	r2, r3
 800ad70:	d90d      	bls.n	800ad8e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800ad72:	4b29      	ldr	r3, [pc, #164]	; (800ae18 <mem_free+0xf8>)
 800ad74:	f240 227f 	movw	r2, #639	; 0x27f
 800ad78:	492c      	ldr	r1, [pc, #176]	; (800ae2c <mem_free+0x10c>)
 800ad7a:	4829      	ldr	r0, [pc, #164]	; (800ae20 <mem_free+0x100>)
 800ad7c:	f00b fbe8 	bl	8016550 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800ad80:	f00b f9f0 	bl	8016164 <sys_arch_protect>
 800ad84:	6138      	str	r0, [r7, #16]
 800ad86:	6938      	ldr	r0, [r7, #16]
 800ad88:	f00b f9fa 	bl	8016180 <sys_arch_unprotect>
    return;
 800ad8c:	e041      	b.n	800ae12 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800ad8e:	4828      	ldr	r0, [pc, #160]	; (800ae30 <mem_free+0x110>)
 800ad90:	f00b f9a6 	bl	80160e0 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800ad94:	69fb      	ldr	r3, [r7, #28]
 800ad96:	791b      	ldrb	r3, [r3, #4]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d110      	bne.n	800adbe <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800ad9c:	4b1e      	ldr	r3, [pc, #120]	; (800ae18 <mem_free+0xf8>)
 800ad9e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800ada2:	4924      	ldr	r1, [pc, #144]	; (800ae34 <mem_free+0x114>)
 800ada4:	481e      	ldr	r0, [pc, #120]	; (800ae20 <mem_free+0x100>)
 800ada6:	f00b fbd3 	bl	8016550 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800adaa:	4821      	ldr	r0, [pc, #132]	; (800ae30 <mem_free+0x110>)
 800adac:	f00b f9a7 	bl	80160fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800adb0:	f00b f9d8 	bl	8016164 <sys_arch_protect>
 800adb4:	6178      	str	r0, [r7, #20]
 800adb6:	6978      	ldr	r0, [r7, #20]
 800adb8:	f00b f9e2 	bl	8016180 <sys_arch_unprotect>
    return;
 800adbc:	e029      	b.n	800ae12 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800adbe:	69f8      	ldr	r0, [r7, #28]
 800adc0:	f7ff ff72 	bl	800aca8 <mem_link_valid>
 800adc4:	4603      	mov	r3, r0
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d110      	bne.n	800adec <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800adca:	4b13      	ldr	r3, [pc, #76]	; (800ae18 <mem_free+0xf8>)
 800adcc:	f240 2295 	movw	r2, #661	; 0x295
 800add0:	4919      	ldr	r1, [pc, #100]	; (800ae38 <mem_free+0x118>)
 800add2:	4813      	ldr	r0, [pc, #76]	; (800ae20 <mem_free+0x100>)
 800add4:	f00b fbbc 	bl	8016550 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800add8:	4815      	ldr	r0, [pc, #84]	; (800ae30 <mem_free+0x110>)
 800adda:	f00b f990 	bl	80160fe <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800adde:	f00b f9c1 	bl	8016164 <sys_arch_protect>
 800ade2:	61b8      	str	r0, [r7, #24]
 800ade4:	69b8      	ldr	r0, [r7, #24]
 800ade6:	f00b f9cb 	bl	8016180 <sys_arch_unprotect>
    return;
 800adea:	e012      	b.n	800ae12 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800adec:	69fb      	ldr	r3, [r7, #28]
 800adee:	2200      	movs	r2, #0
 800adf0:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800adf2:	4b12      	ldr	r3, [pc, #72]	; (800ae3c <mem_free+0x11c>)
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	69fa      	ldr	r2, [r7, #28]
 800adf8:	429a      	cmp	r2, r3
 800adfa:	d202      	bcs.n	800ae02 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800adfc:	4a0f      	ldr	r2, [pc, #60]	; (800ae3c <mem_free+0x11c>)
 800adfe:	69fb      	ldr	r3, [r7, #28]
 800ae00:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800ae02:	69f8      	ldr	r0, [r7, #28]
 800ae04:	f7ff fe5c 	bl	800aac0 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800ae08:	4809      	ldr	r0, [pc, #36]	; (800ae30 <mem_free+0x110>)
 800ae0a:	f00b f978 	bl	80160fe <sys_mutex_unlock>
 800ae0e:	e000      	b.n	800ae12 <mem_free+0xf2>
    return;
 800ae10:	bf00      	nop
}
 800ae12:	3720      	adds	r7, #32
 800ae14:	46bd      	mov	sp, r7
 800ae16:	bd80      	pop	{r7, pc}
 800ae18:	080180a4 	.word	0x080180a4
 800ae1c:	08018194 	.word	0x08018194
 800ae20:	080180ec 	.word	0x080180ec
 800ae24:	200098c4 	.word	0x200098c4
 800ae28:	200098c8 	.word	0x200098c8
 800ae2c:	080181b8 	.word	0x080181b8
 800ae30:	200098cc 	.word	0x200098cc
 800ae34:	080181d4 	.word	0x080181d4
 800ae38:	080181fc 	.word	0x080181fc
 800ae3c:	200098d0 	.word	0x200098d0

0800ae40 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800ae40:	b580      	push	{r7, lr}
 800ae42:	b088      	sub	sp, #32
 800ae44:	af00      	add	r7, sp, #0
 800ae46:	6078      	str	r0, [r7, #4]
 800ae48:	460b      	mov	r3, r1
 800ae4a:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800ae4c:	887b      	ldrh	r3, [r7, #2]
 800ae4e:	3303      	adds	r3, #3
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	f023 0303 	bic.w	r3, r3, #3
 800ae56:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800ae58:	8bfb      	ldrh	r3, [r7, #30]
 800ae5a:	2b0b      	cmp	r3, #11
 800ae5c:	d801      	bhi.n	800ae62 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800ae5e:	230c      	movs	r3, #12
 800ae60:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800ae62:	8bfb      	ldrh	r3, [r7, #30]
 800ae64:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800ae68:	d803      	bhi.n	800ae72 <mem_trim+0x32>
 800ae6a:	8bfa      	ldrh	r2, [r7, #30]
 800ae6c:	887b      	ldrh	r3, [r7, #2]
 800ae6e:	429a      	cmp	r2, r3
 800ae70:	d201      	bcs.n	800ae76 <mem_trim+0x36>
    return NULL;
 800ae72:	2300      	movs	r3, #0
 800ae74:	e0d8      	b.n	800b028 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800ae76:	4b6e      	ldr	r3, [pc, #440]	; (800b030 <mem_trim+0x1f0>)
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	687a      	ldr	r2, [r7, #4]
 800ae7c:	429a      	cmp	r2, r3
 800ae7e:	d304      	bcc.n	800ae8a <mem_trim+0x4a>
 800ae80:	4b6c      	ldr	r3, [pc, #432]	; (800b034 <mem_trim+0x1f4>)
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	687a      	ldr	r2, [r7, #4]
 800ae86:	429a      	cmp	r2, r3
 800ae88:	d306      	bcc.n	800ae98 <mem_trim+0x58>
 800ae8a:	4b6b      	ldr	r3, [pc, #428]	; (800b038 <mem_trim+0x1f8>)
 800ae8c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800ae90:	496a      	ldr	r1, [pc, #424]	; (800b03c <mem_trim+0x1fc>)
 800ae92:	486b      	ldr	r0, [pc, #428]	; (800b040 <mem_trim+0x200>)
 800ae94:	f00b fb5c 	bl	8016550 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800ae98:	4b65      	ldr	r3, [pc, #404]	; (800b030 <mem_trim+0x1f0>)
 800ae9a:	681b      	ldr	r3, [r3, #0]
 800ae9c:	687a      	ldr	r2, [r7, #4]
 800ae9e:	429a      	cmp	r2, r3
 800aea0:	d304      	bcc.n	800aeac <mem_trim+0x6c>
 800aea2:	4b64      	ldr	r3, [pc, #400]	; (800b034 <mem_trim+0x1f4>)
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	687a      	ldr	r2, [r7, #4]
 800aea8:	429a      	cmp	r2, r3
 800aeaa:	d307      	bcc.n	800aebc <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800aeac:	f00b f95a 	bl	8016164 <sys_arch_protect>
 800aeb0:	60b8      	str	r0, [r7, #8]
 800aeb2:	68b8      	ldr	r0, [r7, #8]
 800aeb4:	f00b f964 	bl	8016180 <sys_arch_unprotect>
    return rmem;
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	e0b5      	b.n	800b028 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	3b08      	subs	r3, #8
 800aec0:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800aec2:	69b8      	ldr	r0, [r7, #24]
 800aec4:	f7ff fdea 	bl	800aa9c <mem_to_ptr>
 800aec8:	4603      	mov	r3, r0
 800aeca:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800aecc:	69bb      	ldr	r3, [r7, #24]
 800aece:	881a      	ldrh	r2, [r3, #0]
 800aed0:	8afb      	ldrh	r3, [r7, #22]
 800aed2:	1ad3      	subs	r3, r2, r3
 800aed4:	b29b      	uxth	r3, r3
 800aed6:	3b08      	subs	r3, #8
 800aed8:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800aeda:	8bfa      	ldrh	r2, [r7, #30]
 800aedc:	8abb      	ldrh	r3, [r7, #20]
 800aede:	429a      	cmp	r2, r3
 800aee0:	d906      	bls.n	800aef0 <mem_trim+0xb0>
 800aee2:	4b55      	ldr	r3, [pc, #340]	; (800b038 <mem_trim+0x1f8>)
 800aee4:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800aee8:	4956      	ldr	r1, [pc, #344]	; (800b044 <mem_trim+0x204>)
 800aeea:	4855      	ldr	r0, [pc, #340]	; (800b040 <mem_trim+0x200>)
 800aeec:	f00b fb30 	bl	8016550 <iprintf>
  if (newsize > size) {
 800aef0:	8bfa      	ldrh	r2, [r7, #30]
 800aef2:	8abb      	ldrh	r3, [r7, #20]
 800aef4:	429a      	cmp	r2, r3
 800aef6:	d901      	bls.n	800aefc <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800aef8:	2300      	movs	r3, #0
 800aefa:	e095      	b.n	800b028 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800aefc:	8bfa      	ldrh	r2, [r7, #30]
 800aefe:	8abb      	ldrh	r3, [r7, #20]
 800af00:	429a      	cmp	r2, r3
 800af02:	d101      	bne.n	800af08 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800af04:	687b      	ldr	r3, [r7, #4]
 800af06:	e08f      	b.n	800b028 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800af08:	484f      	ldr	r0, [pc, #316]	; (800b048 <mem_trim+0x208>)
 800af0a:	f00b f8e9 	bl	80160e0 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800af0e:	69bb      	ldr	r3, [r7, #24]
 800af10:	881b      	ldrh	r3, [r3, #0]
 800af12:	4618      	mov	r0, r3
 800af14:	f7ff fdb0 	bl	800aa78 <ptr_to_mem>
 800af18:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800af1a:	693b      	ldr	r3, [r7, #16]
 800af1c:	791b      	ldrb	r3, [r3, #4]
 800af1e:	2b00      	cmp	r3, #0
 800af20:	d13f      	bne.n	800afa2 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800af22:	69bb      	ldr	r3, [r7, #24]
 800af24:	881b      	ldrh	r3, [r3, #0]
 800af26:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af2a:	d106      	bne.n	800af3a <mem_trim+0xfa>
 800af2c:	4b42      	ldr	r3, [pc, #264]	; (800b038 <mem_trim+0x1f8>)
 800af2e:	f240 22f5 	movw	r2, #757	; 0x2f5
 800af32:	4946      	ldr	r1, [pc, #280]	; (800b04c <mem_trim+0x20c>)
 800af34:	4842      	ldr	r0, [pc, #264]	; (800b040 <mem_trim+0x200>)
 800af36:	f00b fb0b 	bl	8016550 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800af3a:	693b      	ldr	r3, [r7, #16]
 800af3c:	881b      	ldrh	r3, [r3, #0]
 800af3e:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800af40:	8afa      	ldrh	r2, [r7, #22]
 800af42:	8bfb      	ldrh	r3, [r7, #30]
 800af44:	4413      	add	r3, r2
 800af46:	b29b      	uxth	r3, r3
 800af48:	3308      	adds	r3, #8
 800af4a:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800af4c:	4b40      	ldr	r3, [pc, #256]	; (800b050 <mem_trim+0x210>)
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	693a      	ldr	r2, [r7, #16]
 800af52:	429a      	cmp	r2, r3
 800af54:	d106      	bne.n	800af64 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800af56:	89fb      	ldrh	r3, [r7, #14]
 800af58:	4618      	mov	r0, r3
 800af5a:	f7ff fd8d 	bl	800aa78 <ptr_to_mem>
 800af5e:	4603      	mov	r3, r0
 800af60:	4a3b      	ldr	r2, [pc, #236]	; (800b050 <mem_trim+0x210>)
 800af62:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800af64:	89fb      	ldrh	r3, [r7, #14]
 800af66:	4618      	mov	r0, r3
 800af68:	f7ff fd86 	bl	800aa78 <ptr_to_mem>
 800af6c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800af6e:	693b      	ldr	r3, [r7, #16]
 800af70:	2200      	movs	r2, #0
 800af72:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800af74:	693b      	ldr	r3, [r7, #16]
 800af76:	89ba      	ldrh	r2, [r7, #12]
 800af78:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800af7a:	693b      	ldr	r3, [r7, #16]
 800af7c:	8afa      	ldrh	r2, [r7, #22]
 800af7e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800af80:	69bb      	ldr	r3, [r7, #24]
 800af82:	89fa      	ldrh	r2, [r7, #14]
 800af84:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800af86:	693b      	ldr	r3, [r7, #16]
 800af88:	881b      	ldrh	r3, [r3, #0]
 800af8a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800af8e:	d047      	beq.n	800b020 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800af90:	693b      	ldr	r3, [r7, #16]
 800af92:	881b      	ldrh	r3, [r3, #0]
 800af94:	4618      	mov	r0, r3
 800af96:	f7ff fd6f 	bl	800aa78 <ptr_to_mem>
 800af9a:	4602      	mov	r2, r0
 800af9c:	89fb      	ldrh	r3, [r7, #14]
 800af9e:	8053      	strh	r3, [r2, #2]
 800afa0:	e03e      	b.n	800b020 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800afa2:	8bfb      	ldrh	r3, [r7, #30]
 800afa4:	f103 0214 	add.w	r2, r3, #20
 800afa8:	8abb      	ldrh	r3, [r7, #20]
 800afaa:	429a      	cmp	r2, r3
 800afac:	d838      	bhi.n	800b020 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800afae:	8afa      	ldrh	r2, [r7, #22]
 800afb0:	8bfb      	ldrh	r3, [r7, #30]
 800afb2:	4413      	add	r3, r2
 800afb4:	b29b      	uxth	r3, r3
 800afb6:	3308      	adds	r3, #8
 800afb8:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800afba:	69bb      	ldr	r3, [r7, #24]
 800afbc:	881b      	ldrh	r3, [r3, #0]
 800afbe:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800afc2:	d106      	bne.n	800afd2 <mem_trim+0x192>
 800afc4:	4b1c      	ldr	r3, [pc, #112]	; (800b038 <mem_trim+0x1f8>)
 800afc6:	f240 3216 	movw	r2, #790	; 0x316
 800afca:	4920      	ldr	r1, [pc, #128]	; (800b04c <mem_trim+0x20c>)
 800afcc:	481c      	ldr	r0, [pc, #112]	; (800b040 <mem_trim+0x200>)
 800afce:	f00b fabf 	bl	8016550 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800afd2:	89fb      	ldrh	r3, [r7, #14]
 800afd4:	4618      	mov	r0, r3
 800afd6:	f7ff fd4f 	bl	800aa78 <ptr_to_mem>
 800afda:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800afdc:	4b1c      	ldr	r3, [pc, #112]	; (800b050 <mem_trim+0x210>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	693a      	ldr	r2, [r7, #16]
 800afe2:	429a      	cmp	r2, r3
 800afe4:	d202      	bcs.n	800afec <mem_trim+0x1ac>
      lfree = mem2;
 800afe6:	4a1a      	ldr	r2, [pc, #104]	; (800b050 <mem_trim+0x210>)
 800afe8:	693b      	ldr	r3, [r7, #16]
 800afea:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800afec:	693b      	ldr	r3, [r7, #16]
 800afee:	2200      	movs	r2, #0
 800aff0:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800aff2:	69bb      	ldr	r3, [r7, #24]
 800aff4:	881a      	ldrh	r2, [r3, #0]
 800aff6:	693b      	ldr	r3, [r7, #16]
 800aff8:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800affa:	693b      	ldr	r3, [r7, #16]
 800affc:	8afa      	ldrh	r2, [r7, #22]
 800affe:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	89fa      	ldrh	r2, [r7, #14]
 800b004:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800b006:	693b      	ldr	r3, [r7, #16]
 800b008:	881b      	ldrh	r3, [r3, #0]
 800b00a:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b00e:	d007      	beq.n	800b020 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800b010:	693b      	ldr	r3, [r7, #16]
 800b012:	881b      	ldrh	r3, [r3, #0]
 800b014:	4618      	mov	r0, r3
 800b016:	f7ff fd2f 	bl	800aa78 <ptr_to_mem>
 800b01a:	4602      	mov	r2, r0
 800b01c:	89fb      	ldrh	r3, [r7, #14]
 800b01e:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800b020:	4809      	ldr	r0, [pc, #36]	; (800b048 <mem_trim+0x208>)
 800b022:	f00b f86c 	bl	80160fe <sys_mutex_unlock>
  return rmem;
 800b026:	687b      	ldr	r3, [r7, #4]
}
 800b028:	4618      	mov	r0, r3
 800b02a:	3720      	adds	r7, #32
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	200098c4 	.word	0x200098c4
 800b034:	200098c8 	.word	0x200098c8
 800b038:	080180a4 	.word	0x080180a4
 800b03c:	08018230 	.word	0x08018230
 800b040:	080180ec 	.word	0x080180ec
 800b044:	08018248 	.word	0x08018248
 800b048:	200098cc 	.word	0x200098cc
 800b04c:	08018268 	.word	0x08018268
 800b050:	200098d0 	.word	0x200098d0

0800b054 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800b054:	b580      	push	{r7, lr}
 800b056:	b088      	sub	sp, #32
 800b058:	af00      	add	r7, sp, #0
 800b05a:	4603      	mov	r3, r0
 800b05c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800b05e:	88fb      	ldrh	r3, [r7, #6]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d101      	bne.n	800b068 <mem_malloc+0x14>
    return NULL;
 800b064:	2300      	movs	r3, #0
 800b066:	e0e2      	b.n	800b22e <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800b068:	88fb      	ldrh	r3, [r7, #6]
 800b06a:	3303      	adds	r3, #3
 800b06c:	b29b      	uxth	r3, r3
 800b06e:	f023 0303 	bic.w	r3, r3, #3
 800b072:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800b074:	8bbb      	ldrh	r3, [r7, #28]
 800b076:	2b0b      	cmp	r3, #11
 800b078:	d801      	bhi.n	800b07e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800b07a:	230c      	movs	r3, #12
 800b07c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800b07e:	8bbb      	ldrh	r3, [r7, #28]
 800b080:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b084:	d803      	bhi.n	800b08e <mem_malloc+0x3a>
 800b086:	8bba      	ldrh	r2, [r7, #28]
 800b088:	88fb      	ldrh	r3, [r7, #6]
 800b08a:	429a      	cmp	r2, r3
 800b08c:	d201      	bcs.n	800b092 <mem_malloc+0x3e>
    return NULL;
 800b08e:	2300      	movs	r3, #0
 800b090:	e0cd      	b.n	800b22e <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800b092:	4869      	ldr	r0, [pc, #420]	; (800b238 <mem_malloc+0x1e4>)
 800b094:	f00b f824 	bl	80160e0 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b098:	4b68      	ldr	r3, [pc, #416]	; (800b23c <mem_malloc+0x1e8>)
 800b09a:	681b      	ldr	r3, [r3, #0]
 800b09c:	4618      	mov	r0, r3
 800b09e:	f7ff fcfd 	bl	800aa9c <mem_to_ptr>
 800b0a2:	4603      	mov	r3, r0
 800b0a4:	83fb      	strh	r3, [r7, #30]
 800b0a6:	e0b7      	b.n	800b218 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800b0a8:	8bfb      	ldrh	r3, [r7, #30]
 800b0aa:	4618      	mov	r0, r3
 800b0ac:	f7ff fce4 	bl	800aa78 <ptr_to_mem>
 800b0b0:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	791b      	ldrb	r3, [r3, #4]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f040 80a7 	bne.w	800b20a <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800b0bc:	697b      	ldr	r3, [r7, #20]
 800b0be:	881b      	ldrh	r3, [r3, #0]
 800b0c0:	461a      	mov	r2, r3
 800b0c2:	8bfb      	ldrh	r3, [r7, #30]
 800b0c4:	1ad3      	subs	r3, r2, r3
 800b0c6:	f1a3 0208 	sub.w	r2, r3, #8
 800b0ca:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800b0cc:	429a      	cmp	r2, r3
 800b0ce:	f0c0 809c 	bcc.w	800b20a <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800b0d2:	697b      	ldr	r3, [r7, #20]
 800b0d4:	881b      	ldrh	r3, [r3, #0]
 800b0d6:	461a      	mov	r2, r3
 800b0d8:	8bfb      	ldrh	r3, [r7, #30]
 800b0da:	1ad3      	subs	r3, r2, r3
 800b0dc:	f1a3 0208 	sub.w	r2, r3, #8
 800b0e0:	8bbb      	ldrh	r3, [r7, #28]
 800b0e2:	3314      	adds	r3, #20
 800b0e4:	429a      	cmp	r2, r3
 800b0e6:	d333      	bcc.n	800b150 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800b0e8:	8bfa      	ldrh	r2, [r7, #30]
 800b0ea:	8bbb      	ldrh	r3, [r7, #28]
 800b0ec:	4413      	add	r3, r2
 800b0ee:	b29b      	uxth	r3, r3
 800b0f0:	3308      	adds	r3, #8
 800b0f2:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800b0f4:	8a7b      	ldrh	r3, [r7, #18]
 800b0f6:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b0fa:	d106      	bne.n	800b10a <mem_malloc+0xb6>
 800b0fc:	4b50      	ldr	r3, [pc, #320]	; (800b240 <mem_malloc+0x1ec>)
 800b0fe:	f240 3287 	movw	r2, #903	; 0x387
 800b102:	4950      	ldr	r1, [pc, #320]	; (800b244 <mem_malloc+0x1f0>)
 800b104:	4850      	ldr	r0, [pc, #320]	; (800b248 <mem_malloc+0x1f4>)
 800b106:	f00b fa23 	bl	8016550 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800b10a:	8a7b      	ldrh	r3, [r7, #18]
 800b10c:	4618      	mov	r0, r3
 800b10e:	f7ff fcb3 	bl	800aa78 <ptr_to_mem>
 800b112:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800b114:	68fb      	ldr	r3, [r7, #12]
 800b116:	2200      	movs	r2, #0
 800b118:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800b11a:	697b      	ldr	r3, [r7, #20]
 800b11c:	881a      	ldrh	r2, [r3, #0]
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	8bfa      	ldrh	r2, [r7, #30]
 800b126:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800b128:	697b      	ldr	r3, [r7, #20]
 800b12a:	8a7a      	ldrh	r2, [r7, #18]
 800b12c:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800b12e:	697b      	ldr	r3, [r7, #20]
 800b130:	2201      	movs	r2, #1
 800b132:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	881b      	ldrh	r3, [r3, #0]
 800b138:	f5b3 6fc8 	cmp.w	r3, #1600	; 0x640
 800b13c:	d00b      	beq.n	800b156 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	881b      	ldrh	r3, [r3, #0]
 800b142:	4618      	mov	r0, r3
 800b144:	f7ff fc98 	bl	800aa78 <ptr_to_mem>
 800b148:	4602      	mov	r2, r0
 800b14a:	8a7b      	ldrh	r3, [r7, #18]
 800b14c:	8053      	strh	r3, [r2, #2]
 800b14e:	e002      	b.n	800b156 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800b150:	697b      	ldr	r3, [r7, #20]
 800b152:	2201      	movs	r2, #1
 800b154:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800b156:	4b39      	ldr	r3, [pc, #228]	; (800b23c <mem_malloc+0x1e8>)
 800b158:	681b      	ldr	r3, [r3, #0]
 800b15a:	697a      	ldr	r2, [r7, #20]
 800b15c:	429a      	cmp	r2, r3
 800b15e:	d127      	bne.n	800b1b0 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800b160:	4b36      	ldr	r3, [pc, #216]	; (800b23c <mem_malloc+0x1e8>)
 800b162:	681b      	ldr	r3, [r3, #0]
 800b164:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800b166:	e005      	b.n	800b174 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800b168:	69bb      	ldr	r3, [r7, #24]
 800b16a:	881b      	ldrh	r3, [r3, #0]
 800b16c:	4618      	mov	r0, r3
 800b16e:	f7ff fc83 	bl	800aa78 <ptr_to_mem>
 800b172:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800b174:	69bb      	ldr	r3, [r7, #24]
 800b176:	791b      	ldrb	r3, [r3, #4]
 800b178:	2b00      	cmp	r3, #0
 800b17a:	d004      	beq.n	800b186 <mem_malloc+0x132>
 800b17c:	4b33      	ldr	r3, [pc, #204]	; (800b24c <mem_malloc+0x1f8>)
 800b17e:	681b      	ldr	r3, [r3, #0]
 800b180:	69ba      	ldr	r2, [r7, #24]
 800b182:	429a      	cmp	r2, r3
 800b184:	d1f0      	bne.n	800b168 <mem_malloc+0x114>
          }
          lfree = cur;
 800b186:	4a2d      	ldr	r2, [pc, #180]	; (800b23c <mem_malloc+0x1e8>)
 800b188:	69bb      	ldr	r3, [r7, #24]
 800b18a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800b18c:	4b2b      	ldr	r3, [pc, #172]	; (800b23c <mem_malloc+0x1e8>)
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	4b2e      	ldr	r3, [pc, #184]	; (800b24c <mem_malloc+0x1f8>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	429a      	cmp	r2, r3
 800b196:	d00b      	beq.n	800b1b0 <mem_malloc+0x15c>
 800b198:	4b28      	ldr	r3, [pc, #160]	; (800b23c <mem_malloc+0x1e8>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	791b      	ldrb	r3, [r3, #4]
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d006      	beq.n	800b1b0 <mem_malloc+0x15c>
 800b1a2:	4b27      	ldr	r3, [pc, #156]	; (800b240 <mem_malloc+0x1ec>)
 800b1a4:	f240 32b5 	movw	r2, #949	; 0x3b5
 800b1a8:	4929      	ldr	r1, [pc, #164]	; (800b250 <mem_malloc+0x1fc>)
 800b1aa:	4827      	ldr	r0, [pc, #156]	; (800b248 <mem_malloc+0x1f4>)
 800b1ac:	f00b f9d0 	bl	8016550 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800b1b0:	4821      	ldr	r0, [pc, #132]	; (800b238 <mem_malloc+0x1e4>)
 800b1b2:	f00a ffa4 	bl	80160fe <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800b1b6:	8bba      	ldrh	r2, [r7, #28]
 800b1b8:	697b      	ldr	r3, [r7, #20]
 800b1ba:	4413      	add	r3, r2
 800b1bc:	3308      	adds	r3, #8
 800b1be:	4a23      	ldr	r2, [pc, #140]	; (800b24c <mem_malloc+0x1f8>)
 800b1c0:	6812      	ldr	r2, [r2, #0]
 800b1c2:	4293      	cmp	r3, r2
 800b1c4:	d906      	bls.n	800b1d4 <mem_malloc+0x180>
 800b1c6:	4b1e      	ldr	r3, [pc, #120]	; (800b240 <mem_malloc+0x1ec>)
 800b1c8:	f240 32b9 	movw	r2, #953	; 0x3b9
 800b1cc:	4921      	ldr	r1, [pc, #132]	; (800b254 <mem_malloc+0x200>)
 800b1ce:	481e      	ldr	r0, [pc, #120]	; (800b248 <mem_malloc+0x1f4>)
 800b1d0:	f00b f9be 	bl	8016550 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	f003 0303 	and.w	r3, r3, #3
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d006      	beq.n	800b1ec <mem_malloc+0x198>
 800b1de:	4b18      	ldr	r3, [pc, #96]	; (800b240 <mem_malloc+0x1ec>)
 800b1e0:	f240 32bb 	movw	r2, #955	; 0x3bb
 800b1e4:	491c      	ldr	r1, [pc, #112]	; (800b258 <mem_malloc+0x204>)
 800b1e6:	4818      	ldr	r0, [pc, #96]	; (800b248 <mem_malloc+0x1f4>)
 800b1e8:	f00b f9b2 	bl	8016550 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	f003 0303 	and.w	r3, r3, #3
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	d006      	beq.n	800b204 <mem_malloc+0x1b0>
 800b1f6:	4b12      	ldr	r3, [pc, #72]	; (800b240 <mem_malloc+0x1ec>)
 800b1f8:	f240 32bd 	movw	r2, #957	; 0x3bd
 800b1fc:	4917      	ldr	r1, [pc, #92]	; (800b25c <mem_malloc+0x208>)
 800b1fe:	4812      	ldr	r0, [pc, #72]	; (800b248 <mem_malloc+0x1f4>)
 800b200:	f00b f9a6 	bl	8016550 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	3308      	adds	r3, #8
 800b208:	e011      	b.n	800b22e <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800b20a:	8bfb      	ldrh	r3, [r7, #30]
 800b20c:	4618      	mov	r0, r3
 800b20e:	f7ff fc33 	bl	800aa78 <ptr_to_mem>
 800b212:	4603      	mov	r3, r0
 800b214:	881b      	ldrh	r3, [r3, #0]
 800b216:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800b218:	8bfa      	ldrh	r2, [r7, #30]
 800b21a:	8bbb      	ldrh	r3, [r7, #28]
 800b21c:	f5c3 63c8 	rsb	r3, r3, #1600	; 0x640
 800b220:	429a      	cmp	r2, r3
 800b222:	f4ff af41 	bcc.w	800b0a8 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800b226:	4804      	ldr	r0, [pc, #16]	; (800b238 <mem_malloc+0x1e4>)
 800b228:	f00a ff69 	bl	80160fe <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800b22c:	2300      	movs	r3, #0
}
 800b22e:	4618      	mov	r0, r3
 800b230:	3720      	adds	r7, #32
 800b232:	46bd      	mov	sp, r7
 800b234:	bd80      	pop	{r7, pc}
 800b236:	bf00      	nop
 800b238:	200098cc 	.word	0x200098cc
 800b23c:	200098d0 	.word	0x200098d0
 800b240:	080180a4 	.word	0x080180a4
 800b244:	08018268 	.word	0x08018268
 800b248:	080180ec 	.word	0x080180ec
 800b24c:	200098c8 	.word	0x200098c8
 800b250:	0801827c 	.word	0x0801827c
 800b254:	08018298 	.word	0x08018298
 800b258:	080182c8 	.word	0x080182c8
 800b25c:	080182f8 	.word	0x080182f8

0800b260 <mem_calloc>:
 * @param size size of the objects to allocate
 * @return pointer to allocated memory / NULL pointer if there is an error
 */
void *
mem_calloc(mem_size_t count, mem_size_t size)
{
 800b260:	b580      	push	{r7, lr}
 800b262:	b084      	sub	sp, #16
 800b264:	af00      	add	r7, sp, #0
 800b266:	4603      	mov	r3, r0
 800b268:	460a      	mov	r2, r1
 800b26a:	80fb      	strh	r3, [r7, #6]
 800b26c:	4613      	mov	r3, r2
 800b26e:	80bb      	strh	r3, [r7, #4]
  void *p;
  size_t alloc_size = (size_t)count * (size_t)size;
 800b270:	88fb      	ldrh	r3, [r7, #6]
 800b272:	88ba      	ldrh	r2, [r7, #4]
 800b274:	fb02 f303 	mul.w	r3, r2, r3
 800b278:	60fb      	str	r3, [r7, #12]

  if ((size_t)(mem_size_t)alloc_size != alloc_size) {
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	b29b      	uxth	r3, r3
 800b27e:	461a      	mov	r2, r3
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	4293      	cmp	r3, r2
 800b284:	d001      	beq.n	800b28a <mem_calloc+0x2a>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_calloc: could not allocate %"SZT_F" bytes\n", alloc_size));
    return NULL;
 800b286:	2300      	movs	r3, #0
 800b288:	e00e      	b.n	800b2a8 <mem_calloc+0x48>
  }

  /* allocate 'count' objects of size 'size' */
  p = mem_malloc((mem_size_t)alloc_size);
 800b28a:	68fb      	ldr	r3, [r7, #12]
 800b28c:	b29b      	uxth	r3, r3
 800b28e:	4618      	mov	r0, r3
 800b290:	f7ff fee0 	bl	800b054 <mem_malloc>
 800b294:	60b8      	str	r0, [r7, #8]
  if (p) {
 800b296:	68bb      	ldr	r3, [r7, #8]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d004      	beq.n	800b2a6 <mem_calloc+0x46>
    /* zero the memory */
    memset(p, 0, alloc_size);
 800b29c:	68fa      	ldr	r2, [r7, #12]
 800b29e:	2100      	movs	r1, #0
 800b2a0:	68b8      	ldr	r0, [r7, #8]
 800b2a2:	f00b f8b8 	bl	8016416 <memset>
  }
  return p;
 800b2a6:	68bb      	ldr	r3, [r7, #8]
}
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	3710      	adds	r7, #16
 800b2ac:	46bd      	mov	sp, r7
 800b2ae:	bd80      	pop	{r7, pc}

0800b2b0 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800b2b0:	b480      	push	{r7}
 800b2b2:	b085      	sub	sp, #20
 800b2b4:	af00      	add	r7, sp, #0
 800b2b6:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	689b      	ldr	r3, [r3, #8]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800b2c0:	687b      	ldr	r3, [r7, #4]
 800b2c2:	685b      	ldr	r3, [r3, #4]
 800b2c4:	3303      	adds	r3, #3
 800b2c6:	f023 0303 	bic.w	r3, r3, #3
 800b2ca:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800b2cc:	2300      	movs	r3, #0
 800b2ce:	60fb      	str	r3, [r7, #12]
 800b2d0:	e011      	b.n	800b2f6 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800b2d2:	687b      	ldr	r3, [r7, #4]
 800b2d4:	689b      	ldr	r3, [r3, #8]
 800b2d6:	681a      	ldr	r2, [r3, #0]
 800b2d8:	68bb      	ldr	r3, [r7, #8]
 800b2da:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	68ba      	ldr	r2, [r7, #8]
 800b2e2:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	881b      	ldrh	r3, [r3, #0]
 800b2e8:	461a      	mov	r2, r3
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	4413      	add	r3, r2
 800b2ee:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	3301      	adds	r3, #1
 800b2f4:	60fb      	str	r3, [r7, #12]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	885b      	ldrh	r3, [r3, #2]
 800b2fa:	461a      	mov	r2, r3
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	4293      	cmp	r3, r2
 800b300:	dbe7      	blt.n	800b2d2 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800b302:	bf00      	nop
 800b304:	bf00      	nop
 800b306:	3714      	adds	r7, #20
 800b308:	46bd      	mov	sp, r7
 800b30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b30e:	4770      	bx	lr

0800b310 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800b310:	b580      	push	{r7, lr}
 800b312:	b082      	sub	sp, #8
 800b314:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b316:	2300      	movs	r3, #0
 800b318:	80fb      	strh	r3, [r7, #6]
 800b31a:	e009      	b.n	800b330 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800b31c:	88fb      	ldrh	r3, [r7, #6]
 800b31e:	4a08      	ldr	r2, [pc, #32]	; (800b340 <memp_init+0x30>)
 800b320:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b324:	4618      	mov	r0, r3
 800b326:	f7ff ffc3 	bl	800b2b0 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800b32a:	88fb      	ldrh	r3, [r7, #6]
 800b32c:	3301      	adds	r3, #1
 800b32e:	80fb      	strh	r3, [r7, #6]
 800b330:	88fb      	ldrh	r3, [r7, #6]
 800b332:	2b0d      	cmp	r3, #13
 800b334:	d9f2      	bls.n	800b31c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800b336:	bf00      	nop
 800b338:	bf00      	nop
 800b33a:	3708      	adds	r7, #8
 800b33c:	46bd      	mov	sp, r7
 800b33e:	bd80      	pop	{r7, pc}
 800b340:	0801aba4 	.word	0x0801aba4

0800b344 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b344:	b580      	push	{r7, lr}
 800b346:	b084      	sub	sp, #16
 800b348:	af00      	add	r7, sp, #0
 800b34a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800b34c:	f00a ff0a 	bl	8016164 <sys_arch_protect>
 800b350:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	689b      	ldr	r3, [r3, #8]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d015      	beq.n	800b38c <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	689b      	ldr	r3, [r3, #8]
 800b364:	68ba      	ldr	r2, [r7, #8]
 800b366:	6812      	ldr	r2, [r2, #0]
 800b368:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800b36a:	68bb      	ldr	r3, [r7, #8]
 800b36c:	f003 0303 	and.w	r3, r3, #3
 800b370:	2b00      	cmp	r3, #0
 800b372:	d006      	beq.n	800b382 <do_memp_malloc_pool+0x3e>
 800b374:	4b09      	ldr	r3, [pc, #36]	; (800b39c <do_memp_malloc_pool+0x58>)
 800b376:	f44f 728c 	mov.w	r2, #280	; 0x118
 800b37a:	4909      	ldr	r1, [pc, #36]	; (800b3a0 <do_memp_malloc_pool+0x5c>)
 800b37c:	4809      	ldr	r0, [pc, #36]	; (800b3a4 <do_memp_malloc_pool+0x60>)
 800b37e:	f00b f8e7 	bl	8016550 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b382:	68f8      	ldr	r0, [r7, #12]
 800b384:	f00a fefc 	bl	8016180 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800b388:	68bb      	ldr	r3, [r7, #8]
 800b38a:	e003      	b.n	800b394 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800b38c:	68f8      	ldr	r0, [r7, #12]
 800b38e:	f00a fef7 	bl	8016180 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800b392:	2300      	movs	r3, #0
}
 800b394:	4618      	mov	r0, r3
 800b396:	3710      	adds	r7, #16
 800b398:	46bd      	mov	sp, r7
 800b39a:	bd80      	pop	{r7, pc}
 800b39c:	0801831c 	.word	0x0801831c
 800b3a0:	0801834c 	.word	0x0801834c
 800b3a4:	08018370 	.word	0x08018370

0800b3a8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b082      	sub	sp, #8
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	2b00      	cmp	r3, #0
 800b3b4:	d106      	bne.n	800b3c4 <memp_malloc_pool+0x1c>
 800b3b6:	4b0a      	ldr	r3, [pc, #40]	; (800b3e0 <memp_malloc_pool+0x38>)
 800b3b8:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800b3bc:	4909      	ldr	r1, [pc, #36]	; (800b3e4 <memp_malloc_pool+0x3c>)
 800b3be:	480a      	ldr	r0, [pc, #40]	; (800b3e8 <memp_malloc_pool+0x40>)
 800b3c0:	f00b f8c6 	bl	8016550 <iprintf>
  if (desc == NULL) {
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	2b00      	cmp	r3, #0
 800b3c8:	d101      	bne.n	800b3ce <memp_malloc_pool+0x26>
    return NULL;
 800b3ca:	2300      	movs	r3, #0
 800b3cc:	e003      	b.n	800b3d6 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800b3ce:	6878      	ldr	r0, [r7, #4]
 800b3d0:	f7ff ffb8 	bl	800b344 <do_memp_malloc_pool>
 800b3d4:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800b3d6:	4618      	mov	r0, r3
 800b3d8:	3708      	adds	r7, #8
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}
 800b3de:	bf00      	nop
 800b3e0:	0801831c 	.word	0x0801831c
 800b3e4:	08018398 	.word	0x08018398
 800b3e8:	08018370 	.word	0x08018370

0800b3ec <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	4603      	mov	r3, r0
 800b3f4:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800b3f6:	79fb      	ldrb	r3, [r7, #7]
 800b3f8:	2b0d      	cmp	r3, #13
 800b3fa:	d908      	bls.n	800b40e <memp_malloc+0x22>
 800b3fc:	4b0a      	ldr	r3, [pc, #40]	; (800b428 <memp_malloc+0x3c>)
 800b3fe:	f240 1257 	movw	r2, #343	; 0x157
 800b402:	490a      	ldr	r1, [pc, #40]	; (800b42c <memp_malloc+0x40>)
 800b404:	480a      	ldr	r0, [pc, #40]	; (800b430 <memp_malloc+0x44>)
 800b406:	f00b f8a3 	bl	8016550 <iprintf>
 800b40a:	2300      	movs	r3, #0
 800b40c:	e008      	b.n	800b420 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800b40e:	79fb      	ldrb	r3, [r7, #7]
 800b410:	4a08      	ldr	r2, [pc, #32]	; (800b434 <memp_malloc+0x48>)
 800b412:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b416:	4618      	mov	r0, r3
 800b418:	f7ff ff94 	bl	800b344 <do_memp_malloc_pool>
 800b41c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800b41e:	68fb      	ldr	r3, [r7, #12]
}
 800b420:	4618      	mov	r0, r3
 800b422:	3710      	adds	r7, #16
 800b424:	46bd      	mov	sp, r7
 800b426:	bd80      	pop	{r7, pc}
 800b428:	0801831c 	.word	0x0801831c
 800b42c:	080183ac 	.word	0x080183ac
 800b430:	08018370 	.word	0x08018370
 800b434:	0801aba4 	.word	0x0801aba4

0800b438 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b438:	b580      	push	{r7, lr}
 800b43a:	b084      	sub	sp, #16
 800b43c:	af00      	add	r7, sp, #0
 800b43e:	6078      	str	r0, [r7, #4]
 800b440:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800b442:	683b      	ldr	r3, [r7, #0]
 800b444:	f003 0303 	and.w	r3, r3, #3
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d006      	beq.n	800b45a <do_memp_free_pool+0x22>
 800b44c:	4b0d      	ldr	r3, [pc, #52]	; (800b484 <do_memp_free_pool+0x4c>)
 800b44e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800b452:	490d      	ldr	r1, [pc, #52]	; (800b488 <do_memp_free_pool+0x50>)
 800b454:	480d      	ldr	r0, [pc, #52]	; (800b48c <do_memp_free_pool+0x54>)
 800b456:	f00b f87b 	bl	8016550 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800b45a:	683b      	ldr	r3, [r7, #0]
 800b45c:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800b45e:	f00a fe81 	bl	8016164 <sys_arch_protect>
 800b462:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	681a      	ldr	r2, [r3, #0]
 800b46a:	68fb      	ldr	r3, [r7, #12]
 800b46c:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800b46e:	687b      	ldr	r3, [r7, #4]
 800b470:	689b      	ldr	r3, [r3, #8]
 800b472:	68fa      	ldr	r2, [r7, #12]
 800b474:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800b476:	68b8      	ldr	r0, [r7, #8]
 800b478:	f00a fe82 	bl	8016180 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800b47c:	bf00      	nop
 800b47e:	3710      	adds	r7, #16
 800b480:	46bd      	mov	sp, r7
 800b482:	bd80      	pop	{r7, pc}
 800b484:	0801831c 	.word	0x0801831c
 800b488:	080183cc 	.word	0x080183cc
 800b48c:	08018370 	.word	0x08018370

0800b490 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800b490:	b580      	push	{r7, lr}
 800b492:	b082      	sub	sp, #8
 800b494:	af00      	add	r7, sp, #0
 800b496:	6078      	str	r0, [r7, #4]
 800b498:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	2b00      	cmp	r3, #0
 800b49e:	d106      	bne.n	800b4ae <memp_free_pool+0x1e>
 800b4a0:	4b0a      	ldr	r3, [pc, #40]	; (800b4cc <memp_free_pool+0x3c>)
 800b4a2:	f240 1295 	movw	r2, #405	; 0x195
 800b4a6:	490a      	ldr	r1, [pc, #40]	; (800b4d0 <memp_free_pool+0x40>)
 800b4a8:	480a      	ldr	r0, [pc, #40]	; (800b4d4 <memp_free_pool+0x44>)
 800b4aa:	f00b f851 	bl	8016550 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	2b00      	cmp	r3, #0
 800b4b2:	d007      	beq.n	800b4c4 <memp_free_pool+0x34>
 800b4b4:	683b      	ldr	r3, [r7, #0]
 800b4b6:	2b00      	cmp	r3, #0
 800b4b8:	d004      	beq.n	800b4c4 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800b4ba:	6839      	ldr	r1, [r7, #0]
 800b4bc:	6878      	ldr	r0, [r7, #4]
 800b4be:	f7ff ffbb 	bl	800b438 <do_memp_free_pool>
 800b4c2:	e000      	b.n	800b4c6 <memp_free_pool+0x36>
    return;
 800b4c4:	bf00      	nop
}
 800b4c6:	3708      	adds	r7, #8
 800b4c8:	46bd      	mov	sp, r7
 800b4ca:	bd80      	pop	{r7, pc}
 800b4cc:	0801831c 	.word	0x0801831c
 800b4d0:	08018398 	.word	0x08018398
 800b4d4:	08018370 	.word	0x08018370

0800b4d8 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800b4d8:	b580      	push	{r7, lr}
 800b4da:	b082      	sub	sp, #8
 800b4dc:	af00      	add	r7, sp, #0
 800b4de:	4603      	mov	r3, r0
 800b4e0:	6039      	str	r1, [r7, #0]
 800b4e2:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800b4e4:	79fb      	ldrb	r3, [r7, #7]
 800b4e6:	2b0d      	cmp	r3, #13
 800b4e8:	d907      	bls.n	800b4fa <memp_free+0x22>
 800b4ea:	4b0c      	ldr	r3, [pc, #48]	; (800b51c <memp_free+0x44>)
 800b4ec:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800b4f0:	490b      	ldr	r1, [pc, #44]	; (800b520 <memp_free+0x48>)
 800b4f2:	480c      	ldr	r0, [pc, #48]	; (800b524 <memp_free+0x4c>)
 800b4f4:	f00b f82c 	bl	8016550 <iprintf>
 800b4f8:	e00c      	b.n	800b514 <memp_free+0x3c>

  if (mem == NULL) {
 800b4fa:	683b      	ldr	r3, [r7, #0]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d008      	beq.n	800b512 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800b500:	79fb      	ldrb	r3, [r7, #7]
 800b502:	4a09      	ldr	r2, [pc, #36]	; (800b528 <memp_free+0x50>)
 800b504:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b508:	6839      	ldr	r1, [r7, #0]
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7ff ff94 	bl	800b438 <do_memp_free_pool>
 800b510:	e000      	b.n	800b514 <memp_free+0x3c>
    return;
 800b512:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800b514:	3708      	adds	r7, #8
 800b516:	46bd      	mov	sp, r7
 800b518:	bd80      	pop	{r7, pc}
 800b51a:	bf00      	nop
 800b51c:	0801831c 	.word	0x0801831c
 800b520:	080183ec 	.word	0x080183ec
 800b524:	08018370 	.word	0x08018370
 800b528:	0801aba4 	.word	0x0801aba4

0800b52c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800b52c:	b480      	push	{r7}
 800b52e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800b530:	bf00      	nop
 800b532:	46bd      	mov	sp, r7
 800b534:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b538:	4770      	bx	lr
	...

0800b53c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
 800b548:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800b54a:	68fb      	ldr	r3, [r7, #12]
 800b54c:	2b00      	cmp	r3, #0
 800b54e:	d108      	bne.n	800b562 <netif_add+0x26>
 800b550:	4b57      	ldr	r3, [pc, #348]	; (800b6b0 <netif_add+0x174>)
 800b552:	f240 1227 	movw	r2, #295	; 0x127
 800b556:	4957      	ldr	r1, [pc, #348]	; (800b6b4 <netif_add+0x178>)
 800b558:	4857      	ldr	r0, [pc, #348]	; (800b6b8 <netif_add+0x17c>)
 800b55a:	f00a fff9 	bl	8016550 <iprintf>
 800b55e:	2300      	movs	r3, #0
 800b560:	e0a2      	b.n	800b6a8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800b562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b564:	2b00      	cmp	r3, #0
 800b566:	d108      	bne.n	800b57a <netif_add+0x3e>
 800b568:	4b51      	ldr	r3, [pc, #324]	; (800b6b0 <netif_add+0x174>)
 800b56a:	f44f 7294 	mov.w	r2, #296	; 0x128
 800b56e:	4953      	ldr	r1, [pc, #332]	; (800b6bc <netif_add+0x180>)
 800b570:	4851      	ldr	r0, [pc, #324]	; (800b6b8 <netif_add+0x17c>)
 800b572:	f00a ffed 	bl	8016550 <iprintf>
 800b576:	2300      	movs	r3, #0
 800b578:	e096      	b.n	800b6a8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800b57a:	68bb      	ldr	r3, [r7, #8]
 800b57c:	2b00      	cmp	r3, #0
 800b57e:	d101      	bne.n	800b584 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800b580:	4b4f      	ldr	r3, [pc, #316]	; (800b6c0 <netif_add+0x184>)
 800b582:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	2b00      	cmp	r3, #0
 800b588:	d101      	bne.n	800b58e <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800b58a:	4b4d      	ldr	r3, [pc, #308]	; (800b6c0 <netif_add+0x184>)
 800b58c:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b58e:	683b      	ldr	r3, [r7, #0]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d101      	bne.n	800b598 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800b594:	4b4a      	ldr	r3, [pc, #296]	; (800b6c0 <netif_add+0x184>)
 800b596:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800b598:	68fb      	ldr	r3, [r7, #12]
 800b59a:	2200      	movs	r2, #0
 800b59c:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	2200      	movs	r2, #0
 800b5a2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	2200      	movs	r2, #0
 800b5a8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	4a45      	ldr	r2, [pc, #276]	; (800b6c4 <netif_add+0x188>)
 800b5ae:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800b5b0:	68fb      	ldr	r3, [r7, #12]
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800b5b6:	68fb      	ldr	r3, [r7, #12]
 800b5b8:	2200      	movs	r2, #0
 800b5ba:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  netif->ip6_autoconfig_enabled = 0;
#endif /* LWIP_IPV6_AUTOCONFIG */
  nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
 800b5be:	68fb      	ldr	r3, [r7, #12]
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800b5c4:	68fb      	ldr	r3, [r7, #12]
 800b5c6:	6a3a      	ldr	r2, [r7, #32]
 800b5c8:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800b5ca:	4b3f      	ldr	r3, [pc, #252]	; (800b6c8 <netif_add+0x18c>)
 800b5cc:	781a      	ldrb	r2, [r3, #0]
 800b5ce:	68fb      	ldr	r3, [r7, #12]
 800b5d0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800b5d4:	68fb      	ldr	r3, [r7, #12]
 800b5d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b5d8:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	68b9      	ldr	r1, [r7, #8]
 800b5e0:	68f8      	ldr	r0, [r7, #12]
 800b5e2:	f000 f91b 	bl	800b81c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800b5e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5e8:	68f8      	ldr	r0, [r7, #12]
 800b5ea:	4798      	blx	r3
 800b5ec:	4603      	mov	r3, r0
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d001      	beq.n	800b5f6 <netif_add+0xba>
    return NULL;
 800b5f2:	2300      	movs	r3, #0
 800b5f4:	e058      	b.n	800b6a8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800b5f6:	68fb      	ldr	r3, [r7, #12]
 800b5f8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b5fc:	2bff      	cmp	r3, #255	; 0xff
 800b5fe:	d103      	bne.n	800b608 <netif_add+0xcc>
        netif->num = 0;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	2200      	movs	r2, #0
 800b604:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800b608:	2300      	movs	r3, #0
 800b60a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b60c:	4b2f      	ldr	r3, [pc, #188]	; (800b6cc <netif_add+0x190>)
 800b60e:	681b      	ldr	r3, [r3, #0]
 800b610:	617b      	str	r3, [r7, #20]
 800b612:	e02b      	b.n	800b66c <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800b614:	697a      	ldr	r2, [r7, #20]
 800b616:	68fb      	ldr	r3, [r7, #12]
 800b618:	429a      	cmp	r2, r3
 800b61a:	d106      	bne.n	800b62a <netif_add+0xee>
 800b61c:	4b24      	ldr	r3, [pc, #144]	; (800b6b0 <netif_add+0x174>)
 800b61e:	f240 128b 	movw	r2, #395	; 0x18b
 800b622:	492b      	ldr	r1, [pc, #172]	; (800b6d0 <netif_add+0x194>)
 800b624:	4824      	ldr	r0, [pc, #144]	; (800b6b8 <netif_add+0x17c>)
 800b626:	f00a ff93 	bl	8016550 <iprintf>
        num_netifs++;
 800b62a:	693b      	ldr	r3, [r7, #16]
 800b62c:	3301      	adds	r3, #1
 800b62e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800b630:	693b      	ldr	r3, [r7, #16]
 800b632:	2bff      	cmp	r3, #255	; 0xff
 800b634:	dd06      	ble.n	800b644 <netif_add+0x108>
 800b636:	4b1e      	ldr	r3, [pc, #120]	; (800b6b0 <netif_add+0x174>)
 800b638:	f240 128d 	movw	r2, #397	; 0x18d
 800b63c:	4925      	ldr	r1, [pc, #148]	; (800b6d4 <netif_add+0x198>)
 800b63e:	481e      	ldr	r0, [pc, #120]	; (800b6b8 <netif_add+0x17c>)
 800b640:	f00a ff86 	bl	8016550 <iprintf>
        if (netif2->num == netif->num) {
 800b644:	697b      	ldr	r3, [r7, #20]
 800b646:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800b64a:	68fb      	ldr	r3, [r7, #12]
 800b64c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b650:	429a      	cmp	r2, r3
 800b652:	d108      	bne.n	800b666 <netif_add+0x12a>
          netif->num++;
 800b654:	68fb      	ldr	r3, [r7, #12]
 800b656:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b65a:	3301      	adds	r3, #1
 800b65c:	b2da      	uxtb	r2, r3
 800b65e:	68fb      	ldr	r3, [r7, #12]
 800b660:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800b664:	e005      	b.n	800b672 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800b666:	697b      	ldr	r3, [r7, #20]
 800b668:	681b      	ldr	r3, [r3, #0]
 800b66a:	617b      	str	r3, [r7, #20]
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	2b00      	cmp	r3, #0
 800b670:	d1d0      	bne.n	800b614 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800b672:	697b      	ldr	r3, [r7, #20]
 800b674:	2b00      	cmp	r3, #0
 800b676:	d1be      	bne.n	800b5f6 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b67e:	2bfe      	cmp	r3, #254	; 0xfe
 800b680:	d103      	bne.n	800b68a <netif_add+0x14e>
    netif_num = 0;
 800b682:	4b11      	ldr	r3, [pc, #68]	; (800b6c8 <netif_add+0x18c>)
 800b684:	2200      	movs	r2, #0
 800b686:	701a      	strb	r2, [r3, #0]
 800b688:	e006      	b.n	800b698 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800b68a:	68fb      	ldr	r3, [r7, #12]
 800b68c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800b690:	3301      	adds	r3, #1
 800b692:	b2da      	uxtb	r2, r3
 800b694:	4b0c      	ldr	r3, [pc, #48]	; (800b6c8 <netif_add+0x18c>)
 800b696:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800b698:	4b0c      	ldr	r3, [pc, #48]	; (800b6cc <netif_add+0x190>)
 800b69a:	681a      	ldr	r2, [r3, #0]
 800b69c:	68fb      	ldr	r3, [r7, #12]
 800b69e:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800b6a0:	4a0a      	ldr	r2, [pc, #40]	; (800b6cc <netif_add+0x190>)
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800b6a6:	68fb      	ldr	r3, [r7, #12]
}
 800b6a8:	4618      	mov	r0, r3
 800b6aa:	3718      	adds	r7, #24
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	08018408 	.word	0x08018408
 800b6b4:	0801849c 	.word	0x0801849c
 800b6b8:	08018458 	.word	0x08018458
 800b6bc:	080184b8 	.word	0x080184b8
 800b6c0:	0801ac24 	.word	0x0801ac24
 800b6c4:	0800bad5 	.word	0x0800bad5
 800b6c8:	2000d134 	.word	0x2000d134
 800b6cc:	2000d12c 	.word	0x2000d12c
 800b6d0:	080184dc 	.word	0x080184dc
 800b6d4:	080184f0 	.word	0x080184f0

0800b6d8 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b082      	sub	sp, #8
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
 800b6e0:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800b6e2:	6839      	ldr	r1, [r7, #0]
 800b6e4:	6878      	ldr	r0, [r7, #4]
 800b6e6:	f002 ffc3 	bl	800e670 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800b6ea:	6839      	ldr	r1, [r7, #0]
 800b6ec:	6878      	ldr	r0, [r7, #4]
 800b6ee:	f008 f821 	bl	8013734 <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800b6f2:	bf00      	nop
 800b6f4:	3708      	adds	r7, #8
 800b6f6:	46bd      	mov	sp, r7
 800b6f8:	bd80      	pop	{r7, pc}
	...

0800b6fc <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800b6fc:	b580      	push	{r7, lr}
 800b6fe:	b086      	sub	sp, #24
 800b700:	af00      	add	r7, sp, #0
 800b702:	60f8      	str	r0, [r7, #12]
 800b704:	60b9      	str	r1, [r7, #8]
 800b706:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d106      	bne.n	800b71c <netif_do_set_ipaddr+0x20>
 800b70e:	4b21      	ldr	r3, [pc, #132]	; (800b794 <netif_do_set_ipaddr+0x98>)
 800b710:	f240 12cb 	movw	r2, #459	; 0x1cb
 800b714:	4920      	ldr	r1, [pc, #128]	; (800b798 <netif_do_set_ipaddr+0x9c>)
 800b716:	4821      	ldr	r0, [pc, #132]	; (800b79c <netif_do_set_ipaddr+0xa0>)
 800b718:	f00a ff1a 	bl	8016550 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	d106      	bne.n	800b730 <netif_do_set_ipaddr+0x34>
 800b722:	4b1c      	ldr	r3, [pc, #112]	; (800b794 <netif_do_set_ipaddr+0x98>)
 800b724:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800b728:	491b      	ldr	r1, [pc, #108]	; (800b798 <netif_do_set_ipaddr+0x9c>)
 800b72a:	481c      	ldr	r0, [pc, #112]	; (800b79c <netif_do_set_ipaddr+0xa0>)
 800b72c:	f00a ff10 	bl	8016550 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800b730:	68bb      	ldr	r3, [r7, #8]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	3304      	adds	r3, #4
 800b738:	681b      	ldr	r3, [r3, #0]
 800b73a:	429a      	cmp	r2, r3
 800b73c:	d024      	beq.n	800b788 <netif_do_set_ipaddr+0x8c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800b73e:	68bb      	ldr	r3, [r7, #8]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	3304      	adds	r3, #4
 800b748:	681a      	ldr	r2, [r3, #0]
 800b74a:	687b      	ldr	r3, [r7, #4]
 800b74c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800b74e:	f107 0314 	add.w	r3, r7, #20
 800b752:	4619      	mov	r1, r3
 800b754:	6878      	ldr	r0, [r7, #4]
 800b756:	f7ff ffbf 	bl	800b6d8 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800b75a:	68bb      	ldr	r3, [r7, #8]
 800b75c:	2b00      	cmp	r3, #0
 800b75e:	d002      	beq.n	800b766 <netif_do_set_ipaddr+0x6a>
 800b760:	68bb      	ldr	r3, [r7, #8]
 800b762:	681b      	ldr	r3, [r3, #0]
 800b764:	e000      	b.n	800b768 <netif_do_set_ipaddr+0x6c>
 800b766:	2300      	movs	r3, #0
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800b76c:	2101      	movs	r1, #1
 800b76e:	68f8      	ldr	r0, [r7, #12]
 800b770:	f000 f8e2 	bl	800b938 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	69db      	ldr	r3, [r3, #28]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d003      	beq.n	800b784 <netif_do_set_ipaddr+0x88>
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	69db      	ldr	r3, [r3, #28]
 800b780:	68f8      	ldr	r0, [r7, #12]
 800b782:	4798      	blx	r3
    return 1; /* address changed */
 800b784:	2301      	movs	r3, #1
 800b786:	e000      	b.n	800b78a <netif_do_set_ipaddr+0x8e>
  }
  return 0; /* address unchanged */
 800b788:	2300      	movs	r3, #0
}
 800b78a:	4618      	mov	r0, r3
 800b78c:	3718      	adds	r7, #24
 800b78e:	46bd      	mov	sp, r7
 800b790:	bd80      	pop	{r7, pc}
 800b792:	bf00      	nop
 800b794:	08018408 	.word	0x08018408
 800b798:	08018520 	.word	0x08018520
 800b79c:	08018458 	.word	0x08018458

0800b7a0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b085      	sub	sp, #20
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	60f8      	str	r0, [r7, #12]
 800b7a8:	60b9      	str	r1, [r7, #8]
 800b7aa:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	681a      	ldr	r2, [r3, #0]
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	3308      	adds	r3, #8
 800b7b4:	681b      	ldr	r3, [r3, #0]
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d00a      	beq.n	800b7d0 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800b7ba:	68bb      	ldr	r3, [r7, #8]
 800b7bc:	2b00      	cmp	r3, #0
 800b7be:	d002      	beq.n	800b7c6 <netif_do_set_netmask+0x26>
 800b7c0:	68bb      	ldr	r3, [r7, #8]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	e000      	b.n	800b7c8 <netif_do_set_netmask+0x28>
 800b7c6:	2300      	movs	r3, #0
 800b7c8:	68fa      	ldr	r2, [r7, #12]
 800b7ca:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800b7cc:	2301      	movs	r3, #1
 800b7ce:	e000      	b.n	800b7d2 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800b7d0:	2300      	movs	r3, #0
}
 800b7d2:	4618      	mov	r0, r3
 800b7d4:	3714      	adds	r7, #20
 800b7d6:	46bd      	mov	sp, r7
 800b7d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7dc:	4770      	bx	lr

0800b7de <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800b7de:	b480      	push	{r7}
 800b7e0:	b085      	sub	sp, #20
 800b7e2:	af00      	add	r7, sp, #0
 800b7e4:	60f8      	str	r0, [r7, #12]
 800b7e6:	60b9      	str	r1, [r7, #8]
 800b7e8:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800b7ea:	68bb      	ldr	r3, [r7, #8]
 800b7ec:	681a      	ldr	r2, [r3, #0]
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	330c      	adds	r3, #12
 800b7f2:	681b      	ldr	r3, [r3, #0]
 800b7f4:	429a      	cmp	r2, r3
 800b7f6:	d00a      	beq.n	800b80e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2b00      	cmp	r3, #0
 800b7fc:	d002      	beq.n	800b804 <netif_do_set_gw+0x26>
 800b7fe:	68bb      	ldr	r3, [r7, #8]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	e000      	b.n	800b806 <netif_do_set_gw+0x28>
 800b804:	2300      	movs	r3, #0
 800b806:	68fa      	ldr	r2, [r7, #12]
 800b808:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800b80a:	2301      	movs	r3, #1
 800b80c:	e000      	b.n	800b810 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800b80e:	2300      	movs	r3, #0
}
 800b810:	4618      	mov	r0, r3
 800b812:	3714      	adds	r7, #20
 800b814:	46bd      	mov	sp, r7
 800b816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b81a:	4770      	bx	lr

0800b81c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800b81c:	b580      	push	{r7, lr}
 800b81e:	b088      	sub	sp, #32
 800b820:	af00      	add	r7, sp, #0
 800b822:	60f8      	str	r0, [r7, #12]
 800b824:	60b9      	str	r1, [r7, #8]
 800b826:	607a      	str	r2, [r7, #4]
 800b828:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800b82a:	2300      	movs	r3, #0
 800b82c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800b82e:	2300      	movs	r3, #0
 800b830:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800b832:	68bb      	ldr	r3, [r7, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	d101      	bne.n	800b83c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800b838:	4b1c      	ldr	r3, [pc, #112]	; (800b8ac <netif_set_addr+0x90>)
 800b83a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	2b00      	cmp	r3, #0
 800b840:	d101      	bne.n	800b846 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800b842:	4b1a      	ldr	r3, [pc, #104]	; (800b8ac <netif_set_addr+0x90>)
 800b844:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800b846:	683b      	ldr	r3, [r7, #0]
 800b848:	2b00      	cmp	r3, #0
 800b84a:	d101      	bne.n	800b850 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800b84c:	4b17      	ldr	r3, [pc, #92]	; (800b8ac <netif_set_addr+0x90>)
 800b84e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800b850:	68bb      	ldr	r3, [r7, #8]
 800b852:	2b00      	cmp	r3, #0
 800b854:	d003      	beq.n	800b85e <netif_set_addr+0x42>
 800b856:	68bb      	ldr	r3, [r7, #8]
 800b858:	681b      	ldr	r3, [r3, #0]
 800b85a:	2b00      	cmp	r3, #0
 800b85c:	d101      	bne.n	800b862 <netif_set_addr+0x46>
 800b85e:	2301      	movs	r3, #1
 800b860:	e000      	b.n	800b864 <netif_set_addr+0x48>
 800b862:	2300      	movs	r3, #0
 800b864:	617b      	str	r3, [r7, #20]
  if (remove) {
 800b866:	697b      	ldr	r3, [r7, #20]
 800b868:	2b00      	cmp	r3, #0
 800b86a:	d006      	beq.n	800b87a <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b86c:	f107 0310 	add.w	r3, r7, #16
 800b870:	461a      	mov	r2, r3
 800b872:	68b9      	ldr	r1, [r7, #8]
 800b874:	68f8      	ldr	r0, [r7, #12]
 800b876:	f7ff ff41 	bl	800b6fc <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800b87a:	69fa      	ldr	r2, [r7, #28]
 800b87c:	6879      	ldr	r1, [r7, #4]
 800b87e:	68f8      	ldr	r0, [r7, #12]
 800b880:	f7ff ff8e 	bl	800b7a0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800b884:	69ba      	ldr	r2, [r7, #24]
 800b886:	6839      	ldr	r1, [r7, #0]
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f7ff ffa8 	bl	800b7de <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800b88e:	697b      	ldr	r3, [r7, #20]
 800b890:	2b00      	cmp	r3, #0
 800b892:	d106      	bne.n	800b8a2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800b894:	f107 0310 	add.w	r3, r7, #16
 800b898:	461a      	mov	r2, r3
 800b89a:	68b9      	ldr	r1, [r7, #8]
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f7ff ff2d 	bl	800b6fc <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800b8a2:	bf00      	nop
 800b8a4:	3720      	adds	r7, #32
 800b8a6:	46bd      	mov	sp, r7
 800b8a8:	bd80      	pop	{r7, pc}
 800b8aa:	bf00      	nop
 800b8ac:	0801ac24 	.word	0x0801ac24

0800b8b0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800b8b0:	b480      	push	{r7}
 800b8b2:	b083      	sub	sp, #12
 800b8b4:	af00      	add	r7, sp, #0
 800b8b6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800b8b8:	4a04      	ldr	r2, [pc, #16]	; (800b8cc <netif_set_default+0x1c>)
 800b8ba:	687b      	ldr	r3, [r7, #4]
 800b8bc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800b8be:	bf00      	nop
 800b8c0:	370c      	adds	r7, #12
 800b8c2:	46bd      	mov	sp, r7
 800b8c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8c8:	4770      	bx	lr
 800b8ca:	bf00      	nop
 800b8cc:	2000d130 	.word	0x2000d130

0800b8d0 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800b8d0:	b580      	push	{r7, lr}
 800b8d2:	b082      	sub	sp, #8
 800b8d4:	af00      	add	r7, sp, #0
 800b8d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d107      	bne.n	800b8ee <netif_set_up+0x1e>
 800b8de:	4b13      	ldr	r3, [pc, #76]	; (800b92c <netif_set_up+0x5c>)
 800b8e0:	f44f 7254 	mov.w	r2, #848	; 0x350
 800b8e4:	4912      	ldr	r1, [pc, #72]	; (800b930 <netif_set_up+0x60>)
 800b8e6:	4813      	ldr	r0, [pc, #76]	; (800b934 <netif_set_up+0x64>)
 800b8e8:	f00a fe32 	bl	8016550 <iprintf>
 800b8ec:	e01b      	b.n	800b926 <netif_set_up+0x56>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b8f4:	f003 0301 	and.w	r3, r3, #1
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d114      	bne.n	800b926 <netif_set_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b902:	f043 0301 	orr.w	r3, r3, #1
 800b906:	b2da      	uxtb	r2, r3
 800b908:	687b      	ldr	r3, [r7, #4]
 800b90a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

    NETIF_STATUS_CALLBACK(netif);
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	69db      	ldr	r3, [r3, #28]
 800b912:	2b00      	cmp	r3, #0
 800b914:	d003      	beq.n	800b91e <netif_set_up+0x4e>
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	69db      	ldr	r3, [r3, #28]
 800b91a:	6878      	ldr	r0, [r7, #4]
 800b91c:	4798      	blx	r3
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800b91e:	2103      	movs	r1, #3
 800b920:	6878      	ldr	r0, [r7, #4]
 800b922:	f000 f809 	bl	800b938 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800b926:	3708      	adds	r7, #8
 800b928:	46bd      	mov	sp, r7
 800b92a:	bd80      	pop	{r7, pc}
 800b92c:	08018408 	.word	0x08018408
 800b930:	08018590 	.word	0x08018590
 800b934:	08018458 	.word	0x08018458

0800b938 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800b938:	b580      	push	{r7, lr}
 800b93a:	b082      	sub	sp, #8
 800b93c:	af00      	add	r7, sp, #0
 800b93e:	6078      	str	r0, [r7, #4]
 800b940:	460b      	mov	r3, r1
 800b942:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d106      	bne.n	800b958 <netif_issue_reports+0x20>
 800b94a:	4b18      	ldr	r3, [pc, #96]	; (800b9ac <netif_issue_reports+0x74>)
 800b94c:	f240 326d 	movw	r2, #877	; 0x36d
 800b950:	4917      	ldr	r1, [pc, #92]	; (800b9b0 <netif_issue_reports+0x78>)
 800b952:	4818      	ldr	r0, [pc, #96]	; (800b9b4 <netif_issue_reports+0x7c>)
 800b954:	f00a fdfc 	bl	8016550 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b958:	687b      	ldr	r3, [r7, #4]
 800b95a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b95e:	f003 0304 	and.w	r3, r3, #4
 800b962:	2b00      	cmp	r3, #0
 800b964:	d01e      	beq.n	800b9a4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b96c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800b970:	2b00      	cmp	r3, #0
 800b972:	d017      	beq.n	800b9a4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b974:	78fb      	ldrb	r3, [r7, #3]
 800b976:	f003 0301 	and.w	r3, r3, #1
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d013      	beq.n	800b9a6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800b97e:	687b      	ldr	r3, [r7, #4]
 800b980:	3304      	adds	r3, #4
 800b982:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800b984:	2b00      	cmp	r3, #0
 800b986:	d00e      	beq.n	800b9a6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800b988:	687b      	ldr	r3, [r7, #4]
 800b98a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b98e:	f003 0308 	and.w	r3, r3, #8
 800b992:	2b00      	cmp	r3, #0
 800b994:	d007      	beq.n	800b9a6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	3304      	adds	r3, #4
 800b99a:	4619      	mov	r1, r3
 800b99c:	6878      	ldr	r0, [r7, #4]
 800b99e:	f008 fe33 	bl	8014608 <etharp_request>
 800b9a2:	e000      	b.n	800b9a6 <netif_issue_reports+0x6e>
    return;
 800b9a4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800b9a6:	3708      	adds	r7, #8
 800b9a8:	46bd      	mov	sp, r7
 800b9aa:	bd80      	pop	{r7, pc}
 800b9ac:	08018408 	.word	0x08018408
 800b9b0:	080185ac 	.word	0x080185ac
 800b9b4:	08018458 	.word	0x08018458

0800b9b8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b082      	sub	sp, #8
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	2b00      	cmp	r3, #0
 800b9c4:	d107      	bne.n	800b9d6 <netif_set_down+0x1e>
 800b9c6:	4b16      	ldr	r3, [pc, #88]	; (800ba20 <netif_set_down+0x68>)
 800b9c8:	f240 329b 	movw	r2, #923	; 0x39b
 800b9cc:	4915      	ldr	r1, [pc, #84]	; (800ba24 <netif_set_down+0x6c>)
 800b9ce:	4816      	ldr	r0, [pc, #88]	; (800ba28 <netif_set_down+0x70>)
 800b9d0:	f00a fdbe 	bl	8016550 <iprintf>
 800b9d4:	e021      	b.n	800ba1a <netif_set_down+0x62>

  if (netif->flags & NETIF_FLAG_UP) {
 800b9d6:	687b      	ldr	r3, [r7, #4]
 800b9d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9dc:	f003 0301 	and.w	r3, r3, #1
 800b9e0:	2b00      	cmp	r3, #0
 800b9e2:	d01a      	beq.n	800ba1a <netif_set_down+0x62>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800b9e4:	687b      	ldr	r3, [r7, #4]
 800b9e6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9ea:	f023 0301 	bic.w	r3, r3, #1
 800b9ee:	b2da      	uxtb	r2, r3
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b9fc:	f003 0308 	and.w	r3, r3, #8
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d002      	beq.n	800ba0a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ba04:	6878      	ldr	r0, [r7, #4]
 800ba06:	f008 f9bd 	bl	8013d84 <etharp_cleanup_netif>

#if LWIP_IPV6
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
 800ba0a:	687b      	ldr	r3, [r7, #4]
 800ba0c:	69db      	ldr	r3, [r3, #28]
 800ba0e:	2b00      	cmp	r3, #0
 800ba10:	d003      	beq.n	800ba1a <netif_set_down+0x62>
 800ba12:	687b      	ldr	r3, [r7, #4]
 800ba14:	69db      	ldr	r3, [r3, #28]
 800ba16:	6878      	ldr	r0, [r7, #4]
 800ba18:	4798      	blx	r3
  }
}
 800ba1a:	3708      	adds	r7, #8
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	08018408 	.word	0x08018408
 800ba24:	080185d0 	.word	0x080185d0
 800ba28:	08018458 	.word	0x08018458

0800ba2c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b082      	sub	sp, #8
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d107      	bne.n	800ba4a <netif_set_link_up+0x1e>
 800ba3a:	4b0f      	ldr	r3, [pc, #60]	; (800ba78 <netif_set_link_up+0x4c>)
 800ba3c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ba40:	490e      	ldr	r1, [pc, #56]	; (800ba7c <netif_set_link_up+0x50>)
 800ba42:	480f      	ldr	r0, [pc, #60]	; (800ba80 <netif_set_link_up+0x54>)
 800ba44:	f00a fd84 	bl	8016550 <iprintf>
 800ba48:	e013      	b.n	800ba72 <netif_set_link_up+0x46>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ba4a:	687b      	ldr	r3, [r7, #4]
 800ba4c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba50:	f003 0304 	and.w	r3, r3, #4
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d10c      	bne.n	800ba72 <netif_set_link_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ba58:	687b      	ldr	r3, [r7, #4]
 800ba5a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ba5e:	f043 0304 	orr.w	r3, r3, #4
 800ba62:	b2da      	uxtb	r2, r3
 800ba64:	687b      	ldr	r3, [r7, #4]
 800ba66:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ba6a:	2103      	movs	r1, #3
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	f7ff ff63 	bl	800b938 <netif_issue_reports>
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800ba72:	3708      	adds	r7, #8
 800ba74:	46bd      	mov	sp, r7
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	08018408 	.word	0x08018408
 800ba7c:	080185f0 	.word	0x080185f0
 800ba80:	08018458 	.word	0x08018458

0800ba84 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800ba84:	b580      	push	{r7, lr}
 800ba86:	b082      	sub	sp, #8
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d107      	bne.n	800baa2 <netif_set_link_down+0x1e>
 800ba92:	4b0d      	ldr	r3, [pc, #52]	; (800bac8 <netif_set_link_down+0x44>)
 800ba94:	f240 4206 	movw	r2, #1030	; 0x406
 800ba98:	490c      	ldr	r1, [pc, #48]	; (800bacc <netif_set_link_down+0x48>)
 800ba9a:	480d      	ldr	r0, [pc, #52]	; (800bad0 <netif_set_link_down+0x4c>)
 800ba9c:	f00a fd58 	bl	8016550 <iprintf>
 800baa0:	e00f      	b.n	800bac2 <netif_set_link_down+0x3e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800baa2:	687b      	ldr	r3, [r7, #4]
 800baa4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800baa8:	f003 0304 	and.w	r3, r3, #4
 800baac:	2b00      	cmp	r3, #0
 800baae:	d008      	beq.n	800bac2 <netif_set_link_down+0x3e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800bab6:	f023 0304 	bic.w	r3, r3, #4
 800baba:	b2da      	uxtb	r2, r3
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800bac2:	3708      	adds	r7, #8
 800bac4:	46bd      	mov	sp, r7
 800bac6:	bd80      	pop	{r7, pc}
 800bac8:	08018408 	.word	0x08018408
 800bacc:	08018614 	.word	0x08018614
 800bad0:	08018458 	.word	0x08018458

0800bad4 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800bad4:	b480      	push	{r7}
 800bad6:	b085      	sub	sp, #20
 800bad8:	af00      	add	r7, sp, #0
 800bada:	60f8      	str	r0, [r7, #12]
 800badc:	60b9      	str	r1, [r7, #8]
 800bade:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800bae0:	f06f 030b 	mvn.w	r3, #11
}
 800bae4:	4618      	mov	r0, r3
 800bae6:	3714      	adds	r7, #20
 800bae8:	46bd      	mov	sp, r7
 800baea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800baee:	4770      	bx	lr

0800baf0 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800baf0:	b480      	push	{r7}
 800baf2:	b085      	sub	sp, #20
 800baf4:	af00      	add	r7, sp, #0
 800baf6:	4603      	mov	r3, r0
 800baf8:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800bafa:	79fb      	ldrb	r3, [r7, #7]
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d013      	beq.n	800bb28 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800bb00:	4b0d      	ldr	r3, [pc, #52]	; (800bb38 <netif_get_by_index+0x48>)
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	60fb      	str	r3, [r7, #12]
 800bb06:	e00c      	b.n	800bb22 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800bb0e:	3301      	adds	r3, #1
 800bb10:	b2db      	uxtb	r3, r3
 800bb12:	79fa      	ldrb	r2, [r7, #7]
 800bb14:	429a      	cmp	r2, r3
 800bb16:	d101      	bne.n	800bb1c <netif_get_by_index+0x2c>
        return netif; /* found! */
 800bb18:	68fb      	ldr	r3, [r7, #12]
 800bb1a:	e006      	b.n	800bb2a <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800bb1c:	68fb      	ldr	r3, [r7, #12]
 800bb1e:	681b      	ldr	r3, [r3, #0]
 800bb20:	60fb      	str	r3, [r7, #12]
 800bb22:	68fb      	ldr	r3, [r7, #12]
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1ef      	bne.n	800bb08 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800bb28:	2300      	movs	r3, #0
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	3714      	adds	r7, #20
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	2000d12c 	.word	0x2000d12c

0800bb3c <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800bb3c:	b580      	push	{r7, lr}
 800bb3e:	b082      	sub	sp, #8
 800bb40:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800bb42:	f00a fb0f 	bl	8016164 <sys_arch_protect>
 800bb46:	6038      	str	r0, [r7, #0]
 800bb48:	4b0d      	ldr	r3, [pc, #52]	; (800bb80 <pbuf_free_ooseq+0x44>)
 800bb4a:	2200      	movs	r2, #0
 800bb4c:	701a      	strb	r2, [r3, #0]
 800bb4e:	6838      	ldr	r0, [r7, #0]
 800bb50:	f00a fb16 	bl	8016180 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb54:	4b0b      	ldr	r3, [pc, #44]	; (800bb84 <pbuf_free_ooseq+0x48>)
 800bb56:	681b      	ldr	r3, [r3, #0]
 800bb58:	607b      	str	r3, [r7, #4]
 800bb5a:	e00a      	b.n	800bb72 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800bb5c:	687b      	ldr	r3, [r7, #4]
 800bb5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800bb60:	2b00      	cmp	r3, #0
 800bb62:	d003      	beq.n	800bb6c <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800bb64:	6878      	ldr	r0, [r7, #4]
 800bb66:	f002 fdc1 	bl	800e6ec <tcp_free_ooseq>
      return;
 800bb6a:	e005      	b.n	800bb78 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	68db      	ldr	r3, [r3, #12]
 800bb70:	607b      	str	r3, [r7, #4]
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2b00      	cmp	r3, #0
 800bb76:	d1f1      	bne.n	800bb5c <pbuf_free_ooseq+0x20>
    }
  }
}
 800bb78:	3708      	adds	r7, #8
 800bb7a:	46bd      	mov	sp, r7
 800bb7c:	bd80      	pop	{r7, pc}
 800bb7e:	bf00      	nop
 800bb80:	2000d135 	.word	0x2000d135
 800bb84:	2000d144 	.word	0x2000d144

0800bb88 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800bb88:	b580      	push	{r7, lr}
 800bb8a:	b082      	sub	sp, #8
 800bb8c:	af00      	add	r7, sp, #0
 800bb8e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800bb90:	f7ff ffd4 	bl	800bb3c <pbuf_free_ooseq>
}
 800bb94:	bf00      	nop
 800bb96:	3708      	adds	r7, #8
 800bb98:	46bd      	mov	sp, r7
 800bb9a:	bd80      	pop	{r7, pc}

0800bb9c <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b082      	sub	sp, #8
 800bba0:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800bba2:	f00a fadf 	bl	8016164 <sys_arch_protect>
 800bba6:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800bba8:	4b0f      	ldr	r3, [pc, #60]	; (800bbe8 <pbuf_pool_is_empty+0x4c>)
 800bbaa:	781b      	ldrb	r3, [r3, #0]
 800bbac:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800bbae:	4b0e      	ldr	r3, [pc, #56]	; (800bbe8 <pbuf_pool_is_empty+0x4c>)
 800bbb0:	2201      	movs	r2, #1
 800bbb2:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800bbb4:	6878      	ldr	r0, [r7, #4]
 800bbb6:	f00a fae3 	bl	8016180 <sys_arch_unprotect>

  if (!queued) {
 800bbba:	78fb      	ldrb	r3, [r7, #3]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d10f      	bne.n	800bbe0 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800bbc0:	2100      	movs	r1, #0
 800bbc2:	480a      	ldr	r0, [pc, #40]	; (800bbec <pbuf_pool_is_empty+0x50>)
 800bbc4:	f7fc ff7a 	bl	8008abc <tcpip_try_callback>
 800bbc8:	4603      	mov	r3, r0
 800bbca:	2b00      	cmp	r3, #0
 800bbcc:	d008      	beq.n	800bbe0 <pbuf_pool_is_empty+0x44>
 800bbce:	f00a fac9 	bl	8016164 <sys_arch_protect>
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	4b04      	ldr	r3, [pc, #16]	; (800bbe8 <pbuf_pool_is_empty+0x4c>)
 800bbd6:	2200      	movs	r2, #0
 800bbd8:	701a      	strb	r2, [r3, #0]
 800bbda:	6878      	ldr	r0, [r7, #4]
 800bbdc:	f00a fad0 	bl	8016180 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800bbe0:	bf00      	nop
 800bbe2:	3708      	adds	r7, #8
 800bbe4:	46bd      	mov	sp, r7
 800bbe6:	bd80      	pop	{r7, pc}
 800bbe8:	2000d135 	.word	0x2000d135
 800bbec:	0800bb89 	.word	0x0800bb89

0800bbf0 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b085      	sub	sp, #20
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	60f8      	str	r0, [r7, #12]
 800bbf8:	60b9      	str	r1, [r7, #8]
 800bbfa:	4611      	mov	r1, r2
 800bbfc:	461a      	mov	r2, r3
 800bbfe:	460b      	mov	r3, r1
 800bc00:	80fb      	strh	r3, [r7, #6]
 800bc02:	4613      	mov	r3, r2
 800bc04:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	2200      	movs	r2, #0
 800bc0a:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	68ba      	ldr	r2, [r7, #8]
 800bc10:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800bc12:	68fb      	ldr	r3, [r7, #12]
 800bc14:	88fa      	ldrh	r2, [r7, #6]
 800bc16:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800bc18:	68fb      	ldr	r3, [r7, #12]
 800bc1a:	88ba      	ldrh	r2, [r7, #4]
 800bc1c:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800bc1e:	8b3b      	ldrh	r3, [r7, #24]
 800bc20:	b2da      	uxtb	r2, r3
 800bc22:	68fb      	ldr	r3, [r7, #12]
 800bc24:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	7f3a      	ldrb	r2, [r7, #28]
 800bc2a:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	2201      	movs	r2, #1
 800bc30:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800bc32:	68fb      	ldr	r3, [r7, #12]
 800bc34:	2200      	movs	r2, #0
 800bc36:	73da      	strb	r2, [r3, #15]
}
 800bc38:	bf00      	nop
 800bc3a:	3714      	adds	r7, #20
 800bc3c:	46bd      	mov	sp, r7
 800bc3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc42:	4770      	bx	lr

0800bc44 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	b08c      	sub	sp, #48	; 0x30
 800bc48:	af02      	add	r7, sp, #8
 800bc4a:	4603      	mov	r3, r0
 800bc4c:	71fb      	strb	r3, [r7, #7]
 800bc4e:	460b      	mov	r3, r1
 800bc50:	80bb      	strh	r3, [r7, #4]
 800bc52:	4613      	mov	r3, r2
 800bc54:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800bc56:	79fb      	ldrb	r3, [r7, #7]
 800bc58:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800bc5a:	887b      	ldrh	r3, [r7, #2]
 800bc5c:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc60:	d07f      	beq.n	800bd62 <pbuf_alloc+0x11e>
 800bc62:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800bc66:	f300 80c8 	bgt.w	800bdfa <pbuf_alloc+0x1b6>
 800bc6a:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc6e:	d010      	beq.n	800bc92 <pbuf_alloc+0x4e>
 800bc70:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800bc74:	f300 80c1 	bgt.w	800bdfa <pbuf_alloc+0x1b6>
 800bc78:	2b01      	cmp	r3, #1
 800bc7a:	d002      	beq.n	800bc82 <pbuf_alloc+0x3e>
 800bc7c:	2b41      	cmp	r3, #65	; 0x41
 800bc7e:	f040 80bc 	bne.w	800bdfa <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800bc82:	887a      	ldrh	r2, [r7, #2]
 800bc84:	88bb      	ldrh	r3, [r7, #4]
 800bc86:	4619      	mov	r1, r3
 800bc88:	2000      	movs	r0, #0
 800bc8a:	f000 f8d1 	bl	800be30 <pbuf_alloc_reference>
 800bc8e:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800bc90:	e0bd      	b.n	800be0e <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800bc92:	2300      	movs	r3, #0
 800bc94:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800bc96:	2300      	movs	r3, #0
 800bc98:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800bc9a:	88bb      	ldrh	r3, [r7, #4]
 800bc9c:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800bc9e:	200d      	movs	r0, #13
 800bca0:	f7ff fba4 	bl	800b3ec <memp_malloc>
 800bca4:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800bca6:	693b      	ldr	r3, [r7, #16]
 800bca8:	2b00      	cmp	r3, #0
 800bcaa:	d109      	bne.n	800bcc0 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800bcac:	f7ff ff76 	bl	800bb9c <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800bcb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bcb2:	2b00      	cmp	r3, #0
 800bcb4:	d002      	beq.n	800bcbc <pbuf_alloc+0x78>
            pbuf_free(p);
 800bcb6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bcb8:	f000 faa8 	bl	800c20c <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800bcbc:	2300      	movs	r3, #0
 800bcbe:	e0a7      	b.n	800be10 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800bcc0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcc2:	3303      	adds	r3, #3
 800bcc4:	b29b      	uxth	r3, r3
 800bcc6:	f023 0303 	bic.w	r3, r3, #3
 800bcca:	b29b      	uxth	r3, r3
 800bccc:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800bcd0:	b29b      	uxth	r3, r3
 800bcd2:	8b7a      	ldrh	r2, [r7, #26]
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	bf28      	it	cs
 800bcd8:	4613      	movcs	r3, r2
 800bcda:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800bcdc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bcde:	3310      	adds	r3, #16
 800bce0:	693a      	ldr	r2, [r7, #16]
 800bce2:	4413      	add	r3, r2
 800bce4:	3303      	adds	r3, #3
 800bce6:	f023 0303 	bic.w	r3, r3, #3
 800bcea:	4618      	mov	r0, r3
 800bcec:	89f9      	ldrh	r1, [r7, #14]
 800bcee:	8b7a      	ldrh	r2, [r7, #26]
 800bcf0:	2300      	movs	r3, #0
 800bcf2:	9301      	str	r3, [sp, #4]
 800bcf4:	887b      	ldrh	r3, [r7, #2]
 800bcf6:	9300      	str	r3, [sp, #0]
 800bcf8:	460b      	mov	r3, r1
 800bcfa:	4601      	mov	r1, r0
 800bcfc:	6938      	ldr	r0, [r7, #16]
 800bcfe:	f7ff ff77 	bl	800bbf0 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800bd02:	693b      	ldr	r3, [r7, #16]
 800bd04:	685b      	ldr	r3, [r3, #4]
 800bd06:	f003 0303 	and.w	r3, r3, #3
 800bd0a:	2b00      	cmp	r3, #0
 800bd0c:	d006      	beq.n	800bd1c <pbuf_alloc+0xd8>
 800bd0e:	4b42      	ldr	r3, [pc, #264]	; (800be18 <pbuf_alloc+0x1d4>)
 800bd10:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bd14:	4941      	ldr	r1, [pc, #260]	; (800be1c <pbuf_alloc+0x1d8>)
 800bd16:	4842      	ldr	r0, [pc, #264]	; (800be20 <pbuf_alloc+0x1dc>)
 800bd18:	f00a fc1a 	bl	8016550 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800bd1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd1e:	3303      	adds	r3, #3
 800bd20:	f023 0303 	bic.w	r3, r3, #3
 800bd24:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800bd28:	d106      	bne.n	800bd38 <pbuf_alloc+0xf4>
 800bd2a:	4b3b      	ldr	r3, [pc, #236]	; (800be18 <pbuf_alloc+0x1d4>)
 800bd2c:	f44f 7281 	mov.w	r2, #258	; 0x102
 800bd30:	493c      	ldr	r1, [pc, #240]	; (800be24 <pbuf_alloc+0x1e0>)
 800bd32:	483b      	ldr	r0, [pc, #236]	; (800be20 <pbuf_alloc+0x1dc>)
 800bd34:	f00a fc0c 	bl	8016550 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800bd38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d102      	bne.n	800bd44 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800bd3e:	693b      	ldr	r3, [r7, #16]
 800bd40:	627b      	str	r3, [r7, #36]	; 0x24
 800bd42:	e002      	b.n	800bd4a <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800bd44:	69fb      	ldr	r3, [r7, #28]
 800bd46:	693a      	ldr	r2, [r7, #16]
 800bd48:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800bd4a:	693b      	ldr	r3, [r7, #16]
 800bd4c:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800bd4e:	8b7a      	ldrh	r2, [r7, #26]
 800bd50:	89fb      	ldrh	r3, [r7, #14]
 800bd52:	1ad3      	subs	r3, r2, r3
 800bd54:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800bd56:	2300      	movs	r3, #0
 800bd58:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800bd5a:	8b7b      	ldrh	r3, [r7, #26]
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d19e      	bne.n	800bc9e <pbuf_alloc+0x5a>
      break;
 800bd60:	e055      	b.n	800be0e <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800bd62:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bd64:	3303      	adds	r3, #3
 800bd66:	b29b      	uxth	r3, r3
 800bd68:	f023 0303 	bic.w	r3, r3, #3
 800bd6c:	b29a      	uxth	r2, r3
 800bd6e:	88bb      	ldrh	r3, [r7, #4]
 800bd70:	3303      	adds	r3, #3
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	f023 0303 	bic.w	r3, r3, #3
 800bd78:	b29b      	uxth	r3, r3
 800bd7a:	4413      	add	r3, r2
 800bd7c:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800bd7e:	8b3b      	ldrh	r3, [r7, #24]
 800bd80:	3310      	adds	r3, #16
 800bd82:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd84:	8b3a      	ldrh	r2, [r7, #24]
 800bd86:	88bb      	ldrh	r3, [r7, #4]
 800bd88:	3303      	adds	r3, #3
 800bd8a:	f023 0303 	bic.w	r3, r3, #3
 800bd8e:	429a      	cmp	r2, r3
 800bd90:	d306      	bcc.n	800bda0 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800bd92:	8afa      	ldrh	r2, [r7, #22]
 800bd94:	88bb      	ldrh	r3, [r7, #4]
 800bd96:	3303      	adds	r3, #3
 800bd98:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800bd9c:	429a      	cmp	r2, r3
 800bd9e:	d201      	bcs.n	800bda4 <pbuf_alloc+0x160>
        return NULL;
 800bda0:	2300      	movs	r3, #0
 800bda2:	e035      	b.n	800be10 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800bda4:	8afb      	ldrh	r3, [r7, #22]
 800bda6:	4618      	mov	r0, r3
 800bda8:	f7ff f954 	bl	800b054 <mem_malloc>
 800bdac:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800bdae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d101      	bne.n	800bdb8 <pbuf_alloc+0x174>
        return NULL;
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	e02b      	b.n	800be10 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800bdb8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800bdba:	3310      	adds	r3, #16
 800bdbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bdbe:	4413      	add	r3, r2
 800bdc0:	3303      	adds	r3, #3
 800bdc2:	f023 0303 	bic.w	r3, r3, #3
 800bdc6:	4618      	mov	r0, r3
 800bdc8:	88b9      	ldrh	r1, [r7, #4]
 800bdca:	88ba      	ldrh	r2, [r7, #4]
 800bdcc:	2300      	movs	r3, #0
 800bdce:	9301      	str	r3, [sp, #4]
 800bdd0:	887b      	ldrh	r3, [r7, #2]
 800bdd2:	9300      	str	r3, [sp, #0]
 800bdd4:	460b      	mov	r3, r1
 800bdd6:	4601      	mov	r1, r0
 800bdd8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800bdda:	f7ff ff09 	bl	800bbf0 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800bdde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bde0:	685b      	ldr	r3, [r3, #4]
 800bde2:	f003 0303 	and.w	r3, r3, #3
 800bde6:	2b00      	cmp	r3, #0
 800bde8:	d010      	beq.n	800be0c <pbuf_alloc+0x1c8>
 800bdea:	4b0b      	ldr	r3, [pc, #44]	; (800be18 <pbuf_alloc+0x1d4>)
 800bdec:	f44f 7291 	mov.w	r2, #290	; 0x122
 800bdf0:	490d      	ldr	r1, [pc, #52]	; (800be28 <pbuf_alloc+0x1e4>)
 800bdf2:	480b      	ldr	r0, [pc, #44]	; (800be20 <pbuf_alloc+0x1dc>)
 800bdf4:	f00a fbac 	bl	8016550 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800bdf8:	e008      	b.n	800be0c <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800bdfa:	4b07      	ldr	r3, [pc, #28]	; (800be18 <pbuf_alloc+0x1d4>)
 800bdfc:	f240 1227 	movw	r2, #295	; 0x127
 800be00:	490a      	ldr	r1, [pc, #40]	; (800be2c <pbuf_alloc+0x1e8>)
 800be02:	4807      	ldr	r0, [pc, #28]	; (800be20 <pbuf_alloc+0x1dc>)
 800be04:	f00a fba4 	bl	8016550 <iprintf>
      return NULL;
 800be08:	2300      	movs	r3, #0
 800be0a:	e001      	b.n	800be10 <pbuf_alloc+0x1cc>
      break;
 800be0c:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800be0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800be10:	4618      	mov	r0, r3
 800be12:	3728      	adds	r7, #40	; 0x28
 800be14:	46bd      	mov	sp, r7
 800be16:	bd80      	pop	{r7, pc}
 800be18:	08018638 	.word	0x08018638
 800be1c:	08018668 	.word	0x08018668
 800be20:	08018698 	.word	0x08018698
 800be24:	080186c0 	.word	0x080186c0
 800be28:	080186f4 	.word	0x080186f4
 800be2c:	08018720 	.word	0x08018720

0800be30 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	b086      	sub	sp, #24
 800be34:	af02      	add	r7, sp, #8
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	460b      	mov	r3, r1
 800be3a:	807b      	strh	r3, [r7, #2]
 800be3c:	4613      	mov	r3, r2
 800be3e:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800be40:	883b      	ldrh	r3, [r7, #0]
 800be42:	2b41      	cmp	r3, #65	; 0x41
 800be44:	d009      	beq.n	800be5a <pbuf_alloc_reference+0x2a>
 800be46:	883b      	ldrh	r3, [r7, #0]
 800be48:	2b01      	cmp	r3, #1
 800be4a:	d006      	beq.n	800be5a <pbuf_alloc_reference+0x2a>
 800be4c:	4b0f      	ldr	r3, [pc, #60]	; (800be8c <pbuf_alloc_reference+0x5c>)
 800be4e:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800be52:	490f      	ldr	r1, [pc, #60]	; (800be90 <pbuf_alloc_reference+0x60>)
 800be54:	480f      	ldr	r0, [pc, #60]	; (800be94 <pbuf_alloc_reference+0x64>)
 800be56:	f00a fb7b 	bl	8016550 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800be5a:	200c      	movs	r0, #12
 800be5c:	f7ff fac6 	bl	800b3ec <memp_malloc>
 800be60:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d101      	bne.n	800be6c <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800be68:	2300      	movs	r3, #0
 800be6a:	e00b      	b.n	800be84 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800be6c:	8879      	ldrh	r1, [r7, #2]
 800be6e:	887a      	ldrh	r2, [r7, #2]
 800be70:	2300      	movs	r3, #0
 800be72:	9301      	str	r3, [sp, #4]
 800be74:	883b      	ldrh	r3, [r7, #0]
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	460b      	mov	r3, r1
 800be7a:	6879      	ldr	r1, [r7, #4]
 800be7c:	68f8      	ldr	r0, [r7, #12]
 800be7e:	f7ff feb7 	bl	800bbf0 <pbuf_init_alloced_pbuf>
  return p;
 800be82:	68fb      	ldr	r3, [r7, #12]
}
 800be84:	4618      	mov	r0, r3
 800be86:	3710      	adds	r7, #16
 800be88:	46bd      	mov	sp, r7
 800be8a:	bd80      	pop	{r7, pc}
 800be8c:	08018638 	.word	0x08018638
 800be90:	0801873c 	.word	0x0801873c
 800be94:	08018698 	.word	0x08018698

0800be98 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800be98:	b580      	push	{r7, lr}
 800be9a:	b088      	sub	sp, #32
 800be9c:	af02      	add	r7, sp, #8
 800be9e:	607b      	str	r3, [r7, #4]
 800bea0:	4603      	mov	r3, r0
 800bea2:	73fb      	strb	r3, [r7, #15]
 800bea4:	460b      	mov	r3, r1
 800bea6:	81bb      	strh	r3, [r7, #12]
 800bea8:	4613      	mov	r3, r2
 800beaa:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800beac:	7bfb      	ldrb	r3, [r7, #15]
 800beae:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800beb0:	8a7b      	ldrh	r3, [r7, #18]
 800beb2:	3303      	adds	r3, #3
 800beb4:	f023 0203 	bic.w	r2, r3, #3
 800beb8:	89bb      	ldrh	r3, [r7, #12]
 800beba:	441a      	add	r2, r3
 800bebc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800bebe:	429a      	cmp	r2, r3
 800bec0:	d901      	bls.n	800bec6 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800bec2:	2300      	movs	r3, #0
 800bec4:	e018      	b.n	800bef8 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800bec6:	6a3b      	ldr	r3, [r7, #32]
 800bec8:	2b00      	cmp	r3, #0
 800beca:	d007      	beq.n	800bedc <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800becc:	8a7b      	ldrh	r3, [r7, #18]
 800bece:	3303      	adds	r3, #3
 800bed0:	f023 0303 	bic.w	r3, r3, #3
 800bed4:	6a3a      	ldr	r2, [r7, #32]
 800bed6:	4413      	add	r3, r2
 800bed8:	617b      	str	r3, [r7, #20]
 800beda:	e001      	b.n	800bee0 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800bedc:	2300      	movs	r3, #0
 800bede:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800bee0:	6878      	ldr	r0, [r7, #4]
 800bee2:	89b9      	ldrh	r1, [r7, #12]
 800bee4:	89ba      	ldrh	r2, [r7, #12]
 800bee6:	2302      	movs	r3, #2
 800bee8:	9301      	str	r3, [sp, #4]
 800beea:	897b      	ldrh	r3, [r7, #10]
 800beec:	9300      	str	r3, [sp, #0]
 800beee:	460b      	mov	r3, r1
 800bef0:	6979      	ldr	r1, [r7, #20]
 800bef2:	f7ff fe7d 	bl	800bbf0 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800bef6:	687b      	ldr	r3, [r7, #4]
}
 800bef8:	4618      	mov	r0, r3
 800befa:	3718      	adds	r7, #24
 800befc:	46bd      	mov	sp, r7
 800befe:	bd80      	pop	{r7, pc}

0800bf00 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800bf00:	b580      	push	{r7, lr}
 800bf02:	b084      	sub	sp, #16
 800bf04:	af00      	add	r7, sp, #0
 800bf06:	6078      	str	r0, [r7, #4]
 800bf08:	460b      	mov	r3, r1
 800bf0a:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	d106      	bne.n	800bf20 <pbuf_realloc+0x20>
 800bf12:	4b3a      	ldr	r3, [pc, #232]	; (800bffc <pbuf_realloc+0xfc>)
 800bf14:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800bf18:	4939      	ldr	r1, [pc, #228]	; (800c000 <pbuf_realloc+0x100>)
 800bf1a:	483a      	ldr	r0, [pc, #232]	; (800c004 <pbuf_realloc+0x104>)
 800bf1c:	f00a fb18 	bl	8016550 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	891b      	ldrh	r3, [r3, #8]
 800bf24:	887a      	ldrh	r2, [r7, #2]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d263      	bcs.n	800bff2 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800bf2a:	687b      	ldr	r3, [r7, #4]
 800bf2c:	891a      	ldrh	r2, [r3, #8]
 800bf2e:	887b      	ldrh	r3, [r7, #2]
 800bf30:	1ad3      	subs	r3, r2, r3
 800bf32:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800bf34:	887b      	ldrh	r3, [r7, #2]
 800bf36:	817b      	strh	r3, [r7, #10]
  q = p;
 800bf38:	687b      	ldr	r3, [r7, #4]
 800bf3a:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800bf3c:	e018      	b.n	800bf70 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800bf3e:	68fb      	ldr	r3, [r7, #12]
 800bf40:	895b      	ldrh	r3, [r3, #10]
 800bf42:	897a      	ldrh	r2, [r7, #10]
 800bf44:	1ad3      	subs	r3, r2, r3
 800bf46:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800bf48:	68fb      	ldr	r3, [r7, #12]
 800bf4a:	891a      	ldrh	r2, [r3, #8]
 800bf4c:	893b      	ldrh	r3, [r7, #8]
 800bf4e:	1ad3      	subs	r3, r2, r3
 800bf50:	b29a      	uxth	r2, r3
 800bf52:	68fb      	ldr	r3, [r7, #12]
 800bf54:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800bf5c:	68fb      	ldr	r3, [r7, #12]
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d106      	bne.n	800bf70 <pbuf_realloc+0x70>
 800bf62:	4b26      	ldr	r3, [pc, #152]	; (800bffc <pbuf_realloc+0xfc>)
 800bf64:	f240 12af 	movw	r2, #431	; 0x1af
 800bf68:	4927      	ldr	r1, [pc, #156]	; (800c008 <pbuf_realloc+0x108>)
 800bf6a:	4826      	ldr	r0, [pc, #152]	; (800c004 <pbuf_realloc+0x104>)
 800bf6c:	f00a faf0 	bl	8016550 <iprintf>
  while (rem_len > q->len) {
 800bf70:	68fb      	ldr	r3, [r7, #12]
 800bf72:	895b      	ldrh	r3, [r3, #10]
 800bf74:	897a      	ldrh	r2, [r7, #10]
 800bf76:	429a      	cmp	r2, r3
 800bf78:	d8e1      	bhi.n	800bf3e <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800bf7a:	68fb      	ldr	r3, [r7, #12]
 800bf7c:	7b1b      	ldrb	r3, [r3, #12]
 800bf7e:	f003 030f 	and.w	r3, r3, #15
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d121      	bne.n	800bfca <pbuf_realloc+0xca>
 800bf86:	68fb      	ldr	r3, [r7, #12]
 800bf88:	895b      	ldrh	r3, [r3, #10]
 800bf8a:	897a      	ldrh	r2, [r7, #10]
 800bf8c:	429a      	cmp	r2, r3
 800bf8e:	d01c      	beq.n	800bfca <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800bf90:	68fb      	ldr	r3, [r7, #12]
 800bf92:	7b5b      	ldrb	r3, [r3, #13]
 800bf94:	f003 0302 	and.w	r3, r3, #2
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d116      	bne.n	800bfca <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	685a      	ldr	r2, [r3, #4]
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	1ad3      	subs	r3, r2, r3
 800bfa4:	b29a      	uxth	r2, r3
 800bfa6:	897b      	ldrh	r3, [r7, #10]
 800bfa8:	4413      	add	r3, r2
 800bfaa:	b29b      	uxth	r3, r3
 800bfac:	4619      	mov	r1, r3
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	f7fe ff46 	bl	800ae40 <mem_trim>
 800bfb4:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d106      	bne.n	800bfca <pbuf_realloc+0xca>
 800bfbc:	4b0f      	ldr	r3, [pc, #60]	; (800bffc <pbuf_realloc+0xfc>)
 800bfbe:	f240 12bd 	movw	r2, #445	; 0x1bd
 800bfc2:	4912      	ldr	r1, [pc, #72]	; (800c00c <pbuf_realloc+0x10c>)
 800bfc4:	480f      	ldr	r0, [pc, #60]	; (800c004 <pbuf_realloc+0x104>)
 800bfc6:	f00a fac3 	bl	8016550 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800bfca:	68fb      	ldr	r3, [r7, #12]
 800bfcc:	897a      	ldrh	r2, [r7, #10]
 800bfce:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	895a      	ldrh	r2, [r3, #10]
 800bfd4:	68fb      	ldr	r3, [r7, #12]
 800bfd6:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	2b00      	cmp	r3, #0
 800bfde:	d004      	beq.n	800bfea <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	681b      	ldr	r3, [r3, #0]
 800bfe4:	4618      	mov	r0, r3
 800bfe6:	f000 f911 	bl	800c20c <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800bfea:	68fb      	ldr	r3, [r7, #12]
 800bfec:	2200      	movs	r2, #0
 800bfee:	601a      	str	r2, [r3, #0]
 800bff0:	e000      	b.n	800bff4 <pbuf_realloc+0xf4>
    return;
 800bff2:	bf00      	nop

}
 800bff4:	3710      	adds	r7, #16
 800bff6:	46bd      	mov	sp, r7
 800bff8:	bd80      	pop	{r7, pc}
 800bffa:	bf00      	nop
 800bffc:	08018638 	.word	0x08018638
 800c000:	08018750 	.word	0x08018750
 800c004:	08018698 	.word	0x08018698
 800c008:	08018768 	.word	0x08018768
 800c00c:	08018780 	.word	0x08018780

0800c010 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	60f8      	str	r0, [r7, #12]
 800c018:	60b9      	str	r1, [r7, #8]
 800c01a:	4613      	mov	r3, r2
 800c01c:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	2b00      	cmp	r3, #0
 800c022:	d106      	bne.n	800c032 <pbuf_add_header_impl+0x22>
 800c024:	4b2b      	ldr	r3, [pc, #172]	; (800c0d4 <pbuf_add_header_impl+0xc4>)
 800c026:	f240 12df 	movw	r2, #479	; 0x1df
 800c02a:	492b      	ldr	r1, [pc, #172]	; (800c0d8 <pbuf_add_header_impl+0xc8>)
 800c02c:	482b      	ldr	r0, [pc, #172]	; (800c0dc <pbuf_add_header_impl+0xcc>)
 800c02e:	f00a fa8f 	bl	8016550 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800c032:	68fb      	ldr	r3, [r7, #12]
 800c034:	2b00      	cmp	r3, #0
 800c036:	d003      	beq.n	800c040 <pbuf_add_header_impl+0x30>
 800c038:	68bb      	ldr	r3, [r7, #8]
 800c03a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c03e:	d301      	bcc.n	800c044 <pbuf_add_header_impl+0x34>
    return 1;
 800c040:	2301      	movs	r3, #1
 800c042:	e043      	b.n	800c0cc <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800c044:	68bb      	ldr	r3, [r7, #8]
 800c046:	2b00      	cmp	r3, #0
 800c048:	d101      	bne.n	800c04e <pbuf_add_header_impl+0x3e>
    return 0;
 800c04a:	2300      	movs	r3, #0
 800c04c:	e03e      	b.n	800c0cc <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800c04e:	68bb      	ldr	r3, [r7, #8]
 800c050:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	891a      	ldrh	r2, [r3, #8]
 800c056:	8a7b      	ldrh	r3, [r7, #18]
 800c058:	4413      	add	r3, r2
 800c05a:	b29b      	uxth	r3, r3
 800c05c:	8a7a      	ldrh	r2, [r7, #18]
 800c05e:	429a      	cmp	r2, r3
 800c060:	d901      	bls.n	800c066 <pbuf_add_header_impl+0x56>
    return 1;
 800c062:	2301      	movs	r3, #1
 800c064:	e032      	b.n	800c0cc <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800c066:	68fb      	ldr	r3, [r7, #12]
 800c068:	7b1b      	ldrb	r3, [r3, #12]
 800c06a:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800c06c:	8a3b      	ldrh	r3, [r7, #16]
 800c06e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c072:	2b00      	cmp	r3, #0
 800c074:	d00c      	beq.n	800c090 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	685a      	ldr	r2, [r3, #4]
 800c07a:	68bb      	ldr	r3, [r7, #8]
 800c07c:	425b      	negs	r3, r3
 800c07e:	4413      	add	r3, r2
 800c080:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800c082:	68fb      	ldr	r3, [r7, #12]
 800c084:	3310      	adds	r3, #16
 800c086:	697a      	ldr	r2, [r7, #20]
 800c088:	429a      	cmp	r2, r3
 800c08a:	d20d      	bcs.n	800c0a8 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800c08c:	2301      	movs	r3, #1
 800c08e:	e01d      	b.n	800c0cc <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800c090:	79fb      	ldrb	r3, [r7, #7]
 800c092:	2b00      	cmp	r3, #0
 800c094:	d006      	beq.n	800c0a4 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	685a      	ldr	r2, [r3, #4]
 800c09a:	68bb      	ldr	r3, [r7, #8]
 800c09c:	425b      	negs	r3, r3
 800c09e:	4413      	add	r3, r2
 800c0a0:	617b      	str	r3, [r7, #20]
 800c0a2:	e001      	b.n	800c0a8 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800c0a4:	2301      	movs	r3, #1
 800c0a6:	e011      	b.n	800c0cc <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	697a      	ldr	r2, [r7, #20]
 800c0ac:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	895a      	ldrh	r2, [r3, #10]
 800c0b2:	8a7b      	ldrh	r3, [r7, #18]
 800c0b4:	4413      	add	r3, r2
 800c0b6:	b29a      	uxth	r2, r3
 800c0b8:	68fb      	ldr	r3, [r7, #12]
 800c0ba:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800c0bc:	68fb      	ldr	r3, [r7, #12]
 800c0be:	891a      	ldrh	r2, [r3, #8]
 800c0c0:	8a7b      	ldrh	r3, [r7, #18]
 800c0c2:	4413      	add	r3, r2
 800c0c4:	b29a      	uxth	r2, r3
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	811a      	strh	r2, [r3, #8]


  return 0;
 800c0ca:	2300      	movs	r3, #0
}
 800c0cc:	4618      	mov	r0, r3
 800c0ce:	3718      	adds	r7, #24
 800c0d0:	46bd      	mov	sp, r7
 800c0d2:	bd80      	pop	{r7, pc}
 800c0d4:	08018638 	.word	0x08018638
 800c0d8:	0801879c 	.word	0x0801879c
 800c0dc:	08018698 	.word	0x08018698

0800c0e0 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800c0e0:	b580      	push	{r7, lr}
 800c0e2:	b082      	sub	sp, #8
 800c0e4:	af00      	add	r7, sp, #0
 800c0e6:	6078      	str	r0, [r7, #4]
 800c0e8:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800c0ea:	2200      	movs	r2, #0
 800c0ec:	6839      	ldr	r1, [r7, #0]
 800c0ee:	6878      	ldr	r0, [r7, #4]
 800c0f0:	f7ff ff8e 	bl	800c010 <pbuf_add_header_impl>
 800c0f4:	4603      	mov	r3, r0
}
 800c0f6:	4618      	mov	r0, r3
 800c0f8:	3708      	adds	r7, #8
 800c0fa:	46bd      	mov	sp, r7
 800c0fc:	bd80      	pop	{r7, pc}
	...

0800c100 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
 800c108:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	2b00      	cmp	r3, #0
 800c10e:	d106      	bne.n	800c11e <pbuf_remove_header+0x1e>
 800c110:	4b20      	ldr	r3, [pc, #128]	; (800c194 <pbuf_remove_header+0x94>)
 800c112:	f240 224b 	movw	r2, #587	; 0x24b
 800c116:	4920      	ldr	r1, [pc, #128]	; (800c198 <pbuf_remove_header+0x98>)
 800c118:	4820      	ldr	r0, [pc, #128]	; (800c19c <pbuf_remove_header+0x9c>)
 800c11a:	f00a fa19 	bl	8016550 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	2b00      	cmp	r3, #0
 800c122:	d003      	beq.n	800c12c <pbuf_remove_header+0x2c>
 800c124:	683b      	ldr	r3, [r7, #0]
 800c126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c12a:	d301      	bcc.n	800c130 <pbuf_remove_header+0x30>
    return 1;
 800c12c:	2301      	movs	r3, #1
 800c12e:	e02c      	b.n	800c18a <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800c130:	683b      	ldr	r3, [r7, #0]
 800c132:	2b00      	cmp	r3, #0
 800c134:	d101      	bne.n	800c13a <pbuf_remove_header+0x3a>
    return 0;
 800c136:	2300      	movs	r3, #0
 800c138:	e027      	b.n	800c18a <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800c13a:	683b      	ldr	r3, [r7, #0]
 800c13c:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	895b      	ldrh	r3, [r3, #10]
 800c142:	89fa      	ldrh	r2, [r7, #14]
 800c144:	429a      	cmp	r2, r3
 800c146:	d908      	bls.n	800c15a <pbuf_remove_header+0x5a>
 800c148:	4b12      	ldr	r3, [pc, #72]	; (800c194 <pbuf_remove_header+0x94>)
 800c14a:	f240 2255 	movw	r2, #597	; 0x255
 800c14e:	4914      	ldr	r1, [pc, #80]	; (800c1a0 <pbuf_remove_header+0xa0>)
 800c150:	4812      	ldr	r0, [pc, #72]	; (800c19c <pbuf_remove_header+0x9c>)
 800c152:	f00a f9fd 	bl	8016550 <iprintf>
 800c156:	2301      	movs	r3, #1
 800c158:	e017      	b.n	800c18a <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	685b      	ldr	r3, [r3, #4]
 800c15e:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	685a      	ldr	r2, [r3, #4]
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	441a      	add	r2, r3
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	895a      	ldrh	r2, [r3, #10]
 800c170:	89fb      	ldrh	r3, [r7, #14]
 800c172:	1ad3      	subs	r3, r2, r3
 800c174:	b29a      	uxth	r2, r3
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	891a      	ldrh	r2, [r3, #8]
 800c17e:	89fb      	ldrh	r3, [r7, #14]
 800c180:	1ad3      	subs	r3, r2, r3
 800c182:	b29a      	uxth	r2, r3
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800c188:	2300      	movs	r3, #0
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3710      	adds	r7, #16
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}
 800c192:	bf00      	nop
 800c194:	08018638 	.word	0x08018638
 800c198:	0801879c 	.word	0x0801879c
 800c19c:	08018698 	.word	0x08018698
 800c1a0:	080187a8 	.word	0x080187a8

0800c1a4 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800c1a4:	b580      	push	{r7, lr}
 800c1a6:	b082      	sub	sp, #8
 800c1a8:	af00      	add	r7, sp, #0
 800c1aa:	6078      	str	r0, [r7, #4]
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	807b      	strh	r3, [r7, #2]
 800c1b0:	4613      	mov	r3, r2
 800c1b2:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800c1b4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1b8:	2b00      	cmp	r3, #0
 800c1ba:	da08      	bge.n	800c1ce <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800c1bc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1c0:	425b      	negs	r3, r3
 800c1c2:	4619      	mov	r1, r3
 800c1c4:	6878      	ldr	r0, [r7, #4]
 800c1c6:	f7ff ff9b 	bl	800c100 <pbuf_remove_header>
 800c1ca:	4603      	mov	r3, r0
 800c1cc:	e007      	b.n	800c1de <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800c1ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1d2:	787a      	ldrb	r2, [r7, #1]
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	6878      	ldr	r0, [r7, #4]
 800c1d8:	f7ff ff1a 	bl	800c010 <pbuf_add_header_impl>
 800c1dc:	4603      	mov	r3, r0
  }
}
 800c1de:	4618      	mov	r0, r3
 800c1e0:	3708      	adds	r7, #8
 800c1e2:	46bd      	mov	sp, r7
 800c1e4:	bd80      	pop	{r7, pc}

0800c1e6 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800c1e6:	b580      	push	{r7, lr}
 800c1e8:	b082      	sub	sp, #8
 800c1ea:	af00      	add	r7, sp, #0
 800c1ec:	6078      	str	r0, [r7, #4]
 800c1ee:	460b      	mov	r3, r1
 800c1f0:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800c1f2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800c1f6:	2201      	movs	r2, #1
 800c1f8:	4619      	mov	r1, r3
 800c1fa:	6878      	ldr	r0, [r7, #4]
 800c1fc:	f7ff ffd2 	bl	800c1a4 <pbuf_header_impl>
 800c200:	4603      	mov	r3, r0
}
 800c202:	4618      	mov	r0, r3
 800c204:	3708      	adds	r7, #8
 800c206:	46bd      	mov	sp, r7
 800c208:	bd80      	pop	{r7, pc}
	...

0800c20c <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b088      	sub	sp, #32
 800c210:	af00      	add	r7, sp, #0
 800c212:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800c214:	687b      	ldr	r3, [r7, #4]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d10b      	bne.n	800c232 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	d106      	bne.n	800c22e <pbuf_free+0x22>
 800c220:	4b3b      	ldr	r3, [pc, #236]	; (800c310 <pbuf_free+0x104>)
 800c222:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800c226:	493b      	ldr	r1, [pc, #236]	; (800c314 <pbuf_free+0x108>)
 800c228:	483b      	ldr	r0, [pc, #236]	; (800c318 <pbuf_free+0x10c>)
 800c22a:	f00a f991 	bl	8016550 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800c22e:	2300      	movs	r3, #0
 800c230:	e069      	b.n	800c306 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800c232:	2300      	movs	r3, #0
 800c234:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800c236:	e062      	b.n	800c2fe <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800c238:	f009 ff94 	bl	8016164 <sys_arch_protect>
 800c23c:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800c23e:	687b      	ldr	r3, [r7, #4]
 800c240:	7b9b      	ldrb	r3, [r3, #14]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d106      	bne.n	800c254 <pbuf_free+0x48>
 800c246:	4b32      	ldr	r3, [pc, #200]	; (800c310 <pbuf_free+0x104>)
 800c248:	f240 22f1 	movw	r2, #753	; 0x2f1
 800c24c:	4933      	ldr	r1, [pc, #204]	; (800c31c <pbuf_free+0x110>)
 800c24e:	4832      	ldr	r0, [pc, #200]	; (800c318 <pbuf_free+0x10c>)
 800c250:	f00a f97e 	bl	8016550 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	7b9b      	ldrb	r3, [r3, #14]
 800c258:	3b01      	subs	r3, #1
 800c25a:	b2da      	uxtb	r2, r3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	739a      	strb	r2, [r3, #14]
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	7b9b      	ldrb	r3, [r3, #14]
 800c264:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800c266:	69b8      	ldr	r0, [r7, #24]
 800c268:	f009 ff8a 	bl	8016180 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800c26c:	7dfb      	ldrb	r3, [r7, #23]
 800c26e:	2b00      	cmp	r3, #0
 800c270:	d143      	bne.n	800c2fa <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	7b1b      	ldrb	r3, [r3, #12]
 800c27c:	f003 030f 	and.w	r3, r3, #15
 800c280:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	7b5b      	ldrb	r3, [r3, #13]
 800c286:	f003 0302 	and.w	r3, r3, #2
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d011      	beq.n	800c2b2 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	691b      	ldr	r3, [r3, #16]
 800c296:	2b00      	cmp	r3, #0
 800c298:	d106      	bne.n	800c2a8 <pbuf_free+0x9c>
 800c29a:	4b1d      	ldr	r3, [pc, #116]	; (800c310 <pbuf_free+0x104>)
 800c29c:	f240 22ff 	movw	r2, #767	; 0x2ff
 800c2a0:	491f      	ldr	r1, [pc, #124]	; (800c320 <pbuf_free+0x114>)
 800c2a2:	481d      	ldr	r0, [pc, #116]	; (800c318 <pbuf_free+0x10c>)
 800c2a4:	f00a f954 	bl	8016550 <iprintf>
        pc->custom_free_function(p);
 800c2a8:	68bb      	ldr	r3, [r7, #8]
 800c2aa:	691b      	ldr	r3, [r3, #16]
 800c2ac:	6878      	ldr	r0, [r7, #4]
 800c2ae:	4798      	blx	r3
 800c2b0:	e01d      	b.n	800c2ee <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800c2b2:	7bfb      	ldrb	r3, [r7, #15]
 800c2b4:	2b02      	cmp	r3, #2
 800c2b6:	d104      	bne.n	800c2c2 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800c2b8:	6879      	ldr	r1, [r7, #4]
 800c2ba:	200d      	movs	r0, #13
 800c2bc:	f7ff f90c 	bl	800b4d8 <memp_free>
 800c2c0:	e015      	b.n	800c2ee <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800c2c2:	7bfb      	ldrb	r3, [r7, #15]
 800c2c4:	2b01      	cmp	r3, #1
 800c2c6:	d104      	bne.n	800c2d2 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800c2c8:	6879      	ldr	r1, [r7, #4]
 800c2ca:	200c      	movs	r0, #12
 800c2cc:	f7ff f904 	bl	800b4d8 <memp_free>
 800c2d0:	e00d      	b.n	800c2ee <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800c2d2:	7bfb      	ldrb	r3, [r7, #15]
 800c2d4:	2b00      	cmp	r3, #0
 800c2d6:	d103      	bne.n	800c2e0 <pbuf_free+0xd4>
          mem_free(p);
 800c2d8:	6878      	ldr	r0, [r7, #4]
 800c2da:	f7fe fd21 	bl	800ad20 <mem_free>
 800c2de:	e006      	b.n	800c2ee <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800c2e0:	4b0b      	ldr	r3, [pc, #44]	; (800c310 <pbuf_free+0x104>)
 800c2e2:	f240 320f 	movw	r2, #783	; 0x30f
 800c2e6:	490f      	ldr	r1, [pc, #60]	; (800c324 <pbuf_free+0x118>)
 800c2e8:	480b      	ldr	r0, [pc, #44]	; (800c318 <pbuf_free+0x10c>)
 800c2ea:	f00a f931 	bl	8016550 <iprintf>
        }
      }
      count++;
 800c2ee:	7ffb      	ldrb	r3, [r7, #31]
 800c2f0:	3301      	adds	r3, #1
 800c2f2:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800c2f4:	693b      	ldr	r3, [r7, #16]
 800c2f6:	607b      	str	r3, [r7, #4]
 800c2f8:	e001      	b.n	800c2fe <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800c2fa:	2300      	movs	r3, #0
 800c2fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c2fe:	687b      	ldr	r3, [r7, #4]
 800c300:	2b00      	cmp	r3, #0
 800c302:	d199      	bne.n	800c238 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800c304:	7ffb      	ldrb	r3, [r7, #31]
}
 800c306:	4618      	mov	r0, r3
 800c308:	3720      	adds	r7, #32
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	08018638 	.word	0x08018638
 800c314:	0801879c 	.word	0x0801879c
 800c318:	08018698 	.word	0x08018698
 800c31c:	080187c8 	.word	0x080187c8
 800c320:	080187e0 	.word	0x080187e0
 800c324:	08018804 	.word	0x08018804

0800c328 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800c328:	b480      	push	{r7}
 800c32a:	b085      	sub	sp, #20
 800c32c:	af00      	add	r7, sp, #0
 800c32e:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800c330:	2300      	movs	r3, #0
 800c332:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800c334:	e005      	b.n	800c342 <pbuf_clen+0x1a>
    ++len;
 800c336:	89fb      	ldrh	r3, [r7, #14]
 800c338:	3301      	adds	r3, #1
 800c33a:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800c33c:	687b      	ldr	r3, [r7, #4]
 800c33e:	681b      	ldr	r3, [r3, #0]
 800c340:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	2b00      	cmp	r3, #0
 800c346:	d1f6      	bne.n	800c336 <pbuf_clen+0xe>
  }
  return len;
 800c348:	89fb      	ldrh	r3, [r7, #14]
}
 800c34a:	4618      	mov	r0, r3
 800c34c:	3714      	adds	r7, #20
 800c34e:	46bd      	mov	sp, r7
 800c350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c354:	4770      	bx	lr
	...

0800c358 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800c358:	b580      	push	{r7, lr}
 800c35a:	b084      	sub	sp, #16
 800c35c:	af00      	add	r7, sp, #0
 800c35e:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	2b00      	cmp	r3, #0
 800c364:	d016      	beq.n	800c394 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800c366:	f009 fefd 	bl	8016164 <sys_arch_protect>
 800c36a:	60f8      	str	r0, [r7, #12]
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	7b9b      	ldrb	r3, [r3, #14]
 800c370:	3301      	adds	r3, #1
 800c372:	b2da      	uxtb	r2, r3
 800c374:	687b      	ldr	r3, [r7, #4]
 800c376:	739a      	strb	r2, [r3, #14]
 800c378:	68f8      	ldr	r0, [r7, #12]
 800c37a:	f009 ff01 	bl	8016180 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	7b9b      	ldrb	r3, [r3, #14]
 800c382:	2b00      	cmp	r3, #0
 800c384:	d106      	bne.n	800c394 <pbuf_ref+0x3c>
 800c386:	4b05      	ldr	r3, [pc, #20]	; (800c39c <pbuf_ref+0x44>)
 800c388:	f240 3242 	movw	r2, #834	; 0x342
 800c38c:	4904      	ldr	r1, [pc, #16]	; (800c3a0 <pbuf_ref+0x48>)
 800c38e:	4805      	ldr	r0, [pc, #20]	; (800c3a4 <pbuf_ref+0x4c>)
 800c390:	f00a f8de 	bl	8016550 <iprintf>
  }
}
 800c394:	bf00      	nop
 800c396:	3710      	adds	r7, #16
 800c398:	46bd      	mov	sp, r7
 800c39a:	bd80      	pop	{r7, pc}
 800c39c:	08018638 	.word	0x08018638
 800c3a0:	08018818 	.word	0x08018818
 800c3a4:	08018698 	.word	0x08018698

0800c3a8 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800c3a8:	b580      	push	{r7, lr}
 800c3aa:	b084      	sub	sp, #16
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
 800c3b0:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	d002      	beq.n	800c3be <pbuf_cat+0x16>
 800c3b8:	683b      	ldr	r3, [r7, #0]
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d107      	bne.n	800c3ce <pbuf_cat+0x26>
 800c3be:	4b20      	ldr	r3, [pc, #128]	; (800c440 <pbuf_cat+0x98>)
 800c3c0:	f240 3259 	movw	r2, #857	; 0x359
 800c3c4:	491f      	ldr	r1, [pc, #124]	; (800c444 <pbuf_cat+0x9c>)
 800c3c6:	4820      	ldr	r0, [pc, #128]	; (800c448 <pbuf_cat+0xa0>)
 800c3c8:	f00a f8c2 	bl	8016550 <iprintf>
 800c3cc:	e034      	b.n	800c438 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	60fb      	str	r3, [r7, #12]
 800c3d2:	e00a      	b.n	800c3ea <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	891a      	ldrh	r2, [r3, #8]
 800c3d8:	683b      	ldr	r3, [r7, #0]
 800c3da:	891b      	ldrh	r3, [r3, #8]
 800c3dc:	4413      	add	r3, r2
 800c3de:	b29a      	uxth	r2, r3
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	681b      	ldr	r3, [r3, #0]
 800c3e8:	60fb      	str	r3, [r7, #12]
 800c3ea:	68fb      	ldr	r3, [r7, #12]
 800c3ec:	681b      	ldr	r3, [r3, #0]
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d1f0      	bne.n	800c3d4 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	891a      	ldrh	r2, [r3, #8]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	895b      	ldrh	r3, [r3, #10]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d006      	beq.n	800c40c <pbuf_cat+0x64>
 800c3fe:	4b10      	ldr	r3, [pc, #64]	; (800c440 <pbuf_cat+0x98>)
 800c400:	f240 3262 	movw	r2, #866	; 0x362
 800c404:	4911      	ldr	r1, [pc, #68]	; (800c44c <pbuf_cat+0xa4>)
 800c406:	4810      	ldr	r0, [pc, #64]	; (800c448 <pbuf_cat+0xa0>)
 800c408:	f00a f8a2 	bl	8016550 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	681b      	ldr	r3, [r3, #0]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d006      	beq.n	800c422 <pbuf_cat+0x7a>
 800c414:	4b0a      	ldr	r3, [pc, #40]	; (800c440 <pbuf_cat+0x98>)
 800c416:	f240 3263 	movw	r2, #867	; 0x363
 800c41a:	490d      	ldr	r1, [pc, #52]	; (800c450 <pbuf_cat+0xa8>)
 800c41c:	480a      	ldr	r0, [pc, #40]	; (800c448 <pbuf_cat+0xa0>)
 800c41e:	f00a f897 	bl	8016550 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800c422:	68fb      	ldr	r3, [r7, #12]
 800c424:	891a      	ldrh	r2, [r3, #8]
 800c426:	683b      	ldr	r3, [r7, #0]
 800c428:	891b      	ldrh	r3, [r3, #8]
 800c42a:	4413      	add	r3, r2
 800c42c:	b29a      	uxth	r2, r3
 800c42e:	68fb      	ldr	r3, [r7, #12]
 800c430:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800c432:	68fb      	ldr	r3, [r7, #12]
 800c434:	683a      	ldr	r2, [r7, #0]
 800c436:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800c438:	3710      	adds	r7, #16
 800c43a:	46bd      	mov	sp, r7
 800c43c:	bd80      	pop	{r7, pc}
 800c43e:	bf00      	nop
 800c440:	08018638 	.word	0x08018638
 800c444:	0801882c 	.word	0x0801882c
 800c448:	08018698 	.word	0x08018698
 800c44c:	08018864 	.word	0x08018864
 800c450:	08018894 	.word	0x08018894

0800c454 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 800c454:	b580      	push	{r7, lr}
 800c456:	b082      	sub	sp, #8
 800c458:	af00      	add	r7, sp, #0
 800c45a:	6078      	str	r0, [r7, #4]
 800c45c:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 800c45e:	6839      	ldr	r1, [r7, #0]
 800c460:	6878      	ldr	r0, [r7, #4]
 800c462:	f7ff ffa1 	bl	800c3a8 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 800c466:	6838      	ldr	r0, [r7, #0]
 800c468:	f7ff ff76 	bl	800c358 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 800c46c:	bf00      	nop
 800c46e:	3708      	adds	r7, #8
 800c470:	46bd      	mov	sp, r7
 800c472:	bd80      	pop	{r7, pc}

0800c474 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800c474:	b580      	push	{r7, lr}
 800c476:	b086      	sub	sp, #24
 800c478:	af00      	add	r7, sp, #0
 800c47a:	6078      	str	r0, [r7, #4]
 800c47c:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800c47e:	2300      	movs	r3, #0
 800c480:	617b      	str	r3, [r7, #20]
 800c482:	2300      	movs	r3, #0
 800c484:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800c486:	687b      	ldr	r3, [r7, #4]
 800c488:	2b00      	cmp	r3, #0
 800c48a:	d008      	beq.n	800c49e <pbuf_copy+0x2a>
 800c48c:	683b      	ldr	r3, [r7, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d005      	beq.n	800c49e <pbuf_copy+0x2a>
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	891a      	ldrh	r2, [r3, #8]
 800c496:	683b      	ldr	r3, [r7, #0]
 800c498:	891b      	ldrh	r3, [r3, #8]
 800c49a:	429a      	cmp	r2, r3
 800c49c:	d209      	bcs.n	800c4b2 <pbuf_copy+0x3e>
 800c49e:	4b57      	ldr	r3, [pc, #348]	; (800c5fc <pbuf_copy+0x188>)
 800c4a0:	f240 32c9 	movw	r2, #969	; 0x3c9
 800c4a4:	4956      	ldr	r1, [pc, #344]	; (800c600 <pbuf_copy+0x18c>)
 800c4a6:	4857      	ldr	r0, [pc, #348]	; (800c604 <pbuf_copy+0x190>)
 800c4a8:	f00a f852 	bl	8016550 <iprintf>
 800c4ac:	f06f 030f 	mvn.w	r3, #15
 800c4b0:	e09f      	b.n	800c5f2 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800c4b2:	687b      	ldr	r3, [r7, #4]
 800c4b4:	895b      	ldrh	r3, [r3, #10]
 800c4b6:	461a      	mov	r2, r3
 800c4b8:	697b      	ldr	r3, [r7, #20]
 800c4ba:	1ad2      	subs	r2, r2, r3
 800c4bc:	683b      	ldr	r3, [r7, #0]
 800c4be:	895b      	ldrh	r3, [r3, #10]
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	693b      	ldr	r3, [r7, #16]
 800c4c4:	1acb      	subs	r3, r1, r3
 800c4c6:	429a      	cmp	r2, r3
 800c4c8:	d306      	bcc.n	800c4d8 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800c4ca:	683b      	ldr	r3, [r7, #0]
 800c4cc:	895b      	ldrh	r3, [r3, #10]
 800c4ce:	461a      	mov	r2, r3
 800c4d0:	693b      	ldr	r3, [r7, #16]
 800c4d2:	1ad3      	subs	r3, r2, r3
 800c4d4:	60fb      	str	r3, [r7, #12]
 800c4d6:	e005      	b.n	800c4e4 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800c4d8:	687b      	ldr	r3, [r7, #4]
 800c4da:	895b      	ldrh	r3, [r3, #10]
 800c4dc:	461a      	mov	r2, r3
 800c4de:	697b      	ldr	r3, [r7, #20]
 800c4e0:	1ad3      	subs	r3, r2, r3
 800c4e2:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	685a      	ldr	r2, [r3, #4]
 800c4e8:	697b      	ldr	r3, [r7, #20]
 800c4ea:	18d0      	adds	r0, r2, r3
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	685a      	ldr	r2, [r3, #4]
 800c4f0:	693b      	ldr	r3, [r7, #16]
 800c4f2:	4413      	add	r3, r2
 800c4f4:	68fa      	ldr	r2, [r7, #12]
 800c4f6:	4619      	mov	r1, r3
 800c4f8:	f009 ff7f 	bl	80163fa <memcpy>
    offset_to += len;
 800c4fc:	697a      	ldr	r2, [r7, #20]
 800c4fe:	68fb      	ldr	r3, [r7, #12]
 800c500:	4413      	add	r3, r2
 800c502:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800c504:	693a      	ldr	r2, [r7, #16]
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	4413      	add	r3, r2
 800c50a:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800c50c:	687b      	ldr	r3, [r7, #4]
 800c50e:	895b      	ldrh	r3, [r3, #10]
 800c510:	461a      	mov	r2, r3
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	4293      	cmp	r3, r2
 800c516:	d906      	bls.n	800c526 <pbuf_copy+0xb2>
 800c518:	4b38      	ldr	r3, [pc, #224]	; (800c5fc <pbuf_copy+0x188>)
 800c51a:	f240 32d9 	movw	r2, #985	; 0x3d9
 800c51e:	493a      	ldr	r1, [pc, #232]	; (800c608 <pbuf_copy+0x194>)
 800c520:	4838      	ldr	r0, [pc, #224]	; (800c604 <pbuf_copy+0x190>)
 800c522:	f00a f815 	bl	8016550 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800c526:	683b      	ldr	r3, [r7, #0]
 800c528:	895b      	ldrh	r3, [r3, #10]
 800c52a:	461a      	mov	r2, r3
 800c52c:	693b      	ldr	r3, [r7, #16]
 800c52e:	4293      	cmp	r3, r2
 800c530:	d906      	bls.n	800c540 <pbuf_copy+0xcc>
 800c532:	4b32      	ldr	r3, [pc, #200]	; (800c5fc <pbuf_copy+0x188>)
 800c534:	f240 32da 	movw	r2, #986	; 0x3da
 800c538:	4934      	ldr	r1, [pc, #208]	; (800c60c <pbuf_copy+0x198>)
 800c53a:	4832      	ldr	r0, [pc, #200]	; (800c604 <pbuf_copy+0x190>)
 800c53c:	f00a f808 	bl	8016550 <iprintf>
    if (offset_from >= p_from->len) {
 800c540:	683b      	ldr	r3, [r7, #0]
 800c542:	895b      	ldrh	r3, [r3, #10]
 800c544:	461a      	mov	r2, r3
 800c546:	693b      	ldr	r3, [r7, #16]
 800c548:	4293      	cmp	r3, r2
 800c54a:	d304      	bcc.n	800c556 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800c54c:	2300      	movs	r3, #0
 800c54e:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800c550:	683b      	ldr	r3, [r7, #0]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800c556:	687b      	ldr	r3, [r7, #4]
 800c558:	895b      	ldrh	r3, [r3, #10]
 800c55a:	461a      	mov	r2, r3
 800c55c:	697b      	ldr	r3, [r7, #20]
 800c55e:	4293      	cmp	r3, r2
 800c560:	d114      	bne.n	800c58c <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800c562:	2300      	movs	r3, #0
 800c564:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800c56c:	687b      	ldr	r3, [r7, #4]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d10c      	bne.n	800c58c <pbuf_copy+0x118>
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	2b00      	cmp	r3, #0
 800c576:	d009      	beq.n	800c58c <pbuf_copy+0x118>
 800c578:	4b20      	ldr	r3, [pc, #128]	; (800c5fc <pbuf_copy+0x188>)
 800c57a:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800c57e:	4924      	ldr	r1, [pc, #144]	; (800c610 <pbuf_copy+0x19c>)
 800c580:	4820      	ldr	r0, [pc, #128]	; (800c604 <pbuf_copy+0x190>)
 800c582:	f009 ffe5 	bl	8016550 <iprintf>
 800c586:	f06f 030f 	mvn.w	r3, #15
 800c58a:	e032      	b.n	800c5f2 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800c58c:	683b      	ldr	r3, [r7, #0]
 800c58e:	2b00      	cmp	r3, #0
 800c590:	d013      	beq.n	800c5ba <pbuf_copy+0x146>
 800c592:	683b      	ldr	r3, [r7, #0]
 800c594:	895a      	ldrh	r2, [r3, #10]
 800c596:	683b      	ldr	r3, [r7, #0]
 800c598:	891b      	ldrh	r3, [r3, #8]
 800c59a:	429a      	cmp	r2, r3
 800c59c:	d10d      	bne.n	800c5ba <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c59e:	683b      	ldr	r3, [r7, #0]
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	2b00      	cmp	r3, #0
 800c5a4:	d009      	beq.n	800c5ba <pbuf_copy+0x146>
 800c5a6:	4b15      	ldr	r3, [pc, #84]	; (800c5fc <pbuf_copy+0x188>)
 800c5a8:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800c5ac:	4919      	ldr	r1, [pc, #100]	; (800c614 <pbuf_copy+0x1a0>)
 800c5ae:	4815      	ldr	r0, [pc, #84]	; (800c604 <pbuf_copy+0x190>)
 800c5b0:	f009 ffce 	bl	8016550 <iprintf>
 800c5b4:	f06f 0305 	mvn.w	r3, #5
 800c5b8:	e01b      	b.n	800c5f2 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800c5ba:	687b      	ldr	r3, [r7, #4]
 800c5bc:	2b00      	cmp	r3, #0
 800c5be:	d013      	beq.n	800c5e8 <pbuf_copy+0x174>
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	895a      	ldrh	r2, [r3, #10]
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	891b      	ldrh	r3, [r3, #8]
 800c5c8:	429a      	cmp	r2, r3
 800c5ca:	d10d      	bne.n	800c5e8 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	681b      	ldr	r3, [r3, #0]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d009      	beq.n	800c5e8 <pbuf_copy+0x174>
 800c5d4:	4b09      	ldr	r3, [pc, #36]	; (800c5fc <pbuf_copy+0x188>)
 800c5d6:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800c5da:	490e      	ldr	r1, [pc, #56]	; (800c614 <pbuf_copy+0x1a0>)
 800c5dc:	4809      	ldr	r0, [pc, #36]	; (800c604 <pbuf_copy+0x190>)
 800c5de:	f009 ffb7 	bl	8016550 <iprintf>
 800c5e2:	f06f 0305 	mvn.w	r3, #5
 800c5e6:	e004      	b.n	800c5f2 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	2b00      	cmp	r3, #0
 800c5ec:	f47f af61 	bne.w	800c4b2 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800c5f0:	2300      	movs	r3, #0
}
 800c5f2:	4618      	mov	r0, r3
 800c5f4:	3718      	adds	r7, #24
 800c5f6:	46bd      	mov	sp, r7
 800c5f8:	bd80      	pop	{r7, pc}
 800c5fa:	bf00      	nop
 800c5fc:	08018638 	.word	0x08018638
 800c600:	080188e0 	.word	0x080188e0
 800c604:	08018698 	.word	0x08018698
 800c608:	08018910 	.word	0x08018910
 800c60c:	08018928 	.word	0x08018928
 800c610:	08018944 	.word	0x08018944
 800c614:	08018954 	.word	0x08018954

0800c618 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800c618:	b580      	push	{r7, lr}
 800c61a:	b088      	sub	sp, #32
 800c61c:	af00      	add	r7, sp, #0
 800c61e:	60f8      	str	r0, [r7, #12]
 800c620:	60b9      	str	r1, [r7, #8]
 800c622:	4611      	mov	r1, r2
 800c624:	461a      	mov	r2, r3
 800c626:	460b      	mov	r3, r1
 800c628:	80fb      	strh	r3, [r7, #6]
 800c62a:	4613      	mov	r3, r2
 800c62c:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800c62e:	2300      	movs	r3, #0
 800c630:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800c632:	2300      	movs	r3, #0
 800c634:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800c636:	68fb      	ldr	r3, [r7, #12]
 800c638:	2b00      	cmp	r3, #0
 800c63a:	d108      	bne.n	800c64e <pbuf_copy_partial+0x36>
 800c63c:	4b2b      	ldr	r3, [pc, #172]	; (800c6ec <pbuf_copy_partial+0xd4>)
 800c63e:	f240 420a 	movw	r2, #1034	; 0x40a
 800c642:	492b      	ldr	r1, [pc, #172]	; (800c6f0 <pbuf_copy_partial+0xd8>)
 800c644:	482b      	ldr	r0, [pc, #172]	; (800c6f4 <pbuf_copy_partial+0xdc>)
 800c646:	f009 ff83 	bl	8016550 <iprintf>
 800c64a:	2300      	movs	r3, #0
 800c64c:	e04a      	b.n	800c6e4 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800c64e:	68bb      	ldr	r3, [r7, #8]
 800c650:	2b00      	cmp	r3, #0
 800c652:	d108      	bne.n	800c666 <pbuf_copy_partial+0x4e>
 800c654:	4b25      	ldr	r3, [pc, #148]	; (800c6ec <pbuf_copy_partial+0xd4>)
 800c656:	f240 420b 	movw	r2, #1035	; 0x40b
 800c65a:	4927      	ldr	r1, [pc, #156]	; (800c6f8 <pbuf_copy_partial+0xe0>)
 800c65c:	4825      	ldr	r0, [pc, #148]	; (800c6f4 <pbuf_copy_partial+0xdc>)
 800c65e:	f009 ff77 	bl	8016550 <iprintf>
 800c662:	2300      	movs	r3, #0
 800c664:	e03e      	b.n	800c6e4 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	61fb      	str	r3, [r7, #28]
 800c66a:	e034      	b.n	800c6d6 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800c66c:	88bb      	ldrh	r3, [r7, #4]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d00a      	beq.n	800c688 <pbuf_copy_partial+0x70>
 800c672:	69fb      	ldr	r3, [r7, #28]
 800c674:	895b      	ldrh	r3, [r3, #10]
 800c676:	88ba      	ldrh	r2, [r7, #4]
 800c678:	429a      	cmp	r2, r3
 800c67a:	d305      	bcc.n	800c688 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800c67c:	69fb      	ldr	r3, [r7, #28]
 800c67e:	895b      	ldrh	r3, [r3, #10]
 800c680:	88ba      	ldrh	r2, [r7, #4]
 800c682:	1ad3      	subs	r3, r2, r3
 800c684:	80bb      	strh	r3, [r7, #4]
 800c686:	e023      	b.n	800c6d0 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800c688:	69fb      	ldr	r3, [r7, #28]
 800c68a:	895a      	ldrh	r2, [r3, #10]
 800c68c:	88bb      	ldrh	r3, [r7, #4]
 800c68e:	1ad3      	subs	r3, r2, r3
 800c690:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800c692:	8b3a      	ldrh	r2, [r7, #24]
 800c694:	88fb      	ldrh	r3, [r7, #6]
 800c696:	429a      	cmp	r2, r3
 800c698:	d901      	bls.n	800c69e <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800c69a:	88fb      	ldrh	r3, [r7, #6]
 800c69c:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800c69e:	8b7b      	ldrh	r3, [r7, #26]
 800c6a0:	68ba      	ldr	r2, [r7, #8]
 800c6a2:	18d0      	adds	r0, r2, r3
 800c6a4:	69fb      	ldr	r3, [r7, #28]
 800c6a6:	685a      	ldr	r2, [r3, #4]
 800c6a8:	88bb      	ldrh	r3, [r7, #4]
 800c6aa:	4413      	add	r3, r2
 800c6ac:	8b3a      	ldrh	r2, [r7, #24]
 800c6ae:	4619      	mov	r1, r3
 800c6b0:	f009 fea3 	bl	80163fa <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800c6b4:	8afa      	ldrh	r2, [r7, #22]
 800c6b6:	8b3b      	ldrh	r3, [r7, #24]
 800c6b8:	4413      	add	r3, r2
 800c6ba:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800c6bc:	8b7a      	ldrh	r2, [r7, #26]
 800c6be:	8b3b      	ldrh	r3, [r7, #24]
 800c6c0:	4413      	add	r3, r2
 800c6c2:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800c6c4:	88fa      	ldrh	r2, [r7, #6]
 800c6c6:	8b3b      	ldrh	r3, [r7, #24]
 800c6c8:	1ad3      	subs	r3, r2, r3
 800c6ca:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800c6d0:	69fb      	ldr	r3, [r7, #28]
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	61fb      	str	r3, [r7, #28]
 800c6d6:	88fb      	ldrh	r3, [r7, #6]
 800c6d8:	2b00      	cmp	r3, #0
 800c6da:	d002      	beq.n	800c6e2 <pbuf_copy_partial+0xca>
 800c6dc:	69fb      	ldr	r3, [r7, #28]
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	d1c4      	bne.n	800c66c <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800c6e2:	8afb      	ldrh	r3, [r7, #22]
}
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	3720      	adds	r7, #32
 800c6e8:	46bd      	mov	sp, r7
 800c6ea:	bd80      	pop	{r7, pc}
 800c6ec:	08018638 	.word	0x08018638
 800c6f0:	08018980 	.word	0x08018980
 800c6f4:	08018698 	.word	0x08018698
 800c6f8:	080189a0 	.word	0x080189a0

0800c6fc <pbuf_skip_const>:
#endif /* LWIP_TCP && TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

/* Actual implementation of pbuf_skip() but returning const pointer... */
static const struct pbuf *
pbuf_skip_const(const struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c6fc:	b480      	push	{r7}
 800c6fe:	b087      	sub	sp, #28
 800c700:	af00      	add	r7, sp, #0
 800c702:	60f8      	str	r0, [r7, #12]
 800c704:	460b      	mov	r3, r1
 800c706:	607a      	str	r2, [r7, #4]
 800c708:	817b      	strh	r3, [r7, #10]
  u16_t offset_left = in_offset;
 800c70a:	897b      	ldrh	r3, [r7, #10]
 800c70c:	82fb      	strh	r3, [r7, #22]
  const struct pbuf *q = in;
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	613b      	str	r3, [r7, #16]

  /* get the correct pbuf */
  while ((q != NULL) && (q->len <= offset_left)) {
 800c712:	e007      	b.n	800c724 <pbuf_skip_const+0x28>
    offset_left = (u16_t)(offset_left - q->len);
 800c714:	693b      	ldr	r3, [r7, #16]
 800c716:	895b      	ldrh	r3, [r3, #10]
 800c718:	8afa      	ldrh	r2, [r7, #22]
 800c71a:	1ad3      	subs	r3, r2, r3
 800c71c:	82fb      	strh	r3, [r7, #22]
    q = q->next;
 800c71e:	693b      	ldr	r3, [r7, #16]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	613b      	str	r3, [r7, #16]
  while ((q != NULL) && (q->len <= offset_left)) {
 800c724:	693b      	ldr	r3, [r7, #16]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d004      	beq.n	800c734 <pbuf_skip_const+0x38>
 800c72a:	693b      	ldr	r3, [r7, #16]
 800c72c:	895b      	ldrh	r3, [r3, #10]
 800c72e:	8afa      	ldrh	r2, [r7, #22]
 800c730:	429a      	cmp	r2, r3
 800c732:	d2ef      	bcs.n	800c714 <pbuf_skip_const+0x18>
  }
  if (out_offset != NULL) {
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	2b00      	cmp	r3, #0
 800c738:	d002      	beq.n	800c740 <pbuf_skip_const+0x44>
    *out_offset = offset_left;
 800c73a:	687b      	ldr	r3, [r7, #4]
 800c73c:	8afa      	ldrh	r2, [r7, #22]
 800c73e:	801a      	strh	r2, [r3, #0]
  }
  return q;
 800c740:	693b      	ldr	r3, [r7, #16]
}
 800c742:	4618      	mov	r0, r3
 800c744:	371c      	adds	r7, #28
 800c746:	46bd      	mov	sp, r7
 800c748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c74c:	4770      	bx	lr

0800c74e <pbuf_skip>:
 * @param out_offset resulting offset in the returned pbuf
 * @return the pbuf in the queue where the offset is
 */
struct pbuf *
pbuf_skip(struct pbuf *in, u16_t in_offset, u16_t *out_offset)
{
 800c74e:	b580      	push	{r7, lr}
 800c750:	b086      	sub	sp, #24
 800c752:	af00      	add	r7, sp, #0
 800c754:	60f8      	str	r0, [r7, #12]
 800c756:	460b      	mov	r3, r1
 800c758:	607a      	str	r2, [r7, #4]
 800c75a:	817b      	strh	r3, [r7, #10]
  const struct pbuf *out = pbuf_skip_const(in, in_offset, out_offset);
 800c75c:	897b      	ldrh	r3, [r7, #10]
 800c75e:	687a      	ldr	r2, [r7, #4]
 800c760:	4619      	mov	r1, r3
 800c762:	68f8      	ldr	r0, [r7, #12]
 800c764:	f7ff ffca 	bl	800c6fc <pbuf_skip_const>
 800c768:	6178      	str	r0, [r7, #20]
  return LWIP_CONST_CAST(struct pbuf *, out);
 800c76a:	697b      	ldr	r3, [r7, #20]
}
 800c76c:	4618      	mov	r0, r3
 800c76e:	3718      	adds	r7, #24
 800c770:	46bd      	mov	sp, r7
 800c772:	bd80      	pop	{r7, pc}

0800c774 <pbuf_take>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take(struct pbuf *buf, const void *dataptr, u16_t len)
{
 800c774:	b580      	push	{r7, lr}
 800c776:	b088      	sub	sp, #32
 800c778:	af00      	add	r7, sp, #0
 800c77a:	60f8      	str	r0, [r7, #12]
 800c77c:	60b9      	str	r1, [r7, #8]
 800c77e:	4613      	mov	r3, r2
 800c780:	80fb      	strh	r3, [r7, #6]
  struct pbuf *p;
  size_t buf_copy_len;
  size_t total_copy_len = len;
 800c782:	88fb      	ldrh	r3, [r7, #6]
 800c784:	617b      	str	r3, [r7, #20]
  size_t copied_total = 0;
 800c786:	2300      	movs	r3, #0
 800c788:	613b      	str	r3, [r7, #16]

  LWIP_ERROR("pbuf_take: invalid buf", (buf != NULL), return ERR_ARG;);
 800c78a:	68fb      	ldr	r3, [r7, #12]
 800c78c:	2b00      	cmp	r3, #0
 800c78e:	d109      	bne.n	800c7a4 <pbuf_take+0x30>
 800c790:	4b3a      	ldr	r3, [pc, #232]	; (800c87c <pbuf_take+0x108>)
 800c792:	f240 42b3 	movw	r2, #1203	; 0x4b3
 800c796:	493a      	ldr	r1, [pc, #232]	; (800c880 <pbuf_take+0x10c>)
 800c798:	483a      	ldr	r0, [pc, #232]	; (800c884 <pbuf_take+0x110>)
 800c79a:	f009 fed9 	bl	8016550 <iprintf>
 800c79e:	f06f 030f 	mvn.w	r3, #15
 800c7a2:	e067      	b.n	800c874 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: invalid dataptr", (dataptr != NULL), return ERR_ARG;);
 800c7a4:	68bb      	ldr	r3, [r7, #8]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d109      	bne.n	800c7be <pbuf_take+0x4a>
 800c7aa:	4b34      	ldr	r3, [pc, #208]	; (800c87c <pbuf_take+0x108>)
 800c7ac:	f240 42b4 	movw	r2, #1204	; 0x4b4
 800c7b0:	4935      	ldr	r1, [pc, #212]	; (800c888 <pbuf_take+0x114>)
 800c7b2:	4834      	ldr	r0, [pc, #208]	; (800c884 <pbuf_take+0x110>)
 800c7b4:	f009 fecc 	bl	8016550 <iprintf>
 800c7b8:	f06f 030f 	mvn.w	r3, #15
 800c7bc:	e05a      	b.n	800c874 <pbuf_take+0x100>
  LWIP_ERROR("pbuf_take: buf not large enough", (buf->tot_len >= len), return ERR_MEM;);
 800c7be:	68fb      	ldr	r3, [r7, #12]
 800c7c0:	891b      	ldrh	r3, [r3, #8]
 800c7c2:	88fa      	ldrh	r2, [r7, #6]
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d909      	bls.n	800c7dc <pbuf_take+0x68>
 800c7c8:	4b2c      	ldr	r3, [pc, #176]	; (800c87c <pbuf_take+0x108>)
 800c7ca:	f240 42b5 	movw	r2, #1205	; 0x4b5
 800c7ce:	492f      	ldr	r1, [pc, #188]	; (800c88c <pbuf_take+0x118>)
 800c7d0:	482c      	ldr	r0, [pc, #176]	; (800c884 <pbuf_take+0x110>)
 800c7d2:	f009 febd 	bl	8016550 <iprintf>
 800c7d6:	f04f 33ff 	mov.w	r3, #4294967295
 800c7da:	e04b      	b.n	800c874 <pbuf_take+0x100>

  if ((buf == NULL) || (dataptr == NULL) || (buf->tot_len < len)) {
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	2b00      	cmp	r3, #0
 800c7e0:	d007      	beq.n	800c7f2 <pbuf_take+0x7e>
 800c7e2:	68bb      	ldr	r3, [r7, #8]
 800c7e4:	2b00      	cmp	r3, #0
 800c7e6:	d004      	beq.n	800c7f2 <pbuf_take+0x7e>
 800c7e8:	68fb      	ldr	r3, [r7, #12]
 800c7ea:	891b      	ldrh	r3, [r3, #8]
 800c7ec:	88fa      	ldrh	r2, [r7, #6]
 800c7ee:	429a      	cmp	r2, r3
 800c7f0:	d902      	bls.n	800c7f8 <pbuf_take+0x84>
    return ERR_ARG;
 800c7f2:	f06f 030f 	mvn.w	r3, #15
 800c7f6:	e03d      	b.n	800c874 <pbuf_take+0x100>
  }

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	61fb      	str	r3, [r7, #28]
 800c7fc:	e028      	b.n	800c850 <pbuf_take+0xdc>
    LWIP_ASSERT("pbuf_take: invalid pbuf", p != NULL);
 800c7fe:	69fb      	ldr	r3, [r7, #28]
 800c800:	2b00      	cmp	r3, #0
 800c802:	d106      	bne.n	800c812 <pbuf_take+0x9e>
 800c804:	4b1d      	ldr	r3, [pc, #116]	; (800c87c <pbuf_take+0x108>)
 800c806:	f240 42bd 	movw	r2, #1213	; 0x4bd
 800c80a:	4921      	ldr	r1, [pc, #132]	; (800c890 <pbuf_take+0x11c>)
 800c80c:	481d      	ldr	r0, [pc, #116]	; (800c884 <pbuf_take+0x110>)
 800c80e:	f009 fe9f 	bl	8016550 <iprintf>
    buf_copy_len = total_copy_len;
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	61bb      	str	r3, [r7, #24]
    if (buf_copy_len > p->len) {
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	895b      	ldrh	r3, [r3, #10]
 800c81a:	461a      	mov	r2, r3
 800c81c:	69bb      	ldr	r3, [r7, #24]
 800c81e:	4293      	cmp	r3, r2
 800c820:	d902      	bls.n	800c828 <pbuf_take+0xb4>
      /* this pbuf cannot hold all remaining data */
      buf_copy_len = p->len;
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	895b      	ldrh	r3, [r3, #10]
 800c826:	61bb      	str	r3, [r7, #24]
    }
    /* copy the necessary parts of the buffer */
    MEMCPY(p->payload, &((const char *)dataptr)[copied_total], buf_copy_len);
 800c828:	69fb      	ldr	r3, [r7, #28]
 800c82a:	6858      	ldr	r0, [r3, #4]
 800c82c:	68ba      	ldr	r2, [r7, #8]
 800c82e:	693b      	ldr	r3, [r7, #16]
 800c830:	4413      	add	r3, r2
 800c832:	69ba      	ldr	r2, [r7, #24]
 800c834:	4619      	mov	r1, r3
 800c836:	f009 fde0 	bl	80163fa <memcpy>
    total_copy_len -= buf_copy_len;
 800c83a:	697a      	ldr	r2, [r7, #20]
 800c83c:	69bb      	ldr	r3, [r7, #24]
 800c83e:	1ad3      	subs	r3, r2, r3
 800c840:	617b      	str	r3, [r7, #20]
    copied_total += buf_copy_len;
 800c842:	693a      	ldr	r2, [r7, #16]
 800c844:	69bb      	ldr	r3, [r7, #24]
 800c846:	4413      	add	r3, r2
 800c848:	613b      	str	r3, [r7, #16]
  for (p = buf; total_copy_len != 0; p = p->next) {
 800c84a:	69fb      	ldr	r3, [r7, #28]
 800c84c:	681b      	ldr	r3, [r3, #0]
 800c84e:	61fb      	str	r3, [r7, #28]
 800c850:	697b      	ldr	r3, [r7, #20]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d1d3      	bne.n	800c7fe <pbuf_take+0x8a>
  }
  LWIP_ASSERT("did not copy all data", total_copy_len == 0 && copied_total == len);
 800c856:	697b      	ldr	r3, [r7, #20]
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d103      	bne.n	800c864 <pbuf_take+0xf0>
 800c85c:	88fb      	ldrh	r3, [r7, #6]
 800c85e:	693a      	ldr	r2, [r7, #16]
 800c860:	429a      	cmp	r2, r3
 800c862:	d006      	beq.n	800c872 <pbuf_take+0xfe>
 800c864:	4b05      	ldr	r3, [pc, #20]	; (800c87c <pbuf_take+0x108>)
 800c866:	f44f 6299 	mov.w	r2, #1224	; 0x4c8
 800c86a:	490a      	ldr	r1, [pc, #40]	; (800c894 <pbuf_take+0x120>)
 800c86c:	4805      	ldr	r0, [pc, #20]	; (800c884 <pbuf_take+0x110>)
 800c86e:	f009 fe6f 	bl	8016550 <iprintf>
  return ERR_OK;
 800c872:	2300      	movs	r3, #0
}
 800c874:	4618      	mov	r0, r3
 800c876:	3720      	adds	r7, #32
 800c878:	46bd      	mov	sp, r7
 800c87a:	bd80      	pop	{r7, pc}
 800c87c:	08018638 	.word	0x08018638
 800c880:	08018a10 	.word	0x08018a10
 800c884:	08018698 	.word	0x08018698
 800c888:	08018a28 	.word	0x08018a28
 800c88c:	08018a44 	.word	0x08018a44
 800c890:	08018a64 	.word	0x08018a64
 800c894:	08018a7c 	.word	0x08018a7c

0800c898 <pbuf_take_at>:
 *
 * @return ERR_OK if successful, ERR_MEM if the pbuf is not big enough
 */
err_t
pbuf_take_at(struct pbuf *buf, const void *dataptr, u16_t len, u16_t offset)
{
 800c898:	b580      	push	{r7, lr}
 800c89a:	b088      	sub	sp, #32
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	4611      	mov	r1, r2
 800c8a4:	461a      	mov	r2, r3
 800c8a6:	460b      	mov	r3, r1
 800c8a8:	80fb      	strh	r3, [r7, #6]
 800c8aa:	4613      	mov	r3, r2
 800c8ac:	80bb      	strh	r3, [r7, #4]
  u16_t target_offset;
  struct pbuf *q = pbuf_skip(buf, offset, &target_offset);
 800c8ae:	f107 0210 	add.w	r2, r7, #16
 800c8b2:	88bb      	ldrh	r3, [r7, #4]
 800c8b4:	4619      	mov	r1, r3
 800c8b6:	68f8      	ldr	r0, [r7, #12]
 800c8b8:	f7ff ff49 	bl	800c74e <pbuf_skip>
 800c8bc:	61f8      	str	r0, [r7, #28]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->tot_len >= target_offset + len)) {
 800c8be:	69fb      	ldr	r3, [r7, #28]
 800c8c0:	2b00      	cmp	r3, #0
 800c8c2:	d047      	beq.n	800c954 <pbuf_take_at+0xbc>
 800c8c4:	69fb      	ldr	r3, [r7, #28]
 800c8c6:	891b      	ldrh	r3, [r3, #8]
 800c8c8:	461a      	mov	r2, r3
 800c8ca:	8a3b      	ldrh	r3, [r7, #16]
 800c8cc:	4619      	mov	r1, r3
 800c8ce:	88fb      	ldrh	r3, [r7, #6]
 800c8d0:	440b      	add	r3, r1
 800c8d2:	429a      	cmp	r2, r3
 800c8d4:	db3e      	blt.n	800c954 <pbuf_take_at+0xbc>
    u16_t remaining_len = len;
 800c8d6:	88fb      	ldrh	r3, [r7, #6]
 800c8d8:	837b      	strh	r3, [r7, #26]
    const u8_t *src_ptr = (const u8_t *)dataptr;
 800c8da:	68bb      	ldr	r3, [r7, #8]
 800c8dc:	617b      	str	r3, [r7, #20]
    /* copy the part that goes into the first pbuf */
    u16_t first_copy_len;
    LWIP_ASSERT("check pbuf_skip result", target_offset < q->len);
 800c8de:	69fb      	ldr	r3, [r7, #28]
 800c8e0:	895a      	ldrh	r2, [r3, #10]
 800c8e2:	8a3b      	ldrh	r3, [r7, #16]
 800c8e4:	429a      	cmp	r2, r3
 800c8e6:	d806      	bhi.n	800c8f6 <pbuf_take_at+0x5e>
 800c8e8:	4b1d      	ldr	r3, [pc, #116]	; (800c960 <pbuf_take_at+0xc8>)
 800c8ea:	f240 42e3 	movw	r2, #1251	; 0x4e3
 800c8ee:	491d      	ldr	r1, [pc, #116]	; (800c964 <pbuf_take_at+0xcc>)
 800c8f0:	481d      	ldr	r0, [pc, #116]	; (800c968 <pbuf_take_at+0xd0>)
 800c8f2:	f009 fe2d 	bl	8016550 <iprintf>
    first_copy_len = (u16_t)LWIP_MIN(q->len - target_offset, len);
 800c8f6:	69fb      	ldr	r3, [r7, #28]
 800c8f8:	895b      	ldrh	r3, [r3, #10]
 800c8fa:	461a      	mov	r2, r3
 800c8fc:	8a3b      	ldrh	r3, [r7, #16]
 800c8fe:	1ad2      	subs	r2, r2, r3
 800c900:	88fb      	ldrh	r3, [r7, #6]
 800c902:	429a      	cmp	r2, r3
 800c904:	da05      	bge.n	800c912 <pbuf_take_at+0x7a>
 800c906:	69fb      	ldr	r3, [r7, #28]
 800c908:	895a      	ldrh	r2, [r3, #10]
 800c90a:	8a3b      	ldrh	r3, [r7, #16]
 800c90c:	1ad3      	subs	r3, r2, r3
 800c90e:	b29b      	uxth	r3, r3
 800c910:	e000      	b.n	800c914 <pbuf_take_at+0x7c>
 800c912:	88fb      	ldrh	r3, [r7, #6]
 800c914:	827b      	strh	r3, [r7, #18]
    MEMCPY(((u8_t *)q->payload) + target_offset, dataptr, first_copy_len);
 800c916:	69fb      	ldr	r3, [r7, #28]
 800c918:	685b      	ldr	r3, [r3, #4]
 800c91a:	8a3a      	ldrh	r2, [r7, #16]
 800c91c:	4413      	add	r3, r2
 800c91e:	8a7a      	ldrh	r2, [r7, #18]
 800c920:	68b9      	ldr	r1, [r7, #8]
 800c922:	4618      	mov	r0, r3
 800c924:	f009 fd69 	bl	80163fa <memcpy>
    remaining_len = (u16_t)(remaining_len - first_copy_len);
 800c928:	8b7a      	ldrh	r2, [r7, #26]
 800c92a:	8a7b      	ldrh	r3, [r7, #18]
 800c92c:	1ad3      	subs	r3, r2, r3
 800c92e:	837b      	strh	r3, [r7, #26]
    src_ptr += first_copy_len;
 800c930:	8a7b      	ldrh	r3, [r7, #18]
 800c932:	697a      	ldr	r2, [r7, #20]
 800c934:	4413      	add	r3, r2
 800c936:	617b      	str	r3, [r7, #20]
    if (remaining_len > 0) {
 800c938:	8b7b      	ldrh	r3, [r7, #26]
 800c93a:	2b00      	cmp	r3, #0
 800c93c:	d008      	beq.n	800c950 <pbuf_take_at+0xb8>
      return pbuf_take(q->next, src_ptr, remaining_len);
 800c93e:	69fb      	ldr	r3, [r7, #28]
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	8b7a      	ldrh	r2, [r7, #26]
 800c944:	6979      	ldr	r1, [r7, #20]
 800c946:	4618      	mov	r0, r3
 800c948:	f7ff ff14 	bl	800c774 <pbuf_take>
 800c94c:	4603      	mov	r3, r0
 800c94e:	e003      	b.n	800c958 <pbuf_take_at+0xc0>
    }
    return ERR_OK;
 800c950:	2300      	movs	r3, #0
 800c952:	e001      	b.n	800c958 <pbuf_take_at+0xc0>
  }
  return ERR_MEM;
 800c954:	f04f 33ff 	mov.w	r3, #4294967295
}
 800c958:	4618      	mov	r0, r3
 800c95a:	3720      	adds	r7, #32
 800c95c:	46bd      	mov	sp, r7
 800c95e:	bd80      	pop	{r7, pc}
 800c960:	08018638 	.word	0x08018638
 800c964:	08018a94 	.word	0x08018a94
 800c968:	08018698 	.word	0x08018698

0800c96c <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800c96c:	b580      	push	{r7, lr}
 800c96e:	b084      	sub	sp, #16
 800c970:	af00      	add	r7, sp, #0
 800c972:	4603      	mov	r3, r0
 800c974:	603a      	str	r2, [r7, #0]
 800c976:	71fb      	strb	r3, [r7, #7]
 800c978:	460b      	mov	r3, r1
 800c97a:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800c97c:	683b      	ldr	r3, [r7, #0]
 800c97e:	8919      	ldrh	r1, [r3, #8]
 800c980:	88ba      	ldrh	r2, [r7, #4]
 800c982:	79fb      	ldrb	r3, [r7, #7]
 800c984:	4618      	mov	r0, r3
 800c986:	f7ff f95d 	bl	800bc44 <pbuf_alloc>
 800c98a:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	2b00      	cmp	r3, #0
 800c990:	d101      	bne.n	800c996 <pbuf_clone+0x2a>
    return NULL;
 800c992:	2300      	movs	r3, #0
 800c994:	e011      	b.n	800c9ba <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800c996:	6839      	ldr	r1, [r7, #0]
 800c998:	68f8      	ldr	r0, [r7, #12]
 800c99a:	f7ff fd6b 	bl	800c474 <pbuf_copy>
 800c99e:	4603      	mov	r3, r0
 800c9a0:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800c9a2:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800c9a6:	2b00      	cmp	r3, #0
 800c9a8:	d006      	beq.n	800c9b8 <pbuf_clone+0x4c>
 800c9aa:	4b06      	ldr	r3, [pc, #24]	; (800c9c4 <pbuf_clone+0x58>)
 800c9ac:	f240 5224 	movw	r2, #1316	; 0x524
 800c9b0:	4905      	ldr	r1, [pc, #20]	; (800c9c8 <pbuf_clone+0x5c>)
 800c9b2:	4806      	ldr	r0, [pc, #24]	; (800c9cc <pbuf_clone+0x60>)
 800c9b4:	f009 fdcc 	bl	8016550 <iprintf>
  return q;
 800c9b8:	68fb      	ldr	r3, [r7, #12]
}
 800c9ba:	4618      	mov	r0, r3
 800c9bc:	3710      	adds	r7, #16
 800c9be:	46bd      	mov	sp, r7
 800c9c0:	bd80      	pop	{r7, pc}
 800c9c2:	bf00      	nop
 800c9c4:	08018638 	.word	0x08018638
 800c9c8:	08018aac 	.word	0x08018aac
 800c9cc:	08018698 	.word	0x08018698

0800c9d0 <pbuf_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p OR ZERO IF 'offset' >= p->tot_len
 */
u8_t
pbuf_get_at(const struct pbuf *p, u16_t offset)
{
 800c9d0:	b580      	push	{r7, lr}
 800c9d2:	b084      	sub	sp, #16
 800c9d4:	af00      	add	r7, sp, #0
 800c9d6:	6078      	str	r0, [r7, #4]
 800c9d8:	460b      	mov	r3, r1
 800c9da:	807b      	strh	r3, [r7, #2]
  int ret = pbuf_try_get_at(p, offset);
 800c9dc:	887b      	ldrh	r3, [r7, #2]
 800c9de:	4619      	mov	r1, r3
 800c9e0:	6878      	ldr	r0, [r7, #4]
 800c9e2:	f000 f80c 	bl	800c9fe <pbuf_try_get_at>
 800c9e6:	60f8      	str	r0, [r7, #12]
  if (ret >= 0) {
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	db02      	blt.n	800c9f4 <pbuf_get_at+0x24>
    return (u8_t)ret;
 800c9ee:	68fb      	ldr	r3, [r7, #12]
 800c9f0:	b2db      	uxtb	r3, r3
 800c9f2:	e000      	b.n	800c9f6 <pbuf_get_at+0x26>
  }
  return 0;
 800c9f4:	2300      	movs	r3, #0
}
 800c9f6:	4618      	mov	r0, r3
 800c9f8:	3710      	adds	r7, #16
 800c9fa:	46bd      	mov	sp, r7
 800c9fc:	bd80      	pop	{r7, pc}

0800c9fe <pbuf_try_get_at>:
 * @param offset offset into p of the byte to return
 * @return byte at an offset into p [0..0xFF] OR negative if 'offset' >= p->tot_len
 */
int
pbuf_try_get_at(const struct pbuf *p, u16_t offset)
{
 800c9fe:	b580      	push	{r7, lr}
 800ca00:	b084      	sub	sp, #16
 800ca02:	af00      	add	r7, sp, #0
 800ca04:	6078      	str	r0, [r7, #4]
 800ca06:	460b      	mov	r3, r1
 800ca08:	807b      	strh	r3, [r7, #2]
  u16_t q_idx;
  const struct pbuf *q = pbuf_skip_const(p, offset, &q_idx);
 800ca0a:	f107 020a 	add.w	r2, r7, #10
 800ca0e:	887b      	ldrh	r3, [r7, #2]
 800ca10:	4619      	mov	r1, r3
 800ca12:	6878      	ldr	r0, [r7, #4]
 800ca14:	f7ff fe72 	bl	800c6fc <pbuf_skip_const>
 800ca18:	60f8      	str	r0, [r7, #12]

  /* return requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	2b00      	cmp	r3, #0
 800ca1e:	d00a      	beq.n	800ca36 <pbuf_try_get_at+0x38>
 800ca20:	68fb      	ldr	r3, [r7, #12]
 800ca22:	895a      	ldrh	r2, [r3, #10]
 800ca24:	897b      	ldrh	r3, [r7, #10]
 800ca26:	429a      	cmp	r2, r3
 800ca28:	d905      	bls.n	800ca36 <pbuf_try_get_at+0x38>
    return ((u8_t *)q->payload)[q_idx];
 800ca2a:	68fb      	ldr	r3, [r7, #12]
 800ca2c:	685b      	ldr	r3, [r3, #4]
 800ca2e:	897a      	ldrh	r2, [r7, #10]
 800ca30:	4413      	add	r3, r2
 800ca32:	781b      	ldrb	r3, [r3, #0]
 800ca34:	e001      	b.n	800ca3a <pbuf_try_get_at+0x3c>
  }
  return -1;
 800ca36:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ca3a:	4618      	mov	r0, r3
 800ca3c:	3710      	adds	r7, #16
 800ca3e:	46bd      	mov	sp, r7
 800ca40:	bd80      	pop	{r7, pc}

0800ca42 <pbuf_put_at>:
 * @param offset offset into p of the byte to write
 * @param data byte to write at an offset into p
 */
void
pbuf_put_at(struct pbuf *p, u16_t offset, u8_t data)
{
 800ca42:	b580      	push	{r7, lr}
 800ca44:	b084      	sub	sp, #16
 800ca46:	af00      	add	r7, sp, #0
 800ca48:	6078      	str	r0, [r7, #4]
 800ca4a:	460b      	mov	r3, r1
 800ca4c:	807b      	strh	r3, [r7, #2]
 800ca4e:	4613      	mov	r3, r2
 800ca50:	707b      	strb	r3, [r7, #1]
  u16_t q_idx;
  struct pbuf *q = pbuf_skip(p, offset, &q_idx);
 800ca52:	f107 020a 	add.w	r2, r7, #10
 800ca56:	887b      	ldrh	r3, [r7, #2]
 800ca58:	4619      	mov	r1, r3
 800ca5a:	6878      	ldr	r0, [r7, #4]
 800ca5c:	f7ff fe77 	bl	800c74e <pbuf_skip>
 800ca60:	60f8      	str	r0, [r7, #12]

  /* write requested data if pbuf is OK */
  if ((q != NULL) && (q->len > q_idx)) {
 800ca62:	68fb      	ldr	r3, [r7, #12]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d00a      	beq.n	800ca7e <pbuf_put_at+0x3c>
 800ca68:	68fb      	ldr	r3, [r7, #12]
 800ca6a:	895a      	ldrh	r2, [r3, #10]
 800ca6c:	897b      	ldrh	r3, [r7, #10]
 800ca6e:	429a      	cmp	r2, r3
 800ca70:	d905      	bls.n	800ca7e <pbuf_put_at+0x3c>
    ((u8_t *)q->payload)[q_idx] = data;
 800ca72:	68fb      	ldr	r3, [r7, #12]
 800ca74:	685b      	ldr	r3, [r3, #4]
 800ca76:	897a      	ldrh	r2, [r7, #10]
 800ca78:	4413      	add	r3, r2
 800ca7a:	787a      	ldrb	r2, [r7, #1]
 800ca7c:	701a      	strb	r2, [r3, #0]
  }
}
 800ca7e:	bf00      	nop
 800ca80:	3710      	adds	r7, #16
 800ca82:	46bd      	mov	sp, r7
 800ca84:	bd80      	pop	{r7, pc}
	...

0800ca88 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800ca88:	b580      	push	{r7, lr}
 800ca8a:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800ca8c:	f009 fdee 	bl	801666c <rand>
 800ca90:	4603      	mov	r3, r0
 800ca92:	b29b      	uxth	r3, r3
 800ca94:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800ca98:	b29b      	uxth	r3, r3
 800ca9a:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800ca9e:	b29a      	uxth	r2, r3
 800caa0:	4b01      	ldr	r3, [pc, #4]	; (800caa8 <tcp_init+0x20>)
 800caa2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800caa4:	bf00      	nop
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	20000024 	.word	0x20000024

0800caac <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800caac:	b580      	push	{r7, lr}
 800caae:	b082      	sub	sp, #8
 800cab0:	af00      	add	r7, sp, #0
 800cab2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	7d1b      	ldrb	r3, [r3, #20]
 800cab8:	2b01      	cmp	r3, #1
 800caba:	d105      	bne.n	800cac8 <tcp_free+0x1c>
 800cabc:	4b06      	ldr	r3, [pc, #24]	; (800cad8 <tcp_free+0x2c>)
 800cabe:	22d4      	movs	r2, #212	; 0xd4
 800cac0:	4906      	ldr	r1, [pc, #24]	; (800cadc <tcp_free+0x30>)
 800cac2:	4807      	ldr	r0, [pc, #28]	; (800cae0 <tcp_free+0x34>)
 800cac4:	f009 fd44 	bl	8016550 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800cac8:	6879      	ldr	r1, [r7, #4]
 800caca:	2001      	movs	r0, #1
 800cacc:	f7fe fd04 	bl	800b4d8 <memp_free>
}
 800cad0:	bf00      	nop
 800cad2:	3708      	adds	r7, #8
 800cad4:	46bd      	mov	sp, r7
 800cad6:	bd80      	pop	{r7, pc}
 800cad8:	08018b38 	.word	0x08018b38
 800cadc:	08018b68 	.word	0x08018b68
 800cae0:	08018b7c 	.word	0x08018b7c

0800cae4 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800cae4:	b580      	push	{r7, lr}
 800cae6:	b082      	sub	sp, #8
 800cae8:	af00      	add	r7, sp, #0
 800caea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	7d1b      	ldrb	r3, [r3, #20]
 800caf0:	2b01      	cmp	r3, #1
 800caf2:	d105      	bne.n	800cb00 <tcp_free_listen+0x1c>
 800caf4:	4b06      	ldr	r3, [pc, #24]	; (800cb10 <tcp_free_listen+0x2c>)
 800caf6:	22df      	movs	r2, #223	; 0xdf
 800caf8:	4906      	ldr	r1, [pc, #24]	; (800cb14 <tcp_free_listen+0x30>)
 800cafa:	4807      	ldr	r0, [pc, #28]	; (800cb18 <tcp_free_listen+0x34>)
 800cafc:	f009 fd28 	bl	8016550 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800cb00:	6879      	ldr	r1, [r7, #4]
 800cb02:	2002      	movs	r0, #2
 800cb04:	f7fe fce8 	bl	800b4d8 <memp_free>
}
 800cb08:	bf00      	nop
 800cb0a:	3708      	adds	r7, #8
 800cb0c:	46bd      	mov	sp, r7
 800cb0e:	bd80      	pop	{r7, pc}
 800cb10:	08018b38 	.word	0x08018b38
 800cb14:	08018ba4 	.word	0x08018ba4
 800cb18:	08018b7c 	.word	0x08018b7c

0800cb1c <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800cb20:	f001 f898 	bl	800dc54 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800cb24:	4b07      	ldr	r3, [pc, #28]	; (800cb44 <tcp_tmr+0x28>)
 800cb26:	781b      	ldrb	r3, [r3, #0]
 800cb28:	3301      	adds	r3, #1
 800cb2a:	b2da      	uxtb	r2, r3
 800cb2c:	4b05      	ldr	r3, [pc, #20]	; (800cb44 <tcp_tmr+0x28>)
 800cb2e:	701a      	strb	r2, [r3, #0]
 800cb30:	4b04      	ldr	r3, [pc, #16]	; (800cb44 <tcp_tmr+0x28>)
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	f003 0301 	and.w	r3, r3, #1
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d001      	beq.n	800cb40 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800cb3c:	f000 fd4a 	bl	800d5d4 <tcp_slowtmr>
  }
}
 800cb40:	bf00      	nop
 800cb42:	bd80      	pop	{r7, pc}
 800cb44:	2000d14d 	.word	0x2000d14d

0800cb48 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800cb48:	b580      	push	{r7, lr}
 800cb4a:	b084      	sub	sp, #16
 800cb4c:	af00      	add	r7, sp, #0
 800cb4e:	6078      	str	r0, [r7, #4]
 800cb50:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	2b00      	cmp	r3, #0
 800cb56:	d105      	bne.n	800cb64 <tcp_remove_listener+0x1c>
 800cb58:	4b0d      	ldr	r3, [pc, #52]	; (800cb90 <tcp_remove_listener+0x48>)
 800cb5a:	22ff      	movs	r2, #255	; 0xff
 800cb5c:	490d      	ldr	r1, [pc, #52]	; (800cb94 <tcp_remove_listener+0x4c>)
 800cb5e:	480e      	ldr	r0, [pc, #56]	; (800cb98 <tcp_remove_listener+0x50>)
 800cb60:	f009 fcf6 	bl	8016550 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	60fb      	str	r3, [r7, #12]
 800cb68:	e00a      	b.n	800cb80 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800cb6a:	68fb      	ldr	r3, [r7, #12]
 800cb6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800cb6e:	683a      	ldr	r2, [r7, #0]
 800cb70:	429a      	cmp	r2, r3
 800cb72:	d102      	bne.n	800cb7a <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	2200      	movs	r2, #0
 800cb78:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800cb7a:	68fb      	ldr	r3, [r7, #12]
 800cb7c:	68db      	ldr	r3, [r3, #12]
 800cb7e:	60fb      	str	r3, [r7, #12]
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	d1f1      	bne.n	800cb6a <tcp_remove_listener+0x22>
    }
  }
}
 800cb86:	bf00      	nop
 800cb88:	bf00      	nop
 800cb8a:	3710      	adds	r7, #16
 800cb8c:	46bd      	mov	sp, r7
 800cb8e:	bd80      	pop	{r7, pc}
 800cb90:	08018b38 	.word	0x08018b38
 800cb94:	08018bc0 	.word	0x08018bc0
 800cb98:	08018b7c 	.word	0x08018b7c

0800cb9c <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800cb9c:	b580      	push	{r7, lr}
 800cb9e:	b084      	sub	sp, #16
 800cba0:	af00      	add	r7, sp, #0
 800cba2:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	2b00      	cmp	r3, #0
 800cba8:	d106      	bne.n	800cbb8 <tcp_listen_closed+0x1c>
 800cbaa:	4b14      	ldr	r3, [pc, #80]	; (800cbfc <tcp_listen_closed+0x60>)
 800cbac:	f240 1211 	movw	r2, #273	; 0x111
 800cbb0:	4913      	ldr	r1, [pc, #76]	; (800cc00 <tcp_listen_closed+0x64>)
 800cbb2:	4814      	ldr	r0, [pc, #80]	; (800cc04 <tcp_listen_closed+0x68>)
 800cbb4:	f009 fccc 	bl	8016550 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800cbb8:	687b      	ldr	r3, [r7, #4]
 800cbba:	7d1b      	ldrb	r3, [r3, #20]
 800cbbc:	2b01      	cmp	r3, #1
 800cbbe:	d006      	beq.n	800cbce <tcp_listen_closed+0x32>
 800cbc0:	4b0e      	ldr	r3, [pc, #56]	; (800cbfc <tcp_listen_closed+0x60>)
 800cbc2:	f44f 7289 	mov.w	r2, #274	; 0x112
 800cbc6:	4910      	ldr	r1, [pc, #64]	; (800cc08 <tcp_listen_closed+0x6c>)
 800cbc8:	480e      	ldr	r0, [pc, #56]	; (800cc04 <tcp_listen_closed+0x68>)
 800cbca:	f009 fcc1 	bl	8016550 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cbce:	2301      	movs	r3, #1
 800cbd0:	60fb      	str	r3, [r7, #12]
 800cbd2:	e00b      	b.n	800cbec <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800cbd4:	4a0d      	ldr	r2, [pc, #52]	; (800cc0c <tcp_listen_closed+0x70>)
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cbdc:	681b      	ldr	r3, [r3, #0]
 800cbde:	6879      	ldr	r1, [r7, #4]
 800cbe0:	4618      	mov	r0, r3
 800cbe2:	f7ff ffb1 	bl	800cb48 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	3301      	adds	r3, #1
 800cbea:	60fb      	str	r3, [r7, #12]
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	2b03      	cmp	r3, #3
 800cbf0:	d9f0      	bls.n	800cbd4 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800cbf2:	bf00      	nop
 800cbf4:	bf00      	nop
 800cbf6:	3710      	adds	r7, #16
 800cbf8:	46bd      	mov	sp, r7
 800cbfa:	bd80      	pop	{r7, pc}
 800cbfc:	08018b38 	.word	0x08018b38
 800cc00:	08018be8 	.word	0x08018be8
 800cc04:	08018b7c 	.word	0x08018b7c
 800cc08:	08018bf4 	.word	0x08018bf4
 800cc0c:	0801abf4 	.word	0x0801abf4

0800cc10 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800cc10:	b5b0      	push	{r4, r5, r7, lr}
 800cc12:	b088      	sub	sp, #32
 800cc14:	af04      	add	r7, sp, #16
 800cc16:	6078      	str	r0, [r7, #4]
 800cc18:	460b      	mov	r3, r1
 800cc1a:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800cc1c:	687b      	ldr	r3, [r7, #4]
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d106      	bne.n	800cc30 <tcp_close_shutdown+0x20>
 800cc22:	4b63      	ldr	r3, [pc, #396]	; (800cdb0 <tcp_close_shutdown+0x1a0>)
 800cc24:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800cc28:	4962      	ldr	r1, [pc, #392]	; (800cdb4 <tcp_close_shutdown+0x1a4>)
 800cc2a:	4863      	ldr	r0, [pc, #396]	; (800cdb8 <tcp_close_shutdown+0x1a8>)
 800cc2c:	f009 fc90 	bl	8016550 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800cc30:	78fb      	ldrb	r3, [r7, #3]
 800cc32:	2b00      	cmp	r3, #0
 800cc34:	d066      	beq.n	800cd04 <tcp_close_shutdown+0xf4>
 800cc36:	687b      	ldr	r3, [r7, #4]
 800cc38:	7d1b      	ldrb	r3, [r3, #20]
 800cc3a:	2b04      	cmp	r3, #4
 800cc3c:	d003      	beq.n	800cc46 <tcp_close_shutdown+0x36>
 800cc3e:	687b      	ldr	r3, [r7, #4]
 800cc40:	7d1b      	ldrb	r3, [r3, #20]
 800cc42:	2b07      	cmp	r3, #7
 800cc44:	d15e      	bne.n	800cd04 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800cc46:	687b      	ldr	r3, [r7, #4]
 800cc48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800cc4a:	2b00      	cmp	r3, #0
 800cc4c:	d104      	bne.n	800cc58 <tcp_close_shutdown+0x48>
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800cc52:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800cc56:	d055      	beq.n	800cd04 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	8b5b      	ldrh	r3, [r3, #26]
 800cc5c:	f003 0310 	and.w	r3, r3, #16
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d106      	bne.n	800cc72 <tcp_close_shutdown+0x62>
 800cc64:	4b52      	ldr	r3, [pc, #328]	; (800cdb0 <tcp_close_shutdown+0x1a0>)
 800cc66:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800cc6a:	4954      	ldr	r1, [pc, #336]	; (800cdbc <tcp_close_shutdown+0x1ac>)
 800cc6c:	4852      	ldr	r0, [pc, #328]	; (800cdb8 <tcp_close_shutdown+0x1a8>)
 800cc6e:	f009 fc6f 	bl	8016550 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800cc72:	687b      	ldr	r3, [r7, #4]
 800cc74:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800cc76:	687b      	ldr	r3, [r7, #4]
 800cc78:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800cc7a:	687d      	ldr	r5, [r7, #4]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	8ad2      	ldrh	r2, [r2, #22]
 800cc84:	6879      	ldr	r1, [r7, #4]
 800cc86:	8b09      	ldrh	r1, [r1, #24]
 800cc88:	9102      	str	r1, [sp, #8]
 800cc8a:	9201      	str	r2, [sp, #4]
 800cc8c:	9300      	str	r3, [sp, #0]
 800cc8e:	462b      	mov	r3, r5
 800cc90:	4622      	mov	r2, r4
 800cc92:	4601      	mov	r1, r0
 800cc94:	6878      	ldr	r0, [r7, #4]
 800cc96:	f005 fd95 	bl	80127c4 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800cc9a:	6878      	ldr	r0, [r7, #4]
 800cc9c:	f001 fb72 	bl	800e384 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800cca0:	4b47      	ldr	r3, [pc, #284]	; (800cdc0 <tcp_close_shutdown+0x1b0>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	687a      	ldr	r2, [r7, #4]
 800cca6:	429a      	cmp	r2, r3
 800cca8:	d105      	bne.n	800ccb6 <tcp_close_shutdown+0xa6>
 800ccaa:	4b45      	ldr	r3, [pc, #276]	; (800cdc0 <tcp_close_shutdown+0x1b0>)
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	4a43      	ldr	r2, [pc, #268]	; (800cdc0 <tcp_close_shutdown+0x1b0>)
 800ccb2:	6013      	str	r3, [r2, #0]
 800ccb4:	e013      	b.n	800ccde <tcp_close_shutdown+0xce>
 800ccb6:	4b42      	ldr	r3, [pc, #264]	; (800cdc0 <tcp_close_shutdown+0x1b0>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	60fb      	str	r3, [r7, #12]
 800ccbc:	e00c      	b.n	800ccd8 <tcp_close_shutdown+0xc8>
 800ccbe:	68fb      	ldr	r3, [r7, #12]
 800ccc0:	68db      	ldr	r3, [r3, #12]
 800ccc2:	687a      	ldr	r2, [r7, #4]
 800ccc4:	429a      	cmp	r2, r3
 800ccc6:	d104      	bne.n	800ccd2 <tcp_close_shutdown+0xc2>
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	68da      	ldr	r2, [r3, #12]
 800cccc:	68fb      	ldr	r3, [r7, #12]
 800ccce:	60da      	str	r2, [r3, #12]
 800ccd0:	e005      	b.n	800ccde <tcp_close_shutdown+0xce>
 800ccd2:	68fb      	ldr	r3, [r7, #12]
 800ccd4:	68db      	ldr	r3, [r3, #12]
 800ccd6:	60fb      	str	r3, [r7, #12]
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d1ef      	bne.n	800ccbe <tcp_close_shutdown+0xae>
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	2200      	movs	r2, #0
 800cce2:	60da      	str	r2, [r3, #12]
 800cce4:	4b37      	ldr	r3, [pc, #220]	; (800cdc4 <tcp_close_shutdown+0x1b4>)
 800cce6:	2201      	movs	r2, #1
 800cce8:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800ccea:	4b37      	ldr	r3, [pc, #220]	; (800cdc8 <tcp_close_shutdown+0x1b8>)
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	687a      	ldr	r2, [r7, #4]
 800ccf0:	429a      	cmp	r2, r3
 800ccf2:	d102      	bne.n	800ccfa <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800ccf4:	f004 f80a 	bl	8010d0c <tcp_trigger_input_pcb_close>
 800ccf8:	e002      	b.n	800cd00 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800ccfa:	6878      	ldr	r0, [r7, #4]
 800ccfc:	f7ff fed6 	bl	800caac <tcp_free>
      }
      return ERR_OK;
 800cd00:	2300      	movs	r3, #0
 800cd02:	e050      	b.n	800cda6 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	7d1b      	ldrb	r3, [r3, #20]
 800cd08:	2b02      	cmp	r3, #2
 800cd0a:	d03b      	beq.n	800cd84 <tcp_close_shutdown+0x174>
 800cd0c:	2b02      	cmp	r3, #2
 800cd0e:	dc44      	bgt.n	800cd9a <tcp_close_shutdown+0x18a>
 800cd10:	2b00      	cmp	r3, #0
 800cd12:	d002      	beq.n	800cd1a <tcp_close_shutdown+0x10a>
 800cd14:	2b01      	cmp	r3, #1
 800cd16:	d02a      	beq.n	800cd6e <tcp_close_shutdown+0x15e>
 800cd18:	e03f      	b.n	800cd9a <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800cd1a:	687b      	ldr	r3, [r7, #4]
 800cd1c:	8adb      	ldrh	r3, [r3, #22]
 800cd1e:	2b00      	cmp	r3, #0
 800cd20:	d021      	beq.n	800cd66 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cd22:	4b2a      	ldr	r3, [pc, #168]	; (800cdcc <tcp_close_shutdown+0x1bc>)
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	687a      	ldr	r2, [r7, #4]
 800cd28:	429a      	cmp	r2, r3
 800cd2a:	d105      	bne.n	800cd38 <tcp_close_shutdown+0x128>
 800cd2c:	4b27      	ldr	r3, [pc, #156]	; (800cdcc <tcp_close_shutdown+0x1bc>)
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	68db      	ldr	r3, [r3, #12]
 800cd32:	4a26      	ldr	r2, [pc, #152]	; (800cdcc <tcp_close_shutdown+0x1bc>)
 800cd34:	6013      	str	r3, [r2, #0]
 800cd36:	e013      	b.n	800cd60 <tcp_close_shutdown+0x150>
 800cd38:	4b24      	ldr	r3, [pc, #144]	; (800cdcc <tcp_close_shutdown+0x1bc>)
 800cd3a:	681b      	ldr	r3, [r3, #0]
 800cd3c:	60bb      	str	r3, [r7, #8]
 800cd3e:	e00c      	b.n	800cd5a <tcp_close_shutdown+0x14a>
 800cd40:	68bb      	ldr	r3, [r7, #8]
 800cd42:	68db      	ldr	r3, [r3, #12]
 800cd44:	687a      	ldr	r2, [r7, #4]
 800cd46:	429a      	cmp	r2, r3
 800cd48:	d104      	bne.n	800cd54 <tcp_close_shutdown+0x144>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	68da      	ldr	r2, [r3, #12]
 800cd4e:	68bb      	ldr	r3, [r7, #8]
 800cd50:	60da      	str	r2, [r3, #12]
 800cd52:	e005      	b.n	800cd60 <tcp_close_shutdown+0x150>
 800cd54:	68bb      	ldr	r3, [r7, #8]
 800cd56:	68db      	ldr	r3, [r3, #12]
 800cd58:	60bb      	str	r3, [r7, #8]
 800cd5a:	68bb      	ldr	r3, [r7, #8]
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	d1ef      	bne.n	800cd40 <tcp_close_shutdown+0x130>
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	2200      	movs	r2, #0
 800cd64:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800cd66:	6878      	ldr	r0, [r7, #4]
 800cd68:	f7ff fea0 	bl	800caac <tcp_free>
      break;
 800cd6c:	e01a      	b.n	800cda4 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800cd6e:	6878      	ldr	r0, [r7, #4]
 800cd70:	f7ff ff14 	bl	800cb9c <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800cd74:	6879      	ldr	r1, [r7, #4]
 800cd76:	4816      	ldr	r0, [pc, #88]	; (800cdd0 <tcp_close_shutdown+0x1c0>)
 800cd78:	f001 fb54 	bl	800e424 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800cd7c:	6878      	ldr	r0, [r7, #4]
 800cd7e:	f7ff feb1 	bl	800cae4 <tcp_free_listen>
      break;
 800cd82:	e00f      	b.n	800cda4 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cd84:	6879      	ldr	r1, [r7, #4]
 800cd86:	480e      	ldr	r0, [pc, #56]	; (800cdc0 <tcp_close_shutdown+0x1b0>)
 800cd88:	f001 fb4c 	bl	800e424 <tcp_pcb_remove>
 800cd8c:	4b0d      	ldr	r3, [pc, #52]	; (800cdc4 <tcp_close_shutdown+0x1b4>)
 800cd8e:	2201      	movs	r2, #1
 800cd90:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800cd92:	6878      	ldr	r0, [r7, #4]
 800cd94:	f7ff fe8a 	bl	800caac <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800cd98:	e004      	b.n	800cda4 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800cd9a:	6878      	ldr	r0, [r7, #4]
 800cd9c:	f000 f81a 	bl	800cdd4 <tcp_close_shutdown_fin>
 800cda0:	4603      	mov	r3, r0
 800cda2:	e000      	b.n	800cda6 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800cda4:	2300      	movs	r3, #0
}
 800cda6:	4618      	mov	r0, r3
 800cda8:	3710      	adds	r7, #16
 800cdaa:	46bd      	mov	sp, r7
 800cdac:	bdb0      	pop	{r4, r5, r7, pc}
 800cdae:	bf00      	nop
 800cdb0:	08018b38 	.word	0x08018b38
 800cdb4:	08018c0c 	.word	0x08018c0c
 800cdb8:	08018b7c 	.word	0x08018b7c
 800cdbc:	08018c2c 	.word	0x08018c2c
 800cdc0:	2000d144 	.word	0x2000d144
 800cdc4:	2000d14c 	.word	0x2000d14c
 800cdc8:	2000d184 	.word	0x2000d184
 800cdcc:	2000d13c 	.word	0x2000d13c
 800cdd0:	2000d140 	.word	0x2000d140

0800cdd4 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800cdd4:	b580      	push	{r7, lr}
 800cdd6:	b084      	sub	sp, #16
 800cdd8:	af00      	add	r7, sp, #0
 800cdda:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800cddc:	687b      	ldr	r3, [r7, #4]
 800cdde:	2b00      	cmp	r3, #0
 800cde0:	d106      	bne.n	800cdf0 <tcp_close_shutdown_fin+0x1c>
 800cde2:	4b2e      	ldr	r3, [pc, #184]	; (800ce9c <tcp_close_shutdown_fin+0xc8>)
 800cde4:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800cde8:	492d      	ldr	r1, [pc, #180]	; (800cea0 <tcp_close_shutdown_fin+0xcc>)
 800cdea:	482e      	ldr	r0, [pc, #184]	; (800cea4 <tcp_close_shutdown_fin+0xd0>)
 800cdec:	f009 fbb0 	bl	8016550 <iprintf>

  switch (pcb->state) {
 800cdf0:	687b      	ldr	r3, [r7, #4]
 800cdf2:	7d1b      	ldrb	r3, [r3, #20]
 800cdf4:	2b07      	cmp	r3, #7
 800cdf6:	d020      	beq.n	800ce3a <tcp_close_shutdown_fin+0x66>
 800cdf8:	2b07      	cmp	r3, #7
 800cdfa:	dc2b      	bgt.n	800ce54 <tcp_close_shutdown_fin+0x80>
 800cdfc:	2b03      	cmp	r3, #3
 800cdfe:	d002      	beq.n	800ce06 <tcp_close_shutdown_fin+0x32>
 800ce00:	2b04      	cmp	r3, #4
 800ce02:	d00d      	beq.n	800ce20 <tcp_close_shutdown_fin+0x4c>
 800ce04:	e026      	b.n	800ce54 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f004 fdea 	bl	80119e0 <tcp_send_fin>
 800ce0c:	4603      	mov	r3, r0
 800ce0e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d11f      	bne.n	800ce58 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800ce18:	687b      	ldr	r3, [r7, #4]
 800ce1a:	2205      	movs	r2, #5
 800ce1c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce1e:	e01b      	b.n	800ce58 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800ce20:	6878      	ldr	r0, [r7, #4]
 800ce22:	f004 fddd 	bl	80119e0 <tcp_send_fin>
 800ce26:	4603      	mov	r3, r0
 800ce28:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d114      	bne.n	800ce5c <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800ce32:	687b      	ldr	r3, [r7, #4]
 800ce34:	2205      	movs	r2, #5
 800ce36:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce38:	e010      	b.n	800ce5c <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800ce3a:	6878      	ldr	r0, [r7, #4]
 800ce3c:	f004 fdd0 	bl	80119e0 <tcp_send_fin>
 800ce40:	4603      	mov	r3, r0
 800ce42:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800ce44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	d109      	bne.n	800ce60 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2209      	movs	r2, #9
 800ce50:	751a      	strb	r2, [r3, #20]
      }
      break;
 800ce52:	e005      	b.n	800ce60 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800ce54:	2300      	movs	r3, #0
 800ce56:	e01c      	b.n	800ce92 <tcp_close_shutdown_fin+0xbe>
      break;
 800ce58:	bf00      	nop
 800ce5a:	e002      	b.n	800ce62 <tcp_close_shutdown_fin+0x8e>
      break;
 800ce5c:	bf00      	nop
 800ce5e:	e000      	b.n	800ce62 <tcp_close_shutdown_fin+0x8e>
      break;
 800ce60:	bf00      	nop
  }

  if (err == ERR_OK) {
 800ce62:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d103      	bne.n	800ce72 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800ce6a:	6878      	ldr	r0, [r7, #4]
 800ce6c:	f004 fef6 	bl	8011c5c <tcp_output>
 800ce70:	e00d      	b.n	800ce8e <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800ce72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ce76:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce7a:	d108      	bne.n	800ce8e <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800ce7c:	687b      	ldr	r3, [r7, #4]
 800ce7e:	8b5b      	ldrh	r3, [r3, #26]
 800ce80:	f043 0308 	orr.w	r3, r3, #8
 800ce84:	b29a      	uxth	r2, r3
 800ce86:	687b      	ldr	r3, [r7, #4]
 800ce88:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800ce8a:	2300      	movs	r3, #0
 800ce8c:	e001      	b.n	800ce92 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800ce8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800ce92:	4618      	mov	r0, r3
 800ce94:	3710      	adds	r7, #16
 800ce96:	46bd      	mov	sp, r7
 800ce98:	bd80      	pop	{r7, pc}
 800ce9a:	bf00      	nop
 800ce9c:	08018b38 	.word	0x08018b38
 800cea0:	08018be8 	.word	0x08018be8
 800cea4:	08018b7c 	.word	0x08018b7c

0800cea8 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800cea8:	b580      	push	{r7, lr}
 800ceaa:	b082      	sub	sp, #8
 800ceac:	af00      	add	r7, sp, #0
 800ceae:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	2b00      	cmp	r3, #0
 800ceb4:	d109      	bne.n	800ceca <tcp_close+0x22>
 800ceb6:	4b0f      	ldr	r3, [pc, #60]	; (800cef4 <tcp_close+0x4c>)
 800ceb8:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800cebc:	490e      	ldr	r1, [pc, #56]	; (800cef8 <tcp_close+0x50>)
 800cebe:	480f      	ldr	r0, [pc, #60]	; (800cefc <tcp_close+0x54>)
 800cec0:	f009 fb46 	bl	8016550 <iprintf>
 800cec4:	f06f 030f 	mvn.w	r3, #15
 800cec8:	e00f      	b.n	800ceea <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	7d1b      	ldrb	r3, [r3, #20]
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d006      	beq.n	800cee0 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	8b5b      	ldrh	r3, [r3, #26]
 800ced6:	f043 0310 	orr.w	r3, r3, #16
 800ceda:	b29a      	uxth	r2, r3
 800cedc:	687b      	ldr	r3, [r7, #4]
 800cede:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800cee0:	2101      	movs	r1, #1
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f7ff fe94 	bl	800cc10 <tcp_close_shutdown>
 800cee8:	4603      	mov	r3, r0
}
 800ceea:	4618      	mov	r0, r3
 800ceec:	3708      	adds	r7, #8
 800ceee:	46bd      	mov	sp, r7
 800cef0:	bd80      	pop	{r7, pc}
 800cef2:	bf00      	nop
 800cef4:	08018b38 	.word	0x08018b38
 800cef8:	08018c48 	.word	0x08018c48
 800cefc:	08018b7c 	.word	0x08018b7c

0800cf00 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800cf00:	b580      	push	{r7, lr}
 800cf02:	b08e      	sub	sp, #56	; 0x38
 800cf04:	af04      	add	r7, sp, #16
 800cf06:	6078      	str	r0, [r7, #4]
 800cf08:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800cf0a:	687b      	ldr	r3, [r7, #4]
 800cf0c:	2b00      	cmp	r3, #0
 800cf0e:	d107      	bne.n	800cf20 <tcp_abandon+0x20>
 800cf10:	4b52      	ldr	r3, [pc, #328]	; (800d05c <tcp_abandon+0x15c>)
 800cf12:	f240 223d 	movw	r2, #573	; 0x23d
 800cf16:	4952      	ldr	r1, [pc, #328]	; (800d060 <tcp_abandon+0x160>)
 800cf18:	4852      	ldr	r0, [pc, #328]	; (800d064 <tcp_abandon+0x164>)
 800cf1a:	f009 fb19 	bl	8016550 <iprintf>
 800cf1e:	e099      	b.n	800d054 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	7d1b      	ldrb	r3, [r3, #20]
 800cf24:	2b01      	cmp	r3, #1
 800cf26:	d106      	bne.n	800cf36 <tcp_abandon+0x36>
 800cf28:	4b4c      	ldr	r3, [pc, #304]	; (800d05c <tcp_abandon+0x15c>)
 800cf2a:	f44f 7210 	mov.w	r2, #576	; 0x240
 800cf2e:	494e      	ldr	r1, [pc, #312]	; (800d068 <tcp_abandon+0x168>)
 800cf30:	484c      	ldr	r0, [pc, #304]	; (800d064 <tcp_abandon+0x164>)
 800cf32:	f009 fb0d 	bl	8016550 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800cf36:	687b      	ldr	r3, [r7, #4]
 800cf38:	7d1b      	ldrb	r3, [r3, #20]
 800cf3a:	2b0a      	cmp	r3, #10
 800cf3c:	d107      	bne.n	800cf4e <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800cf3e:	6879      	ldr	r1, [r7, #4]
 800cf40:	484a      	ldr	r0, [pc, #296]	; (800d06c <tcp_abandon+0x16c>)
 800cf42:	f001 fa6f 	bl	800e424 <tcp_pcb_remove>
    tcp_free(pcb);
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	f7ff fdb0 	bl	800caac <tcp_free>
 800cf4c:	e082      	b.n	800d054 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800cf4e:	2300      	movs	r3, #0
 800cf50:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800cf52:	2300      	movs	r3, #0
 800cf54:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800cf56:	687b      	ldr	r3, [r7, #4]
 800cf58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cf5a:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800cf5c:	687b      	ldr	r3, [r7, #4]
 800cf5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cf60:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800cf68:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800cf6a:	687b      	ldr	r3, [r7, #4]
 800cf6c:	691b      	ldr	r3, [r3, #16]
 800cf6e:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	7d1b      	ldrb	r3, [r3, #20]
 800cf74:	2b00      	cmp	r3, #0
 800cf76:	d126      	bne.n	800cfc6 <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	8adb      	ldrh	r3, [r3, #22]
 800cf7c:	2b00      	cmp	r3, #0
 800cf7e:	d02e      	beq.n	800cfde <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800cf80:	4b3b      	ldr	r3, [pc, #236]	; (800d070 <tcp_abandon+0x170>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	687a      	ldr	r2, [r7, #4]
 800cf86:	429a      	cmp	r2, r3
 800cf88:	d105      	bne.n	800cf96 <tcp_abandon+0x96>
 800cf8a:	4b39      	ldr	r3, [pc, #228]	; (800d070 <tcp_abandon+0x170>)
 800cf8c:	681b      	ldr	r3, [r3, #0]
 800cf8e:	68db      	ldr	r3, [r3, #12]
 800cf90:	4a37      	ldr	r2, [pc, #220]	; (800d070 <tcp_abandon+0x170>)
 800cf92:	6013      	str	r3, [r2, #0]
 800cf94:	e013      	b.n	800cfbe <tcp_abandon+0xbe>
 800cf96:	4b36      	ldr	r3, [pc, #216]	; (800d070 <tcp_abandon+0x170>)
 800cf98:	681b      	ldr	r3, [r3, #0]
 800cf9a:	61fb      	str	r3, [r7, #28]
 800cf9c:	e00c      	b.n	800cfb8 <tcp_abandon+0xb8>
 800cf9e:	69fb      	ldr	r3, [r7, #28]
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	687a      	ldr	r2, [r7, #4]
 800cfa4:	429a      	cmp	r2, r3
 800cfa6:	d104      	bne.n	800cfb2 <tcp_abandon+0xb2>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68da      	ldr	r2, [r3, #12]
 800cfac:	69fb      	ldr	r3, [r7, #28]
 800cfae:	60da      	str	r2, [r3, #12]
 800cfb0:	e005      	b.n	800cfbe <tcp_abandon+0xbe>
 800cfb2:	69fb      	ldr	r3, [r7, #28]
 800cfb4:	68db      	ldr	r3, [r3, #12]
 800cfb6:	61fb      	str	r3, [r7, #28]
 800cfb8:	69fb      	ldr	r3, [r7, #28]
 800cfba:	2b00      	cmp	r3, #0
 800cfbc:	d1ef      	bne.n	800cf9e <tcp_abandon+0x9e>
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	60da      	str	r2, [r3, #12]
 800cfc4:	e00b      	b.n	800cfde <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800cfc6:	683b      	ldr	r3, [r7, #0]
 800cfc8:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800cfca:	687b      	ldr	r3, [r7, #4]
 800cfcc:	8adb      	ldrh	r3, [r3, #22]
 800cfce:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800cfd0:	6879      	ldr	r1, [r7, #4]
 800cfd2:	4828      	ldr	r0, [pc, #160]	; (800d074 <tcp_abandon+0x174>)
 800cfd4:	f001 fa26 	bl	800e424 <tcp_pcb_remove>
 800cfd8:	4b27      	ldr	r3, [pc, #156]	; (800d078 <tcp_abandon+0x178>)
 800cfda:	2201      	movs	r2, #1
 800cfdc:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfe2:	2b00      	cmp	r3, #0
 800cfe4:	d004      	beq.n	800cff0 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800cfe6:	687b      	ldr	r3, [r7, #4]
 800cfe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cfea:	4618      	mov	r0, r3
 800cfec:	f000 ff12 	bl	800de14 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800cff0:	687b      	ldr	r3, [r7, #4]
 800cff2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cff4:	2b00      	cmp	r3, #0
 800cff6:	d004      	beq.n	800d002 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800cff8:	687b      	ldr	r3, [r7, #4]
 800cffa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cffc:	4618      	mov	r0, r3
 800cffe:	f000 ff09 	bl	800de14 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800d002:	687b      	ldr	r3, [r7, #4]
 800d004:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d006:	2b00      	cmp	r3, #0
 800d008:	d004      	beq.n	800d014 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d00e:	4618      	mov	r0, r3
 800d010:	f000 ff00 	bl	800de14 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800d014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d016:	2b00      	cmp	r3, #0
 800d018:	d00e      	beq.n	800d038 <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800d01a:	6879      	ldr	r1, [r7, #4]
 800d01c:	687b      	ldr	r3, [r7, #4]
 800d01e:	3304      	adds	r3, #4
 800d020:	687a      	ldr	r2, [r7, #4]
 800d022:	8b12      	ldrh	r2, [r2, #24]
 800d024:	9202      	str	r2, [sp, #8]
 800d026:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800d028:	9201      	str	r2, [sp, #4]
 800d02a:	9300      	str	r3, [sp, #0]
 800d02c:	460b      	mov	r3, r1
 800d02e:	697a      	ldr	r2, [r7, #20]
 800d030:	69b9      	ldr	r1, [r7, #24]
 800d032:	6878      	ldr	r0, [r7, #4]
 800d034:	f005 fbc6 	bl	80127c4 <tcp_rst>
    }
    last_state = pcb->state;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	7d1b      	ldrb	r3, [r3, #20]
 800d03c:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800d03e:	6878      	ldr	r0, [r7, #4]
 800d040:	f7ff fd34 	bl	800caac <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800d044:	693b      	ldr	r3, [r7, #16]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d004      	beq.n	800d054 <tcp_abandon+0x154>
 800d04a:	693b      	ldr	r3, [r7, #16]
 800d04c:	f06f 010c 	mvn.w	r1, #12
 800d050:	68f8      	ldr	r0, [r7, #12]
 800d052:	4798      	blx	r3
  }
}
 800d054:	3728      	adds	r7, #40	; 0x28
 800d056:	46bd      	mov	sp, r7
 800d058:	bd80      	pop	{r7, pc}
 800d05a:	bf00      	nop
 800d05c:	08018b38 	.word	0x08018b38
 800d060:	08018c7c 	.word	0x08018c7c
 800d064:	08018b7c 	.word	0x08018b7c
 800d068:	08018c98 	.word	0x08018c98
 800d06c:	2000d148 	.word	0x2000d148
 800d070:	2000d13c 	.word	0x2000d13c
 800d074:	2000d144 	.word	0x2000d144
 800d078:	2000d14c 	.word	0x2000d14c

0800d07c <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800d07c:	b580      	push	{r7, lr}
 800d07e:	b082      	sub	sp, #8
 800d080:	af00      	add	r7, sp, #0
 800d082:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800d084:	2101      	movs	r1, #1
 800d086:	6878      	ldr	r0, [r7, #4]
 800d088:	f7ff ff3a 	bl	800cf00 <tcp_abandon>
}
 800d08c:	bf00      	nop
 800d08e:	3708      	adds	r7, #8
 800d090:	46bd      	mov	sp, r7
 800d092:	bd80      	pop	{r7, pc}

0800d094 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800d094:	b580      	push	{r7, lr}
 800d096:	b088      	sub	sp, #32
 800d098:	af00      	add	r7, sp, #0
 800d09a:	60f8      	str	r0, [r7, #12]
 800d09c:	60b9      	str	r1, [r7, #8]
 800d09e:	4613      	mov	r3, r2
 800d0a0:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800d0a2:	2304      	movs	r3, #4
 800d0a4:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800d0a6:	68bb      	ldr	r3, [r7, #8]
 800d0a8:	2b00      	cmp	r3, #0
 800d0aa:	d101      	bne.n	800d0b0 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800d0ac:	4b3e      	ldr	r3, [pc, #248]	; (800d1a8 <tcp_bind+0x114>)
 800d0ae:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	2b00      	cmp	r3, #0
 800d0b4:	d109      	bne.n	800d0ca <tcp_bind+0x36>
 800d0b6:	4b3d      	ldr	r3, [pc, #244]	; (800d1ac <tcp_bind+0x118>)
 800d0b8:	f240 22a9 	movw	r2, #681	; 0x2a9
 800d0bc:	493c      	ldr	r1, [pc, #240]	; (800d1b0 <tcp_bind+0x11c>)
 800d0be:	483d      	ldr	r0, [pc, #244]	; (800d1b4 <tcp_bind+0x120>)
 800d0c0:	f009 fa46 	bl	8016550 <iprintf>
 800d0c4:	f06f 030f 	mvn.w	r3, #15
 800d0c8:	e06a      	b.n	800d1a0 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	7d1b      	ldrb	r3, [r3, #20]
 800d0ce:	2b00      	cmp	r3, #0
 800d0d0:	d009      	beq.n	800d0e6 <tcp_bind+0x52>
 800d0d2:	4b36      	ldr	r3, [pc, #216]	; (800d1ac <tcp_bind+0x118>)
 800d0d4:	f240 22ab 	movw	r2, #683	; 0x2ab
 800d0d8:	4937      	ldr	r1, [pc, #220]	; (800d1b8 <tcp_bind+0x124>)
 800d0da:	4836      	ldr	r0, [pc, #216]	; (800d1b4 <tcp_bind+0x120>)
 800d0dc:	f009 fa38 	bl	8016550 <iprintf>
 800d0e0:	f06f 0305 	mvn.w	r3, #5
 800d0e4:	e05c      	b.n	800d1a0 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800d0e6:	88fb      	ldrh	r3, [r7, #6]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d109      	bne.n	800d100 <tcp_bind+0x6c>
    port = tcp_new_port();
 800d0ec:	f000 f914 	bl	800d318 <tcp_new_port>
 800d0f0:	4603      	mov	r3, r0
 800d0f2:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800d0f4:	88fb      	ldrh	r3, [r7, #6]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d135      	bne.n	800d166 <tcp_bind+0xd2>
      return ERR_BUF;
 800d0fa:	f06f 0301 	mvn.w	r3, #1
 800d0fe:	e04f      	b.n	800d1a0 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800d100:	2300      	movs	r3, #0
 800d102:	61fb      	str	r3, [r7, #28]
 800d104:	e02b      	b.n	800d15e <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d106:	4a2d      	ldr	r2, [pc, #180]	; (800d1bc <tcp_bind+0x128>)
 800d108:	69fb      	ldr	r3, [r7, #28]
 800d10a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d10e:	681b      	ldr	r3, [r3, #0]
 800d110:	61bb      	str	r3, [r7, #24]
 800d112:	e01e      	b.n	800d152 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800d114:	69bb      	ldr	r3, [r7, #24]
 800d116:	8adb      	ldrh	r3, [r3, #22]
 800d118:	88fa      	ldrh	r2, [r7, #6]
 800d11a:	429a      	cmp	r2, r3
 800d11c:	d116      	bne.n	800d14c <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800d11e:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d120:	2b00      	cmp	r3, #0
 800d122:	d010      	beq.n	800d146 <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800d124:	69bb      	ldr	r3, [r7, #24]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	2b00      	cmp	r3, #0
 800d12a:	d00c      	beq.n	800d146 <tcp_bind+0xb2>
 800d12c:	68bb      	ldr	r3, [r7, #8]
 800d12e:	2b00      	cmp	r3, #0
 800d130:	d009      	beq.n	800d146 <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800d132:	68bb      	ldr	r3, [r7, #8]
 800d134:	681b      	ldr	r3, [r3, #0]
 800d136:	2b00      	cmp	r3, #0
 800d138:	d005      	beq.n	800d146 <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800d13a:	69bb      	ldr	r3, [r7, #24]
 800d13c:	681a      	ldr	r2, [r3, #0]
 800d13e:	68bb      	ldr	r3, [r7, #8]
 800d140:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800d142:	429a      	cmp	r2, r3
 800d144:	d102      	bne.n	800d14c <tcp_bind+0xb8>
              return ERR_USE;
 800d146:	f06f 0307 	mvn.w	r3, #7
 800d14a:	e029      	b.n	800d1a0 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800d14c:	69bb      	ldr	r3, [r7, #24]
 800d14e:	68db      	ldr	r3, [r3, #12]
 800d150:	61bb      	str	r3, [r7, #24]
 800d152:	69bb      	ldr	r3, [r7, #24]
 800d154:	2b00      	cmp	r3, #0
 800d156:	d1dd      	bne.n	800d114 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800d158:	69fb      	ldr	r3, [r7, #28]
 800d15a:	3301      	adds	r3, #1
 800d15c:	61fb      	str	r3, [r7, #28]
 800d15e:	69fa      	ldr	r2, [r7, #28]
 800d160:	697b      	ldr	r3, [r7, #20]
 800d162:	429a      	cmp	r2, r3
 800d164:	dbcf      	blt.n	800d106 <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800d166:	68bb      	ldr	r3, [r7, #8]
 800d168:	2b00      	cmp	r3, #0
 800d16a:	d00c      	beq.n	800d186 <tcp_bind+0xf2>
 800d16c:	68bb      	ldr	r3, [r7, #8]
 800d16e:	681b      	ldr	r3, [r3, #0]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d008      	beq.n	800d186 <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <tcp_bind+0xec>
 800d17a:	68bb      	ldr	r3, [r7, #8]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	e000      	b.n	800d182 <tcp_bind+0xee>
 800d180:	2300      	movs	r3, #0
 800d182:	68fa      	ldr	r2, [r7, #12]
 800d184:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	88fa      	ldrh	r2, [r7, #6]
 800d18a:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800d18c:	4b0c      	ldr	r3, [pc, #48]	; (800d1c0 <tcp_bind+0x12c>)
 800d18e:	681a      	ldr	r2, [r3, #0]
 800d190:	68fb      	ldr	r3, [r7, #12]
 800d192:	60da      	str	r2, [r3, #12]
 800d194:	4a0a      	ldr	r2, [pc, #40]	; (800d1c0 <tcp_bind+0x12c>)
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	6013      	str	r3, [r2, #0]
 800d19a:	f005 fcd5 	bl	8012b48 <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800d19e:	2300      	movs	r3, #0
}
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	3720      	adds	r7, #32
 800d1a4:	46bd      	mov	sp, r7
 800d1a6:	bd80      	pop	{r7, pc}
 800d1a8:	0801ac24 	.word	0x0801ac24
 800d1ac:	08018b38 	.word	0x08018b38
 800d1b0:	08018ccc 	.word	0x08018ccc
 800d1b4:	08018b7c 	.word	0x08018b7c
 800d1b8:	08018ce4 	.word	0x08018ce4
 800d1bc:	0801abf4 	.word	0x0801abf4
 800d1c0:	2000d13c 	.word	0x2000d13c

0800d1c4 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800d1c4:	b580      	push	{r7, lr}
 800d1c6:	b084      	sub	sp, #16
 800d1c8:	af00      	add	r7, sp, #0
 800d1ca:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d106      	bne.n	800d1e0 <tcp_update_rcv_ann_wnd+0x1c>
 800d1d2:	4b25      	ldr	r3, [pc, #148]	; (800d268 <tcp_update_rcv_ann_wnd+0xa4>)
 800d1d4:	f240 32a6 	movw	r2, #934	; 0x3a6
 800d1d8:	4924      	ldr	r1, [pc, #144]	; (800d26c <tcp_update_rcv_ann_wnd+0xa8>)
 800d1da:	4825      	ldr	r0, [pc, #148]	; (800d270 <tcp_update_rcv_ann_wnd+0xac>)
 800d1dc:	f009 f9b8 	bl	8016550 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1e4:	687a      	ldr	r2, [r7, #4]
 800d1e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800d1e8:	4413      	add	r3, r2
 800d1ea:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1f0:	687a      	ldr	r2, [r7, #4]
 800d1f2:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800d1f4:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800d1f8:	bf28      	it	cs
 800d1fa:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800d1fe:	b292      	uxth	r2, r2
 800d200:	4413      	add	r3, r2
 800d202:	68fa      	ldr	r2, [r7, #12]
 800d204:	1ad3      	subs	r3, r2, r3
 800d206:	2b00      	cmp	r3, #0
 800d208:	db08      	blt.n	800d21c <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d20e:	687b      	ldr	r3, [r7, #4]
 800d210:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d216:	68fa      	ldr	r2, [r7, #12]
 800d218:	1ad3      	subs	r3, r2, r3
 800d21a:	e020      	b.n	800d25e <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d220:	687b      	ldr	r3, [r7, #4]
 800d222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d224:	1ad3      	subs	r3, r2, r3
 800d226:	2b00      	cmp	r3, #0
 800d228:	dd03      	ble.n	800d232 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	2200      	movs	r2, #0
 800d22e:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d230:	e014      	b.n	800d25c <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800d232:	687b      	ldr	r3, [r7, #4]
 800d234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d236:	687b      	ldr	r3, [r7, #4]
 800d238:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d23a:	1ad3      	subs	r3, r2, r3
 800d23c:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800d23e:	68bb      	ldr	r3, [r7, #8]
 800d240:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d244:	d306      	bcc.n	800d254 <tcp_update_rcv_ann_wnd+0x90>
 800d246:	4b08      	ldr	r3, [pc, #32]	; (800d268 <tcp_update_rcv_ann_wnd+0xa4>)
 800d248:	f240 32b6 	movw	r2, #950	; 0x3b6
 800d24c:	4909      	ldr	r1, [pc, #36]	; (800d274 <tcp_update_rcv_ann_wnd+0xb0>)
 800d24e:	4808      	ldr	r0, [pc, #32]	; (800d270 <tcp_update_rcv_ann_wnd+0xac>)
 800d250:	f009 f97e 	bl	8016550 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	b29a      	uxth	r2, r3
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800d25c:	2300      	movs	r3, #0
  }
}
 800d25e:	4618      	mov	r0, r3
 800d260:	3710      	adds	r7, #16
 800d262:	46bd      	mov	sp, r7
 800d264:	bd80      	pop	{r7, pc}
 800d266:	bf00      	nop
 800d268:	08018b38 	.word	0x08018b38
 800d26c:	08018d94 	.word	0x08018d94
 800d270:	08018b7c 	.word	0x08018b7c
 800d274:	08018db8 	.word	0x08018db8

0800d278 <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800d278:	b580      	push	{r7, lr}
 800d27a:	b084      	sub	sp, #16
 800d27c:	af00      	add	r7, sp, #0
 800d27e:	6078      	str	r0, [r7, #4]
 800d280:	460b      	mov	r3, r1
 800d282:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800d284:	687b      	ldr	r3, [r7, #4]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d107      	bne.n	800d29a <tcp_recved+0x22>
 800d28a:	4b1f      	ldr	r3, [pc, #124]	; (800d308 <tcp_recved+0x90>)
 800d28c:	f240 32cf 	movw	r2, #975	; 0x3cf
 800d290:	491e      	ldr	r1, [pc, #120]	; (800d30c <tcp_recved+0x94>)
 800d292:	481f      	ldr	r0, [pc, #124]	; (800d310 <tcp_recved+0x98>)
 800d294:	f009 f95c 	bl	8016550 <iprintf>
 800d298:	e032      	b.n	800d300 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	7d1b      	ldrb	r3, [r3, #20]
 800d29e:	2b01      	cmp	r3, #1
 800d2a0:	d106      	bne.n	800d2b0 <tcp_recved+0x38>
 800d2a2:	4b19      	ldr	r3, [pc, #100]	; (800d308 <tcp_recved+0x90>)
 800d2a4:	f240 32d2 	movw	r2, #978	; 0x3d2
 800d2a8:	491a      	ldr	r1, [pc, #104]	; (800d314 <tcp_recved+0x9c>)
 800d2aa:	4819      	ldr	r0, [pc, #100]	; (800d310 <tcp_recved+0x98>)
 800d2ac:	f009 f950 	bl	8016550 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800d2b0:	687b      	ldr	r3, [r7, #4]
 800d2b2:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800d2b4:	887b      	ldrh	r3, [r7, #2]
 800d2b6:	4413      	add	r3, r2
 800d2b8:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800d2ba:	89fb      	ldrh	r3, [r7, #14]
 800d2bc:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d2c0:	d804      	bhi.n	800d2cc <tcp_recved+0x54>
 800d2c2:	687b      	ldr	r3, [r7, #4]
 800d2c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d2c6:	89fa      	ldrh	r2, [r7, #14]
 800d2c8:	429a      	cmp	r2, r3
 800d2ca:	d204      	bcs.n	800d2d6 <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800d2cc:	687b      	ldr	r3, [r7, #4]
 800d2ce:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d2d2:	851a      	strh	r2, [r3, #40]	; 0x28
 800d2d4:	e002      	b.n	800d2dc <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	89fa      	ldrh	r2, [r7, #14]
 800d2da:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800d2dc:	6878      	ldr	r0, [r7, #4]
 800d2de:	f7ff ff71 	bl	800d1c4 <tcp_update_rcv_ann_wnd>
 800d2e2:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800d2e4:	68bb      	ldr	r3, [r7, #8]
 800d2e6:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800d2ea:	d309      	bcc.n	800d300 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	8b5b      	ldrh	r3, [r3, #26]
 800d2f0:	f043 0302 	orr.w	r3, r3, #2
 800d2f4:	b29a      	uxth	r2, r3
 800d2f6:	687b      	ldr	r3, [r7, #4]
 800d2f8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800d2fa:	6878      	ldr	r0, [r7, #4]
 800d2fc:	f004 fcae 	bl	8011c5c <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800d300:	3710      	adds	r7, #16
 800d302:	46bd      	mov	sp, r7
 800d304:	bd80      	pop	{r7, pc}
 800d306:	bf00      	nop
 800d308:	08018b38 	.word	0x08018b38
 800d30c:	08018dd4 	.word	0x08018dd4
 800d310:	08018b7c 	.word	0x08018b7c
 800d314:	08018dec 	.word	0x08018dec

0800d318 <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800d318:	b480      	push	{r7}
 800d31a:	b083      	sub	sp, #12
 800d31c:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800d31e:	2300      	movs	r3, #0
 800d320:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800d322:	4b1e      	ldr	r3, [pc, #120]	; (800d39c <tcp_new_port+0x84>)
 800d324:	881b      	ldrh	r3, [r3, #0]
 800d326:	3301      	adds	r3, #1
 800d328:	b29a      	uxth	r2, r3
 800d32a:	4b1c      	ldr	r3, [pc, #112]	; (800d39c <tcp_new_port+0x84>)
 800d32c:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800d32e:	4b1b      	ldr	r3, [pc, #108]	; (800d39c <tcp_new_port+0x84>)
 800d330:	881b      	ldrh	r3, [r3, #0]
 800d332:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800d336:	4293      	cmp	r3, r2
 800d338:	d103      	bne.n	800d342 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800d33a:	4b18      	ldr	r3, [pc, #96]	; (800d39c <tcp_new_port+0x84>)
 800d33c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800d340:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d342:	2300      	movs	r3, #0
 800d344:	71fb      	strb	r3, [r7, #7]
 800d346:	e01e      	b.n	800d386 <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d348:	79fb      	ldrb	r3, [r7, #7]
 800d34a:	4a15      	ldr	r2, [pc, #84]	; (800d3a0 <tcp_new_port+0x88>)
 800d34c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	603b      	str	r3, [r7, #0]
 800d354:	e011      	b.n	800d37a <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800d356:	683b      	ldr	r3, [r7, #0]
 800d358:	8ada      	ldrh	r2, [r3, #22]
 800d35a:	4b10      	ldr	r3, [pc, #64]	; (800d39c <tcp_new_port+0x84>)
 800d35c:	881b      	ldrh	r3, [r3, #0]
 800d35e:	429a      	cmp	r2, r3
 800d360:	d108      	bne.n	800d374 <tcp_new_port+0x5c>
        n++;
 800d362:	88bb      	ldrh	r3, [r7, #4]
 800d364:	3301      	adds	r3, #1
 800d366:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800d368:	88bb      	ldrh	r3, [r7, #4]
 800d36a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d36e:	d3d8      	bcc.n	800d322 <tcp_new_port+0xa>
          return 0;
 800d370:	2300      	movs	r3, #0
 800d372:	e00d      	b.n	800d390 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800d374:	683b      	ldr	r3, [r7, #0]
 800d376:	68db      	ldr	r3, [r3, #12]
 800d378:	603b      	str	r3, [r7, #0]
 800d37a:	683b      	ldr	r3, [r7, #0]
 800d37c:	2b00      	cmp	r3, #0
 800d37e:	d1ea      	bne.n	800d356 <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800d380:	79fb      	ldrb	r3, [r7, #7]
 800d382:	3301      	adds	r3, #1
 800d384:	71fb      	strb	r3, [r7, #7]
 800d386:	79fb      	ldrb	r3, [r7, #7]
 800d388:	2b03      	cmp	r3, #3
 800d38a:	d9dd      	bls.n	800d348 <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800d38c:	4b03      	ldr	r3, [pc, #12]	; (800d39c <tcp_new_port+0x84>)
 800d38e:	881b      	ldrh	r3, [r3, #0]
}
 800d390:	4618      	mov	r0, r3
 800d392:	370c      	adds	r7, #12
 800d394:	46bd      	mov	sp, r7
 800d396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d39a:	4770      	bx	lr
 800d39c:	20000024 	.word	0x20000024
 800d3a0:	0801abf4 	.word	0x0801abf4

0800d3a4 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800d3a4:	b580      	push	{r7, lr}
 800d3a6:	b08a      	sub	sp, #40	; 0x28
 800d3a8:	af00      	add	r7, sp, #0
 800d3aa:	60f8      	str	r0, [r7, #12]
 800d3ac:	60b9      	str	r1, [r7, #8]
 800d3ae:	603b      	str	r3, [r7, #0]
 800d3b0:	4613      	mov	r3, r2
 800d3b2:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800d3b4:	2300      	movs	r3, #0
 800d3b6:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800d3b8:	68fb      	ldr	r3, [r7, #12]
 800d3ba:	2b00      	cmp	r3, #0
 800d3bc:	d109      	bne.n	800d3d2 <tcp_connect+0x2e>
 800d3be:	4b7d      	ldr	r3, [pc, #500]	; (800d5b4 <tcp_connect+0x210>)
 800d3c0:	f240 4235 	movw	r2, #1077	; 0x435
 800d3c4:	497c      	ldr	r1, [pc, #496]	; (800d5b8 <tcp_connect+0x214>)
 800d3c6:	487d      	ldr	r0, [pc, #500]	; (800d5bc <tcp_connect+0x218>)
 800d3c8:	f009 f8c2 	bl	8016550 <iprintf>
 800d3cc:	f06f 030f 	mvn.w	r3, #15
 800d3d0:	e0ec      	b.n	800d5ac <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800d3d2:	68bb      	ldr	r3, [r7, #8]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d109      	bne.n	800d3ec <tcp_connect+0x48>
 800d3d8:	4b76      	ldr	r3, [pc, #472]	; (800d5b4 <tcp_connect+0x210>)
 800d3da:	f240 4236 	movw	r2, #1078	; 0x436
 800d3de:	4978      	ldr	r1, [pc, #480]	; (800d5c0 <tcp_connect+0x21c>)
 800d3e0:	4876      	ldr	r0, [pc, #472]	; (800d5bc <tcp_connect+0x218>)
 800d3e2:	f009 f8b5 	bl	8016550 <iprintf>
 800d3e6:	f06f 030f 	mvn.w	r3, #15
 800d3ea:	e0df      	b.n	800d5ac <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800d3ec:	68fb      	ldr	r3, [r7, #12]
 800d3ee:	7d1b      	ldrb	r3, [r3, #20]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d009      	beq.n	800d408 <tcp_connect+0x64>
 800d3f4:	4b6f      	ldr	r3, [pc, #444]	; (800d5b4 <tcp_connect+0x210>)
 800d3f6:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800d3fa:	4972      	ldr	r1, [pc, #456]	; (800d5c4 <tcp_connect+0x220>)
 800d3fc:	486f      	ldr	r0, [pc, #444]	; (800d5bc <tcp_connect+0x218>)
 800d3fe:	f009 f8a7 	bl	8016550 <iprintf>
 800d402:	f06f 0309 	mvn.w	r3, #9
 800d406:	e0d1      	b.n	800d5ac <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800d408:	68bb      	ldr	r3, [r7, #8]
 800d40a:	2b00      	cmp	r3, #0
 800d40c:	d002      	beq.n	800d414 <tcp_connect+0x70>
 800d40e:	68bb      	ldr	r3, [r7, #8]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	e000      	b.n	800d416 <tcp_connect+0x72>
 800d414:	2300      	movs	r3, #0
 800d416:	68fa      	ldr	r2, [r7, #12]
 800d418:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	88fa      	ldrh	r2, [r7, #6]
 800d41e:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800d420:	68fb      	ldr	r3, [r7, #12]
 800d422:	7a1b      	ldrb	r3, [r3, #8]
 800d424:	2b00      	cmp	r3, #0
 800d426:	d006      	beq.n	800d436 <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800d428:	68fb      	ldr	r3, [r7, #12]
 800d42a:	7a1b      	ldrb	r3, [r3, #8]
 800d42c:	4618      	mov	r0, r3
 800d42e:	f7fe fb5f 	bl	800baf0 <netif_get_by_index>
 800d432:	6278      	str	r0, [r7, #36]	; 0x24
 800d434:	e005      	b.n	800d442 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800d436:	68fb      	ldr	r3, [r7, #12]
 800d438:	3304      	adds	r3, #4
 800d43a:	4618      	mov	r0, r3
 800d43c:	f007 fa84 	bl	8014948 <ip4_route>
 800d440:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d444:	2b00      	cmp	r3, #0
 800d446:	d102      	bne.n	800d44e <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800d448:	f06f 0303 	mvn.w	r3, #3
 800d44c:	e0ae      	b.n	800d5ac <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	2b00      	cmp	r3, #0
 800d452:	d003      	beq.n	800d45c <tcp_connect+0xb8>
 800d454:	68fb      	ldr	r3, [r7, #12]
 800d456:	681b      	ldr	r3, [r3, #0]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d111      	bne.n	800d480 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800d45c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d45e:	2b00      	cmp	r3, #0
 800d460:	d002      	beq.n	800d468 <tcp_connect+0xc4>
 800d462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d464:	3304      	adds	r3, #4
 800d466:	e000      	b.n	800d46a <tcp_connect+0xc6>
 800d468:	2300      	movs	r3, #0
 800d46a:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800d46c:	69fb      	ldr	r3, [r7, #28]
 800d46e:	2b00      	cmp	r3, #0
 800d470:	d102      	bne.n	800d478 <tcp_connect+0xd4>
      return ERR_RTE;
 800d472:	f06f 0303 	mvn.w	r3, #3
 800d476:	e099      	b.n	800d5ac <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800d478:	69fb      	ldr	r3, [r7, #28]
 800d47a:	681a      	ldr	r2, [r3, #0]
 800d47c:	68fb      	ldr	r3, [r7, #12]
 800d47e:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	8adb      	ldrh	r3, [r3, #22]
 800d484:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	8adb      	ldrh	r3, [r3, #22]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d10c      	bne.n	800d4a8 <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800d48e:	f7ff ff43 	bl	800d318 <tcp_new_port>
 800d492:	4603      	mov	r3, r0
 800d494:	461a      	mov	r2, r3
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800d49a:	68fb      	ldr	r3, [r7, #12]
 800d49c:	8adb      	ldrh	r3, [r3, #22]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d102      	bne.n	800d4a8 <tcp_connect+0x104>
      return ERR_BUF;
 800d4a2:	f06f 0301 	mvn.w	r3, #1
 800d4a6:	e081      	b.n	800d5ac <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800d4a8:	68f8      	ldr	r0, [r7, #12]
 800d4aa:	f001 f84f 	bl	800e54c <tcp_next_iss>
 800d4ae:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800d4b0:	68fb      	ldr	r3, [r7, #12]
 800d4b2:	2200      	movs	r2, #0
 800d4b4:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800d4b6:	68fb      	ldr	r3, [r7, #12]
 800d4b8:	697a      	ldr	r2, [r7, #20]
 800d4ba:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800d4bc:	697b      	ldr	r3, [r7, #20]
 800d4be:	1e5a      	subs	r2, r3, #1
 800d4c0:	68fb      	ldr	r3, [r7, #12]
 800d4c2:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800d4c4:	697b      	ldr	r3, [r7, #20]
 800d4c6:	1e5a      	subs	r2, r3, #1
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800d4cc:	697b      	ldr	r3, [r7, #20]
 800d4ce:	1e5a      	subs	r2, r3, #1
 800d4d0:	68fb      	ldr	r3, [r7, #12]
 800d4d2:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800d4d4:	68fb      	ldr	r3, [r7, #12]
 800d4d6:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4da:	855a      	strh	r2, [r3, #42]	; 0x2a
 800d4dc:	68fb      	ldr	r3, [r7, #12]
 800d4de:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800d4e0:	68fb      	ldr	r3, [r7, #12]
 800d4e2:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800d4ec:	68fb      	ldr	r3, [r7, #12]
 800d4ee:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800d4f2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800d4f6:	68fb      	ldr	r3, [r7, #12]
 800d4f8:	f44f 7206 	mov.w	r2, #536	; 0x218
 800d4fc:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800d502:	68fb      	ldr	r3, [r7, #12]
 800d504:	3304      	adds	r3, #4
 800d506:	461a      	mov	r2, r3
 800d508:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d50a:	f001 f845 	bl	800e598 <tcp_eff_send_mss_netif>
 800d50e:	4603      	mov	r3, r0
 800d510:	461a      	mov	r2, r3
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	2201      	movs	r2, #1
 800d51a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	683a      	ldr	r2, [r7, #0]
 800d522:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800d526:	2102      	movs	r1, #2
 800d528:	68f8      	ldr	r0, [r7, #12]
 800d52a:	f004 faa9 	bl	8011a80 <tcp_enqueue_flags>
 800d52e:	4603      	mov	r3, r0
 800d530:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800d532:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800d536:	2b00      	cmp	r3, #0
 800d538:	d136      	bne.n	800d5a8 <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800d53a:	68fb      	ldr	r3, [r7, #12]
 800d53c:	2202      	movs	r2, #2
 800d53e:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800d540:	8b7b      	ldrh	r3, [r7, #26]
 800d542:	2b00      	cmp	r3, #0
 800d544:	d021      	beq.n	800d58a <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800d546:	4b20      	ldr	r3, [pc, #128]	; (800d5c8 <tcp_connect+0x224>)
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	68fa      	ldr	r2, [r7, #12]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d105      	bne.n	800d55c <tcp_connect+0x1b8>
 800d550:	4b1d      	ldr	r3, [pc, #116]	; (800d5c8 <tcp_connect+0x224>)
 800d552:	681b      	ldr	r3, [r3, #0]
 800d554:	68db      	ldr	r3, [r3, #12]
 800d556:	4a1c      	ldr	r2, [pc, #112]	; (800d5c8 <tcp_connect+0x224>)
 800d558:	6013      	str	r3, [r2, #0]
 800d55a:	e013      	b.n	800d584 <tcp_connect+0x1e0>
 800d55c:	4b1a      	ldr	r3, [pc, #104]	; (800d5c8 <tcp_connect+0x224>)
 800d55e:	681b      	ldr	r3, [r3, #0]
 800d560:	623b      	str	r3, [r7, #32]
 800d562:	e00c      	b.n	800d57e <tcp_connect+0x1da>
 800d564:	6a3b      	ldr	r3, [r7, #32]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	68fa      	ldr	r2, [r7, #12]
 800d56a:	429a      	cmp	r2, r3
 800d56c:	d104      	bne.n	800d578 <tcp_connect+0x1d4>
 800d56e:	68fb      	ldr	r3, [r7, #12]
 800d570:	68da      	ldr	r2, [r3, #12]
 800d572:	6a3b      	ldr	r3, [r7, #32]
 800d574:	60da      	str	r2, [r3, #12]
 800d576:	e005      	b.n	800d584 <tcp_connect+0x1e0>
 800d578:	6a3b      	ldr	r3, [r7, #32]
 800d57a:	68db      	ldr	r3, [r3, #12]
 800d57c:	623b      	str	r3, [r7, #32]
 800d57e:	6a3b      	ldr	r3, [r7, #32]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d1ef      	bne.n	800d564 <tcp_connect+0x1c0>
 800d584:	68fb      	ldr	r3, [r7, #12]
 800d586:	2200      	movs	r2, #0
 800d588:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800d58a:	4b10      	ldr	r3, [pc, #64]	; (800d5cc <tcp_connect+0x228>)
 800d58c:	681a      	ldr	r2, [r3, #0]
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	60da      	str	r2, [r3, #12]
 800d592:	4a0e      	ldr	r2, [pc, #56]	; (800d5cc <tcp_connect+0x228>)
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	6013      	str	r3, [r2, #0]
 800d598:	f005 fad6 	bl	8012b48 <tcp_timer_needed>
 800d59c:	4b0c      	ldr	r3, [pc, #48]	; (800d5d0 <tcp_connect+0x22c>)
 800d59e:	2201      	movs	r2, #1
 800d5a0:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800d5a2:	68f8      	ldr	r0, [r7, #12]
 800d5a4:	f004 fb5a 	bl	8011c5c <tcp_output>
  }
  return ret;
 800d5a8:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800d5ac:	4618      	mov	r0, r3
 800d5ae:	3728      	adds	r7, #40	; 0x28
 800d5b0:	46bd      	mov	sp, r7
 800d5b2:	bd80      	pop	{r7, pc}
 800d5b4:	08018b38 	.word	0x08018b38
 800d5b8:	08018e14 	.word	0x08018e14
 800d5bc:	08018b7c 	.word	0x08018b7c
 800d5c0:	08018e30 	.word	0x08018e30
 800d5c4:	08018e4c 	.word	0x08018e4c
 800d5c8:	2000d13c 	.word	0x2000d13c
 800d5cc:	2000d144 	.word	0x2000d144
 800d5d0:	2000d14c 	.word	0x2000d14c

0800d5d4 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800d5d4:	b5b0      	push	{r4, r5, r7, lr}
 800d5d6:	b090      	sub	sp, #64	; 0x40
 800d5d8:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800d5da:	2300      	movs	r3, #0
 800d5dc:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800d5e0:	4b94      	ldr	r3, [pc, #592]	; (800d834 <tcp_slowtmr+0x260>)
 800d5e2:	681b      	ldr	r3, [r3, #0]
 800d5e4:	3301      	adds	r3, #1
 800d5e6:	4a93      	ldr	r2, [pc, #588]	; (800d834 <tcp_slowtmr+0x260>)
 800d5e8:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800d5ea:	4b93      	ldr	r3, [pc, #588]	; (800d838 <tcp_slowtmr+0x264>)
 800d5ec:	781b      	ldrb	r3, [r3, #0]
 800d5ee:	3301      	adds	r3, #1
 800d5f0:	b2da      	uxtb	r2, r3
 800d5f2:	4b91      	ldr	r3, [pc, #580]	; (800d838 <tcp_slowtmr+0x264>)
 800d5f4:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800d5f6:	2300      	movs	r3, #0
 800d5f8:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800d5fa:	4b90      	ldr	r3, [pc, #576]	; (800d83c <tcp_slowtmr+0x268>)
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800d600:	e29d      	b.n	800db3e <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800d602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d604:	7d1b      	ldrb	r3, [r3, #20]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d106      	bne.n	800d618 <tcp_slowtmr+0x44>
 800d60a:	4b8d      	ldr	r3, [pc, #564]	; (800d840 <tcp_slowtmr+0x26c>)
 800d60c:	f240 42be 	movw	r2, #1214	; 0x4be
 800d610:	498c      	ldr	r1, [pc, #560]	; (800d844 <tcp_slowtmr+0x270>)
 800d612:	488d      	ldr	r0, [pc, #564]	; (800d848 <tcp_slowtmr+0x274>)
 800d614:	f008 ff9c 	bl	8016550 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800d618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d61a:	7d1b      	ldrb	r3, [r3, #20]
 800d61c:	2b01      	cmp	r3, #1
 800d61e:	d106      	bne.n	800d62e <tcp_slowtmr+0x5a>
 800d620:	4b87      	ldr	r3, [pc, #540]	; (800d840 <tcp_slowtmr+0x26c>)
 800d622:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800d626:	4989      	ldr	r1, [pc, #548]	; (800d84c <tcp_slowtmr+0x278>)
 800d628:	4887      	ldr	r0, [pc, #540]	; (800d848 <tcp_slowtmr+0x274>)
 800d62a:	f008 ff91 	bl	8016550 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800d62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d630:	7d1b      	ldrb	r3, [r3, #20]
 800d632:	2b0a      	cmp	r3, #10
 800d634:	d106      	bne.n	800d644 <tcp_slowtmr+0x70>
 800d636:	4b82      	ldr	r3, [pc, #520]	; (800d840 <tcp_slowtmr+0x26c>)
 800d638:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800d63c:	4984      	ldr	r1, [pc, #528]	; (800d850 <tcp_slowtmr+0x27c>)
 800d63e:	4882      	ldr	r0, [pc, #520]	; (800d848 <tcp_slowtmr+0x274>)
 800d640:	f008 ff86 	bl	8016550 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800d644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d646:	7f9a      	ldrb	r2, [r3, #30]
 800d648:	4b7b      	ldr	r3, [pc, #492]	; (800d838 <tcp_slowtmr+0x264>)
 800d64a:	781b      	ldrb	r3, [r3, #0]
 800d64c:	429a      	cmp	r2, r3
 800d64e:	d105      	bne.n	800d65c <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800d654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d656:	68db      	ldr	r3, [r3, #12]
 800d658:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800d65a:	e270      	b.n	800db3e <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 800d65c:	4b76      	ldr	r3, [pc, #472]	; (800d838 <tcp_slowtmr+0x264>)
 800d65e:	781a      	ldrb	r2, [r3, #0]
 800d660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d662:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800d664:	2300      	movs	r3, #0
 800d666:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800d66a:	2300      	movs	r3, #0
 800d66c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800d670:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d672:	7d1b      	ldrb	r3, [r3, #20]
 800d674:	2b02      	cmp	r3, #2
 800d676:	d10a      	bne.n	800d68e <tcp_slowtmr+0xba>
 800d678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d67a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d67e:	2b05      	cmp	r3, #5
 800d680:	d905      	bls.n	800d68e <tcp_slowtmr+0xba>
      ++pcb_remove;
 800d682:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d686:	3301      	adds	r3, #1
 800d688:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d68c:	e11e      	b.n	800d8cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800d68e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d690:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d694:	2b0b      	cmp	r3, #11
 800d696:	d905      	bls.n	800d6a4 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800d698:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d69c:	3301      	adds	r3, #1
 800d69e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6a2:	e113      	b.n	800d8cc <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800d6a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6a6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d6aa:	2b00      	cmp	r3, #0
 800d6ac:	d075      	beq.n	800d79a <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800d6ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d006      	beq.n	800d6c4 <tcp_slowtmr+0xf0>
 800d6b6:	4b62      	ldr	r3, [pc, #392]	; (800d840 <tcp_slowtmr+0x26c>)
 800d6b8:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800d6bc:	4965      	ldr	r1, [pc, #404]	; (800d854 <tcp_slowtmr+0x280>)
 800d6be:	4862      	ldr	r0, [pc, #392]	; (800d848 <tcp_slowtmr+0x274>)
 800d6c0:	f008 ff46 	bl	8016550 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800d6c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d6c8:	2b00      	cmp	r3, #0
 800d6ca:	d106      	bne.n	800d6da <tcp_slowtmr+0x106>
 800d6cc:	4b5c      	ldr	r3, [pc, #368]	; (800d840 <tcp_slowtmr+0x26c>)
 800d6ce:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800d6d2:	4961      	ldr	r1, [pc, #388]	; (800d858 <tcp_slowtmr+0x284>)
 800d6d4:	485c      	ldr	r0, [pc, #368]	; (800d848 <tcp_slowtmr+0x274>)
 800d6d6:	f008 ff3b 	bl	8016550 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800d6da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6dc:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800d6e0:	2b0b      	cmp	r3, #11
 800d6e2:	d905      	bls.n	800d6f0 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800d6e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d6e8:	3301      	adds	r3, #1
 800d6ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800d6ee:	e0ed      	b.n	800d8cc <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800d6f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d6f2:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d6f6:	3b01      	subs	r3, #1
 800d6f8:	4a58      	ldr	r2, [pc, #352]	; (800d85c <tcp_slowtmr+0x288>)
 800d6fa:	5cd3      	ldrb	r3, [r2, r3]
 800d6fc:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800d6fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d700:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d704:	7c7a      	ldrb	r2, [r7, #17]
 800d706:	429a      	cmp	r2, r3
 800d708:	d907      	bls.n	800d71a <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800d70a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d70c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d710:	3301      	adds	r3, #1
 800d712:	b2da      	uxtb	r2, r3
 800d714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d716:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800d71a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d71c:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800d720:	7c7a      	ldrb	r2, [r7, #17]
 800d722:	429a      	cmp	r2, r3
 800d724:	f200 80d2 	bhi.w	800d8cc <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800d728:	2301      	movs	r3, #1
 800d72a:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800d72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d72e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d732:	2b00      	cmp	r3, #0
 800d734:	d108      	bne.n	800d748 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800d736:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d738:	f005 f938 	bl	80129ac <tcp_zero_window_probe>
 800d73c:	4603      	mov	r3, r0
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d014      	beq.n	800d76c <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800d742:	2300      	movs	r3, #0
 800d744:	623b      	str	r3, [r7, #32]
 800d746:	e011      	b.n	800d76c <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800d748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d74a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d74e:	4619      	mov	r1, r3
 800d750:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d752:	f003 fffd 	bl	8011750 <tcp_split_unsent_seg>
 800d756:	4603      	mov	r3, r0
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d107      	bne.n	800d76c <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800d75c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d75e:	f004 fa7d 	bl	8011c5c <tcp_output>
 800d762:	4603      	mov	r3, r0
 800d764:	2b00      	cmp	r3, #0
 800d766:	d101      	bne.n	800d76c <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800d768:	2300      	movs	r3, #0
 800d76a:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800d76c:	6a3b      	ldr	r3, [r7, #32]
 800d76e:	2b00      	cmp	r3, #0
 800d770:	f000 80ac 	beq.w	800d8cc <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800d774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d776:	2200      	movs	r2, #0
 800d778:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800d77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d782:	2b06      	cmp	r3, #6
 800d784:	f200 80a2 	bhi.w	800d8cc <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800d788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d78a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800d78e:	3301      	adds	r3, #1
 800d790:	b2da      	uxtb	r2, r3
 800d792:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d794:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800d798:	e098      	b.n	800d8cc <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800d79a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d79c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7a0:	2b00      	cmp	r3, #0
 800d7a2:	db0f      	blt.n	800d7c4 <tcp_slowtmr+0x1f0>
 800d7a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7a6:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7aa:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d7ae:	4293      	cmp	r3, r2
 800d7b0:	d008      	beq.n	800d7c4 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800d7b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7b4:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	3301      	adds	r3, #1
 800d7bc:	b29b      	uxth	r3, r3
 800d7be:	b21a      	sxth	r2, r3
 800d7c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c2:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800d7c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7c6:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d7d0:	429a      	cmp	r2, r3
 800d7d2:	db7b      	blt.n	800d8cc <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800d7d4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d7d6:	f004 fd33 	bl	8012240 <tcp_rexmit_rto_prepare>
 800d7da:	4603      	mov	r3, r0
 800d7dc:	2b00      	cmp	r3, #0
 800d7de:	d007      	beq.n	800d7f0 <tcp_slowtmr+0x21c>
 800d7e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d171      	bne.n	800d8cc <tcp_slowtmr+0x2f8>
 800d7e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d06d      	beq.n	800d8cc <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800d7f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f2:	7d1b      	ldrb	r3, [r3, #20]
 800d7f4:	2b02      	cmp	r3, #2
 800d7f6:	d03a      	beq.n	800d86e <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800d7f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800d7fe:	2b0c      	cmp	r3, #12
 800d800:	bf28      	it	cs
 800d802:	230c      	movcs	r3, #12
 800d804:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800d806:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d808:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800d80c:	10db      	asrs	r3, r3, #3
 800d80e:	b21b      	sxth	r3, r3
 800d810:	461a      	mov	r2, r3
 800d812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d814:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800d818:	4413      	add	r3, r2
 800d81a:	7efa      	ldrb	r2, [r7, #27]
 800d81c:	4910      	ldr	r1, [pc, #64]	; (800d860 <tcp_slowtmr+0x28c>)
 800d81e:	5c8a      	ldrb	r2, [r1, r2]
 800d820:	4093      	lsls	r3, r2
 800d822:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800d824:	697b      	ldr	r3, [r7, #20]
 800d826:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800d82a:	4293      	cmp	r3, r2
 800d82c:	dc1a      	bgt.n	800d864 <tcp_slowtmr+0x290>
 800d82e:	697b      	ldr	r3, [r7, #20]
 800d830:	b21a      	sxth	r2, r3
 800d832:	e019      	b.n	800d868 <tcp_slowtmr+0x294>
 800d834:	2000d138 	.word	0x2000d138
 800d838:	2000d14e 	.word	0x2000d14e
 800d83c:	2000d144 	.word	0x2000d144
 800d840:	08018b38 	.word	0x08018b38
 800d844:	08018e7c 	.word	0x08018e7c
 800d848:	08018b7c 	.word	0x08018b7c
 800d84c:	08018ea8 	.word	0x08018ea8
 800d850:	08018ed4 	.word	0x08018ed4
 800d854:	08018f04 	.word	0x08018f04
 800d858:	08018f38 	.word	0x08018f38
 800d85c:	0801abec 	.word	0x0801abec
 800d860:	0801abdc 	.word	0x0801abdc
 800d864:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800d868:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800d86e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d870:	2200      	movs	r2, #0
 800d872:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d876:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d87c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800d880:	4293      	cmp	r3, r2
 800d882:	bf28      	it	cs
 800d884:	4613      	movcs	r3, r2
 800d886:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800d888:	8a7b      	ldrh	r3, [r7, #18]
 800d88a:	085b      	lsrs	r3, r3, #1
 800d88c:	b29a      	uxth	r2, r3
 800d88e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d890:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800d894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d896:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800d89a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d89e:	005b      	lsls	r3, r3, #1
 800d8a0:	b29b      	uxth	r3, r3
 800d8a2:	429a      	cmp	r2, r3
 800d8a4:	d206      	bcs.n	800d8b4 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800d8a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800d8aa:	005b      	lsls	r3, r3, #1
 800d8ac:	b29a      	uxth	r2, r3
 800d8ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800d8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ba:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800d8be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8c0:	2200      	movs	r2, #0
 800d8c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800d8c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8c8:	f004 fd2a 	bl	8012320 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800d8cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8ce:	7d1b      	ldrb	r3, [r3, #20]
 800d8d0:	2b06      	cmp	r3, #6
 800d8d2:	d111      	bne.n	800d8f8 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800d8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8d6:	8b5b      	ldrh	r3, [r3, #26]
 800d8d8:	f003 0310 	and.w	r3, r3, #16
 800d8dc:	2b00      	cmp	r3, #0
 800d8de:	d00b      	beq.n	800d8f8 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d8e0:	4b9c      	ldr	r3, [pc, #624]	; (800db54 <tcp_slowtmr+0x580>)
 800d8e2:	681a      	ldr	r2, [r3, #0]
 800d8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8e6:	6a1b      	ldr	r3, [r3, #32]
 800d8e8:	1ad3      	subs	r3, r2, r3
 800d8ea:	2b28      	cmp	r3, #40	; 0x28
 800d8ec:	d904      	bls.n	800d8f8 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800d8ee:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d8f2:	3301      	adds	r3, #1
 800d8f4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d8f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8fa:	7a5b      	ldrb	r3, [r3, #9]
 800d8fc:	f003 0308 	and.w	r3, r3, #8
 800d900:	2b00      	cmp	r3, #0
 800d902:	d04a      	beq.n	800d99a <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 800d904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d906:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800d908:	2b04      	cmp	r3, #4
 800d90a:	d003      	beq.n	800d914 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800d90c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d90e:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800d910:	2b07      	cmp	r3, #7
 800d912:	d142      	bne.n	800d99a <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d914:	4b8f      	ldr	r3, [pc, #572]	; (800db54 <tcp_slowtmr+0x580>)
 800d916:	681a      	ldr	r2, [r3, #0]
 800d918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91a:	6a1b      	ldr	r3, [r3, #32]
 800d91c:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800d91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d920:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d924:	4b8c      	ldr	r3, [pc, #560]	; (800db58 <tcp_slowtmr+0x584>)
 800d926:	440b      	add	r3, r1
 800d928:	498c      	ldr	r1, [pc, #560]	; (800db5c <tcp_slowtmr+0x588>)
 800d92a:	fba1 1303 	umull	r1, r3, r1, r3
 800d92e:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d930:	429a      	cmp	r2, r3
 800d932:	d90a      	bls.n	800d94a <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800d934:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d938:	3301      	adds	r3, #1
 800d93a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800d93e:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800d942:	3301      	adds	r3, #1
 800d944:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800d948:	e027      	b.n	800d99a <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d94a:	4b82      	ldr	r3, [pc, #520]	; (800db54 <tcp_slowtmr+0x580>)
 800d94c:	681a      	ldr	r2, [r3, #0]
 800d94e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d950:	6a1b      	ldr	r3, [r3, #32]
 800d952:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800d954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d956:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800d95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d95c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d960:	4618      	mov	r0, r3
 800d962:	4b7f      	ldr	r3, [pc, #508]	; (800db60 <tcp_slowtmr+0x58c>)
 800d964:	fb00 f303 	mul.w	r3, r0, r3
 800d968:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800d96a:	497c      	ldr	r1, [pc, #496]	; (800db5c <tcp_slowtmr+0x588>)
 800d96c:	fba1 1303 	umull	r1, r3, r1, r3
 800d970:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d972:	429a      	cmp	r2, r3
 800d974:	d911      	bls.n	800d99a <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 800d976:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d978:	f004 ffd8 	bl	801292c <tcp_keepalive>
 800d97c:	4603      	mov	r3, r0
 800d97e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800d982:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800d986:	2b00      	cmp	r3, #0
 800d988:	d107      	bne.n	800d99a <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 800d98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d98c:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800d990:	3301      	adds	r3, #1
 800d992:	b2da      	uxtb	r2, r3
 800d994:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d996:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800d99a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d99c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d011      	beq.n	800d9c6 <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800d9a2:	4b6c      	ldr	r3, [pc, #432]	; (800db54 <tcp_slowtmr+0x580>)
 800d9a4:	681a      	ldr	r2, [r3, #0]
 800d9a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9a8:	6a1b      	ldr	r3, [r3, #32]
 800d9aa:	1ad2      	subs	r2, r2, r3
 800d9ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9ae:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800d9b2:	4619      	mov	r1, r3
 800d9b4:	460b      	mov	r3, r1
 800d9b6:	005b      	lsls	r3, r3, #1
 800d9b8:	440b      	add	r3, r1
 800d9ba:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d302      	bcc.n	800d9c6 <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800d9c0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d9c2:	f000 fe93 	bl	800e6ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800d9c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9c8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ca:	2b03      	cmp	r3, #3
 800d9cc:	d10b      	bne.n	800d9e6 <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800d9ce:	4b61      	ldr	r3, [pc, #388]	; (800db54 <tcp_slowtmr+0x580>)
 800d9d0:	681a      	ldr	r2, [r3, #0]
 800d9d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9d4:	6a1b      	ldr	r3, [r3, #32]
 800d9d6:	1ad3      	subs	r3, r2, r3
 800d9d8:	2b28      	cmp	r3, #40	; 0x28
 800d9da:	d904      	bls.n	800d9e6 <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800d9dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d9e0:	3301      	adds	r3, #1
 800d9e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e8:	7d1b      	ldrb	r3, [r3, #20]
 800d9ea:	2b09      	cmp	r3, #9
 800d9ec:	d10b      	bne.n	800da06 <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800d9ee:	4b59      	ldr	r3, [pc, #356]	; (800db54 <tcp_slowtmr+0x580>)
 800d9f0:	681a      	ldr	r2, [r3, #0]
 800d9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9f4:	6a1b      	ldr	r3, [r3, #32]
 800d9f6:	1ad3      	subs	r3, r2, r3
 800d9f8:	2bf0      	cmp	r3, #240	; 0xf0
 800d9fa:	d904      	bls.n	800da06 <tcp_slowtmr+0x432>
        ++pcb_remove;
 800d9fc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da00:	3301      	adds	r3, #1
 800da02:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800da06:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da0a:	2b00      	cmp	r3, #0
 800da0c:	d060      	beq.n	800dad0 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800da0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800da14:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800da16:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da18:	f000 fcb4 	bl	800e384 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800da1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d010      	beq.n	800da44 <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800da22:	4b50      	ldr	r3, [pc, #320]	; (800db64 <tcp_slowtmr+0x590>)
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da28:	429a      	cmp	r2, r3
 800da2a:	d106      	bne.n	800da3a <tcp_slowtmr+0x466>
 800da2c:	4b4e      	ldr	r3, [pc, #312]	; (800db68 <tcp_slowtmr+0x594>)
 800da2e:	f240 526d 	movw	r2, #1389	; 0x56d
 800da32:	494e      	ldr	r1, [pc, #312]	; (800db6c <tcp_slowtmr+0x598>)
 800da34:	484e      	ldr	r0, [pc, #312]	; (800db70 <tcp_slowtmr+0x59c>)
 800da36:	f008 fd8b 	bl	8016550 <iprintf>
        prev->next = pcb->next;
 800da3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da3c:	68da      	ldr	r2, [r3, #12]
 800da3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800da40:	60da      	str	r2, [r3, #12]
 800da42:	e00f      	b.n	800da64 <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800da44:	4b47      	ldr	r3, [pc, #284]	; (800db64 <tcp_slowtmr+0x590>)
 800da46:	681b      	ldr	r3, [r3, #0]
 800da48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da4a:	429a      	cmp	r2, r3
 800da4c:	d006      	beq.n	800da5c <tcp_slowtmr+0x488>
 800da4e:	4b46      	ldr	r3, [pc, #280]	; (800db68 <tcp_slowtmr+0x594>)
 800da50:	f240 5271 	movw	r2, #1393	; 0x571
 800da54:	4947      	ldr	r1, [pc, #284]	; (800db74 <tcp_slowtmr+0x5a0>)
 800da56:	4846      	ldr	r0, [pc, #280]	; (800db70 <tcp_slowtmr+0x59c>)
 800da58:	f008 fd7a 	bl	8016550 <iprintf>
        tcp_active_pcbs = pcb->next;
 800da5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	4a40      	ldr	r2, [pc, #256]	; (800db64 <tcp_slowtmr+0x590>)
 800da62:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800da64:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d013      	beq.n	800da94 <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800da6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da6e:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800da70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da72:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800da74:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800da76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da78:	3304      	adds	r3, #4
 800da7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800da7c:	8ad2      	ldrh	r2, [r2, #22]
 800da7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800da80:	8b09      	ldrh	r1, [r1, #24]
 800da82:	9102      	str	r1, [sp, #8]
 800da84:	9201      	str	r2, [sp, #4]
 800da86:	9300      	str	r3, [sp, #0]
 800da88:	462b      	mov	r3, r5
 800da8a:	4622      	mov	r2, r4
 800da8c:	4601      	mov	r1, r0
 800da8e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800da90:	f004 fe98 	bl	80127c4 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800da94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da96:	691b      	ldr	r3, [r3, #16]
 800da98:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800da9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da9c:	7d1b      	ldrb	r3, [r3, #20]
 800da9e:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800daa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa2:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800daa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daa6:	68db      	ldr	r3, [r3, #12]
 800daa8:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800daaa:	6838      	ldr	r0, [r7, #0]
 800daac:	f7fe fffe 	bl	800caac <tcp_free>

      tcp_active_pcbs_changed = 0;
 800dab0:	4b31      	ldr	r3, [pc, #196]	; (800db78 <tcp_slowtmr+0x5a4>)
 800dab2:	2200      	movs	r2, #0
 800dab4:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800dab6:	68fb      	ldr	r3, [r7, #12]
 800dab8:	2b00      	cmp	r3, #0
 800daba:	d004      	beq.n	800dac6 <tcp_slowtmr+0x4f2>
 800dabc:	68fb      	ldr	r3, [r7, #12]
 800dabe:	f06f 010c 	mvn.w	r1, #12
 800dac2:	68b8      	ldr	r0, [r7, #8]
 800dac4:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800dac6:	4b2c      	ldr	r3, [pc, #176]	; (800db78 <tcp_slowtmr+0x5a4>)
 800dac8:	781b      	ldrb	r3, [r3, #0]
 800daca:	2b00      	cmp	r3, #0
 800dacc:	d037      	beq.n	800db3e <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 800dace:	e592      	b.n	800d5f6 <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800dad0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dad4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dad6:	68db      	ldr	r3, [r3, #12]
 800dad8:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800dada:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dadc:	7f1b      	ldrb	r3, [r3, #28]
 800dade:	3301      	adds	r3, #1
 800dae0:	b2da      	uxtb	r2, r3
 800dae2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae4:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800dae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dae8:	7f1a      	ldrb	r2, [r3, #28]
 800daea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daec:	7f5b      	ldrb	r3, [r3, #29]
 800daee:	429a      	cmp	r2, r3
 800daf0:	d325      	bcc.n	800db3e <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 800daf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800daf4:	2200      	movs	r2, #0
 800daf6:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800daf8:	4b1f      	ldr	r3, [pc, #124]	; (800db78 <tcp_slowtmr+0x5a4>)
 800dafa:	2200      	movs	r2, #0
 800dafc:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800dafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db00:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db04:	2b00      	cmp	r3, #0
 800db06:	d00b      	beq.n	800db20 <tcp_slowtmr+0x54c>
 800db08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db0a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800db0e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db10:	6912      	ldr	r2, [r2, #16]
 800db12:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db14:	4610      	mov	r0, r2
 800db16:	4798      	blx	r3
 800db18:	4603      	mov	r3, r0
 800db1a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800db1e:	e002      	b.n	800db26 <tcp_slowtmr+0x552>
 800db20:	2300      	movs	r3, #0
 800db22:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800db26:	4b14      	ldr	r3, [pc, #80]	; (800db78 <tcp_slowtmr+0x5a4>)
 800db28:	781b      	ldrb	r3, [r3, #0]
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d000      	beq.n	800db30 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 800db2e:	e562      	b.n	800d5f6 <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800db30:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800db34:	2b00      	cmp	r3, #0
 800db36:	d102      	bne.n	800db3e <tcp_slowtmr+0x56a>
          tcp_output(prev);
 800db38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800db3a:	f004 f88f 	bl	8011c5c <tcp_output>
  while (pcb != NULL) {
 800db3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db40:	2b00      	cmp	r3, #0
 800db42:	f47f ad5e 	bne.w	800d602 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800db46:	2300      	movs	r3, #0
 800db48:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800db4a:	4b0c      	ldr	r3, [pc, #48]	; (800db7c <tcp_slowtmr+0x5a8>)
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800db50:	e069      	b.n	800dc26 <tcp_slowtmr+0x652>
 800db52:	bf00      	nop
 800db54:	2000d138 	.word	0x2000d138
 800db58:	000a4cb8 	.word	0x000a4cb8
 800db5c:	10624dd3 	.word	0x10624dd3
 800db60:	000124f8 	.word	0x000124f8
 800db64:	2000d144 	.word	0x2000d144
 800db68:	08018b38 	.word	0x08018b38
 800db6c:	08018f70 	.word	0x08018f70
 800db70:	08018b7c 	.word	0x08018b7c
 800db74:	08018f9c 	.word	0x08018f9c
 800db78:	2000d14c 	.word	0x2000d14c
 800db7c:	2000d148 	.word	0x2000d148
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800db80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db82:	7d1b      	ldrb	r3, [r3, #20]
 800db84:	2b0a      	cmp	r3, #10
 800db86:	d006      	beq.n	800db96 <tcp_slowtmr+0x5c2>
 800db88:	4b2b      	ldr	r3, [pc, #172]	; (800dc38 <tcp_slowtmr+0x664>)
 800db8a:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800db8e:	492b      	ldr	r1, [pc, #172]	; (800dc3c <tcp_slowtmr+0x668>)
 800db90:	482b      	ldr	r0, [pc, #172]	; (800dc40 <tcp_slowtmr+0x66c>)
 800db92:	f008 fcdd 	bl	8016550 <iprintf>
    pcb_remove = 0;
 800db96:	2300      	movs	r3, #0
 800db98:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800db9c:	4b29      	ldr	r3, [pc, #164]	; (800dc44 <tcp_slowtmr+0x670>)
 800db9e:	681a      	ldr	r2, [r3, #0]
 800dba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dba2:	6a1b      	ldr	r3, [r3, #32]
 800dba4:	1ad3      	subs	r3, r2, r3
 800dba6:	2bf0      	cmp	r3, #240	; 0xf0
 800dba8:	d904      	bls.n	800dbb4 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800dbaa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbae:	3301      	adds	r3, #1
 800dbb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800dbb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800dbb8:	2b00      	cmp	r3, #0
 800dbba:	d02f      	beq.n	800dc1c <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800dbbc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800dbbe:	f000 fbe1 	bl	800e384 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800dbc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc4:	2b00      	cmp	r3, #0
 800dbc6:	d010      	beq.n	800dbea <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800dbc8:	4b1f      	ldr	r3, [pc, #124]	; (800dc48 <tcp_slowtmr+0x674>)
 800dbca:	681b      	ldr	r3, [r3, #0]
 800dbcc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbce:	429a      	cmp	r2, r3
 800dbd0:	d106      	bne.n	800dbe0 <tcp_slowtmr+0x60c>
 800dbd2:	4b19      	ldr	r3, [pc, #100]	; (800dc38 <tcp_slowtmr+0x664>)
 800dbd4:	f240 52af 	movw	r2, #1455	; 0x5af
 800dbd8:	491c      	ldr	r1, [pc, #112]	; (800dc4c <tcp_slowtmr+0x678>)
 800dbda:	4819      	ldr	r0, [pc, #100]	; (800dc40 <tcp_slowtmr+0x66c>)
 800dbdc:	f008 fcb8 	bl	8016550 <iprintf>
        prev->next = pcb->next;
 800dbe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dbe2:	68da      	ldr	r2, [r3, #12]
 800dbe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbe6:	60da      	str	r2, [r3, #12]
 800dbe8:	e00f      	b.n	800dc0a <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800dbea:	4b17      	ldr	r3, [pc, #92]	; (800dc48 <tcp_slowtmr+0x674>)
 800dbec:	681b      	ldr	r3, [r3, #0]
 800dbee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dbf0:	429a      	cmp	r2, r3
 800dbf2:	d006      	beq.n	800dc02 <tcp_slowtmr+0x62e>
 800dbf4:	4b10      	ldr	r3, [pc, #64]	; (800dc38 <tcp_slowtmr+0x664>)
 800dbf6:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800dbfa:	4915      	ldr	r1, [pc, #84]	; (800dc50 <tcp_slowtmr+0x67c>)
 800dbfc:	4810      	ldr	r0, [pc, #64]	; (800dc40 <tcp_slowtmr+0x66c>)
 800dbfe:	f008 fca7 	bl	8016550 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800dc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc04:	68db      	ldr	r3, [r3, #12]
 800dc06:	4a10      	ldr	r2, [pc, #64]	; (800dc48 <tcp_slowtmr+0x674>)
 800dc08:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800dc0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc0c:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800dc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc10:	68db      	ldr	r3, [r3, #12]
 800dc12:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800dc14:	69f8      	ldr	r0, [r7, #28]
 800dc16:	f7fe ff49 	bl	800caac <tcp_free>
 800dc1a:	e004      	b.n	800dc26 <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800dc1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc1e:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	68db      	ldr	r3, [r3, #12]
 800dc24:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800dc26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc28:	2b00      	cmp	r3, #0
 800dc2a:	d1a9      	bne.n	800db80 <tcp_slowtmr+0x5ac>
    }
  }
}
 800dc2c:	bf00      	nop
 800dc2e:	bf00      	nop
 800dc30:	3730      	adds	r7, #48	; 0x30
 800dc32:	46bd      	mov	sp, r7
 800dc34:	bdb0      	pop	{r4, r5, r7, pc}
 800dc36:	bf00      	nop
 800dc38:	08018b38 	.word	0x08018b38
 800dc3c:	08018fc8 	.word	0x08018fc8
 800dc40:	08018b7c 	.word	0x08018b7c
 800dc44:	2000d138 	.word	0x2000d138
 800dc48:	2000d148 	.word	0x2000d148
 800dc4c:	08018ff8 	.word	0x08018ff8
 800dc50:	08019020 	.word	0x08019020

0800dc54 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800dc54:	b580      	push	{r7, lr}
 800dc56:	b082      	sub	sp, #8
 800dc58:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800dc5a:	4b2d      	ldr	r3, [pc, #180]	; (800dd10 <tcp_fasttmr+0xbc>)
 800dc5c:	781b      	ldrb	r3, [r3, #0]
 800dc5e:	3301      	adds	r3, #1
 800dc60:	b2da      	uxtb	r2, r3
 800dc62:	4b2b      	ldr	r3, [pc, #172]	; (800dd10 <tcp_fasttmr+0xbc>)
 800dc64:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800dc66:	4b2b      	ldr	r3, [pc, #172]	; (800dd14 <tcp_fasttmr+0xc0>)
 800dc68:	681b      	ldr	r3, [r3, #0]
 800dc6a:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800dc6c:	e048      	b.n	800dd00 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800dc6e:	687b      	ldr	r3, [r7, #4]
 800dc70:	7f9a      	ldrb	r2, [r3, #30]
 800dc72:	4b27      	ldr	r3, [pc, #156]	; (800dd10 <tcp_fasttmr+0xbc>)
 800dc74:	781b      	ldrb	r3, [r3, #0]
 800dc76:	429a      	cmp	r2, r3
 800dc78:	d03f      	beq.n	800dcfa <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800dc7a:	4b25      	ldr	r3, [pc, #148]	; (800dd10 <tcp_fasttmr+0xbc>)
 800dc7c:	781a      	ldrb	r2, [r3, #0]
 800dc7e:	687b      	ldr	r3, [r7, #4]
 800dc80:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	8b5b      	ldrh	r3, [r3, #26]
 800dc86:	f003 0301 	and.w	r3, r3, #1
 800dc8a:	2b00      	cmp	r3, #0
 800dc8c:	d010      	beq.n	800dcb0 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	8b5b      	ldrh	r3, [r3, #26]
 800dc92:	f043 0302 	orr.w	r3, r3, #2
 800dc96:	b29a      	uxth	r2, r3
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800dc9c:	6878      	ldr	r0, [r7, #4]
 800dc9e:	f003 ffdd 	bl	8011c5c <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800dca2:	687b      	ldr	r3, [r7, #4]
 800dca4:	8b5b      	ldrh	r3, [r3, #26]
 800dca6:	f023 0303 	bic.w	r3, r3, #3
 800dcaa:	b29a      	uxth	r2, r3
 800dcac:	687b      	ldr	r3, [r7, #4]
 800dcae:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	8b5b      	ldrh	r3, [r3, #26]
 800dcb4:	f003 0308 	and.w	r3, r3, #8
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d009      	beq.n	800dcd0 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800dcbc:	687b      	ldr	r3, [r7, #4]
 800dcbe:	8b5b      	ldrh	r3, [r3, #26]
 800dcc0:	f023 0308 	bic.w	r3, r3, #8
 800dcc4:	b29a      	uxth	r2, r3
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800dcca:	6878      	ldr	r0, [r7, #4]
 800dccc:	f7ff f882 	bl	800cdd4 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800dcd0:	687b      	ldr	r3, [r7, #4]
 800dcd2:	68db      	ldr	r3, [r3, #12]
 800dcd4:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d00a      	beq.n	800dcf4 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800dcde:	4b0e      	ldr	r3, [pc, #56]	; (800dd18 <tcp_fasttmr+0xc4>)
 800dce0:	2200      	movs	r2, #0
 800dce2:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800dce4:	6878      	ldr	r0, [r7, #4]
 800dce6:	f000 f819 	bl	800dd1c <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800dcea:	4b0b      	ldr	r3, [pc, #44]	; (800dd18 <tcp_fasttmr+0xc4>)
 800dcec:	781b      	ldrb	r3, [r3, #0]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d000      	beq.n	800dcf4 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800dcf2:	e7b8      	b.n	800dc66 <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	607b      	str	r3, [r7, #4]
 800dcf8:	e002      	b.n	800dd00 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800dcfa:	687b      	ldr	r3, [r7, #4]
 800dcfc:	68db      	ldr	r3, [r3, #12]
 800dcfe:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	2b00      	cmp	r3, #0
 800dd04:	d1b3      	bne.n	800dc6e <tcp_fasttmr+0x1a>
    }
  }
}
 800dd06:	bf00      	nop
 800dd08:	bf00      	nop
 800dd0a:	3708      	adds	r7, #8
 800dd0c:	46bd      	mov	sp, r7
 800dd0e:	bd80      	pop	{r7, pc}
 800dd10:	2000d14e 	.word	0x2000d14e
 800dd14:	2000d144 	.word	0x2000d144
 800dd18:	2000d14c 	.word	0x2000d14c

0800dd1c <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800dd1c:	b590      	push	{r4, r7, lr}
 800dd1e:	b085      	sub	sp, #20
 800dd20:	af00      	add	r7, sp, #0
 800dd22:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800dd24:	687b      	ldr	r3, [r7, #4]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d109      	bne.n	800dd3e <tcp_process_refused_data+0x22>
 800dd2a:	4b37      	ldr	r3, [pc, #220]	; (800de08 <tcp_process_refused_data+0xec>)
 800dd2c:	f240 6209 	movw	r2, #1545	; 0x609
 800dd30:	4936      	ldr	r1, [pc, #216]	; (800de0c <tcp_process_refused_data+0xf0>)
 800dd32:	4837      	ldr	r0, [pc, #220]	; (800de10 <tcp_process_refused_data+0xf4>)
 800dd34:	f008 fc0c 	bl	8016550 <iprintf>
 800dd38:	f06f 030f 	mvn.w	r3, #15
 800dd3c:	e060      	b.n	800de00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd42:	7b5b      	ldrb	r3, [r3, #13]
 800dd44:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dd4a:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	2200      	movs	r2, #0
 800dd50:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800dd52:	687b      	ldr	r3, [r7, #4]
 800dd54:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d00b      	beq.n	800dd74 <tcp_process_refused_data+0x58>
 800dd5c:	687b      	ldr	r3, [r7, #4]
 800dd5e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800dd62:	687b      	ldr	r3, [r7, #4]
 800dd64:	6918      	ldr	r0, [r3, #16]
 800dd66:	2300      	movs	r3, #0
 800dd68:	68ba      	ldr	r2, [r7, #8]
 800dd6a:	6879      	ldr	r1, [r7, #4]
 800dd6c:	47a0      	blx	r4
 800dd6e:	4603      	mov	r3, r0
 800dd70:	73fb      	strb	r3, [r7, #15]
 800dd72:	e007      	b.n	800dd84 <tcp_process_refused_data+0x68>
 800dd74:	2300      	movs	r3, #0
 800dd76:	68ba      	ldr	r2, [r7, #8]
 800dd78:	6879      	ldr	r1, [r7, #4]
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	f000 f8a4 	bl	800dec8 <tcp_recv_null>
 800dd80:	4603      	mov	r3, r0
 800dd82:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800dd84:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d12a      	bne.n	800dde2 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800dd8c:	7bbb      	ldrb	r3, [r7, #14]
 800dd8e:	f003 0320 	and.w	r3, r3, #32
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d033      	beq.n	800ddfe <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800dd96:	687b      	ldr	r3, [r7, #4]
 800dd98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dd9a:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800dd9e:	d005      	beq.n	800ddac <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800dda0:	687b      	ldr	r3, [r7, #4]
 800dda2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800dda4:	3301      	adds	r3, #1
 800dda6:	b29a      	uxth	r2, r3
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d00b      	beq.n	800ddce <tcp_process_refused_data+0xb2>
 800ddb6:	687b      	ldr	r3, [r7, #4]
 800ddb8:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	6918      	ldr	r0, [r3, #16]
 800ddc0:	2300      	movs	r3, #0
 800ddc2:	2200      	movs	r2, #0
 800ddc4:	6879      	ldr	r1, [r7, #4]
 800ddc6:	47a0      	blx	r4
 800ddc8:	4603      	mov	r3, r0
 800ddca:	73fb      	strb	r3, [r7, #15]
 800ddcc:	e001      	b.n	800ddd2 <tcp_process_refused_data+0xb6>
 800ddce:	2300      	movs	r3, #0
 800ddd0:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800ddd2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ddd6:	f113 0f0d 	cmn.w	r3, #13
 800ddda:	d110      	bne.n	800ddfe <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800dddc:	f06f 030c 	mvn.w	r3, #12
 800dde0:	e00e      	b.n	800de00 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800dde2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dde6:	f113 0f0d 	cmn.w	r3, #13
 800ddea:	d102      	bne.n	800ddf2 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ddec:	f06f 030c 	mvn.w	r3, #12
 800ddf0:	e006      	b.n	800de00 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ddf2:	687b      	ldr	r3, [r7, #4]
 800ddf4:	68ba      	ldr	r2, [r7, #8]
 800ddf6:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ddf8:	f06f 0304 	mvn.w	r3, #4
 800ddfc:	e000      	b.n	800de00 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ddfe:	2300      	movs	r3, #0
}
 800de00:	4618      	mov	r0, r3
 800de02:	3714      	adds	r7, #20
 800de04:	46bd      	mov	sp, r7
 800de06:	bd90      	pop	{r4, r7, pc}
 800de08:	08018b38 	.word	0x08018b38
 800de0c:	08019048 	.word	0x08019048
 800de10:	08018b7c 	.word	0x08018b7c

0800de14 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800de14:	b580      	push	{r7, lr}
 800de16:	b084      	sub	sp, #16
 800de18:	af00      	add	r7, sp, #0
 800de1a:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800de1c:	e007      	b.n	800de2e <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800de1e:	687b      	ldr	r3, [r7, #4]
 800de20:	681b      	ldr	r3, [r3, #0]
 800de22:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f80a 	bl	800de3e <tcp_seg_free>
    seg = next;
 800de2a:	68fb      	ldr	r3, [r7, #12]
 800de2c:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800de2e:	687b      	ldr	r3, [r7, #4]
 800de30:	2b00      	cmp	r3, #0
 800de32:	d1f4      	bne.n	800de1e <tcp_segs_free+0xa>
  }
}
 800de34:	bf00      	nop
 800de36:	bf00      	nop
 800de38:	3710      	adds	r7, #16
 800de3a:	46bd      	mov	sp, r7
 800de3c:	bd80      	pop	{r7, pc}

0800de3e <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800de3e:	b580      	push	{r7, lr}
 800de40:	b082      	sub	sp, #8
 800de42:	af00      	add	r7, sp, #0
 800de44:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800de46:	687b      	ldr	r3, [r7, #4]
 800de48:	2b00      	cmp	r3, #0
 800de4a:	d00c      	beq.n	800de66 <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	685b      	ldr	r3, [r3, #4]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d004      	beq.n	800de5e <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	685b      	ldr	r3, [r3, #4]
 800de58:	4618      	mov	r0, r3
 800de5a:	f7fe f9d7 	bl	800c20c <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800de5e:	6879      	ldr	r1, [r7, #4]
 800de60:	2003      	movs	r0, #3
 800de62:	f7fd fb39 	bl	800b4d8 <memp_free>
  }
}
 800de66:	bf00      	nop
 800de68:	3708      	adds	r7, #8
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}
	...

0800de70 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b084      	sub	sp, #16
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	2b00      	cmp	r3, #0
 800de7c:	d106      	bne.n	800de8c <tcp_seg_copy+0x1c>
 800de7e:	4b0f      	ldr	r3, [pc, #60]	; (800debc <tcp_seg_copy+0x4c>)
 800de80:	f240 6282 	movw	r2, #1666	; 0x682
 800de84:	490e      	ldr	r1, [pc, #56]	; (800dec0 <tcp_seg_copy+0x50>)
 800de86:	480f      	ldr	r0, [pc, #60]	; (800dec4 <tcp_seg_copy+0x54>)
 800de88:	f008 fb62 	bl	8016550 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800de8c:	2003      	movs	r0, #3
 800de8e:	f7fd faad 	bl	800b3ec <memp_malloc>
 800de92:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800de94:	68fb      	ldr	r3, [r7, #12]
 800de96:	2b00      	cmp	r3, #0
 800de98:	d101      	bne.n	800de9e <tcp_seg_copy+0x2e>
    return NULL;
 800de9a:	2300      	movs	r3, #0
 800de9c:	e00a      	b.n	800deb4 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800de9e:	2210      	movs	r2, #16
 800dea0:	6879      	ldr	r1, [r7, #4]
 800dea2:	68f8      	ldr	r0, [r7, #12]
 800dea4:	f008 faa9 	bl	80163fa <memcpy>
  pbuf_ref(cseg->p);
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	685b      	ldr	r3, [r3, #4]
 800deac:	4618      	mov	r0, r3
 800deae:	f7fe fa53 	bl	800c358 <pbuf_ref>
  return cseg;
 800deb2:	68fb      	ldr	r3, [r7, #12]
}
 800deb4:	4618      	mov	r0, r3
 800deb6:	3710      	adds	r7, #16
 800deb8:	46bd      	mov	sp, r7
 800deba:	bd80      	pop	{r7, pc}
 800debc:	08018b38 	.word	0x08018b38
 800dec0:	0801908c 	.word	0x0801908c
 800dec4:	08018b7c 	.word	0x08018b7c

0800dec8 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800dec8:	b580      	push	{r7, lr}
 800deca:	b084      	sub	sp, #16
 800decc:	af00      	add	r7, sp, #0
 800dece:	60f8      	str	r0, [r7, #12]
 800ded0:	60b9      	str	r1, [r7, #8]
 800ded2:	607a      	str	r2, [r7, #4]
 800ded4:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2b00      	cmp	r3, #0
 800deda:	d109      	bne.n	800def0 <tcp_recv_null+0x28>
 800dedc:	4b12      	ldr	r3, [pc, #72]	; (800df28 <tcp_recv_null+0x60>)
 800dede:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800dee2:	4912      	ldr	r1, [pc, #72]	; (800df2c <tcp_recv_null+0x64>)
 800dee4:	4812      	ldr	r0, [pc, #72]	; (800df30 <tcp_recv_null+0x68>)
 800dee6:	f008 fb33 	bl	8016550 <iprintf>
 800deea:	f06f 030f 	mvn.w	r3, #15
 800deee:	e016      	b.n	800df1e <tcp_recv_null+0x56>

  if (p != NULL) {
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	2b00      	cmp	r3, #0
 800def4:	d009      	beq.n	800df0a <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	891b      	ldrh	r3, [r3, #8]
 800defa:	4619      	mov	r1, r3
 800defc:	68b8      	ldr	r0, [r7, #8]
 800defe:	f7ff f9bb 	bl	800d278 <tcp_recved>
    pbuf_free(p);
 800df02:	6878      	ldr	r0, [r7, #4]
 800df04:	f7fe f982 	bl	800c20c <pbuf_free>
 800df08:	e008      	b.n	800df1c <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800df0a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d104      	bne.n	800df1c <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800df12:	68b8      	ldr	r0, [r7, #8]
 800df14:	f7fe ffc8 	bl	800cea8 <tcp_close>
 800df18:	4603      	mov	r3, r0
 800df1a:	e000      	b.n	800df1e <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800df1c:	2300      	movs	r3, #0
}
 800df1e:	4618      	mov	r0, r3
 800df20:	3710      	adds	r7, #16
 800df22:	46bd      	mov	sp, r7
 800df24:	bd80      	pop	{r7, pc}
 800df26:	bf00      	nop
 800df28:	08018b38 	.word	0x08018b38
 800df2c:	080190a8 	.word	0x080190a8
 800df30:	08018b7c 	.word	0x08018b7c

0800df34 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800df34:	b580      	push	{r7, lr}
 800df36:	b086      	sub	sp, #24
 800df38:	af00      	add	r7, sp, #0
 800df3a:	4603      	mov	r3, r0
 800df3c:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800df3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df42:	2b00      	cmp	r3, #0
 800df44:	db01      	blt.n	800df4a <tcp_kill_prio+0x16>
 800df46:	79fb      	ldrb	r3, [r7, #7]
 800df48:	e000      	b.n	800df4c <tcp_kill_prio+0x18>
 800df4a:	237f      	movs	r3, #127	; 0x7f
 800df4c:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800df4e:	7afb      	ldrb	r3, [r7, #11]
 800df50:	2b00      	cmp	r3, #0
 800df52:	d034      	beq.n	800dfbe <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800df54:	7afb      	ldrb	r3, [r7, #11]
 800df56:	3b01      	subs	r3, #1
 800df58:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800df5a:	2300      	movs	r3, #0
 800df5c:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800df5e:	2300      	movs	r3, #0
 800df60:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800df62:	4b19      	ldr	r3, [pc, #100]	; (800dfc8 <tcp_kill_prio+0x94>)
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	617b      	str	r3, [r7, #20]
 800df68:	e01f      	b.n	800dfaa <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800df6a:	697b      	ldr	r3, [r7, #20]
 800df6c:	7d5b      	ldrb	r3, [r3, #21]
 800df6e:	7afa      	ldrb	r2, [r7, #11]
 800df70:	429a      	cmp	r2, r3
 800df72:	d80c      	bhi.n	800df8e <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df74:	697b      	ldr	r3, [r7, #20]
 800df76:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800df78:	7afa      	ldrb	r2, [r7, #11]
 800df7a:	429a      	cmp	r2, r3
 800df7c:	d112      	bne.n	800dfa4 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800df7e:	4b13      	ldr	r3, [pc, #76]	; (800dfcc <tcp_kill_prio+0x98>)
 800df80:	681a      	ldr	r2, [r3, #0]
 800df82:	697b      	ldr	r3, [r7, #20]
 800df84:	6a1b      	ldr	r3, [r3, #32]
 800df86:	1ad3      	subs	r3, r2, r3
 800df88:	68fa      	ldr	r2, [r7, #12]
 800df8a:	429a      	cmp	r2, r3
 800df8c:	d80a      	bhi.n	800dfa4 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800df8e:	4b0f      	ldr	r3, [pc, #60]	; (800dfcc <tcp_kill_prio+0x98>)
 800df90:	681a      	ldr	r2, [r3, #0]
 800df92:	697b      	ldr	r3, [r7, #20]
 800df94:	6a1b      	ldr	r3, [r3, #32]
 800df96:	1ad3      	subs	r3, r2, r3
 800df98:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800df9a:	697b      	ldr	r3, [r7, #20]
 800df9c:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800df9e:	697b      	ldr	r3, [r7, #20]
 800dfa0:	7d5b      	ldrb	r3, [r3, #21]
 800dfa2:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dfa4:	697b      	ldr	r3, [r7, #20]
 800dfa6:	68db      	ldr	r3, [r3, #12]
 800dfa8:	617b      	str	r3, [r7, #20]
 800dfaa:	697b      	ldr	r3, [r7, #20]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d1dc      	bne.n	800df6a <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800dfb0:	693b      	ldr	r3, [r7, #16]
 800dfb2:	2b00      	cmp	r3, #0
 800dfb4:	d004      	beq.n	800dfc0 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800dfb6:	6938      	ldr	r0, [r7, #16]
 800dfb8:	f7ff f860 	bl	800d07c <tcp_abort>
 800dfbc:	e000      	b.n	800dfc0 <tcp_kill_prio+0x8c>
    return;
 800dfbe:	bf00      	nop
  }
}
 800dfc0:	3718      	adds	r7, #24
 800dfc2:	46bd      	mov	sp, r7
 800dfc4:	bd80      	pop	{r7, pc}
 800dfc6:	bf00      	nop
 800dfc8:	2000d144 	.word	0x2000d144
 800dfcc:	2000d138 	.word	0x2000d138

0800dfd0 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800dfd0:	b580      	push	{r7, lr}
 800dfd2:	b086      	sub	sp, #24
 800dfd4:	af00      	add	r7, sp, #0
 800dfd6:	4603      	mov	r3, r0
 800dfd8:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800dfda:	79fb      	ldrb	r3, [r7, #7]
 800dfdc:	2b08      	cmp	r3, #8
 800dfde:	d009      	beq.n	800dff4 <tcp_kill_state+0x24>
 800dfe0:	79fb      	ldrb	r3, [r7, #7]
 800dfe2:	2b09      	cmp	r3, #9
 800dfe4:	d006      	beq.n	800dff4 <tcp_kill_state+0x24>
 800dfe6:	4b1a      	ldr	r3, [pc, #104]	; (800e050 <tcp_kill_state+0x80>)
 800dfe8:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800dfec:	4919      	ldr	r1, [pc, #100]	; (800e054 <tcp_kill_state+0x84>)
 800dfee:	481a      	ldr	r0, [pc, #104]	; (800e058 <tcp_kill_state+0x88>)
 800dff0:	f008 faae 	bl	8016550 <iprintf>

  inactivity = 0;
 800dff4:	2300      	movs	r3, #0
 800dff6:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800dff8:	2300      	movs	r3, #0
 800dffa:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800dffc:	4b17      	ldr	r3, [pc, #92]	; (800e05c <tcp_kill_state+0x8c>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	617b      	str	r3, [r7, #20]
 800e002:	e017      	b.n	800e034 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800e004:	697b      	ldr	r3, [r7, #20]
 800e006:	7d1b      	ldrb	r3, [r3, #20]
 800e008:	79fa      	ldrb	r2, [r7, #7]
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d10f      	bne.n	800e02e <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e00e:	4b14      	ldr	r3, [pc, #80]	; (800e060 <tcp_kill_state+0x90>)
 800e010:	681a      	ldr	r2, [r3, #0]
 800e012:	697b      	ldr	r3, [r7, #20]
 800e014:	6a1b      	ldr	r3, [r3, #32]
 800e016:	1ad3      	subs	r3, r2, r3
 800e018:	68fa      	ldr	r2, [r7, #12]
 800e01a:	429a      	cmp	r2, r3
 800e01c:	d807      	bhi.n	800e02e <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800e01e:	4b10      	ldr	r3, [pc, #64]	; (800e060 <tcp_kill_state+0x90>)
 800e020:	681a      	ldr	r2, [r3, #0]
 800e022:	697b      	ldr	r3, [r7, #20]
 800e024:	6a1b      	ldr	r3, [r3, #32]
 800e026:	1ad3      	subs	r3, r2, r3
 800e028:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800e02a:	697b      	ldr	r3, [r7, #20]
 800e02c:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e02e:	697b      	ldr	r3, [r7, #20]
 800e030:	68db      	ldr	r3, [r3, #12]
 800e032:	617b      	str	r3, [r7, #20]
 800e034:	697b      	ldr	r3, [r7, #20]
 800e036:	2b00      	cmp	r3, #0
 800e038:	d1e4      	bne.n	800e004 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800e03a:	693b      	ldr	r3, [r7, #16]
 800e03c:	2b00      	cmp	r3, #0
 800e03e:	d003      	beq.n	800e048 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800e040:	2100      	movs	r1, #0
 800e042:	6938      	ldr	r0, [r7, #16]
 800e044:	f7fe ff5c 	bl	800cf00 <tcp_abandon>
  }
}
 800e048:	bf00      	nop
 800e04a:	3718      	adds	r7, #24
 800e04c:	46bd      	mov	sp, r7
 800e04e:	bd80      	pop	{r7, pc}
 800e050:	08018b38 	.word	0x08018b38
 800e054:	080190c4 	.word	0x080190c4
 800e058:	08018b7c 	.word	0x08018b7c
 800e05c:	2000d144 	.word	0x2000d144
 800e060:	2000d138 	.word	0x2000d138

0800e064 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800e064:	b580      	push	{r7, lr}
 800e066:	b084      	sub	sp, #16
 800e068:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800e06a:	2300      	movs	r3, #0
 800e06c:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800e06e:	2300      	movs	r3, #0
 800e070:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e072:	4b12      	ldr	r3, [pc, #72]	; (800e0bc <tcp_kill_timewait+0x58>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	60fb      	str	r3, [r7, #12]
 800e078:	e012      	b.n	800e0a0 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800e07a:	4b11      	ldr	r3, [pc, #68]	; (800e0c0 <tcp_kill_timewait+0x5c>)
 800e07c:	681a      	ldr	r2, [r3, #0]
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	6a1b      	ldr	r3, [r3, #32]
 800e082:	1ad3      	subs	r3, r2, r3
 800e084:	687a      	ldr	r2, [r7, #4]
 800e086:	429a      	cmp	r2, r3
 800e088:	d807      	bhi.n	800e09a <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800e08a:	4b0d      	ldr	r3, [pc, #52]	; (800e0c0 <tcp_kill_timewait+0x5c>)
 800e08c:	681a      	ldr	r2, [r3, #0]
 800e08e:	68fb      	ldr	r3, [r7, #12]
 800e090:	6a1b      	ldr	r3, [r3, #32]
 800e092:	1ad3      	subs	r3, r2, r3
 800e094:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800e09a:	68fb      	ldr	r3, [r7, #12]
 800e09c:	68db      	ldr	r3, [r3, #12]
 800e09e:	60fb      	str	r3, [r7, #12]
 800e0a0:	68fb      	ldr	r3, [r7, #12]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e9      	bne.n	800e07a <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800e0a6:	68bb      	ldr	r3, [r7, #8]
 800e0a8:	2b00      	cmp	r3, #0
 800e0aa:	d002      	beq.n	800e0b2 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800e0ac:	68b8      	ldr	r0, [r7, #8]
 800e0ae:	f7fe ffe5 	bl	800d07c <tcp_abort>
  }
}
 800e0b2:	bf00      	nop
 800e0b4:	3710      	adds	r7, #16
 800e0b6:	46bd      	mov	sp, r7
 800e0b8:	bd80      	pop	{r7, pc}
 800e0ba:	bf00      	nop
 800e0bc:	2000d148 	.word	0x2000d148
 800e0c0:	2000d138 	.word	0x2000d138

0800e0c4 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b082      	sub	sp, #8
 800e0c8:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800e0ca:	4b10      	ldr	r3, [pc, #64]	; (800e10c <tcp_handle_closepend+0x48>)
 800e0cc:	681b      	ldr	r3, [r3, #0]
 800e0ce:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800e0d0:	e014      	b.n	800e0fc <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	68db      	ldr	r3, [r3, #12]
 800e0d6:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800e0d8:	687b      	ldr	r3, [r7, #4]
 800e0da:	8b5b      	ldrh	r3, [r3, #26]
 800e0dc:	f003 0308 	and.w	r3, r3, #8
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d009      	beq.n	800e0f8 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800e0e4:	687b      	ldr	r3, [r7, #4]
 800e0e6:	8b5b      	ldrh	r3, [r3, #26]
 800e0e8:	f023 0308 	bic.w	r3, r3, #8
 800e0ec:	b29a      	uxth	r2, r3
 800e0ee:	687b      	ldr	r3, [r7, #4]
 800e0f0:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800e0f2:	6878      	ldr	r0, [r7, #4]
 800e0f4:	f7fe fe6e 	bl	800cdd4 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800e0f8:	683b      	ldr	r3, [r7, #0]
 800e0fa:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800e0fc:	687b      	ldr	r3, [r7, #4]
 800e0fe:	2b00      	cmp	r3, #0
 800e100:	d1e7      	bne.n	800e0d2 <tcp_handle_closepend+0xe>
  }
}
 800e102:	bf00      	nop
 800e104:	bf00      	nop
 800e106:	3708      	adds	r7, #8
 800e108:	46bd      	mov	sp, r7
 800e10a:	bd80      	pop	{r7, pc}
 800e10c:	2000d144 	.word	0x2000d144

0800e110 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800e110:	b580      	push	{r7, lr}
 800e112:	b084      	sub	sp, #16
 800e114:	af00      	add	r7, sp, #0
 800e116:	4603      	mov	r3, r0
 800e118:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e11a:	2001      	movs	r0, #1
 800e11c:	f7fd f966 	bl	800b3ec <memp_malloc>
 800e120:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800e122:	68fb      	ldr	r3, [r7, #12]
 800e124:	2b00      	cmp	r3, #0
 800e126:	d126      	bne.n	800e176 <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800e128:	f7ff ffcc 	bl	800e0c4 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800e12c:	f7ff ff9a 	bl	800e064 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e130:	2001      	movs	r0, #1
 800e132:	f7fd f95b 	bl	800b3ec <memp_malloc>
 800e136:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	2b00      	cmp	r3, #0
 800e13c:	d11b      	bne.n	800e176 <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800e13e:	2009      	movs	r0, #9
 800e140:	f7ff ff46 	bl	800dfd0 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e144:	2001      	movs	r0, #1
 800e146:	f7fd f951 	bl	800b3ec <memp_malloc>
 800e14a:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	2b00      	cmp	r3, #0
 800e150:	d111      	bne.n	800e176 <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800e152:	2008      	movs	r0, #8
 800e154:	f7ff ff3c 	bl	800dfd0 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e158:	2001      	movs	r0, #1
 800e15a:	f7fd f947 	bl	800b3ec <memp_malloc>
 800e15e:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2b00      	cmp	r3, #0
 800e164:	d107      	bne.n	800e176 <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800e166:	79fb      	ldrb	r3, [r7, #7]
 800e168:	4618      	mov	r0, r3
 800e16a:	f7ff fee3 	bl	800df34 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800e16e:	2001      	movs	r0, #1
 800e170:	f7fd f93c 	bl	800b3ec <memp_malloc>
 800e174:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	2b00      	cmp	r3, #0
 800e17a:	d03f      	beq.n	800e1fc <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800e17c:	229c      	movs	r2, #156	; 0x9c
 800e17e:	2100      	movs	r1, #0
 800e180:	68f8      	ldr	r0, [r7, #12]
 800e182:	f008 f948 	bl	8016416 <memset>
    pcb->prio = prio;
 800e186:	68fb      	ldr	r3, [r7, #12]
 800e188:	79fa      	ldrb	r2, [r7, #7]
 800e18a:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e192:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e196:	68fb      	ldr	r3, [r7, #12]
 800e198:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e19c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800e1a6:	68fb      	ldr	r3, [r7, #12]
 800e1a8:	22ff      	movs	r2, #255	; 0xff
 800e1aa:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800e1ac:	68fb      	ldr	r3, [r7, #12]
 800e1ae:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e1b2:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800e1b4:	68fb      	ldr	r3, [r7, #12]
 800e1b6:	2206      	movs	r2, #6
 800e1b8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800e1bc:	68fb      	ldr	r3, [r7, #12]
 800e1be:	2206      	movs	r2, #6
 800e1c0:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e1c8:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800e1ca:	68fb      	ldr	r3, [r7, #12]
 800e1cc:	2201      	movs	r2, #1
 800e1ce:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800e1d2:	4b0d      	ldr	r3, [pc, #52]	; (800e208 <tcp_alloc+0xf8>)
 800e1d4:	681a      	ldr	r2, [r3, #0]
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800e1da:	4b0c      	ldr	r3, [pc, #48]	; (800e20c <tcp_alloc+0xfc>)
 800e1dc:	781a      	ldrb	r2, [r3, #0]
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800e1e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	4a08      	ldr	r2, [pc, #32]	; (800e210 <tcp_alloc+0x100>)
 800e1f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	4a07      	ldr	r2, [pc, #28]	; (800e214 <tcp_alloc+0x104>)
 800e1f8:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
}
 800e1fe:	4618      	mov	r0, r3
 800e200:	3710      	adds	r7, #16
 800e202:	46bd      	mov	sp, r7
 800e204:	bd80      	pop	{r7, pc}
 800e206:	bf00      	nop
 800e208:	2000d138 	.word	0x2000d138
 800e20c:	2000d14e 	.word	0x2000d14e
 800e210:	0800dec9 	.word	0x0800dec9
 800e214:	006ddd00 	.word	0x006ddd00

0800e218 <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800e218:	b580      	push	{r7, lr}
 800e21a:	b084      	sub	sp, #16
 800e21c:	af00      	add	r7, sp, #0
 800e21e:	4603      	mov	r3, r0
 800e220:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800e222:	2040      	movs	r0, #64	; 0x40
 800e224:	f7ff ff74 	bl	800e110 <tcp_alloc>
 800e228:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800e22a:	68fb      	ldr	r3, [r7, #12]
}
 800e22c:	4618      	mov	r0, r3
 800e22e:	3710      	adds	r7, #16
 800e230:	46bd      	mov	sp, r7
 800e232:	bd80      	pop	{r7, pc}

0800e234 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800e234:	b480      	push	{r7}
 800e236:	b083      	sub	sp, #12
 800e238:	af00      	add	r7, sp, #0
 800e23a:	6078      	str	r0, [r7, #4]
 800e23c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800e23e:	687b      	ldr	r3, [r7, #4]
 800e240:	2b00      	cmp	r3, #0
 800e242:	d002      	beq.n	800e24a <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	683a      	ldr	r2, [r7, #0]
 800e248:	611a      	str	r2, [r3, #16]
  }
}
 800e24a:	bf00      	nop
 800e24c:	370c      	adds	r7, #12
 800e24e:	46bd      	mov	sp, r7
 800e250:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e254:	4770      	bx	lr
	...

0800e258 <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800e258:	b580      	push	{r7, lr}
 800e25a:	b082      	sub	sp, #8
 800e25c:	af00      	add	r7, sp, #0
 800e25e:	6078      	str	r0, [r7, #4]
 800e260:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e262:	687b      	ldr	r3, [r7, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	d00e      	beq.n	800e286 <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800e268:	687b      	ldr	r3, [r7, #4]
 800e26a:	7d1b      	ldrb	r3, [r3, #20]
 800e26c:	2b01      	cmp	r3, #1
 800e26e:	d106      	bne.n	800e27e <tcp_recv+0x26>
 800e270:	4b07      	ldr	r3, [pc, #28]	; (800e290 <tcp_recv+0x38>)
 800e272:	f240 72df 	movw	r2, #2015	; 0x7df
 800e276:	4907      	ldr	r1, [pc, #28]	; (800e294 <tcp_recv+0x3c>)
 800e278:	4807      	ldr	r0, [pc, #28]	; (800e298 <tcp_recv+0x40>)
 800e27a:	f008 f969 	bl	8016550 <iprintf>
    pcb->recv = recv;
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	683a      	ldr	r2, [r7, #0]
 800e282:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800e286:	bf00      	nop
 800e288:	3708      	adds	r7, #8
 800e28a:	46bd      	mov	sp, r7
 800e28c:	bd80      	pop	{r7, pc}
 800e28e:	bf00      	nop
 800e290:	08018b38 	.word	0x08018b38
 800e294:	080190d4 	.word	0x080190d4
 800e298:	08018b7c 	.word	0x08018b7c

0800e29c <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800e29c:	b580      	push	{r7, lr}
 800e29e:	b082      	sub	sp, #8
 800e2a0:	af00      	add	r7, sp, #0
 800e2a2:	6078      	str	r0, [r7, #4]
 800e2a4:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	2b00      	cmp	r3, #0
 800e2aa:	d00e      	beq.n	800e2ca <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	7d1b      	ldrb	r3, [r3, #20]
 800e2b0:	2b01      	cmp	r3, #1
 800e2b2:	d106      	bne.n	800e2c2 <tcp_sent+0x26>
 800e2b4:	4b07      	ldr	r3, [pc, #28]	; (800e2d4 <tcp_sent+0x38>)
 800e2b6:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800e2ba:	4907      	ldr	r1, [pc, #28]	; (800e2d8 <tcp_sent+0x3c>)
 800e2bc:	4807      	ldr	r0, [pc, #28]	; (800e2dc <tcp_sent+0x40>)
 800e2be:	f008 f947 	bl	8016550 <iprintf>
    pcb->sent = sent;
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	683a      	ldr	r2, [r7, #0]
 800e2c6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800e2ca:	bf00      	nop
 800e2cc:	3708      	adds	r7, #8
 800e2ce:	46bd      	mov	sp, r7
 800e2d0:	bd80      	pop	{r7, pc}
 800e2d2:	bf00      	nop
 800e2d4:	08018b38 	.word	0x08018b38
 800e2d8:	080190fc 	.word	0x080190fc
 800e2dc:	08018b7c 	.word	0x08018b7c

0800e2e0 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800e2e0:	b580      	push	{r7, lr}
 800e2e2:	b082      	sub	sp, #8
 800e2e4:	af00      	add	r7, sp, #0
 800e2e6:	6078      	str	r0, [r7, #4]
 800e2e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800e2ea:	687b      	ldr	r3, [r7, #4]
 800e2ec:	2b00      	cmp	r3, #0
 800e2ee:	d00e      	beq.n	800e30e <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800e2f0:	687b      	ldr	r3, [r7, #4]
 800e2f2:	7d1b      	ldrb	r3, [r3, #20]
 800e2f4:	2b01      	cmp	r3, #1
 800e2f6:	d106      	bne.n	800e306 <tcp_err+0x26>
 800e2f8:	4b07      	ldr	r3, [pc, #28]	; (800e318 <tcp_err+0x38>)
 800e2fa:	f640 020d 	movw	r2, #2061	; 0x80d
 800e2fe:	4907      	ldr	r1, [pc, #28]	; (800e31c <tcp_err+0x3c>)
 800e300:	4807      	ldr	r0, [pc, #28]	; (800e320 <tcp_err+0x40>)
 800e302:	f008 f925 	bl	8016550 <iprintf>
    pcb->errf = err;
 800e306:	687b      	ldr	r3, [r7, #4]
 800e308:	683a      	ldr	r2, [r7, #0]
 800e30a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800e30e:	bf00      	nop
 800e310:	3708      	adds	r7, #8
 800e312:	46bd      	mov	sp, r7
 800e314:	bd80      	pop	{r7, pc}
 800e316:	bf00      	nop
 800e318:	08018b38 	.word	0x08018b38
 800e31c:	08019124 	.word	0x08019124
 800e320:	08018b7c 	.word	0x08018b7c

0800e324 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800e324:	b580      	push	{r7, lr}
 800e326:	b084      	sub	sp, #16
 800e328:	af00      	add	r7, sp, #0
 800e32a:	60f8      	str	r0, [r7, #12]
 800e32c:	60b9      	str	r1, [r7, #8]
 800e32e:	4613      	mov	r3, r2
 800e330:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800e332:	68fb      	ldr	r3, [r7, #12]
 800e334:	2b00      	cmp	r3, #0
 800e336:	d107      	bne.n	800e348 <tcp_poll+0x24>
 800e338:	4b0e      	ldr	r3, [pc, #56]	; (800e374 <tcp_poll+0x50>)
 800e33a:	f640 023d 	movw	r2, #2109	; 0x83d
 800e33e:	490e      	ldr	r1, [pc, #56]	; (800e378 <tcp_poll+0x54>)
 800e340:	480e      	ldr	r0, [pc, #56]	; (800e37c <tcp_poll+0x58>)
 800e342:	f008 f905 	bl	8016550 <iprintf>
 800e346:	e011      	b.n	800e36c <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800e348:	68fb      	ldr	r3, [r7, #12]
 800e34a:	7d1b      	ldrb	r3, [r3, #20]
 800e34c:	2b01      	cmp	r3, #1
 800e34e:	d106      	bne.n	800e35e <tcp_poll+0x3a>
 800e350:	4b08      	ldr	r3, [pc, #32]	; (800e374 <tcp_poll+0x50>)
 800e352:	f640 023e 	movw	r2, #2110	; 0x83e
 800e356:	490a      	ldr	r1, [pc, #40]	; (800e380 <tcp_poll+0x5c>)
 800e358:	4808      	ldr	r0, [pc, #32]	; (800e37c <tcp_poll+0x58>)
 800e35a:	f008 f8f9 	bl	8016550 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800e35e:	68fb      	ldr	r3, [r7, #12]
 800e360:	68ba      	ldr	r2, [r7, #8]
 800e362:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	79fa      	ldrb	r2, [r7, #7]
 800e36a:	775a      	strb	r2, [r3, #29]
}
 800e36c:	3710      	adds	r7, #16
 800e36e:	46bd      	mov	sp, r7
 800e370:	bd80      	pop	{r7, pc}
 800e372:	bf00      	nop
 800e374:	08018b38 	.word	0x08018b38
 800e378:	0801914c 	.word	0x0801914c
 800e37c:	08018b7c 	.word	0x08018b7c
 800e380:	08019164 	.word	0x08019164

0800e384 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800e384:	b580      	push	{r7, lr}
 800e386:	b082      	sub	sp, #8
 800e388:	af00      	add	r7, sp, #0
 800e38a:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	2b00      	cmp	r3, #0
 800e390:	d107      	bne.n	800e3a2 <tcp_pcb_purge+0x1e>
 800e392:	4b21      	ldr	r3, [pc, #132]	; (800e418 <tcp_pcb_purge+0x94>)
 800e394:	f640 0251 	movw	r2, #2129	; 0x851
 800e398:	4920      	ldr	r1, [pc, #128]	; (800e41c <tcp_pcb_purge+0x98>)
 800e39a:	4821      	ldr	r0, [pc, #132]	; (800e420 <tcp_pcb_purge+0x9c>)
 800e39c:	f008 f8d8 	bl	8016550 <iprintf>
 800e3a0:	e037      	b.n	800e412 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	7d1b      	ldrb	r3, [r3, #20]
 800e3a6:	2b00      	cmp	r3, #0
 800e3a8:	d033      	beq.n	800e412 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800e3aa:	687b      	ldr	r3, [r7, #4]
 800e3ac:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800e3ae:	2b0a      	cmp	r3, #10
 800e3b0:	d02f      	beq.n	800e412 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800e3b2:	687b      	ldr	r3, [r7, #4]
 800e3b4:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800e3b6:	2b01      	cmp	r3, #1
 800e3b8:	d02b      	beq.n	800e412 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800e3ba:	687b      	ldr	r3, [r7, #4]
 800e3bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3be:	2b00      	cmp	r3, #0
 800e3c0:	d007      	beq.n	800e3d2 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800e3c6:	4618      	mov	r0, r3
 800e3c8:	f7fd ff20 	bl	800c20c <pbuf_free>
      pcb->refused_data = NULL;
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2200      	movs	r2, #0
 800e3d0:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800e3d2:	687b      	ldr	r3, [r7, #4]
 800e3d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d002      	beq.n	800e3e0 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800e3da:	6878      	ldr	r0, [r7, #4]
 800e3dc:	f000 f986 	bl	800e6ec <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e3e6:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e3ec:	4618      	mov	r0, r3
 800e3ee:	f7ff fd11 	bl	800de14 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800e3f2:	687b      	ldr	r3, [r7, #4]
 800e3f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e3f6:	4618      	mov	r0, r3
 800e3f8:	f7ff fd0c 	bl	800de14 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800e3fc:	687b      	ldr	r3, [r7, #4]
 800e3fe:	2200      	movs	r2, #0
 800e400:	66da      	str	r2, [r3, #108]	; 0x6c
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800e406:	687b      	ldr	r3, [r7, #4]
 800e408:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800e40a:	687b      	ldr	r3, [r7, #4]
 800e40c:	2200      	movs	r2, #0
 800e40e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800e412:	3708      	adds	r7, #8
 800e414:	46bd      	mov	sp, r7
 800e416:	bd80      	pop	{r7, pc}
 800e418:	08018b38 	.word	0x08018b38
 800e41c:	08019184 	.word	0x08019184
 800e420:	08018b7c 	.word	0x08018b7c

0800e424 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800e42e:	683b      	ldr	r3, [r7, #0]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d106      	bne.n	800e442 <tcp_pcb_remove+0x1e>
 800e434:	4b3e      	ldr	r3, [pc, #248]	; (800e530 <tcp_pcb_remove+0x10c>)
 800e436:	f640 0283 	movw	r2, #2179	; 0x883
 800e43a:	493e      	ldr	r1, [pc, #248]	; (800e534 <tcp_pcb_remove+0x110>)
 800e43c:	483e      	ldr	r0, [pc, #248]	; (800e538 <tcp_pcb_remove+0x114>)
 800e43e:	f008 f887 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800e442:	687b      	ldr	r3, [r7, #4]
 800e444:	2b00      	cmp	r3, #0
 800e446:	d106      	bne.n	800e456 <tcp_pcb_remove+0x32>
 800e448:	4b39      	ldr	r3, [pc, #228]	; (800e530 <tcp_pcb_remove+0x10c>)
 800e44a:	f640 0284 	movw	r2, #2180	; 0x884
 800e44e:	493b      	ldr	r1, [pc, #236]	; (800e53c <tcp_pcb_remove+0x118>)
 800e450:	4839      	ldr	r0, [pc, #228]	; (800e538 <tcp_pcb_remove+0x114>)
 800e452:	f008 f87d 	bl	8016550 <iprintf>

  TCP_RMV(pcblist, pcb);
 800e456:	687b      	ldr	r3, [r7, #4]
 800e458:	681b      	ldr	r3, [r3, #0]
 800e45a:	683a      	ldr	r2, [r7, #0]
 800e45c:	429a      	cmp	r2, r3
 800e45e:	d105      	bne.n	800e46c <tcp_pcb_remove+0x48>
 800e460:	687b      	ldr	r3, [r7, #4]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	68da      	ldr	r2, [r3, #12]
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	601a      	str	r2, [r3, #0]
 800e46a:	e013      	b.n	800e494 <tcp_pcb_remove+0x70>
 800e46c:	687b      	ldr	r3, [r7, #4]
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	60fb      	str	r3, [r7, #12]
 800e472:	e00c      	b.n	800e48e <tcp_pcb_remove+0x6a>
 800e474:	68fb      	ldr	r3, [r7, #12]
 800e476:	68db      	ldr	r3, [r3, #12]
 800e478:	683a      	ldr	r2, [r7, #0]
 800e47a:	429a      	cmp	r2, r3
 800e47c:	d104      	bne.n	800e488 <tcp_pcb_remove+0x64>
 800e47e:	683b      	ldr	r3, [r7, #0]
 800e480:	68da      	ldr	r2, [r3, #12]
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	60da      	str	r2, [r3, #12]
 800e486:	e005      	b.n	800e494 <tcp_pcb_remove+0x70>
 800e488:	68fb      	ldr	r3, [r7, #12]
 800e48a:	68db      	ldr	r3, [r3, #12]
 800e48c:	60fb      	str	r3, [r7, #12]
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	2b00      	cmp	r3, #0
 800e492:	d1ef      	bne.n	800e474 <tcp_pcb_remove+0x50>
 800e494:	683b      	ldr	r3, [r7, #0]
 800e496:	2200      	movs	r2, #0
 800e498:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800e49a:	6838      	ldr	r0, [r7, #0]
 800e49c:	f7ff ff72 	bl	800e384 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800e4a0:	683b      	ldr	r3, [r7, #0]
 800e4a2:	7d1b      	ldrb	r3, [r3, #20]
 800e4a4:	2b0a      	cmp	r3, #10
 800e4a6:	d013      	beq.n	800e4d0 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800e4a8:	683b      	ldr	r3, [r7, #0]
 800e4aa:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800e4ac:	2b01      	cmp	r3, #1
 800e4ae:	d00f      	beq.n	800e4d0 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800e4b0:	683b      	ldr	r3, [r7, #0]
 800e4b2:	8b5b      	ldrh	r3, [r3, #26]
 800e4b4:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800e4b8:	2b00      	cmp	r3, #0
 800e4ba:	d009      	beq.n	800e4d0 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800e4bc:	683b      	ldr	r3, [r7, #0]
 800e4be:	8b5b      	ldrh	r3, [r3, #26]
 800e4c0:	f043 0302 	orr.w	r3, r3, #2
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	683b      	ldr	r3, [r7, #0]
 800e4c8:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e4ca:	6838      	ldr	r0, [r7, #0]
 800e4cc:	f003 fbc6 	bl	8011c5c <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800e4d0:	683b      	ldr	r3, [r7, #0]
 800e4d2:	7d1b      	ldrb	r3, [r3, #20]
 800e4d4:	2b01      	cmp	r3, #1
 800e4d6:	d020      	beq.n	800e51a <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800e4d8:	683b      	ldr	r3, [r7, #0]
 800e4da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e4dc:	2b00      	cmp	r3, #0
 800e4de:	d006      	beq.n	800e4ee <tcp_pcb_remove+0xca>
 800e4e0:	4b13      	ldr	r3, [pc, #76]	; (800e530 <tcp_pcb_remove+0x10c>)
 800e4e2:	f640 0293 	movw	r2, #2195	; 0x893
 800e4e6:	4916      	ldr	r1, [pc, #88]	; (800e540 <tcp_pcb_remove+0x11c>)
 800e4e8:	4813      	ldr	r0, [pc, #76]	; (800e538 <tcp_pcb_remove+0x114>)
 800e4ea:	f008 f831 	bl	8016550 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800e4ee:	683b      	ldr	r3, [r7, #0]
 800e4f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d006      	beq.n	800e504 <tcp_pcb_remove+0xe0>
 800e4f6:	4b0e      	ldr	r3, [pc, #56]	; (800e530 <tcp_pcb_remove+0x10c>)
 800e4f8:	f640 0294 	movw	r2, #2196	; 0x894
 800e4fc:	4911      	ldr	r1, [pc, #68]	; (800e544 <tcp_pcb_remove+0x120>)
 800e4fe:	480e      	ldr	r0, [pc, #56]	; (800e538 <tcp_pcb_remove+0x114>)
 800e500:	f008 f826 	bl	8016550 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800e504:	683b      	ldr	r3, [r7, #0]
 800e506:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d006      	beq.n	800e51a <tcp_pcb_remove+0xf6>
 800e50c:	4b08      	ldr	r3, [pc, #32]	; (800e530 <tcp_pcb_remove+0x10c>)
 800e50e:	f640 0296 	movw	r2, #2198	; 0x896
 800e512:	490d      	ldr	r1, [pc, #52]	; (800e548 <tcp_pcb_remove+0x124>)
 800e514:	4808      	ldr	r0, [pc, #32]	; (800e538 <tcp_pcb_remove+0x114>)
 800e516:	f008 f81b 	bl	8016550 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800e51a:	683b      	ldr	r3, [r7, #0]
 800e51c:	2200      	movs	r2, #0
 800e51e:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800e520:	683b      	ldr	r3, [r7, #0]
 800e522:	2200      	movs	r2, #0
 800e524:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800e526:	bf00      	nop
 800e528:	3710      	adds	r7, #16
 800e52a:	46bd      	mov	sp, r7
 800e52c:	bd80      	pop	{r7, pc}
 800e52e:	bf00      	nop
 800e530:	08018b38 	.word	0x08018b38
 800e534:	080191a0 	.word	0x080191a0
 800e538:	08018b7c 	.word	0x08018b7c
 800e53c:	080191bc 	.word	0x080191bc
 800e540:	080191dc 	.word	0x080191dc
 800e544:	080191f4 	.word	0x080191f4
 800e548:	08019210 	.word	0x08019210

0800e54c <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800e54c:	b580      	push	{r7, lr}
 800e54e:	b082      	sub	sp, #8
 800e550:	af00      	add	r7, sp, #0
 800e552:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d106      	bne.n	800e568 <tcp_next_iss+0x1c>
 800e55a:	4b0a      	ldr	r3, [pc, #40]	; (800e584 <tcp_next_iss+0x38>)
 800e55c:	f640 02af 	movw	r2, #2223	; 0x8af
 800e560:	4909      	ldr	r1, [pc, #36]	; (800e588 <tcp_next_iss+0x3c>)
 800e562:	480a      	ldr	r0, [pc, #40]	; (800e58c <tcp_next_iss+0x40>)
 800e564:	f007 fff4 	bl	8016550 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800e568:	4b09      	ldr	r3, [pc, #36]	; (800e590 <tcp_next_iss+0x44>)
 800e56a:	681a      	ldr	r2, [r3, #0]
 800e56c:	4b09      	ldr	r3, [pc, #36]	; (800e594 <tcp_next_iss+0x48>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	4413      	add	r3, r2
 800e572:	4a07      	ldr	r2, [pc, #28]	; (800e590 <tcp_next_iss+0x44>)
 800e574:	6013      	str	r3, [r2, #0]
  return iss;
 800e576:	4b06      	ldr	r3, [pc, #24]	; (800e590 <tcp_next_iss+0x44>)
 800e578:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	3708      	adds	r7, #8
 800e57e:	46bd      	mov	sp, r7
 800e580:	bd80      	pop	{r7, pc}
 800e582:	bf00      	nop
 800e584:	08018b38 	.word	0x08018b38
 800e588:	08019228 	.word	0x08019228
 800e58c:	08018b7c 	.word	0x08018b7c
 800e590:	20000028 	.word	0x20000028
 800e594:	2000d138 	.word	0x2000d138

0800e598 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800e598:	b580      	push	{r7, lr}
 800e59a:	b086      	sub	sp, #24
 800e59c:	af00      	add	r7, sp, #0
 800e59e:	4603      	mov	r3, r0
 800e5a0:	60b9      	str	r1, [r7, #8]
 800e5a2:	607a      	str	r2, [r7, #4]
 800e5a4:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b00      	cmp	r3, #0
 800e5aa:	d106      	bne.n	800e5ba <tcp_eff_send_mss_netif+0x22>
 800e5ac:	4b14      	ldr	r3, [pc, #80]	; (800e600 <tcp_eff_send_mss_netif+0x68>)
 800e5ae:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800e5b2:	4914      	ldr	r1, [pc, #80]	; (800e604 <tcp_eff_send_mss_netif+0x6c>)
 800e5b4:	4814      	ldr	r0, [pc, #80]	; (800e608 <tcp_eff_send_mss_netif+0x70>)
 800e5b6:	f007 ffcb 	bl	8016550 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800e5ba:	68bb      	ldr	r3, [r7, #8]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d101      	bne.n	800e5c4 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800e5c0:	89fb      	ldrh	r3, [r7, #14]
 800e5c2:	e019      	b.n	800e5f8 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800e5c4:	68bb      	ldr	r3, [r7, #8]
 800e5c6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800e5c8:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800e5ca:	8afb      	ldrh	r3, [r7, #22]
 800e5cc:	2b00      	cmp	r3, #0
 800e5ce:	d012      	beq.n	800e5f6 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800e5d0:	2328      	movs	r3, #40	; 0x28
 800e5d2:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800e5d4:	8afa      	ldrh	r2, [r7, #22]
 800e5d6:	8abb      	ldrh	r3, [r7, #20]
 800e5d8:	429a      	cmp	r2, r3
 800e5da:	d904      	bls.n	800e5e6 <tcp_eff_send_mss_netif+0x4e>
 800e5dc:	8afa      	ldrh	r2, [r7, #22]
 800e5de:	8abb      	ldrh	r3, [r7, #20]
 800e5e0:	1ad3      	subs	r3, r2, r3
 800e5e2:	b29b      	uxth	r3, r3
 800e5e4:	e000      	b.n	800e5e8 <tcp_eff_send_mss_netif+0x50>
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800e5ea:	8a7a      	ldrh	r2, [r7, #18]
 800e5ec:	89fb      	ldrh	r3, [r7, #14]
 800e5ee:	4293      	cmp	r3, r2
 800e5f0:	bf28      	it	cs
 800e5f2:	4613      	movcs	r3, r2
 800e5f4:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800e5f6:	89fb      	ldrh	r3, [r7, #14]
}
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	3718      	adds	r7, #24
 800e5fc:	46bd      	mov	sp, r7
 800e5fe:	bd80      	pop	{r7, pc}
 800e600:	08018b38 	.word	0x08018b38
 800e604:	08019244 	.word	0x08019244
 800e608:	08018b7c 	.word	0x08018b7c

0800e60c <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800e60c:	b580      	push	{r7, lr}
 800e60e:	b084      	sub	sp, #16
 800e610:	af00      	add	r7, sp, #0
 800e612:	6078      	str	r0, [r7, #4]
 800e614:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800e616:	683b      	ldr	r3, [r7, #0]
 800e618:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2b00      	cmp	r3, #0
 800e61e:	d119      	bne.n	800e654 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800e620:	4b10      	ldr	r3, [pc, #64]	; (800e664 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800e622:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800e626:	4910      	ldr	r1, [pc, #64]	; (800e668 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800e628:	4810      	ldr	r0, [pc, #64]	; (800e66c <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800e62a:	f007 ff91 	bl	8016550 <iprintf>

  while (pcb != NULL) {
 800e62e:	e011      	b.n	800e654 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800e630:	68fb      	ldr	r3, [r7, #12]
 800e632:	681a      	ldr	r2, [r3, #0]
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	429a      	cmp	r2, r3
 800e63a:	d108      	bne.n	800e64e <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800e63c:	68fb      	ldr	r3, [r7, #12]
 800e63e:	68db      	ldr	r3, [r3, #12]
 800e640:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800e642:	68f8      	ldr	r0, [r7, #12]
 800e644:	f7fe fd1a 	bl	800d07c <tcp_abort>
      pcb = next;
 800e648:	68bb      	ldr	r3, [r7, #8]
 800e64a:	60fb      	str	r3, [r7, #12]
 800e64c:	e002      	b.n	800e654 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800e64e:	68fb      	ldr	r3, [r7, #12]
 800e650:	68db      	ldr	r3, [r3, #12]
 800e652:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	2b00      	cmp	r3, #0
 800e658:	d1ea      	bne.n	800e630 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800e65a:	bf00      	nop
 800e65c:	bf00      	nop
 800e65e:	3710      	adds	r7, #16
 800e660:	46bd      	mov	sp, r7
 800e662:	bd80      	pop	{r7, pc}
 800e664:	08018b38 	.word	0x08018b38
 800e668:	0801926c 	.word	0x0801926c
 800e66c:	08018b7c 	.word	0x08018b7c

0800e670 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800e670:	b580      	push	{r7, lr}
 800e672:	b084      	sub	sp, #16
 800e674:	af00      	add	r7, sp, #0
 800e676:	6078      	str	r0, [r7, #4]
 800e678:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800e67a:	687b      	ldr	r3, [r7, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	d02a      	beq.n	800e6d6 <tcp_netif_ip_addr_changed+0x66>
 800e680:	687b      	ldr	r3, [r7, #4]
 800e682:	681b      	ldr	r3, [r3, #0]
 800e684:	2b00      	cmp	r3, #0
 800e686:	d026      	beq.n	800e6d6 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800e688:	4b15      	ldr	r3, [pc, #84]	; (800e6e0 <tcp_netif_ip_addr_changed+0x70>)
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	4619      	mov	r1, r3
 800e68e:	6878      	ldr	r0, [r7, #4]
 800e690:	f7ff ffbc 	bl	800e60c <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800e694:	4b13      	ldr	r3, [pc, #76]	; (800e6e4 <tcp_netif_ip_addr_changed+0x74>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	4619      	mov	r1, r3
 800e69a:	6878      	ldr	r0, [r7, #4]
 800e69c:	f7ff ffb6 	bl	800e60c <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d017      	beq.n	800e6d6 <tcp_netif_ip_addr_changed+0x66>
 800e6a6:	683b      	ldr	r3, [r7, #0]
 800e6a8:	681b      	ldr	r3, [r3, #0]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d013      	beq.n	800e6d6 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6ae:	4b0e      	ldr	r3, [pc, #56]	; (800e6e8 <tcp_netif_ip_addr_changed+0x78>)
 800e6b0:	681b      	ldr	r3, [r3, #0]
 800e6b2:	60fb      	str	r3, [r7, #12]
 800e6b4:	e00c      	b.n	800e6d0 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800e6b6:	68fb      	ldr	r3, [r7, #12]
 800e6b8:	681a      	ldr	r2, [r3, #0]
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	681b      	ldr	r3, [r3, #0]
 800e6be:	429a      	cmp	r2, r3
 800e6c0:	d103      	bne.n	800e6ca <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	681a      	ldr	r2, [r3, #0]
 800e6c6:	68fb      	ldr	r3, [r7, #12]
 800e6c8:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800e6ca:	68fb      	ldr	r3, [r7, #12]
 800e6cc:	68db      	ldr	r3, [r3, #12]
 800e6ce:	60fb      	str	r3, [r7, #12]
 800e6d0:	68fb      	ldr	r3, [r7, #12]
 800e6d2:	2b00      	cmp	r3, #0
 800e6d4:	d1ef      	bne.n	800e6b6 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800e6d6:	bf00      	nop
 800e6d8:	3710      	adds	r7, #16
 800e6da:	46bd      	mov	sp, r7
 800e6dc:	bd80      	pop	{r7, pc}
 800e6de:	bf00      	nop
 800e6e0:	2000d144 	.word	0x2000d144
 800e6e4:	2000d13c 	.word	0x2000d13c
 800e6e8:	2000d140 	.word	0x2000d140

0800e6ec <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d007      	beq.n	800e70c <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800e6fc:	687b      	ldr	r3, [r7, #4]
 800e6fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e700:	4618      	mov	r0, r3
 800e702:	f7ff fb87 	bl	800de14 <tcp_segs_free>
    pcb->ooseq = NULL;
 800e706:	687b      	ldr	r3, [r7, #4]
 800e708:	2200      	movs	r2, #0
 800e70a:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800e70c:	bf00      	nop
 800e70e:	3708      	adds	r7, #8
 800e710:	46bd      	mov	sp, r7
 800e712:	bd80      	pop	{r7, pc}

0800e714 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800e714:	b590      	push	{r4, r7, lr}
 800e716:	b08d      	sub	sp, #52	; 0x34
 800e718:	af04      	add	r7, sp, #16
 800e71a:	6078      	str	r0, [r7, #4]
 800e71c:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800e71e:	687b      	ldr	r3, [r7, #4]
 800e720:	2b00      	cmp	r3, #0
 800e722:	d105      	bne.n	800e730 <tcp_input+0x1c>
 800e724:	4b9b      	ldr	r3, [pc, #620]	; (800e994 <tcp_input+0x280>)
 800e726:	2283      	movs	r2, #131	; 0x83
 800e728:	499b      	ldr	r1, [pc, #620]	; (800e998 <tcp_input+0x284>)
 800e72a:	489c      	ldr	r0, [pc, #624]	; (800e99c <tcp_input+0x288>)
 800e72c:	f007 ff10 	bl	8016550 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800e730:	687b      	ldr	r3, [r7, #4]
 800e732:	685b      	ldr	r3, [r3, #4]
 800e734:	4a9a      	ldr	r2, [pc, #616]	; (800e9a0 <tcp_input+0x28c>)
 800e736:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	895b      	ldrh	r3, [r3, #10]
 800e73c:	2b13      	cmp	r3, #19
 800e73e:	f240 83d1 	bls.w	800eee4 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e742:	4b98      	ldr	r3, [pc, #608]	; (800e9a4 <tcp_input+0x290>)
 800e744:	695b      	ldr	r3, [r3, #20]
 800e746:	4a97      	ldr	r2, [pc, #604]	; (800e9a4 <tcp_input+0x290>)
 800e748:	6812      	ldr	r2, [r2, #0]
 800e74a:	4611      	mov	r1, r2
 800e74c:	4618      	mov	r0, r3
 800e74e:	f006 fb91 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 800e752:	4603      	mov	r3, r0
 800e754:	2b00      	cmp	r3, #0
 800e756:	f040 83c7 	bne.w	800eee8 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800e75a:	4b92      	ldr	r3, [pc, #584]	; (800e9a4 <tcp_input+0x290>)
 800e75c:	695b      	ldr	r3, [r3, #20]
 800e75e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800e762:	2be0      	cmp	r3, #224	; 0xe0
 800e764:	f000 83c0 	beq.w	800eee8 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800e768:	4b8d      	ldr	r3, [pc, #564]	; (800e9a0 <tcp_input+0x28c>)
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	899b      	ldrh	r3, [r3, #12]
 800e76e:	b29b      	uxth	r3, r3
 800e770:	4618      	mov	r0, r3
 800e772:	f7fb fe71 	bl	800a458 <lwip_htons>
 800e776:	4603      	mov	r3, r0
 800e778:	0b1b      	lsrs	r3, r3, #12
 800e77a:	b29b      	uxth	r3, r3
 800e77c:	b2db      	uxtb	r3, r3
 800e77e:	009b      	lsls	r3, r3, #2
 800e780:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800e782:	7cbb      	ldrb	r3, [r7, #18]
 800e784:	2b13      	cmp	r3, #19
 800e786:	f240 83b1 	bls.w	800eeec <tcp_input+0x7d8>
 800e78a:	7cbb      	ldrb	r3, [r7, #18]
 800e78c:	b29a      	uxth	r2, r3
 800e78e:	687b      	ldr	r3, [r7, #4]
 800e790:	891b      	ldrh	r3, [r3, #8]
 800e792:	429a      	cmp	r2, r3
 800e794:	f200 83aa 	bhi.w	800eeec <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800e798:	7cbb      	ldrb	r3, [r7, #18]
 800e79a:	b29b      	uxth	r3, r3
 800e79c:	3b14      	subs	r3, #20
 800e79e:	b29a      	uxth	r2, r3
 800e7a0:	4b81      	ldr	r3, [pc, #516]	; (800e9a8 <tcp_input+0x294>)
 800e7a2:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800e7a4:	4b81      	ldr	r3, [pc, #516]	; (800e9ac <tcp_input+0x298>)
 800e7a6:	2200      	movs	r2, #0
 800e7a8:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800e7aa:	687b      	ldr	r3, [r7, #4]
 800e7ac:	895a      	ldrh	r2, [r3, #10]
 800e7ae:	7cbb      	ldrb	r3, [r7, #18]
 800e7b0:	b29b      	uxth	r3, r3
 800e7b2:	429a      	cmp	r2, r3
 800e7b4:	d309      	bcc.n	800e7ca <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800e7b6:	4b7c      	ldr	r3, [pc, #496]	; (800e9a8 <tcp_input+0x294>)
 800e7b8:	881a      	ldrh	r2, [r3, #0]
 800e7ba:	4b7d      	ldr	r3, [pc, #500]	; (800e9b0 <tcp_input+0x29c>)
 800e7bc:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800e7be:	7cbb      	ldrb	r3, [r7, #18]
 800e7c0:	4619      	mov	r1, r3
 800e7c2:	6878      	ldr	r0, [r7, #4]
 800e7c4:	f7fd fc9c 	bl	800c100 <pbuf_remove_header>
 800e7c8:	e04e      	b.n	800e868 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800e7ca:	687b      	ldr	r3, [r7, #4]
 800e7cc:	681b      	ldr	r3, [r3, #0]
 800e7ce:	2b00      	cmp	r3, #0
 800e7d0:	d105      	bne.n	800e7de <tcp_input+0xca>
 800e7d2:	4b70      	ldr	r3, [pc, #448]	; (800e994 <tcp_input+0x280>)
 800e7d4:	22c2      	movs	r2, #194	; 0xc2
 800e7d6:	4977      	ldr	r1, [pc, #476]	; (800e9b4 <tcp_input+0x2a0>)
 800e7d8:	4870      	ldr	r0, [pc, #448]	; (800e99c <tcp_input+0x288>)
 800e7da:	f007 feb9 	bl	8016550 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800e7de:	2114      	movs	r1, #20
 800e7e0:	6878      	ldr	r0, [r7, #4]
 800e7e2:	f7fd fc8d 	bl	800c100 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	895a      	ldrh	r2, [r3, #10]
 800e7ea:	4b71      	ldr	r3, [pc, #452]	; (800e9b0 <tcp_input+0x29c>)
 800e7ec:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800e7ee:	4b6e      	ldr	r3, [pc, #440]	; (800e9a8 <tcp_input+0x294>)
 800e7f0:	881a      	ldrh	r2, [r3, #0]
 800e7f2:	4b6f      	ldr	r3, [pc, #444]	; (800e9b0 <tcp_input+0x29c>)
 800e7f4:	881b      	ldrh	r3, [r3, #0]
 800e7f6:	1ad3      	subs	r3, r2, r3
 800e7f8:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800e7fa:	4b6d      	ldr	r3, [pc, #436]	; (800e9b0 <tcp_input+0x29c>)
 800e7fc:	881b      	ldrh	r3, [r3, #0]
 800e7fe:	4619      	mov	r1, r3
 800e800:	6878      	ldr	r0, [r7, #4]
 800e802:	f7fd fc7d 	bl	800c100 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800e806:	687b      	ldr	r3, [r7, #4]
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	895b      	ldrh	r3, [r3, #10]
 800e80c:	8a3a      	ldrh	r2, [r7, #16]
 800e80e:	429a      	cmp	r2, r3
 800e810:	f200 836e 	bhi.w	800eef0 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800e814:	687b      	ldr	r3, [r7, #4]
 800e816:	681b      	ldr	r3, [r3, #0]
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	4a64      	ldr	r2, [pc, #400]	; (800e9ac <tcp_input+0x298>)
 800e81c:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800e81e:	687b      	ldr	r3, [r7, #4]
 800e820:	681b      	ldr	r3, [r3, #0]
 800e822:	8a3a      	ldrh	r2, [r7, #16]
 800e824:	4611      	mov	r1, r2
 800e826:	4618      	mov	r0, r3
 800e828:	f7fd fc6a 	bl	800c100 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	891a      	ldrh	r2, [r3, #8]
 800e830:	8a3b      	ldrh	r3, [r7, #16]
 800e832:	1ad3      	subs	r3, r2, r3
 800e834:	b29a      	uxth	r2, r3
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800e83a:	687b      	ldr	r3, [r7, #4]
 800e83c:	895b      	ldrh	r3, [r3, #10]
 800e83e:	2b00      	cmp	r3, #0
 800e840:	d005      	beq.n	800e84e <tcp_input+0x13a>
 800e842:	4b54      	ldr	r3, [pc, #336]	; (800e994 <tcp_input+0x280>)
 800e844:	22df      	movs	r2, #223	; 0xdf
 800e846:	495c      	ldr	r1, [pc, #368]	; (800e9b8 <tcp_input+0x2a4>)
 800e848:	4854      	ldr	r0, [pc, #336]	; (800e99c <tcp_input+0x288>)
 800e84a:	f007 fe81 	bl	8016550 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800e84e:	687b      	ldr	r3, [r7, #4]
 800e850:	891a      	ldrh	r2, [r3, #8]
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	891b      	ldrh	r3, [r3, #8]
 800e858:	429a      	cmp	r2, r3
 800e85a:	d005      	beq.n	800e868 <tcp_input+0x154>
 800e85c:	4b4d      	ldr	r3, [pc, #308]	; (800e994 <tcp_input+0x280>)
 800e85e:	22e0      	movs	r2, #224	; 0xe0
 800e860:	4956      	ldr	r1, [pc, #344]	; (800e9bc <tcp_input+0x2a8>)
 800e862:	484e      	ldr	r0, [pc, #312]	; (800e99c <tcp_input+0x288>)
 800e864:	f007 fe74 	bl	8016550 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800e868:	4b4d      	ldr	r3, [pc, #308]	; (800e9a0 <tcp_input+0x28c>)
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	881b      	ldrh	r3, [r3, #0]
 800e86e:	b29b      	uxth	r3, r3
 800e870:	4a4b      	ldr	r2, [pc, #300]	; (800e9a0 <tcp_input+0x28c>)
 800e872:	6814      	ldr	r4, [r2, #0]
 800e874:	4618      	mov	r0, r3
 800e876:	f7fb fdef 	bl	800a458 <lwip_htons>
 800e87a:	4603      	mov	r3, r0
 800e87c:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800e87e:	4b48      	ldr	r3, [pc, #288]	; (800e9a0 <tcp_input+0x28c>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	885b      	ldrh	r3, [r3, #2]
 800e884:	b29b      	uxth	r3, r3
 800e886:	4a46      	ldr	r2, [pc, #280]	; (800e9a0 <tcp_input+0x28c>)
 800e888:	6814      	ldr	r4, [r2, #0]
 800e88a:	4618      	mov	r0, r3
 800e88c:	f7fb fde4 	bl	800a458 <lwip_htons>
 800e890:	4603      	mov	r3, r0
 800e892:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800e894:	4b42      	ldr	r3, [pc, #264]	; (800e9a0 <tcp_input+0x28c>)
 800e896:	681b      	ldr	r3, [r3, #0]
 800e898:	685b      	ldr	r3, [r3, #4]
 800e89a:	4a41      	ldr	r2, [pc, #260]	; (800e9a0 <tcp_input+0x28c>)
 800e89c:	6814      	ldr	r4, [r2, #0]
 800e89e:	4618      	mov	r0, r3
 800e8a0:	f7fb fdef 	bl	800a482 <lwip_htonl>
 800e8a4:	4603      	mov	r3, r0
 800e8a6:	6063      	str	r3, [r4, #4]
 800e8a8:	6863      	ldr	r3, [r4, #4]
 800e8aa:	4a45      	ldr	r2, [pc, #276]	; (800e9c0 <tcp_input+0x2ac>)
 800e8ac:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800e8ae:	4b3c      	ldr	r3, [pc, #240]	; (800e9a0 <tcp_input+0x28c>)
 800e8b0:	681b      	ldr	r3, [r3, #0]
 800e8b2:	689b      	ldr	r3, [r3, #8]
 800e8b4:	4a3a      	ldr	r2, [pc, #232]	; (800e9a0 <tcp_input+0x28c>)
 800e8b6:	6814      	ldr	r4, [r2, #0]
 800e8b8:	4618      	mov	r0, r3
 800e8ba:	f7fb fde2 	bl	800a482 <lwip_htonl>
 800e8be:	4603      	mov	r3, r0
 800e8c0:	60a3      	str	r3, [r4, #8]
 800e8c2:	68a3      	ldr	r3, [r4, #8]
 800e8c4:	4a3f      	ldr	r2, [pc, #252]	; (800e9c4 <tcp_input+0x2b0>)
 800e8c6:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800e8c8:	4b35      	ldr	r3, [pc, #212]	; (800e9a0 <tcp_input+0x28c>)
 800e8ca:	681b      	ldr	r3, [r3, #0]
 800e8cc:	89db      	ldrh	r3, [r3, #14]
 800e8ce:	b29b      	uxth	r3, r3
 800e8d0:	4a33      	ldr	r2, [pc, #204]	; (800e9a0 <tcp_input+0x28c>)
 800e8d2:	6814      	ldr	r4, [r2, #0]
 800e8d4:	4618      	mov	r0, r3
 800e8d6:	f7fb fdbf 	bl	800a458 <lwip_htons>
 800e8da:	4603      	mov	r3, r0
 800e8dc:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800e8de:	4b30      	ldr	r3, [pc, #192]	; (800e9a0 <tcp_input+0x28c>)
 800e8e0:	681b      	ldr	r3, [r3, #0]
 800e8e2:	899b      	ldrh	r3, [r3, #12]
 800e8e4:	b29b      	uxth	r3, r3
 800e8e6:	4618      	mov	r0, r3
 800e8e8:	f7fb fdb6 	bl	800a458 <lwip_htons>
 800e8ec:	4603      	mov	r3, r0
 800e8ee:	b2db      	uxtb	r3, r3
 800e8f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800e8f4:	b2da      	uxtb	r2, r3
 800e8f6:	4b34      	ldr	r3, [pc, #208]	; (800e9c8 <tcp_input+0x2b4>)
 800e8f8:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800e8fa:	687b      	ldr	r3, [r7, #4]
 800e8fc:	891a      	ldrh	r2, [r3, #8]
 800e8fe:	4b33      	ldr	r3, [pc, #204]	; (800e9cc <tcp_input+0x2b8>)
 800e900:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800e902:	4b31      	ldr	r3, [pc, #196]	; (800e9c8 <tcp_input+0x2b4>)
 800e904:	781b      	ldrb	r3, [r3, #0]
 800e906:	f003 0303 	and.w	r3, r3, #3
 800e90a:	2b00      	cmp	r3, #0
 800e90c:	d00c      	beq.n	800e928 <tcp_input+0x214>
    tcplen++;
 800e90e:	4b2f      	ldr	r3, [pc, #188]	; (800e9cc <tcp_input+0x2b8>)
 800e910:	881b      	ldrh	r3, [r3, #0]
 800e912:	3301      	adds	r3, #1
 800e914:	b29a      	uxth	r2, r3
 800e916:	4b2d      	ldr	r3, [pc, #180]	; (800e9cc <tcp_input+0x2b8>)
 800e918:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	891a      	ldrh	r2, [r3, #8]
 800e91e:	4b2b      	ldr	r3, [pc, #172]	; (800e9cc <tcp_input+0x2b8>)
 800e920:	881b      	ldrh	r3, [r3, #0]
 800e922:	429a      	cmp	r2, r3
 800e924:	f200 82e6 	bhi.w	800eef4 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800e928:	2300      	movs	r3, #0
 800e92a:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800e92c:	4b28      	ldr	r3, [pc, #160]	; (800e9d0 <tcp_input+0x2bc>)
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	61fb      	str	r3, [r7, #28]
 800e932:	e09d      	b.n	800ea70 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800e934:	69fb      	ldr	r3, [r7, #28]
 800e936:	7d1b      	ldrb	r3, [r3, #20]
 800e938:	2b00      	cmp	r3, #0
 800e93a:	d105      	bne.n	800e948 <tcp_input+0x234>
 800e93c:	4b15      	ldr	r3, [pc, #84]	; (800e994 <tcp_input+0x280>)
 800e93e:	22fb      	movs	r2, #251	; 0xfb
 800e940:	4924      	ldr	r1, [pc, #144]	; (800e9d4 <tcp_input+0x2c0>)
 800e942:	4816      	ldr	r0, [pc, #88]	; (800e99c <tcp_input+0x288>)
 800e944:	f007 fe04 	bl	8016550 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800e948:	69fb      	ldr	r3, [r7, #28]
 800e94a:	7d1b      	ldrb	r3, [r3, #20]
 800e94c:	2b0a      	cmp	r3, #10
 800e94e:	d105      	bne.n	800e95c <tcp_input+0x248>
 800e950:	4b10      	ldr	r3, [pc, #64]	; (800e994 <tcp_input+0x280>)
 800e952:	22fc      	movs	r2, #252	; 0xfc
 800e954:	4920      	ldr	r1, [pc, #128]	; (800e9d8 <tcp_input+0x2c4>)
 800e956:	4811      	ldr	r0, [pc, #68]	; (800e99c <tcp_input+0x288>)
 800e958:	f007 fdfa 	bl	8016550 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800e95c:	69fb      	ldr	r3, [r7, #28]
 800e95e:	7d1b      	ldrb	r3, [r3, #20]
 800e960:	2b01      	cmp	r3, #1
 800e962:	d105      	bne.n	800e970 <tcp_input+0x25c>
 800e964:	4b0b      	ldr	r3, [pc, #44]	; (800e994 <tcp_input+0x280>)
 800e966:	22fd      	movs	r2, #253	; 0xfd
 800e968:	491c      	ldr	r1, [pc, #112]	; (800e9dc <tcp_input+0x2c8>)
 800e96a:	480c      	ldr	r0, [pc, #48]	; (800e99c <tcp_input+0x288>)
 800e96c:	f007 fdf0 	bl	8016550 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e970:	69fb      	ldr	r3, [r7, #28]
 800e972:	7a1b      	ldrb	r3, [r3, #8]
 800e974:	2b00      	cmp	r3, #0
 800e976:	d033      	beq.n	800e9e0 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800e978:	69fb      	ldr	r3, [r7, #28]
 800e97a:	7a1a      	ldrb	r2, [r3, #8]
 800e97c:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <tcp_input+0x290>)
 800e97e:	685b      	ldr	r3, [r3, #4]
 800e980:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800e984:	3301      	adds	r3, #1
 800e986:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800e988:	429a      	cmp	r2, r3
 800e98a:	d029      	beq.n	800e9e0 <tcp_input+0x2cc>
      prev = pcb;
 800e98c:	69fb      	ldr	r3, [r7, #28]
 800e98e:	61bb      	str	r3, [r7, #24]
      continue;
 800e990:	e06b      	b.n	800ea6a <tcp_input+0x356>
 800e992:	bf00      	nop
 800e994:	080192a0 	.word	0x080192a0
 800e998:	080192d4 	.word	0x080192d4
 800e99c:	080192ec 	.word	0x080192ec
 800e9a0:	2000d160 	.word	0x2000d160
 800e9a4:	20009258 	.word	0x20009258
 800e9a8:	2000d164 	.word	0x2000d164
 800e9ac:	2000d168 	.word	0x2000d168
 800e9b0:	2000d166 	.word	0x2000d166
 800e9b4:	08019314 	.word	0x08019314
 800e9b8:	08019324 	.word	0x08019324
 800e9bc:	08019330 	.word	0x08019330
 800e9c0:	2000d170 	.word	0x2000d170
 800e9c4:	2000d174 	.word	0x2000d174
 800e9c8:	2000d17c 	.word	0x2000d17c
 800e9cc:	2000d17a 	.word	0x2000d17a
 800e9d0:	2000d144 	.word	0x2000d144
 800e9d4:	08019350 	.word	0x08019350
 800e9d8:	08019378 	.word	0x08019378
 800e9dc:	080193a4 	.word	0x080193a4
    }

    if (pcb->remote_port == tcphdr->src &&
 800e9e0:	69fb      	ldr	r3, [r7, #28]
 800e9e2:	8b1a      	ldrh	r2, [r3, #24]
 800e9e4:	4b72      	ldr	r3, [pc, #456]	; (800ebb0 <tcp_input+0x49c>)
 800e9e6:	681b      	ldr	r3, [r3, #0]
 800e9e8:	881b      	ldrh	r3, [r3, #0]
 800e9ea:	b29b      	uxth	r3, r3
 800e9ec:	429a      	cmp	r2, r3
 800e9ee:	d13a      	bne.n	800ea66 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800e9f0:	69fb      	ldr	r3, [r7, #28]
 800e9f2:	8ada      	ldrh	r2, [r3, #22]
 800e9f4:	4b6e      	ldr	r3, [pc, #440]	; (800ebb0 <tcp_input+0x49c>)
 800e9f6:	681b      	ldr	r3, [r3, #0]
 800e9f8:	885b      	ldrh	r3, [r3, #2]
 800e9fa:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800e9fc:	429a      	cmp	r2, r3
 800e9fe:	d132      	bne.n	800ea66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea00:	69fb      	ldr	r3, [r7, #28]
 800ea02:	685a      	ldr	r2, [r3, #4]
 800ea04:	4b6b      	ldr	r3, [pc, #428]	; (800ebb4 <tcp_input+0x4a0>)
 800ea06:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800ea08:	429a      	cmp	r2, r3
 800ea0a:	d12c      	bne.n	800ea66 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800ea0c:	69fb      	ldr	r3, [r7, #28]
 800ea0e:	681a      	ldr	r2, [r3, #0]
 800ea10:	4b68      	ldr	r3, [pc, #416]	; (800ebb4 <tcp_input+0x4a0>)
 800ea12:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800ea14:	429a      	cmp	r2, r3
 800ea16:	d126      	bne.n	800ea66 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800ea18:	69fb      	ldr	r3, [r7, #28]
 800ea1a:	68db      	ldr	r3, [r3, #12]
 800ea1c:	69fa      	ldr	r2, [r7, #28]
 800ea1e:	429a      	cmp	r2, r3
 800ea20:	d106      	bne.n	800ea30 <tcp_input+0x31c>
 800ea22:	4b65      	ldr	r3, [pc, #404]	; (800ebb8 <tcp_input+0x4a4>)
 800ea24:	f240 120d 	movw	r2, #269	; 0x10d
 800ea28:	4964      	ldr	r1, [pc, #400]	; (800ebbc <tcp_input+0x4a8>)
 800ea2a:	4865      	ldr	r0, [pc, #404]	; (800ebc0 <tcp_input+0x4ac>)
 800ea2c:	f007 fd90 	bl	8016550 <iprintf>
      if (prev != NULL) {
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d00a      	beq.n	800ea4c <tcp_input+0x338>
        prev->next = pcb->next;
 800ea36:	69fb      	ldr	r3, [r7, #28]
 800ea38:	68da      	ldr	r2, [r3, #12]
 800ea3a:	69bb      	ldr	r3, [r7, #24]
 800ea3c:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800ea3e:	4b61      	ldr	r3, [pc, #388]	; (800ebc4 <tcp_input+0x4b0>)
 800ea40:	681a      	ldr	r2, [r3, #0]
 800ea42:	69fb      	ldr	r3, [r7, #28]
 800ea44:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800ea46:	4a5f      	ldr	r2, [pc, #380]	; (800ebc4 <tcp_input+0x4b0>)
 800ea48:	69fb      	ldr	r3, [r7, #28]
 800ea4a:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800ea4c:	69fb      	ldr	r3, [r7, #28]
 800ea4e:	68db      	ldr	r3, [r3, #12]
 800ea50:	69fa      	ldr	r2, [r7, #28]
 800ea52:	429a      	cmp	r2, r3
 800ea54:	d111      	bne.n	800ea7a <tcp_input+0x366>
 800ea56:	4b58      	ldr	r3, [pc, #352]	; (800ebb8 <tcp_input+0x4a4>)
 800ea58:	f240 1215 	movw	r2, #277	; 0x115
 800ea5c:	495a      	ldr	r1, [pc, #360]	; (800ebc8 <tcp_input+0x4b4>)
 800ea5e:	4858      	ldr	r0, [pc, #352]	; (800ebc0 <tcp_input+0x4ac>)
 800ea60:	f007 fd76 	bl	8016550 <iprintf>
      break;
 800ea64:	e009      	b.n	800ea7a <tcp_input+0x366>
    }
    prev = pcb;
 800ea66:	69fb      	ldr	r3, [r7, #28]
 800ea68:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea6a:	69fb      	ldr	r3, [r7, #28]
 800ea6c:	68db      	ldr	r3, [r3, #12]
 800ea6e:	61fb      	str	r3, [r7, #28]
 800ea70:	69fb      	ldr	r3, [r7, #28]
 800ea72:	2b00      	cmp	r3, #0
 800ea74:	f47f af5e 	bne.w	800e934 <tcp_input+0x220>
 800ea78:	e000      	b.n	800ea7c <tcp_input+0x368>
      break;
 800ea7a:	bf00      	nop
  }

  if (pcb == NULL) {
 800ea7c:	69fb      	ldr	r3, [r7, #28]
 800ea7e:	2b00      	cmp	r3, #0
 800ea80:	f040 80aa 	bne.w	800ebd8 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ea84:	4b51      	ldr	r3, [pc, #324]	; (800ebcc <tcp_input+0x4b8>)
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	61fb      	str	r3, [r7, #28]
 800ea8a:	e03f      	b.n	800eb0c <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800ea8c:	69fb      	ldr	r3, [r7, #28]
 800ea8e:	7d1b      	ldrb	r3, [r3, #20]
 800ea90:	2b0a      	cmp	r3, #10
 800ea92:	d006      	beq.n	800eaa2 <tcp_input+0x38e>
 800ea94:	4b48      	ldr	r3, [pc, #288]	; (800ebb8 <tcp_input+0x4a4>)
 800ea96:	f240 121f 	movw	r2, #287	; 0x11f
 800ea9a:	494d      	ldr	r1, [pc, #308]	; (800ebd0 <tcp_input+0x4bc>)
 800ea9c:	4848      	ldr	r0, [pc, #288]	; (800ebc0 <tcp_input+0x4ac>)
 800ea9e:	f007 fd57 	bl	8016550 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eaa2:	69fb      	ldr	r3, [r7, #28]
 800eaa4:	7a1b      	ldrb	r3, [r3, #8]
 800eaa6:	2b00      	cmp	r3, #0
 800eaa8:	d009      	beq.n	800eabe <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eaaa:	69fb      	ldr	r3, [r7, #28]
 800eaac:	7a1a      	ldrb	r2, [r3, #8]
 800eaae:	4b41      	ldr	r3, [pc, #260]	; (800ebb4 <tcp_input+0x4a0>)
 800eab0:	685b      	ldr	r3, [r3, #4]
 800eab2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eab6:	3301      	adds	r3, #1
 800eab8:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800eaba:	429a      	cmp	r2, r3
 800eabc:	d122      	bne.n	800eb04 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800eabe:	69fb      	ldr	r3, [r7, #28]
 800eac0:	8b1a      	ldrh	r2, [r3, #24]
 800eac2:	4b3b      	ldr	r3, [pc, #236]	; (800ebb0 <tcp_input+0x49c>)
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	881b      	ldrh	r3, [r3, #0]
 800eac8:	b29b      	uxth	r3, r3
 800eaca:	429a      	cmp	r2, r3
 800eacc:	d11b      	bne.n	800eb06 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800eace:	69fb      	ldr	r3, [r7, #28]
 800ead0:	8ada      	ldrh	r2, [r3, #22]
 800ead2:	4b37      	ldr	r3, [pc, #220]	; (800ebb0 <tcp_input+0x49c>)
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	885b      	ldrh	r3, [r3, #2]
 800ead8:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800eada:	429a      	cmp	r2, r3
 800eadc:	d113      	bne.n	800eb06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eade:	69fb      	ldr	r3, [r7, #28]
 800eae0:	685a      	ldr	r2, [r3, #4]
 800eae2:	4b34      	ldr	r3, [pc, #208]	; (800ebb4 <tcp_input+0x4a0>)
 800eae4:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800eae6:	429a      	cmp	r2, r3
 800eae8:	d10d      	bne.n	800eb06 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800eaea:	69fb      	ldr	r3, [r7, #28]
 800eaec:	681a      	ldr	r2, [r3, #0]
 800eaee:	4b31      	ldr	r3, [pc, #196]	; (800ebb4 <tcp_input+0x4a0>)
 800eaf0:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800eaf2:	429a      	cmp	r2, r3
 800eaf4:	d107      	bne.n	800eb06 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800eaf6:	69f8      	ldr	r0, [r7, #28]
 800eaf8:	f000 fb56 	bl	800f1a8 <tcp_timewait_input>
        }
        pbuf_free(p);
 800eafc:	6878      	ldr	r0, [r7, #4]
 800eafe:	f7fd fb85 	bl	800c20c <pbuf_free>
        return;
 800eb02:	e1fd      	b.n	800ef00 <tcp_input+0x7ec>
        continue;
 800eb04:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800eb06:	69fb      	ldr	r3, [r7, #28]
 800eb08:	68db      	ldr	r3, [r3, #12]
 800eb0a:	61fb      	str	r3, [r7, #28]
 800eb0c:	69fb      	ldr	r3, [r7, #28]
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d1bc      	bne.n	800ea8c <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800eb12:	2300      	movs	r3, #0
 800eb14:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb16:	4b2f      	ldr	r3, [pc, #188]	; (800ebd4 <tcp_input+0x4c0>)
 800eb18:	681b      	ldr	r3, [r3, #0]
 800eb1a:	617b      	str	r3, [r7, #20]
 800eb1c:	e02a      	b.n	800eb74 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eb1e:	697b      	ldr	r3, [r7, #20]
 800eb20:	7a1b      	ldrb	r3, [r3, #8]
 800eb22:	2b00      	cmp	r3, #0
 800eb24:	d00c      	beq.n	800eb40 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800eb26:	697b      	ldr	r3, [r7, #20]
 800eb28:	7a1a      	ldrb	r2, [r3, #8]
 800eb2a:	4b22      	ldr	r3, [pc, #136]	; (800ebb4 <tcp_input+0x4a0>)
 800eb2c:	685b      	ldr	r3, [r3, #4]
 800eb2e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb32:	3301      	adds	r3, #1
 800eb34:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800eb36:	429a      	cmp	r2, r3
 800eb38:	d002      	beq.n	800eb40 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800eb3a:	697b      	ldr	r3, [r7, #20]
 800eb3c:	61bb      	str	r3, [r7, #24]
        continue;
 800eb3e:	e016      	b.n	800eb6e <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800eb40:	697b      	ldr	r3, [r7, #20]
 800eb42:	8ada      	ldrh	r2, [r3, #22]
 800eb44:	4b1a      	ldr	r3, [pc, #104]	; (800ebb0 <tcp_input+0x49c>)
 800eb46:	681b      	ldr	r3, [r3, #0]
 800eb48:	885b      	ldrh	r3, [r3, #2]
 800eb4a:	b29b      	uxth	r3, r3
 800eb4c:	429a      	cmp	r2, r3
 800eb4e:	d10c      	bne.n	800eb6a <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800eb50:	697b      	ldr	r3, [r7, #20]
 800eb52:	681a      	ldr	r2, [r3, #0]
 800eb54:	4b17      	ldr	r3, [pc, #92]	; (800ebb4 <tcp_input+0x4a0>)
 800eb56:	695b      	ldr	r3, [r3, #20]
 800eb58:	429a      	cmp	r2, r3
 800eb5a:	d00f      	beq.n	800eb7c <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800eb5c:	697b      	ldr	r3, [r7, #20]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	d00d      	beq.n	800eb7e <tcp_input+0x46a>
 800eb62:	697b      	ldr	r3, [r7, #20]
 800eb64:	681b      	ldr	r3, [r3, #0]
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d009      	beq.n	800eb7e <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800eb6a:	697b      	ldr	r3, [r7, #20]
 800eb6c:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800eb6e:	697b      	ldr	r3, [r7, #20]
 800eb70:	68db      	ldr	r3, [r3, #12]
 800eb72:	617b      	str	r3, [r7, #20]
 800eb74:	697b      	ldr	r3, [r7, #20]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d1d1      	bne.n	800eb1e <tcp_input+0x40a>
 800eb7a:	e000      	b.n	800eb7e <tcp_input+0x46a>
            break;
 800eb7c:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800eb7e:	697b      	ldr	r3, [r7, #20]
 800eb80:	2b00      	cmp	r3, #0
 800eb82:	d029      	beq.n	800ebd8 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800eb84:	69bb      	ldr	r3, [r7, #24]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00a      	beq.n	800eba0 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800eb8a:	697b      	ldr	r3, [r7, #20]
 800eb8c:	68da      	ldr	r2, [r3, #12]
 800eb8e:	69bb      	ldr	r3, [r7, #24]
 800eb90:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800eb92:	4b10      	ldr	r3, [pc, #64]	; (800ebd4 <tcp_input+0x4c0>)
 800eb94:	681a      	ldr	r2, [r3, #0]
 800eb96:	697b      	ldr	r3, [r7, #20]
 800eb98:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800eb9a:	4a0e      	ldr	r2, [pc, #56]	; (800ebd4 <tcp_input+0x4c0>)
 800eb9c:	697b      	ldr	r3, [r7, #20]
 800eb9e:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800eba0:	6978      	ldr	r0, [r7, #20]
 800eba2:	f000 fa03 	bl	800efac <tcp_listen_input>
      }
      pbuf_free(p);
 800eba6:	6878      	ldr	r0, [r7, #4]
 800eba8:	f7fd fb30 	bl	800c20c <pbuf_free>
      return;
 800ebac:	e1a8      	b.n	800ef00 <tcp_input+0x7ec>
 800ebae:	bf00      	nop
 800ebb0:	2000d160 	.word	0x2000d160
 800ebb4:	20009258 	.word	0x20009258
 800ebb8:	080192a0 	.word	0x080192a0
 800ebbc:	080193cc 	.word	0x080193cc
 800ebc0:	080192ec 	.word	0x080192ec
 800ebc4:	2000d144 	.word	0x2000d144
 800ebc8:	080193f8 	.word	0x080193f8
 800ebcc:	2000d148 	.word	0x2000d148
 800ebd0:	08019424 	.word	0x08019424
 800ebd4:	2000d140 	.word	0x2000d140
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800ebd8:	69fb      	ldr	r3, [r7, #28]
 800ebda:	2b00      	cmp	r3, #0
 800ebdc:	f000 8158 	beq.w	800ee90 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800ebe0:	4b95      	ldr	r3, [pc, #596]	; (800ee38 <tcp_input+0x724>)
 800ebe2:	2200      	movs	r2, #0
 800ebe4:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	891a      	ldrh	r2, [r3, #8]
 800ebea:	4b93      	ldr	r3, [pc, #588]	; (800ee38 <tcp_input+0x724>)
 800ebec:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800ebee:	4a92      	ldr	r2, [pc, #584]	; (800ee38 <tcp_input+0x724>)
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800ebf4:	4b91      	ldr	r3, [pc, #580]	; (800ee3c <tcp_input+0x728>)
 800ebf6:	681b      	ldr	r3, [r3, #0]
 800ebf8:	4a8f      	ldr	r2, [pc, #572]	; (800ee38 <tcp_input+0x724>)
 800ebfa:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800ebfc:	4b90      	ldr	r3, [pc, #576]	; (800ee40 <tcp_input+0x72c>)
 800ebfe:	2200      	movs	r2, #0
 800ec00:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800ec02:	4b90      	ldr	r3, [pc, #576]	; (800ee44 <tcp_input+0x730>)
 800ec04:	2200      	movs	r2, #0
 800ec06:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800ec08:	4b8f      	ldr	r3, [pc, #572]	; (800ee48 <tcp_input+0x734>)
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800ec0e:	4b8f      	ldr	r3, [pc, #572]	; (800ee4c <tcp_input+0x738>)
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	f003 0308 	and.w	r3, r3, #8
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d006      	beq.n	800ec28 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	7b5b      	ldrb	r3, [r3, #13]
 800ec1e:	f043 0301 	orr.w	r3, r3, #1
 800ec22:	b2da      	uxtb	r2, r3
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800ec28:	69fb      	ldr	r3, [r7, #28]
 800ec2a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d017      	beq.n	800ec60 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ec30:	69f8      	ldr	r0, [r7, #28]
 800ec32:	f7ff f873 	bl	800dd1c <tcp_process_refused_data>
 800ec36:	4603      	mov	r3, r0
 800ec38:	f113 0f0d 	cmn.w	r3, #13
 800ec3c:	d007      	beq.n	800ec4e <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ec3e:	69fb      	ldr	r3, [r7, #28]
 800ec40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d00c      	beq.n	800ec60 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800ec46:	4b82      	ldr	r3, [pc, #520]	; (800ee50 <tcp_input+0x73c>)
 800ec48:	881b      	ldrh	r3, [r3, #0]
 800ec4a:	2b00      	cmp	r3, #0
 800ec4c:	d008      	beq.n	800ec60 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800ec4e:	69fb      	ldr	r3, [r7, #28]
 800ec50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	f040 80e3 	bne.w	800ee1e <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800ec58:	69f8      	ldr	r0, [r7, #28]
 800ec5a:	f003 fe05 	bl	8012868 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800ec5e:	e0de      	b.n	800ee1e <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800ec60:	4a7c      	ldr	r2, [pc, #496]	; (800ee54 <tcp_input+0x740>)
 800ec62:	69fb      	ldr	r3, [r7, #28]
 800ec64:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800ec66:	69f8      	ldr	r0, [r7, #28]
 800ec68:	f000 fb18 	bl	800f29c <tcp_process>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800ec70:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ec74:	f113 0f0d 	cmn.w	r3, #13
 800ec78:	f000 80d3 	beq.w	800ee22 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800ec7c:	4b71      	ldr	r3, [pc, #452]	; (800ee44 <tcp_input+0x730>)
 800ec7e:	781b      	ldrb	r3, [r3, #0]
 800ec80:	f003 0308 	and.w	r3, r3, #8
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d015      	beq.n	800ecb4 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800ec88:	69fb      	ldr	r3, [r7, #28]
 800ec8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec8e:	2b00      	cmp	r3, #0
 800ec90:	d008      	beq.n	800eca4 <tcp_input+0x590>
 800ec92:	69fb      	ldr	r3, [r7, #28]
 800ec94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ec98:	69fa      	ldr	r2, [r7, #28]
 800ec9a:	6912      	ldr	r2, [r2, #16]
 800ec9c:	f06f 010d 	mvn.w	r1, #13
 800eca0:	4610      	mov	r0, r2
 800eca2:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800eca4:	69f9      	ldr	r1, [r7, #28]
 800eca6:	486c      	ldr	r0, [pc, #432]	; (800ee58 <tcp_input+0x744>)
 800eca8:	f7ff fbbc 	bl	800e424 <tcp_pcb_remove>
        tcp_free(pcb);
 800ecac:	69f8      	ldr	r0, [r7, #28]
 800ecae:	f7fd fefd 	bl	800caac <tcp_free>
 800ecb2:	e0da      	b.n	800ee6a <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800ecb4:	2300      	movs	r3, #0
 800ecb6:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800ecb8:	4b63      	ldr	r3, [pc, #396]	; (800ee48 <tcp_input+0x734>)
 800ecba:	881b      	ldrh	r3, [r3, #0]
 800ecbc:	2b00      	cmp	r3, #0
 800ecbe:	d01d      	beq.n	800ecfc <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800ecc0:	4b61      	ldr	r3, [pc, #388]	; (800ee48 <tcp_input+0x734>)
 800ecc2:	881b      	ldrh	r3, [r3, #0]
 800ecc4:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800ecc6:	69fb      	ldr	r3, [r7, #28]
 800ecc8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800eccc:	2b00      	cmp	r3, #0
 800ecce:	d00a      	beq.n	800ece6 <tcp_input+0x5d2>
 800ecd0:	69fb      	ldr	r3, [r7, #28]
 800ecd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800ecd6:	69fa      	ldr	r2, [r7, #28]
 800ecd8:	6910      	ldr	r0, [r2, #16]
 800ecda:	89fa      	ldrh	r2, [r7, #14]
 800ecdc:	69f9      	ldr	r1, [r7, #28]
 800ecde:	4798      	blx	r3
 800ece0:	4603      	mov	r3, r0
 800ece2:	74fb      	strb	r3, [r7, #19]
 800ece4:	e001      	b.n	800ecea <tcp_input+0x5d6>
 800ece6:	2300      	movs	r3, #0
 800ece8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800ecea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ecee:	f113 0f0d 	cmn.w	r3, #13
 800ecf2:	f000 8098 	beq.w	800ee26 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800ecf6:	4b54      	ldr	r3, [pc, #336]	; (800ee48 <tcp_input+0x734>)
 800ecf8:	2200      	movs	r2, #0
 800ecfa:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800ecfc:	69f8      	ldr	r0, [r7, #28]
 800ecfe:	f000 f915 	bl	800ef2c <tcp_input_delayed_close>
 800ed02:	4603      	mov	r3, r0
 800ed04:	2b00      	cmp	r3, #0
 800ed06:	f040 8090 	bne.w	800ee2a <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800ed0a:	4b4d      	ldr	r3, [pc, #308]	; (800ee40 <tcp_input+0x72c>)
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d041      	beq.n	800ed96 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800ed12:	69fb      	ldr	r3, [r7, #28]
 800ed14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	d006      	beq.n	800ed28 <tcp_input+0x614>
 800ed1a:	4b50      	ldr	r3, [pc, #320]	; (800ee5c <tcp_input+0x748>)
 800ed1c:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800ed20:	494f      	ldr	r1, [pc, #316]	; (800ee60 <tcp_input+0x74c>)
 800ed22:	4850      	ldr	r0, [pc, #320]	; (800ee64 <tcp_input+0x750>)
 800ed24:	f007 fc14 	bl	8016550 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800ed28:	69fb      	ldr	r3, [r7, #28]
 800ed2a:	8b5b      	ldrh	r3, [r3, #26]
 800ed2c:	f003 0310 	and.w	r3, r3, #16
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	d008      	beq.n	800ed46 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800ed34:	4b42      	ldr	r3, [pc, #264]	; (800ee40 <tcp_input+0x72c>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	4618      	mov	r0, r3
 800ed3a:	f7fd fa67 	bl	800c20c <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800ed3e:	69f8      	ldr	r0, [r7, #28]
 800ed40:	f7fe f99c 	bl	800d07c <tcp_abort>
            goto aborted;
 800ed44:	e091      	b.n	800ee6a <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800ed46:	69fb      	ldr	r3, [r7, #28]
 800ed48:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ed4c:	2b00      	cmp	r3, #0
 800ed4e:	d00c      	beq.n	800ed6a <tcp_input+0x656>
 800ed50:	69fb      	ldr	r3, [r7, #28]
 800ed52:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ed56:	69fb      	ldr	r3, [r7, #28]
 800ed58:	6918      	ldr	r0, [r3, #16]
 800ed5a:	4b39      	ldr	r3, [pc, #228]	; (800ee40 <tcp_input+0x72c>)
 800ed5c:	681a      	ldr	r2, [r3, #0]
 800ed5e:	2300      	movs	r3, #0
 800ed60:	69f9      	ldr	r1, [r7, #28]
 800ed62:	47a0      	blx	r4
 800ed64:	4603      	mov	r3, r0
 800ed66:	74fb      	strb	r3, [r7, #19]
 800ed68:	e008      	b.n	800ed7c <tcp_input+0x668>
 800ed6a:	4b35      	ldr	r3, [pc, #212]	; (800ee40 <tcp_input+0x72c>)
 800ed6c:	681a      	ldr	r2, [r3, #0]
 800ed6e:	2300      	movs	r3, #0
 800ed70:	69f9      	ldr	r1, [r7, #28]
 800ed72:	2000      	movs	r0, #0
 800ed74:	f7ff f8a8 	bl	800dec8 <tcp_recv_null>
 800ed78:	4603      	mov	r3, r0
 800ed7a:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800ed7c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed80:	f113 0f0d 	cmn.w	r3, #13
 800ed84:	d053      	beq.n	800ee2e <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800ed86:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d003      	beq.n	800ed96 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800ed8e:	4b2c      	ldr	r3, [pc, #176]	; (800ee40 <tcp_input+0x72c>)
 800ed90:	681a      	ldr	r2, [r3, #0]
 800ed92:	69fb      	ldr	r3, [r7, #28]
 800ed94:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800ed96:	4b2b      	ldr	r3, [pc, #172]	; (800ee44 <tcp_input+0x730>)
 800ed98:	781b      	ldrb	r3, [r3, #0]
 800ed9a:	f003 0320 	and.w	r3, r3, #32
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d030      	beq.n	800ee04 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800eda2:	69fb      	ldr	r3, [r7, #28]
 800eda4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d009      	beq.n	800edbe <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edae:	7b5a      	ldrb	r2, [r3, #13]
 800edb0:	69fb      	ldr	r3, [r7, #28]
 800edb2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800edb4:	f042 0220 	orr.w	r2, r2, #32
 800edb8:	b2d2      	uxtb	r2, r2
 800edba:	735a      	strb	r2, [r3, #13]
 800edbc:	e022      	b.n	800ee04 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800edbe:	69fb      	ldr	r3, [r7, #28]
 800edc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edc2:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800edc6:	d005      	beq.n	800edd4 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800edc8:	69fb      	ldr	r3, [r7, #28]
 800edca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800edcc:	3301      	adds	r3, #1
 800edce:	b29a      	uxth	r2, r3
 800edd0:	69fb      	ldr	r3, [r7, #28]
 800edd2:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800edd4:	69fb      	ldr	r3, [r7, #28]
 800edd6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800edda:	2b00      	cmp	r3, #0
 800eddc:	d00b      	beq.n	800edf6 <tcp_input+0x6e2>
 800edde:	69fb      	ldr	r3, [r7, #28]
 800ede0:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800ede4:	69fb      	ldr	r3, [r7, #28]
 800ede6:	6918      	ldr	r0, [r3, #16]
 800ede8:	2300      	movs	r3, #0
 800edea:	2200      	movs	r2, #0
 800edec:	69f9      	ldr	r1, [r7, #28]
 800edee:	47a0      	blx	r4
 800edf0:	4603      	mov	r3, r0
 800edf2:	74fb      	strb	r3, [r7, #19]
 800edf4:	e001      	b.n	800edfa <tcp_input+0x6e6>
 800edf6:	2300      	movs	r3, #0
 800edf8:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800edfa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800edfe:	f113 0f0d 	cmn.w	r3, #13
 800ee02:	d016      	beq.n	800ee32 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800ee04:	4b13      	ldr	r3, [pc, #76]	; (800ee54 <tcp_input+0x740>)
 800ee06:	2200      	movs	r2, #0
 800ee08:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800ee0a:	69f8      	ldr	r0, [r7, #28]
 800ee0c:	f000 f88e 	bl	800ef2c <tcp_input_delayed_close>
 800ee10:	4603      	mov	r3, r0
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d128      	bne.n	800ee68 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800ee16:	69f8      	ldr	r0, [r7, #28]
 800ee18:	f002 ff20 	bl	8011c5c <tcp_output>
 800ee1c:	e025      	b.n	800ee6a <tcp_input+0x756>
        goto aborted;
 800ee1e:	bf00      	nop
 800ee20:	e023      	b.n	800ee6a <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800ee22:	bf00      	nop
 800ee24:	e021      	b.n	800ee6a <tcp_input+0x756>
              goto aborted;
 800ee26:	bf00      	nop
 800ee28:	e01f      	b.n	800ee6a <tcp_input+0x756>
          goto aborted;
 800ee2a:	bf00      	nop
 800ee2c:	e01d      	b.n	800ee6a <tcp_input+0x756>
            goto aborted;
 800ee2e:	bf00      	nop
 800ee30:	e01b      	b.n	800ee6a <tcp_input+0x756>
              goto aborted;
 800ee32:	bf00      	nop
 800ee34:	e019      	b.n	800ee6a <tcp_input+0x756>
 800ee36:	bf00      	nop
 800ee38:	2000d150 	.word	0x2000d150
 800ee3c:	2000d160 	.word	0x2000d160
 800ee40:	2000d180 	.word	0x2000d180
 800ee44:	2000d17d 	.word	0x2000d17d
 800ee48:	2000d178 	.word	0x2000d178
 800ee4c:	2000d17c 	.word	0x2000d17c
 800ee50:	2000d17a 	.word	0x2000d17a
 800ee54:	2000d184 	.word	0x2000d184
 800ee58:	2000d144 	.word	0x2000d144
 800ee5c:	080192a0 	.word	0x080192a0
 800ee60:	08019454 	.word	0x08019454
 800ee64:	080192ec 	.word	0x080192ec
          goto aborted;
 800ee68:	bf00      	nop
    tcp_input_pcb = NULL;
 800ee6a:	4b27      	ldr	r3, [pc, #156]	; (800ef08 <tcp_input+0x7f4>)
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800ee70:	4b26      	ldr	r3, [pc, #152]	; (800ef0c <tcp_input+0x7f8>)
 800ee72:	2200      	movs	r2, #0
 800ee74:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800ee76:	4b26      	ldr	r3, [pc, #152]	; (800ef10 <tcp_input+0x7fc>)
 800ee78:	685b      	ldr	r3, [r3, #4]
 800ee7a:	2b00      	cmp	r3, #0
 800ee7c:	d03f      	beq.n	800eefe <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800ee7e:	4b24      	ldr	r3, [pc, #144]	; (800ef10 <tcp_input+0x7fc>)
 800ee80:	685b      	ldr	r3, [r3, #4]
 800ee82:	4618      	mov	r0, r3
 800ee84:	f7fd f9c2 	bl	800c20c <pbuf_free>
      inseg.p = NULL;
 800ee88:	4b21      	ldr	r3, [pc, #132]	; (800ef10 <tcp_input+0x7fc>)
 800ee8a:	2200      	movs	r2, #0
 800ee8c:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800ee8e:	e036      	b.n	800eefe <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800ee90:	4b20      	ldr	r3, [pc, #128]	; (800ef14 <tcp_input+0x800>)
 800ee92:	681b      	ldr	r3, [r3, #0]
 800ee94:	899b      	ldrh	r3, [r3, #12]
 800ee96:	b29b      	uxth	r3, r3
 800ee98:	4618      	mov	r0, r3
 800ee9a:	f7fb fadd 	bl	800a458 <lwip_htons>
 800ee9e:	4603      	mov	r3, r0
 800eea0:	b2db      	uxtb	r3, r3
 800eea2:	f003 0304 	and.w	r3, r3, #4
 800eea6:	2b00      	cmp	r3, #0
 800eea8:	d118      	bne.n	800eedc <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eeaa:	4b1b      	ldr	r3, [pc, #108]	; (800ef18 <tcp_input+0x804>)
 800eeac:	6819      	ldr	r1, [r3, #0]
 800eeae:	4b1b      	ldr	r3, [pc, #108]	; (800ef1c <tcp_input+0x808>)
 800eeb0:	881b      	ldrh	r3, [r3, #0]
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	4b1a      	ldr	r3, [pc, #104]	; (800ef20 <tcp_input+0x80c>)
 800eeb6:	681b      	ldr	r3, [r3, #0]
 800eeb8:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eeba:	4b16      	ldr	r3, [pc, #88]	; (800ef14 <tcp_input+0x800>)
 800eebc:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eebe:	885b      	ldrh	r3, [r3, #2]
 800eec0:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eec2:	4a14      	ldr	r2, [pc, #80]	; (800ef14 <tcp_input+0x800>)
 800eec4:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eec6:	8812      	ldrh	r2, [r2, #0]
 800eec8:	b292      	uxth	r2, r2
 800eeca:	9202      	str	r2, [sp, #8]
 800eecc:	9301      	str	r3, [sp, #4]
 800eece:	4b15      	ldr	r3, [pc, #84]	; (800ef24 <tcp_input+0x810>)
 800eed0:	9300      	str	r3, [sp, #0]
 800eed2:	4b15      	ldr	r3, [pc, #84]	; (800ef28 <tcp_input+0x814>)
 800eed4:	4602      	mov	r2, r0
 800eed6:	2000      	movs	r0, #0
 800eed8:	f003 fc74 	bl	80127c4 <tcp_rst>
    pbuf_free(p);
 800eedc:	6878      	ldr	r0, [r7, #4]
 800eede:	f7fd f995 	bl	800c20c <pbuf_free>
  return;
 800eee2:	e00c      	b.n	800eefe <tcp_input+0x7ea>
    goto dropped;
 800eee4:	bf00      	nop
 800eee6:	e006      	b.n	800eef6 <tcp_input+0x7e2>
    goto dropped;
 800eee8:	bf00      	nop
 800eeea:	e004      	b.n	800eef6 <tcp_input+0x7e2>
    goto dropped;
 800eeec:	bf00      	nop
 800eeee:	e002      	b.n	800eef6 <tcp_input+0x7e2>
      goto dropped;
 800eef0:	bf00      	nop
 800eef2:	e000      	b.n	800eef6 <tcp_input+0x7e2>
      goto dropped;
 800eef4:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800eef6:	6878      	ldr	r0, [r7, #4]
 800eef8:	f7fd f988 	bl	800c20c <pbuf_free>
 800eefc:	e000      	b.n	800ef00 <tcp_input+0x7ec>
  return;
 800eefe:	bf00      	nop
}
 800ef00:	3724      	adds	r7, #36	; 0x24
 800ef02:	46bd      	mov	sp, r7
 800ef04:	bd90      	pop	{r4, r7, pc}
 800ef06:	bf00      	nop
 800ef08:	2000d184 	.word	0x2000d184
 800ef0c:	2000d180 	.word	0x2000d180
 800ef10:	2000d150 	.word	0x2000d150
 800ef14:	2000d160 	.word	0x2000d160
 800ef18:	2000d174 	.word	0x2000d174
 800ef1c:	2000d17a 	.word	0x2000d17a
 800ef20:	2000d170 	.word	0x2000d170
 800ef24:	20009268 	.word	0x20009268
 800ef28:	2000926c 	.word	0x2000926c

0800ef2c <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b082      	sub	sp, #8
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d106      	bne.n	800ef48 <tcp_input_delayed_close+0x1c>
 800ef3a:	4b17      	ldr	r3, [pc, #92]	; (800ef98 <tcp_input_delayed_close+0x6c>)
 800ef3c:	f240 225a 	movw	r2, #602	; 0x25a
 800ef40:	4916      	ldr	r1, [pc, #88]	; (800ef9c <tcp_input_delayed_close+0x70>)
 800ef42:	4817      	ldr	r0, [pc, #92]	; (800efa0 <tcp_input_delayed_close+0x74>)
 800ef44:	f007 fb04 	bl	8016550 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800ef48:	4b16      	ldr	r3, [pc, #88]	; (800efa4 <tcp_input_delayed_close+0x78>)
 800ef4a:	781b      	ldrb	r3, [r3, #0]
 800ef4c:	f003 0310 	and.w	r3, r3, #16
 800ef50:	2b00      	cmp	r3, #0
 800ef52:	d01c      	beq.n	800ef8e <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800ef54:	687b      	ldr	r3, [r7, #4]
 800ef56:	8b5b      	ldrh	r3, [r3, #26]
 800ef58:	f003 0310 	and.w	r3, r3, #16
 800ef5c:	2b00      	cmp	r3, #0
 800ef5e:	d10d      	bne.n	800ef7c <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d008      	beq.n	800ef7c <tcp_input_delayed_close+0x50>
 800ef6a:	687b      	ldr	r3, [r7, #4]
 800ef6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ef70:	687a      	ldr	r2, [r7, #4]
 800ef72:	6912      	ldr	r2, [r2, #16]
 800ef74:	f06f 010e 	mvn.w	r1, #14
 800ef78:	4610      	mov	r0, r2
 800ef7a:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800ef7c:	6879      	ldr	r1, [r7, #4]
 800ef7e:	480a      	ldr	r0, [pc, #40]	; (800efa8 <tcp_input_delayed_close+0x7c>)
 800ef80:	f7ff fa50 	bl	800e424 <tcp_pcb_remove>
    tcp_free(pcb);
 800ef84:	6878      	ldr	r0, [r7, #4]
 800ef86:	f7fd fd91 	bl	800caac <tcp_free>
    return 1;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e000      	b.n	800ef90 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800ef8e:	2300      	movs	r3, #0
}
 800ef90:	4618      	mov	r0, r3
 800ef92:	3708      	adds	r7, #8
 800ef94:	46bd      	mov	sp, r7
 800ef96:	bd80      	pop	{r7, pc}
 800ef98:	080192a0 	.word	0x080192a0
 800ef9c:	08019470 	.word	0x08019470
 800efa0:	080192ec 	.word	0x080192ec
 800efa4:	2000d17d 	.word	0x2000d17d
 800efa8:	2000d144 	.word	0x2000d144

0800efac <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800efac:	b590      	push	{r4, r7, lr}
 800efae:	b08b      	sub	sp, #44	; 0x2c
 800efb0:	af04      	add	r7, sp, #16
 800efb2:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800efb4:	4b6f      	ldr	r3, [pc, #444]	; (800f174 <tcp_listen_input+0x1c8>)
 800efb6:	781b      	ldrb	r3, [r3, #0]
 800efb8:	f003 0304 	and.w	r3, r3, #4
 800efbc:	2b00      	cmp	r3, #0
 800efbe:	f040 80d2 	bne.w	800f166 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800efc2:	687b      	ldr	r3, [r7, #4]
 800efc4:	2b00      	cmp	r3, #0
 800efc6:	d106      	bne.n	800efd6 <tcp_listen_input+0x2a>
 800efc8:	4b6b      	ldr	r3, [pc, #428]	; (800f178 <tcp_listen_input+0x1cc>)
 800efca:	f240 2281 	movw	r2, #641	; 0x281
 800efce:	496b      	ldr	r1, [pc, #428]	; (800f17c <tcp_listen_input+0x1d0>)
 800efd0:	486b      	ldr	r0, [pc, #428]	; (800f180 <tcp_listen_input+0x1d4>)
 800efd2:	f007 fabd 	bl	8016550 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800efd6:	4b67      	ldr	r3, [pc, #412]	; (800f174 <tcp_listen_input+0x1c8>)
 800efd8:	781b      	ldrb	r3, [r3, #0]
 800efda:	f003 0310 	and.w	r3, r3, #16
 800efde:	2b00      	cmp	r3, #0
 800efe0:	d019      	beq.n	800f016 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800efe2:	4b68      	ldr	r3, [pc, #416]	; (800f184 <tcp_listen_input+0x1d8>)
 800efe4:	6819      	ldr	r1, [r3, #0]
 800efe6:	4b68      	ldr	r3, [pc, #416]	; (800f188 <tcp_listen_input+0x1dc>)
 800efe8:	881b      	ldrh	r3, [r3, #0]
 800efea:	461a      	mov	r2, r3
 800efec:	4b67      	ldr	r3, [pc, #412]	; (800f18c <tcp_listen_input+0x1e0>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800eff2:	4b67      	ldr	r3, [pc, #412]	; (800f190 <tcp_listen_input+0x1e4>)
 800eff4:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800eff6:	885b      	ldrh	r3, [r3, #2]
 800eff8:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800effa:	4a65      	ldr	r2, [pc, #404]	; (800f190 <tcp_listen_input+0x1e4>)
 800effc:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800effe:	8812      	ldrh	r2, [r2, #0]
 800f000:	b292      	uxth	r2, r2
 800f002:	9202      	str	r2, [sp, #8]
 800f004:	9301      	str	r3, [sp, #4]
 800f006:	4b63      	ldr	r3, [pc, #396]	; (800f194 <tcp_listen_input+0x1e8>)
 800f008:	9300      	str	r3, [sp, #0]
 800f00a:	4b63      	ldr	r3, [pc, #396]	; (800f198 <tcp_listen_input+0x1ec>)
 800f00c:	4602      	mov	r2, r0
 800f00e:	6878      	ldr	r0, [r7, #4]
 800f010:	f003 fbd8 	bl	80127c4 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800f014:	e0a9      	b.n	800f16a <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800f016:	4b57      	ldr	r3, [pc, #348]	; (800f174 <tcp_listen_input+0x1c8>)
 800f018:	781b      	ldrb	r3, [r3, #0]
 800f01a:	f003 0302 	and.w	r3, r3, #2
 800f01e:	2b00      	cmp	r3, #0
 800f020:	f000 80a3 	beq.w	800f16a <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	7d5b      	ldrb	r3, [r3, #21]
 800f028:	4618      	mov	r0, r3
 800f02a:	f7ff f871 	bl	800e110 <tcp_alloc>
 800f02e:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800f030:	697b      	ldr	r3, [r7, #20]
 800f032:	2b00      	cmp	r3, #0
 800f034:	d111      	bne.n	800f05a <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	699b      	ldr	r3, [r3, #24]
 800f03a:	2b00      	cmp	r3, #0
 800f03c:	d00a      	beq.n	800f054 <tcp_listen_input+0xa8>
 800f03e:	687b      	ldr	r3, [r7, #4]
 800f040:	699b      	ldr	r3, [r3, #24]
 800f042:	687a      	ldr	r2, [r7, #4]
 800f044:	6910      	ldr	r0, [r2, #16]
 800f046:	f04f 32ff 	mov.w	r2, #4294967295
 800f04a:	2100      	movs	r1, #0
 800f04c:	4798      	blx	r3
 800f04e:	4603      	mov	r3, r0
 800f050:	73bb      	strb	r3, [r7, #14]
      return;
 800f052:	e08b      	b.n	800f16c <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800f054:	23f0      	movs	r3, #240	; 0xf0
 800f056:	73bb      	strb	r3, [r7, #14]
      return;
 800f058:	e088      	b.n	800f16c <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800f05a:	4b50      	ldr	r3, [pc, #320]	; (800f19c <tcp_listen_input+0x1f0>)
 800f05c:	695a      	ldr	r2, [r3, #20]
 800f05e:	697b      	ldr	r3, [r7, #20]
 800f060:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800f062:	4b4e      	ldr	r3, [pc, #312]	; (800f19c <tcp_listen_input+0x1f0>)
 800f064:	691a      	ldr	r2, [r3, #16]
 800f066:	697b      	ldr	r3, [r7, #20]
 800f068:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	8ada      	ldrh	r2, [r3, #22]
 800f06e:	697b      	ldr	r3, [r7, #20]
 800f070:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800f072:	4b47      	ldr	r3, [pc, #284]	; (800f190 <tcp_listen_input+0x1e4>)
 800f074:	681b      	ldr	r3, [r3, #0]
 800f076:	881b      	ldrh	r3, [r3, #0]
 800f078:	b29a      	uxth	r2, r3
 800f07a:	697b      	ldr	r3, [r7, #20]
 800f07c:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	2203      	movs	r2, #3
 800f082:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800f084:	4b41      	ldr	r3, [pc, #260]	; (800f18c <tcp_listen_input+0x1e0>)
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	1c5a      	adds	r2, r3, #1
 800f08a:	697b      	ldr	r3, [r7, #20]
 800f08c:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800f08e:	697b      	ldr	r3, [r7, #20]
 800f090:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f092:	697b      	ldr	r3, [r7, #20]
 800f094:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800f096:	6978      	ldr	r0, [r7, #20]
 800f098:	f7ff fa58 	bl	800e54c <tcp_next_iss>
 800f09c:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800f09e:	697b      	ldr	r3, [r7, #20]
 800f0a0:	693a      	ldr	r2, [r7, #16]
 800f0a2:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	693a      	ldr	r2, [r7, #16]
 800f0a8:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800f0aa:	697b      	ldr	r3, [r7, #20]
 800f0ac:	693a      	ldr	r2, [r7, #16]
 800f0ae:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800f0b0:	697b      	ldr	r3, [r7, #20]
 800f0b2:	693a      	ldr	r2, [r7, #16]
 800f0b4:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800f0b6:	4b35      	ldr	r3, [pc, #212]	; (800f18c <tcp_listen_input+0x1e0>)
 800f0b8:	681b      	ldr	r3, [r3, #0]
 800f0ba:	1e5a      	subs	r2, r3, #1
 800f0bc:	697b      	ldr	r3, [r7, #20]
 800f0be:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800f0c0:	687b      	ldr	r3, [r7, #4]
 800f0c2:	691a      	ldr	r2, [r3, #16]
 800f0c4:	697b      	ldr	r3, [r7, #20]
 800f0c6:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800f0c8:	697b      	ldr	r3, [r7, #20]
 800f0ca:	687a      	ldr	r2, [r7, #4]
 800f0cc:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800f0ce:	687b      	ldr	r3, [r7, #4]
 800f0d0:	7a5b      	ldrb	r3, [r3, #9]
 800f0d2:	f003 030c 	and.w	r3, r3, #12
 800f0d6:	b2da      	uxtb	r2, r3
 800f0d8:	697b      	ldr	r3, [r7, #20]
 800f0da:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800f0dc:	687b      	ldr	r3, [r7, #4]
 800f0de:	7a1a      	ldrb	r2, [r3, #8]
 800f0e0:	697b      	ldr	r3, [r7, #20]
 800f0e2:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800f0e4:	4b2e      	ldr	r3, [pc, #184]	; (800f1a0 <tcp_listen_input+0x1f4>)
 800f0e6:	681a      	ldr	r2, [r3, #0]
 800f0e8:	697b      	ldr	r3, [r7, #20]
 800f0ea:	60da      	str	r2, [r3, #12]
 800f0ec:	4a2c      	ldr	r2, [pc, #176]	; (800f1a0 <tcp_listen_input+0x1f4>)
 800f0ee:	697b      	ldr	r3, [r7, #20]
 800f0f0:	6013      	str	r3, [r2, #0]
 800f0f2:	f003 fd29 	bl	8012b48 <tcp_timer_needed>
 800f0f6:	4b2b      	ldr	r3, [pc, #172]	; (800f1a4 <tcp_listen_input+0x1f8>)
 800f0f8:	2201      	movs	r2, #1
 800f0fa:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800f0fc:	6978      	ldr	r0, [r7, #20]
 800f0fe:	f001 fd8f 	bl	8010c20 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800f102:	4b23      	ldr	r3, [pc, #140]	; (800f190 <tcp_listen_input+0x1e4>)
 800f104:	681b      	ldr	r3, [r3, #0]
 800f106:	89db      	ldrh	r3, [r3, #14]
 800f108:	b29a      	uxth	r2, r3
 800f10a:	697b      	ldr	r3, [r7, #20]
 800f10c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800f110:	697b      	ldr	r3, [r7, #20]
 800f112:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f116:	697b      	ldr	r3, [r7, #20]
 800f118:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800f11c:	697b      	ldr	r3, [r7, #20]
 800f11e:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f120:	697b      	ldr	r3, [r7, #20]
 800f122:	3304      	adds	r3, #4
 800f124:	4618      	mov	r0, r3
 800f126:	f005 fc0f 	bl	8014948 <ip4_route>
 800f12a:	4601      	mov	r1, r0
 800f12c:	697b      	ldr	r3, [r7, #20]
 800f12e:	3304      	adds	r3, #4
 800f130:	461a      	mov	r2, r3
 800f132:	4620      	mov	r0, r4
 800f134:	f7ff fa30 	bl	800e598 <tcp_eff_send_mss_netif>
 800f138:	4603      	mov	r3, r0
 800f13a:	461a      	mov	r2, r3
 800f13c:	697b      	ldr	r3, [r7, #20]
 800f13e:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800f140:	2112      	movs	r1, #18
 800f142:	6978      	ldr	r0, [r7, #20]
 800f144:	f002 fc9c 	bl	8011a80 <tcp_enqueue_flags>
 800f148:	4603      	mov	r3, r0
 800f14a:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800f14c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f150:	2b00      	cmp	r3, #0
 800f152:	d004      	beq.n	800f15e <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800f154:	2100      	movs	r1, #0
 800f156:	6978      	ldr	r0, [r7, #20]
 800f158:	f7fd fed2 	bl	800cf00 <tcp_abandon>
      return;
 800f15c:	e006      	b.n	800f16c <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800f15e:	6978      	ldr	r0, [r7, #20]
 800f160:	f002 fd7c 	bl	8011c5c <tcp_output>
  return;
 800f164:	e001      	b.n	800f16a <tcp_listen_input+0x1be>
    return;
 800f166:	bf00      	nop
 800f168:	e000      	b.n	800f16c <tcp_listen_input+0x1c0>
  return;
 800f16a:	bf00      	nop
}
 800f16c:	371c      	adds	r7, #28
 800f16e:	46bd      	mov	sp, r7
 800f170:	bd90      	pop	{r4, r7, pc}
 800f172:	bf00      	nop
 800f174:	2000d17c 	.word	0x2000d17c
 800f178:	080192a0 	.word	0x080192a0
 800f17c:	08019498 	.word	0x08019498
 800f180:	080192ec 	.word	0x080192ec
 800f184:	2000d174 	.word	0x2000d174
 800f188:	2000d17a 	.word	0x2000d17a
 800f18c:	2000d170 	.word	0x2000d170
 800f190:	2000d160 	.word	0x2000d160
 800f194:	20009268 	.word	0x20009268
 800f198:	2000926c 	.word	0x2000926c
 800f19c:	20009258 	.word	0x20009258
 800f1a0:	2000d144 	.word	0x2000d144
 800f1a4:	2000d14c 	.word	0x2000d14c

0800f1a8 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800f1a8:	b580      	push	{r7, lr}
 800f1aa:	b086      	sub	sp, #24
 800f1ac:	af04      	add	r7, sp, #16
 800f1ae:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800f1b0:	4b2f      	ldr	r3, [pc, #188]	; (800f270 <tcp_timewait_input+0xc8>)
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	f003 0304 	and.w	r3, r3, #4
 800f1b8:	2b00      	cmp	r3, #0
 800f1ba:	d153      	bne.n	800f264 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800f1bc:	687b      	ldr	r3, [r7, #4]
 800f1be:	2b00      	cmp	r3, #0
 800f1c0:	d106      	bne.n	800f1d0 <tcp_timewait_input+0x28>
 800f1c2:	4b2c      	ldr	r3, [pc, #176]	; (800f274 <tcp_timewait_input+0xcc>)
 800f1c4:	f240 22ee 	movw	r2, #750	; 0x2ee
 800f1c8:	492b      	ldr	r1, [pc, #172]	; (800f278 <tcp_timewait_input+0xd0>)
 800f1ca:	482c      	ldr	r0, [pc, #176]	; (800f27c <tcp_timewait_input+0xd4>)
 800f1cc:	f007 f9c0 	bl	8016550 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800f1d0:	4b27      	ldr	r3, [pc, #156]	; (800f270 <tcp_timewait_input+0xc8>)
 800f1d2:	781b      	ldrb	r3, [r3, #0]
 800f1d4:	f003 0302 	and.w	r3, r3, #2
 800f1d8:	2b00      	cmp	r3, #0
 800f1da:	d02a      	beq.n	800f232 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800f1dc:	4b28      	ldr	r3, [pc, #160]	; (800f280 <tcp_timewait_input+0xd8>)
 800f1de:	681a      	ldr	r2, [r3, #0]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1e4:	1ad3      	subs	r3, r2, r3
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	db2d      	blt.n	800f246 <tcp_timewait_input+0x9e>
 800f1ea:	4b25      	ldr	r3, [pc, #148]	; (800f280 <tcp_timewait_input+0xd8>)
 800f1ec:	681a      	ldr	r2, [r3, #0]
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f1f2:	6879      	ldr	r1, [r7, #4]
 800f1f4:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f1f6:	440b      	add	r3, r1
 800f1f8:	1ad3      	subs	r3, r2, r3
 800f1fa:	2b00      	cmp	r3, #0
 800f1fc:	dc23      	bgt.n	800f246 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f1fe:	4b21      	ldr	r3, [pc, #132]	; (800f284 <tcp_timewait_input+0xdc>)
 800f200:	6819      	ldr	r1, [r3, #0]
 800f202:	4b21      	ldr	r3, [pc, #132]	; (800f288 <tcp_timewait_input+0xe0>)
 800f204:	881b      	ldrh	r3, [r3, #0]
 800f206:	461a      	mov	r2, r3
 800f208:	4b1d      	ldr	r3, [pc, #116]	; (800f280 <tcp_timewait_input+0xd8>)
 800f20a:	681b      	ldr	r3, [r3, #0]
 800f20c:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f20e:	4b1f      	ldr	r3, [pc, #124]	; (800f28c <tcp_timewait_input+0xe4>)
 800f210:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f212:	885b      	ldrh	r3, [r3, #2]
 800f214:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f216:	4a1d      	ldr	r2, [pc, #116]	; (800f28c <tcp_timewait_input+0xe4>)
 800f218:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f21a:	8812      	ldrh	r2, [r2, #0]
 800f21c:	b292      	uxth	r2, r2
 800f21e:	9202      	str	r2, [sp, #8]
 800f220:	9301      	str	r3, [sp, #4]
 800f222:	4b1b      	ldr	r3, [pc, #108]	; (800f290 <tcp_timewait_input+0xe8>)
 800f224:	9300      	str	r3, [sp, #0]
 800f226:	4b1b      	ldr	r3, [pc, #108]	; (800f294 <tcp_timewait_input+0xec>)
 800f228:	4602      	mov	r2, r0
 800f22a:	6878      	ldr	r0, [r7, #4]
 800f22c:	f003 faca 	bl	80127c4 <tcp_rst>
      return;
 800f230:	e01b      	b.n	800f26a <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 800f232:	4b0f      	ldr	r3, [pc, #60]	; (800f270 <tcp_timewait_input+0xc8>)
 800f234:	781b      	ldrb	r3, [r3, #0]
 800f236:	f003 0301 	and.w	r3, r3, #1
 800f23a:	2b00      	cmp	r3, #0
 800f23c:	d003      	beq.n	800f246 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 800f23e:	4b16      	ldr	r3, [pc, #88]	; (800f298 <tcp_timewait_input+0xf0>)
 800f240:	681a      	ldr	r2, [r3, #0]
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 800f246:	4b10      	ldr	r3, [pc, #64]	; (800f288 <tcp_timewait_input+0xe0>)
 800f248:	881b      	ldrh	r3, [r3, #0]
 800f24a:	2b00      	cmp	r3, #0
 800f24c:	d00c      	beq.n	800f268 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	8b5b      	ldrh	r3, [r3, #26]
 800f252:	f043 0302 	orr.w	r3, r3, #2
 800f256:	b29a      	uxth	r2, r3
 800f258:	687b      	ldr	r3, [r7, #4]
 800f25a:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f25c:	6878      	ldr	r0, [r7, #4]
 800f25e:	f002 fcfd 	bl	8011c5c <tcp_output>
  }
  return;
 800f262:	e001      	b.n	800f268 <tcp_timewait_input+0xc0>
    return;
 800f264:	bf00      	nop
 800f266:	e000      	b.n	800f26a <tcp_timewait_input+0xc2>
  return;
 800f268:	bf00      	nop
}
 800f26a:	3708      	adds	r7, #8
 800f26c:	46bd      	mov	sp, r7
 800f26e:	bd80      	pop	{r7, pc}
 800f270:	2000d17c 	.word	0x2000d17c
 800f274:	080192a0 	.word	0x080192a0
 800f278:	080194b8 	.word	0x080194b8
 800f27c:	080192ec 	.word	0x080192ec
 800f280:	2000d170 	.word	0x2000d170
 800f284:	2000d174 	.word	0x2000d174
 800f288:	2000d17a 	.word	0x2000d17a
 800f28c:	2000d160 	.word	0x2000d160
 800f290:	20009268 	.word	0x20009268
 800f294:	2000926c 	.word	0x2000926c
 800f298:	2000d138 	.word	0x2000d138

0800f29c <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 800f29c:	b590      	push	{r4, r7, lr}
 800f29e:	b08d      	sub	sp, #52	; 0x34
 800f2a0:	af04      	add	r7, sp, #16
 800f2a2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 800f2a4:	2300      	movs	r3, #0
 800f2a6:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 800f2a8:	2300      	movs	r3, #0
 800f2aa:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	2b00      	cmp	r3, #0
 800f2b0:	d106      	bne.n	800f2c0 <tcp_process+0x24>
 800f2b2:	4b9d      	ldr	r3, [pc, #628]	; (800f528 <tcp_process+0x28c>)
 800f2b4:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800f2b8:	499c      	ldr	r1, [pc, #624]	; (800f52c <tcp_process+0x290>)
 800f2ba:	489d      	ldr	r0, [pc, #628]	; (800f530 <tcp_process+0x294>)
 800f2bc:	f007 f948 	bl	8016550 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 800f2c0:	4b9c      	ldr	r3, [pc, #624]	; (800f534 <tcp_process+0x298>)
 800f2c2:	781b      	ldrb	r3, [r3, #0]
 800f2c4:	f003 0304 	and.w	r3, r3, #4
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d04e      	beq.n	800f36a <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 800f2cc:	687b      	ldr	r3, [r7, #4]
 800f2ce:	7d1b      	ldrb	r3, [r3, #20]
 800f2d0:	2b02      	cmp	r3, #2
 800f2d2:	d108      	bne.n	800f2e6 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 800f2d4:	687b      	ldr	r3, [r7, #4]
 800f2d6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f2d8:	4b97      	ldr	r3, [pc, #604]	; (800f538 <tcp_process+0x29c>)
 800f2da:	681b      	ldr	r3, [r3, #0]
 800f2dc:	429a      	cmp	r2, r3
 800f2de:	d123      	bne.n	800f328 <tcp_process+0x8c>
        acceptable = 1;
 800f2e0:	2301      	movs	r3, #1
 800f2e2:	76fb      	strb	r3, [r7, #27]
 800f2e4:	e020      	b.n	800f328 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f2ea:	4b94      	ldr	r3, [pc, #592]	; (800f53c <tcp_process+0x2a0>)
 800f2ec:	681b      	ldr	r3, [r3, #0]
 800f2ee:	429a      	cmp	r2, r3
 800f2f0:	d102      	bne.n	800f2f8 <tcp_process+0x5c>
        acceptable = 1;
 800f2f2:	2301      	movs	r3, #1
 800f2f4:	76fb      	strb	r3, [r7, #27]
 800f2f6:	e017      	b.n	800f328 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 800f2f8:	4b90      	ldr	r3, [pc, #576]	; (800f53c <tcp_process+0x2a0>)
 800f2fa:	681a      	ldr	r2, [r3, #0]
 800f2fc:	687b      	ldr	r3, [r7, #4]
 800f2fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f300:	1ad3      	subs	r3, r2, r3
 800f302:	2b00      	cmp	r3, #0
 800f304:	db10      	blt.n	800f328 <tcp_process+0x8c>
 800f306:	4b8d      	ldr	r3, [pc, #564]	; (800f53c <tcp_process+0x2a0>)
 800f308:	681a      	ldr	r2, [r3, #0]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f30e:	6879      	ldr	r1, [r7, #4]
 800f310:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800f312:	440b      	add	r3, r1
 800f314:	1ad3      	subs	r3, r2, r3
 800f316:	2b00      	cmp	r3, #0
 800f318:	dc06      	bgt.n	800f328 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 800f31a:	687b      	ldr	r3, [r7, #4]
 800f31c:	8b5b      	ldrh	r3, [r3, #26]
 800f31e:	f043 0302 	orr.w	r3, r3, #2
 800f322:	b29a      	uxth	r2, r3
 800f324:	687b      	ldr	r3, [r7, #4]
 800f326:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 800f328:	7efb      	ldrb	r3, [r7, #27]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d01b      	beq.n	800f366 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	7d1b      	ldrb	r3, [r3, #20]
 800f332:	2b00      	cmp	r3, #0
 800f334:	d106      	bne.n	800f344 <tcp_process+0xa8>
 800f336:	4b7c      	ldr	r3, [pc, #496]	; (800f528 <tcp_process+0x28c>)
 800f338:	f44f 724e 	mov.w	r2, #824	; 0x338
 800f33c:	4980      	ldr	r1, [pc, #512]	; (800f540 <tcp_process+0x2a4>)
 800f33e:	487c      	ldr	r0, [pc, #496]	; (800f530 <tcp_process+0x294>)
 800f340:	f007 f906 	bl	8016550 <iprintf>
      recv_flags |= TF_RESET;
 800f344:	4b7f      	ldr	r3, [pc, #508]	; (800f544 <tcp_process+0x2a8>)
 800f346:	781b      	ldrb	r3, [r3, #0]
 800f348:	f043 0308 	orr.w	r3, r3, #8
 800f34c:	b2da      	uxtb	r2, r3
 800f34e:	4b7d      	ldr	r3, [pc, #500]	; (800f544 <tcp_process+0x2a8>)
 800f350:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	8b5b      	ldrh	r3, [r3, #26]
 800f356:	f023 0301 	bic.w	r3, r3, #1
 800f35a:	b29a      	uxth	r2, r3
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 800f360:	f06f 030d 	mvn.w	r3, #13
 800f364:	e37a      	b.n	800fa5c <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 800f366:	2300      	movs	r3, #0
 800f368:	e378      	b.n	800fa5c <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 800f36a:	4b72      	ldr	r3, [pc, #456]	; (800f534 <tcp_process+0x298>)
 800f36c:	781b      	ldrb	r3, [r3, #0]
 800f36e:	f003 0302 	and.w	r3, r3, #2
 800f372:	2b00      	cmp	r3, #0
 800f374:	d010      	beq.n	800f398 <tcp_process+0xfc>
 800f376:	687b      	ldr	r3, [r7, #4]
 800f378:	7d1b      	ldrb	r3, [r3, #20]
 800f37a:	2b02      	cmp	r3, #2
 800f37c:	d00c      	beq.n	800f398 <tcp_process+0xfc>
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	7d1b      	ldrb	r3, [r3, #20]
 800f382:	2b03      	cmp	r3, #3
 800f384:	d008      	beq.n	800f398 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 800f386:	687b      	ldr	r3, [r7, #4]
 800f388:	8b5b      	ldrh	r3, [r3, #26]
 800f38a:	f043 0302 	orr.w	r3, r3, #2
 800f38e:	b29a      	uxth	r2, r3
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 800f394:	2300      	movs	r3, #0
 800f396:	e361      	b.n	800fa5c <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	8b5b      	ldrh	r3, [r3, #26]
 800f39c:	f003 0310 	and.w	r3, r3, #16
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	d103      	bne.n	800f3ac <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 800f3a4:	4b68      	ldr	r3, [pc, #416]	; (800f548 <tcp_process+0x2ac>)
 800f3a6:	681a      	ldr	r2, [r3, #0]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 800f3ac:	687b      	ldr	r3, [r7, #4]
 800f3ae:	2200      	movs	r2, #0
 800f3b0:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	2200      	movs	r2, #0
 800f3b8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 800f3bc:	6878      	ldr	r0, [r7, #4]
 800f3be:	f001 fc2f 	bl	8010c20 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	7d1b      	ldrb	r3, [r3, #20]
 800f3c6:	3b02      	subs	r3, #2
 800f3c8:	2b07      	cmp	r3, #7
 800f3ca:	f200 8337 	bhi.w	800fa3c <tcp_process+0x7a0>
 800f3ce:	a201      	add	r2, pc, #4	; (adr r2, 800f3d4 <tcp_process+0x138>)
 800f3d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f3d4:	0800f3f5 	.word	0x0800f3f5
 800f3d8:	0800f625 	.word	0x0800f625
 800f3dc:	0800f79d 	.word	0x0800f79d
 800f3e0:	0800f7c7 	.word	0x0800f7c7
 800f3e4:	0800f8eb 	.word	0x0800f8eb
 800f3e8:	0800f79d 	.word	0x0800f79d
 800f3ec:	0800f977 	.word	0x0800f977
 800f3f0:	0800fa07 	.word	0x0800fa07
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 800f3f4:	4b4f      	ldr	r3, [pc, #316]	; (800f534 <tcp_process+0x298>)
 800f3f6:	781b      	ldrb	r3, [r3, #0]
 800f3f8:	f003 0310 	and.w	r3, r3, #16
 800f3fc:	2b00      	cmp	r3, #0
 800f3fe:	f000 80e4 	beq.w	800f5ca <tcp_process+0x32e>
 800f402:	4b4c      	ldr	r3, [pc, #304]	; (800f534 <tcp_process+0x298>)
 800f404:	781b      	ldrb	r3, [r3, #0]
 800f406:	f003 0302 	and.w	r3, r3, #2
 800f40a:	2b00      	cmp	r3, #0
 800f40c:	f000 80dd 	beq.w	800f5ca <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f414:	1c5a      	adds	r2, r3, #1
 800f416:	4b48      	ldr	r3, [pc, #288]	; (800f538 <tcp_process+0x29c>)
 800f418:	681b      	ldr	r3, [r3, #0]
 800f41a:	429a      	cmp	r2, r3
 800f41c:	f040 80d5 	bne.w	800f5ca <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 800f420:	4b46      	ldr	r3, [pc, #280]	; (800f53c <tcp_process+0x2a0>)
 800f422:	681b      	ldr	r3, [r3, #0]
 800f424:	1c5a      	adds	r2, r3, #1
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800f42a:	687b      	ldr	r3, [r7, #4]
 800f42c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 800f432:	4b41      	ldr	r3, [pc, #260]	; (800f538 <tcp_process+0x29c>)
 800f434:	681a      	ldr	r2, [r3, #0]
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 800f43a:	4b44      	ldr	r3, [pc, #272]	; (800f54c <tcp_process+0x2b0>)
 800f43c:	681b      	ldr	r3, [r3, #0]
 800f43e:	89db      	ldrh	r3, [r3, #14]
 800f440:	b29a      	uxth	r2, r3
 800f442:	687b      	ldr	r3, [r7, #4]
 800f444:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 800f448:	687b      	ldr	r3, [r7, #4]
 800f44a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 800f454:	4b39      	ldr	r3, [pc, #228]	; (800f53c <tcp_process+0x2a0>)
 800f456:	681b      	ldr	r3, [r3, #0]
 800f458:	1e5a      	subs	r2, r3, #1
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 800f45e:	687b      	ldr	r3, [r7, #4]
 800f460:	2204      	movs	r2, #4
 800f462:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	3304      	adds	r3, #4
 800f46c:	4618      	mov	r0, r3
 800f46e:	f005 fa6b 	bl	8014948 <ip4_route>
 800f472:	4601      	mov	r1, r0
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	3304      	adds	r3, #4
 800f478:	461a      	mov	r2, r3
 800f47a:	4620      	mov	r0, r4
 800f47c:	f7ff f88c 	bl	800e598 <tcp_eff_send_mss_netif>
 800f480:	4603      	mov	r3, r0
 800f482:	461a      	mov	r2, r3
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f48c:	009a      	lsls	r2, r3, #2
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f492:	005b      	lsls	r3, r3, #1
 800f494:	f241 111c 	movw	r1, #4380	; 0x111c
 800f498:	428b      	cmp	r3, r1
 800f49a:	bf38      	it	cc
 800f49c:	460b      	movcc	r3, r1
 800f49e:	429a      	cmp	r2, r3
 800f4a0:	d204      	bcs.n	800f4ac <tcp_process+0x210>
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4a6:	009b      	lsls	r3, r3, #2
 800f4a8:	b29b      	uxth	r3, r3
 800f4aa:	e00d      	b.n	800f4c8 <tcp_process+0x22c>
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4b0:	005b      	lsls	r3, r3, #1
 800f4b2:	f241 121c 	movw	r2, #4380	; 0x111c
 800f4b6:	4293      	cmp	r3, r2
 800f4b8:	d904      	bls.n	800f4c4 <tcp_process+0x228>
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f4be:	005b      	lsls	r3, r3, #1
 800f4c0:	b29b      	uxth	r3, r3
 800f4c2:	e001      	b.n	800f4c8 <tcp_process+0x22c>
 800f4c4:	f241 131c 	movw	r3, #4380	; 0x111c
 800f4c8:	687a      	ldr	r2, [r7, #4]
 800f4ca:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4d4:	2b00      	cmp	r3, #0
 800f4d6:	d106      	bne.n	800f4e6 <tcp_process+0x24a>
 800f4d8:	4b13      	ldr	r3, [pc, #76]	; (800f528 <tcp_process+0x28c>)
 800f4da:	f44f 725b 	mov.w	r2, #876	; 0x36c
 800f4de:	491c      	ldr	r1, [pc, #112]	; (800f550 <tcp_process+0x2b4>)
 800f4e0:	4813      	ldr	r0, [pc, #76]	; (800f530 <tcp_process+0x294>)
 800f4e2:	f007 f835 	bl	8016550 <iprintf>
        --pcb->snd_queuelen;
 800f4e6:	687b      	ldr	r3, [r7, #4]
 800f4e8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800f4ec:	3b01      	subs	r3, #1
 800f4ee:	b29a      	uxth	r2, r3
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f4fa:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 800f4fc:	69fb      	ldr	r3, [r7, #28]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d12a      	bne.n	800f558 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 800f502:	687b      	ldr	r3, [r7, #4]
 800f504:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f506:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 800f508:	69fb      	ldr	r3, [r7, #28]
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	d106      	bne.n	800f51c <tcp_process+0x280>
 800f50e:	4b06      	ldr	r3, [pc, #24]	; (800f528 <tcp_process+0x28c>)
 800f510:	f44f 725d 	mov.w	r2, #884	; 0x374
 800f514:	490f      	ldr	r1, [pc, #60]	; (800f554 <tcp_process+0x2b8>)
 800f516:	4806      	ldr	r0, [pc, #24]	; (800f530 <tcp_process+0x294>)
 800f518:	f007 f81a 	bl	8016550 <iprintf>
          pcb->unsent = rseg->next;
 800f51c:	69fb      	ldr	r3, [r7, #28]
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	66da      	str	r2, [r3, #108]	; 0x6c
 800f524:	e01c      	b.n	800f560 <tcp_process+0x2c4>
 800f526:	bf00      	nop
 800f528:	080192a0 	.word	0x080192a0
 800f52c:	080194d8 	.word	0x080194d8
 800f530:	080192ec 	.word	0x080192ec
 800f534:	2000d17c 	.word	0x2000d17c
 800f538:	2000d174 	.word	0x2000d174
 800f53c:	2000d170 	.word	0x2000d170
 800f540:	080194f4 	.word	0x080194f4
 800f544:	2000d17d 	.word	0x2000d17d
 800f548:	2000d138 	.word	0x2000d138
 800f54c:	2000d160 	.word	0x2000d160
 800f550:	08019514 	.word	0x08019514
 800f554:	0801952c 	.word	0x0801952c
        } else {
          pcb->unacked = rseg->next;
 800f558:	69fb      	ldr	r3, [r7, #28]
 800f55a:	681a      	ldr	r2, [r3, #0]
 800f55c:	687b      	ldr	r3, [r7, #4]
 800f55e:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 800f560:	69f8      	ldr	r0, [r7, #28]
 800f562:	f7fe fc6c 	bl	800de3e <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 800f566:	687b      	ldr	r3, [r7, #4]
 800f568:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d104      	bne.n	800f578 <tcp_process+0x2dc>
          pcb->rtime = -1;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f574:	861a      	strh	r2, [r3, #48]	; 0x30
 800f576:	e006      	b.n	800f586 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 800f578:	687b      	ldr	r3, [r7, #4]
 800f57a:	2200      	movs	r2, #0
 800f57c:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2200      	movs	r2, #0
 800f582:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d00a      	beq.n	800f5a6 <tcp_process+0x30a>
 800f590:	687b      	ldr	r3, [r7, #4]
 800f592:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800f596:	687a      	ldr	r2, [r7, #4]
 800f598:	6910      	ldr	r0, [r2, #16]
 800f59a:	2200      	movs	r2, #0
 800f59c:	6879      	ldr	r1, [r7, #4]
 800f59e:	4798      	blx	r3
 800f5a0:	4603      	mov	r3, r0
 800f5a2:	76bb      	strb	r3, [r7, #26]
 800f5a4:	e001      	b.n	800f5aa <tcp_process+0x30e>
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 800f5aa:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f5ae:	f113 0f0d 	cmn.w	r3, #13
 800f5b2:	d102      	bne.n	800f5ba <tcp_process+0x31e>
          return ERR_ABRT;
 800f5b4:	f06f 030c 	mvn.w	r3, #12
 800f5b8:	e250      	b.n	800fa5c <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 800f5ba:	687b      	ldr	r3, [r7, #4]
 800f5bc:	8b5b      	ldrh	r3, [r3, #26]
 800f5be:	f043 0302 	orr.w	r3, r3, #2
 800f5c2:	b29a      	uxth	r2, r3
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 800f5c8:	e23a      	b.n	800fa40 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 800f5ca:	4b98      	ldr	r3, [pc, #608]	; (800f82c <tcp_process+0x590>)
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f003 0310 	and.w	r3, r3, #16
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	f000 8234 	beq.w	800fa40 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5d8:	4b95      	ldr	r3, [pc, #596]	; (800f830 <tcp_process+0x594>)
 800f5da:	6819      	ldr	r1, [r3, #0]
 800f5dc:	4b95      	ldr	r3, [pc, #596]	; (800f834 <tcp_process+0x598>)
 800f5de:	881b      	ldrh	r3, [r3, #0]
 800f5e0:	461a      	mov	r2, r3
 800f5e2:	4b95      	ldr	r3, [pc, #596]	; (800f838 <tcp_process+0x59c>)
 800f5e4:	681b      	ldr	r3, [r3, #0]
 800f5e6:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5e8:	4b94      	ldr	r3, [pc, #592]	; (800f83c <tcp_process+0x5a0>)
 800f5ea:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5ec:	885b      	ldrh	r3, [r3, #2]
 800f5ee:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f5f0:	4a92      	ldr	r2, [pc, #584]	; (800f83c <tcp_process+0x5a0>)
 800f5f2:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f5f4:	8812      	ldrh	r2, [r2, #0]
 800f5f6:	b292      	uxth	r2, r2
 800f5f8:	9202      	str	r2, [sp, #8]
 800f5fa:	9301      	str	r3, [sp, #4]
 800f5fc:	4b90      	ldr	r3, [pc, #576]	; (800f840 <tcp_process+0x5a4>)
 800f5fe:	9300      	str	r3, [sp, #0]
 800f600:	4b90      	ldr	r3, [pc, #576]	; (800f844 <tcp_process+0x5a8>)
 800f602:	4602      	mov	r2, r0
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f003 f8dd 	bl	80127c4 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800f610:	2b05      	cmp	r3, #5
 800f612:	f200 8215 	bhi.w	800fa40 <tcp_process+0x7a4>
          pcb->rtime = 0;
 800f616:	687b      	ldr	r3, [r7, #4]
 800f618:	2200      	movs	r2, #0
 800f61a:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 800f61c:	6878      	ldr	r0, [r7, #4]
 800f61e:	f002 fea7 	bl	8012370 <tcp_rexmit_rto>
      break;
 800f622:	e20d      	b.n	800fa40 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 800f624:	4b81      	ldr	r3, [pc, #516]	; (800f82c <tcp_process+0x590>)
 800f626:	781b      	ldrb	r3, [r3, #0]
 800f628:	f003 0310 	and.w	r3, r3, #16
 800f62c:	2b00      	cmp	r3, #0
 800f62e:	f000 80a1 	beq.w	800f774 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800f632:	4b7f      	ldr	r3, [pc, #508]	; (800f830 <tcp_process+0x594>)
 800f634:	681a      	ldr	r2, [r3, #0]
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f63a:	1ad3      	subs	r3, r2, r3
 800f63c:	3b01      	subs	r3, #1
 800f63e:	2b00      	cmp	r3, #0
 800f640:	db7e      	blt.n	800f740 <tcp_process+0x4a4>
 800f642:	4b7b      	ldr	r3, [pc, #492]	; (800f830 <tcp_process+0x594>)
 800f644:	681a      	ldr	r2, [r3, #0]
 800f646:	687b      	ldr	r3, [r7, #4]
 800f648:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	dc77      	bgt.n	800f740 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2204      	movs	r2, #4
 800f654:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f65a:	2b00      	cmp	r3, #0
 800f65c:	d102      	bne.n	800f664 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 800f65e:	23fa      	movs	r3, #250	; 0xfa
 800f660:	76bb      	strb	r3, [r7, #26]
 800f662:	e01d      	b.n	800f6a0 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 800f664:	687b      	ldr	r3, [r7, #4]
 800f666:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f668:	699b      	ldr	r3, [r3, #24]
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d106      	bne.n	800f67c <tcp_process+0x3e0>
 800f66e:	4b76      	ldr	r3, [pc, #472]	; (800f848 <tcp_process+0x5ac>)
 800f670:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 800f674:	4975      	ldr	r1, [pc, #468]	; (800f84c <tcp_process+0x5b0>)
 800f676:	4876      	ldr	r0, [pc, #472]	; (800f850 <tcp_process+0x5b4>)
 800f678:	f006 ff6a 	bl	8016550 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f680:	699b      	ldr	r3, [r3, #24]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d00a      	beq.n	800f69c <tcp_process+0x400>
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800f68a:	699b      	ldr	r3, [r3, #24]
 800f68c:	687a      	ldr	r2, [r7, #4]
 800f68e:	6910      	ldr	r0, [r2, #16]
 800f690:	2200      	movs	r2, #0
 800f692:	6879      	ldr	r1, [r7, #4]
 800f694:	4798      	blx	r3
 800f696:	4603      	mov	r3, r0
 800f698:	76bb      	strb	r3, [r7, #26]
 800f69a:	e001      	b.n	800f6a0 <tcp_process+0x404>
 800f69c:	23f0      	movs	r3, #240	; 0xf0
 800f69e:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 800f6a0:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d00a      	beq.n	800f6be <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 800f6a8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 800f6ac:	f113 0f0d 	cmn.w	r3, #13
 800f6b0:	d002      	beq.n	800f6b8 <tcp_process+0x41c>
              tcp_abort(pcb);
 800f6b2:	6878      	ldr	r0, [r7, #4]
 800f6b4:	f7fd fce2 	bl	800d07c <tcp_abort>
            }
            return ERR_ABRT;
 800f6b8:	f06f 030c 	mvn.w	r3, #12
 800f6bc:	e1ce      	b.n	800fa5c <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f000 fae0 	bl	800fc84 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 800f6c4:	4b63      	ldr	r3, [pc, #396]	; (800f854 <tcp_process+0x5b8>)
 800f6c6:	881b      	ldrh	r3, [r3, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d005      	beq.n	800f6d8 <tcp_process+0x43c>
            recv_acked--;
 800f6cc:	4b61      	ldr	r3, [pc, #388]	; (800f854 <tcp_process+0x5b8>)
 800f6ce:	881b      	ldrh	r3, [r3, #0]
 800f6d0:	3b01      	subs	r3, #1
 800f6d2:	b29a      	uxth	r2, r3
 800f6d4:	4b5f      	ldr	r3, [pc, #380]	; (800f854 <tcp_process+0x5b8>)
 800f6d6:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 800f6d8:	687b      	ldr	r3, [r7, #4]
 800f6da:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6dc:	009a      	lsls	r2, r3, #2
 800f6de:	687b      	ldr	r3, [r7, #4]
 800f6e0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6e2:	005b      	lsls	r3, r3, #1
 800f6e4:	f241 111c 	movw	r1, #4380	; 0x111c
 800f6e8:	428b      	cmp	r3, r1
 800f6ea:	bf38      	it	cc
 800f6ec:	460b      	movcc	r3, r1
 800f6ee:	429a      	cmp	r2, r3
 800f6f0:	d204      	bcs.n	800f6fc <tcp_process+0x460>
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	b29b      	uxth	r3, r3
 800f6fa:	e00d      	b.n	800f718 <tcp_process+0x47c>
 800f6fc:	687b      	ldr	r3, [r7, #4]
 800f6fe:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f700:	005b      	lsls	r3, r3, #1
 800f702:	f241 121c 	movw	r2, #4380	; 0x111c
 800f706:	4293      	cmp	r3, r2
 800f708:	d904      	bls.n	800f714 <tcp_process+0x478>
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800f70e:	005b      	lsls	r3, r3, #1
 800f710:	b29b      	uxth	r3, r3
 800f712:	e001      	b.n	800f718 <tcp_process+0x47c>
 800f714:	f241 131c 	movw	r3, #4380	; 0x111c
 800f718:	687a      	ldr	r2, [r7, #4]
 800f71a:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 800f71e:	4b4e      	ldr	r3, [pc, #312]	; (800f858 <tcp_process+0x5bc>)
 800f720:	781b      	ldrb	r3, [r3, #0]
 800f722:	f003 0320 	and.w	r3, r3, #32
 800f726:	2b00      	cmp	r3, #0
 800f728:	d037      	beq.n	800f79a <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 800f72a:	687b      	ldr	r3, [r7, #4]
 800f72c:	8b5b      	ldrh	r3, [r3, #26]
 800f72e:	f043 0302 	orr.w	r3, r3, #2
 800f732:	b29a      	uxth	r2, r3
 800f734:	687b      	ldr	r3, [r7, #4]
 800f736:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2207      	movs	r2, #7
 800f73c:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 800f73e:	e02c      	b.n	800f79a <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f740:	4b3b      	ldr	r3, [pc, #236]	; (800f830 <tcp_process+0x594>)
 800f742:	6819      	ldr	r1, [r3, #0]
 800f744:	4b3b      	ldr	r3, [pc, #236]	; (800f834 <tcp_process+0x598>)
 800f746:	881b      	ldrh	r3, [r3, #0]
 800f748:	461a      	mov	r2, r3
 800f74a:	4b3b      	ldr	r3, [pc, #236]	; (800f838 <tcp_process+0x59c>)
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f750:	4b3a      	ldr	r3, [pc, #232]	; (800f83c <tcp_process+0x5a0>)
 800f752:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f754:	885b      	ldrh	r3, [r3, #2]
 800f756:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800f758:	4a38      	ldr	r2, [pc, #224]	; (800f83c <tcp_process+0x5a0>)
 800f75a:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800f75c:	8812      	ldrh	r2, [r2, #0]
 800f75e:	b292      	uxth	r2, r2
 800f760:	9202      	str	r2, [sp, #8]
 800f762:	9301      	str	r3, [sp, #4]
 800f764:	4b36      	ldr	r3, [pc, #216]	; (800f840 <tcp_process+0x5a4>)
 800f766:	9300      	str	r3, [sp, #0]
 800f768:	4b36      	ldr	r3, [pc, #216]	; (800f844 <tcp_process+0x5a8>)
 800f76a:	4602      	mov	r2, r0
 800f76c:	6878      	ldr	r0, [r7, #4]
 800f76e:	f003 f829 	bl	80127c4 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 800f772:	e167      	b.n	800fa44 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 800f774:	4b2d      	ldr	r3, [pc, #180]	; (800f82c <tcp_process+0x590>)
 800f776:	781b      	ldrb	r3, [r3, #0]
 800f778:	f003 0302 	and.w	r3, r3, #2
 800f77c:	2b00      	cmp	r3, #0
 800f77e:	f000 8161 	beq.w	800fa44 <tcp_process+0x7a8>
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f786:	1e5a      	subs	r2, r3, #1
 800f788:	4b2b      	ldr	r3, [pc, #172]	; (800f838 <tcp_process+0x59c>)
 800f78a:	681b      	ldr	r3, [r3, #0]
 800f78c:	429a      	cmp	r2, r3
 800f78e:	f040 8159 	bne.w	800fa44 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 800f792:	6878      	ldr	r0, [r7, #4]
 800f794:	f002 fe0e 	bl	80123b4 <tcp_rexmit>
      break;
 800f798:	e154      	b.n	800fa44 <tcp_process+0x7a8>
 800f79a:	e153      	b.n	800fa44 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 800f79c:	6878      	ldr	r0, [r7, #4]
 800f79e:	f000 fa71 	bl	800fc84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 800f7a2:	4b2d      	ldr	r3, [pc, #180]	; (800f858 <tcp_process+0x5bc>)
 800f7a4:	781b      	ldrb	r3, [r3, #0]
 800f7a6:	f003 0320 	and.w	r3, r3, #32
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	f000 814c 	beq.w	800fa48 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 800f7b0:	687b      	ldr	r3, [r7, #4]
 800f7b2:	8b5b      	ldrh	r3, [r3, #26]
 800f7b4:	f043 0302 	orr.w	r3, r3, #2
 800f7b8:	b29a      	uxth	r2, r3
 800f7ba:	687b      	ldr	r3, [r7, #4]
 800f7bc:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 800f7be:	687b      	ldr	r3, [r7, #4]
 800f7c0:	2207      	movs	r2, #7
 800f7c2:	751a      	strb	r2, [r3, #20]
      }
      break;
 800f7c4:	e140      	b.n	800fa48 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f000 fa5c 	bl	800fc84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f7cc:	4b22      	ldr	r3, [pc, #136]	; (800f858 <tcp_process+0x5bc>)
 800f7ce:	781b      	ldrb	r3, [r3, #0]
 800f7d0:	f003 0320 	and.w	r3, r3, #32
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	d071      	beq.n	800f8bc <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f7d8:	4b14      	ldr	r3, [pc, #80]	; (800f82c <tcp_process+0x590>)
 800f7da:	781b      	ldrb	r3, [r3, #0]
 800f7dc:	f003 0310 	and.w	r3, r3, #16
 800f7e0:	2b00      	cmp	r3, #0
 800f7e2:	d060      	beq.n	800f8a6 <tcp_process+0x60a>
 800f7e4:	687b      	ldr	r3, [r7, #4]
 800f7e6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f7e8:	4b11      	ldr	r3, [pc, #68]	; (800f830 <tcp_process+0x594>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	429a      	cmp	r2, r3
 800f7ee:	d15a      	bne.n	800f8a6 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 800f7f0:	687b      	ldr	r3, [r7, #4]
 800f7f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f7f4:	2b00      	cmp	r3, #0
 800f7f6:	d156      	bne.n	800f8a6 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 800f7f8:	687b      	ldr	r3, [r7, #4]
 800f7fa:	8b5b      	ldrh	r3, [r3, #26]
 800f7fc:	f043 0302 	orr.w	r3, r3, #2
 800f800:	b29a      	uxth	r2, r3
 800f802:	687b      	ldr	r3, [r7, #4]
 800f804:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 800f806:	6878      	ldr	r0, [r7, #4]
 800f808:	f7fe fdbc 	bl	800e384 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 800f80c:	4b13      	ldr	r3, [pc, #76]	; (800f85c <tcp_process+0x5c0>)
 800f80e:	681b      	ldr	r3, [r3, #0]
 800f810:	687a      	ldr	r2, [r7, #4]
 800f812:	429a      	cmp	r2, r3
 800f814:	d105      	bne.n	800f822 <tcp_process+0x586>
 800f816:	4b11      	ldr	r3, [pc, #68]	; (800f85c <tcp_process+0x5c0>)
 800f818:	681b      	ldr	r3, [r3, #0]
 800f81a:	68db      	ldr	r3, [r3, #12]
 800f81c:	4a0f      	ldr	r2, [pc, #60]	; (800f85c <tcp_process+0x5c0>)
 800f81e:	6013      	str	r3, [r2, #0]
 800f820:	e02e      	b.n	800f880 <tcp_process+0x5e4>
 800f822:	4b0e      	ldr	r3, [pc, #56]	; (800f85c <tcp_process+0x5c0>)
 800f824:	681b      	ldr	r3, [r3, #0]
 800f826:	617b      	str	r3, [r7, #20]
 800f828:	e027      	b.n	800f87a <tcp_process+0x5de>
 800f82a:	bf00      	nop
 800f82c:	2000d17c 	.word	0x2000d17c
 800f830:	2000d174 	.word	0x2000d174
 800f834:	2000d17a 	.word	0x2000d17a
 800f838:	2000d170 	.word	0x2000d170
 800f83c:	2000d160 	.word	0x2000d160
 800f840:	20009268 	.word	0x20009268
 800f844:	2000926c 	.word	0x2000926c
 800f848:	080192a0 	.word	0x080192a0
 800f84c:	08019540 	.word	0x08019540
 800f850:	080192ec 	.word	0x080192ec
 800f854:	2000d178 	.word	0x2000d178
 800f858:	2000d17d 	.word	0x2000d17d
 800f85c:	2000d144 	.word	0x2000d144
 800f860:	697b      	ldr	r3, [r7, #20]
 800f862:	68db      	ldr	r3, [r3, #12]
 800f864:	687a      	ldr	r2, [r7, #4]
 800f866:	429a      	cmp	r2, r3
 800f868:	d104      	bne.n	800f874 <tcp_process+0x5d8>
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	68da      	ldr	r2, [r3, #12]
 800f86e:	697b      	ldr	r3, [r7, #20]
 800f870:	60da      	str	r2, [r3, #12]
 800f872:	e005      	b.n	800f880 <tcp_process+0x5e4>
 800f874:	697b      	ldr	r3, [r7, #20]
 800f876:	68db      	ldr	r3, [r3, #12]
 800f878:	617b      	str	r3, [r7, #20]
 800f87a:	697b      	ldr	r3, [r7, #20]
 800f87c:	2b00      	cmp	r3, #0
 800f87e:	d1ef      	bne.n	800f860 <tcp_process+0x5c4>
 800f880:	687b      	ldr	r3, [r7, #4]
 800f882:	2200      	movs	r2, #0
 800f884:	60da      	str	r2, [r3, #12]
 800f886:	4b77      	ldr	r3, [pc, #476]	; (800fa64 <tcp_process+0x7c8>)
 800f888:	2201      	movs	r2, #1
 800f88a:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 800f88c:	687b      	ldr	r3, [r7, #4]
 800f88e:	220a      	movs	r2, #10
 800f890:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 800f892:	4b75      	ldr	r3, [pc, #468]	; (800fa68 <tcp_process+0x7cc>)
 800f894:	681a      	ldr	r2, [r3, #0]
 800f896:	687b      	ldr	r3, [r7, #4]
 800f898:	60da      	str	r2, [r3, #12]
 800f89a:	4a73      	ldr	r2, [pc, #460]	; (800fa68 <tcp_process+0x7cc>)
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6013      	str	r3, [r2, #0]
 800f8a0:	f003 f952 	bl	8012b48 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 800f8a4:	e0d2      	b.n	800fa4c <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	8b5b      	ldrh	r3, [r3, #26]
 800f8aa:	f043 0302 	orr.w	r3, r3, #2
 800f8ae:	b29a      	uxth	r2, r3
 800f8b0:	687b      	ldr	r3, [r7, #4]
 800f8b2:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 800f8b4:	687b      	ldr	r3, [r7, #4]
 800f8b6:	2208      	movs	r2, #8
 800f8b8:	751a      	strb	r2, [r3, #20]
      break;
 800f8ba:	e0c7      	b.n	800fa4c <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f8bc:	4b6b      	ldr	r3, [pc, #428]	; (800fa6c <tcp_process+0x7d0>)
 800f8be:	781b      	ldrb	r3, [r3, #0]
 800f8c0:	f003 0310 	and.w	r3, r3, #16
 800f8c4:	2b00      	cmp	r3, #0
 800f8c6:	f000 80c1 	beq.w	800fa4c <tcp_process+0x7b0>
 800f8ca:	687b      	ldr	r3, [r7, #4]
 800f8cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f8ce:	4b68      	ldr	r3, [pc, #416]	; (800fa70 <tcp_process+0x7d4>)
 800f8d0:	681b      	ldr	r3, [r3, #0]
 800f8d2:	429a      	cmp	r2, r3
 800f8d4:	f040 80ba 	bne.w	800fa4c <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 800f8dc:	2b00      	cmp	r3, #0
 800f8de:	f040 80b5 	bne.w	800fa4c <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	2206      	movs	r2, #6
 800f8e6:	751a      	strb	r2, [r3, #20]
      break;
 800f8e8:	e0b0      	b.n	800fa4c <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 800f8ea:	6878      	ldr	r0, [r7, #4]
 800f8ec:	f000 f9ca 	bl	800fc84 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 800f8f0:	4b60      	ldr	r3, [pc, #384]	; (800fa74 <tcp_process+0x7d8>)
 800f8f2:	781b      	ldrb	r3, [r3, #0]
 800f8f4:	f003 0320 	and.w	r3, r3, #32
 800f8f8:	2b00      	cmp	r3, #0
 800f8fa:	f000 80a9 	beq.w	800fa50 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	8b5b      	ldrh	r3, [r3, #26]
 800f902:	f043 0302 	orr.w	r3, r3, #2
 800f906:	b29a      	uxth	r2, r3
 800f908:	687b      	ldr	r3, [r7, #4]
 800f90a:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 800f90c:	6878      	ldr	r0, [r7, #4]
 800f90e:	f7fe fd39 	bl	800e384 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f912:	4b59      	ldr	r3, [pc, #356]	; (800fa78 <tcp_process+0x7dc>)
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	687a      	ldr	r2, [r7, #4]
 800f918:	429a      	cmp	r2, r3
 800f91a:	d105      	bne.n	800f928 <tcp_process+0x68c>
 800f91c:	4b56      	ldr	r3, [pc, #344]	; (800fa78 <tcp_process+0x7dc>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	68db      	ldr	r3, [r3, #12]
 800f922:	4a55      	ldr	r2, [pc, #340]	; (800fa78 <tcp_process+0x7dc>)
 800f924:	6013      	str	r3, [r2, #0]
 800f926:	e013      	b.n	800f950 <tcp_process+0x6b4>
 800f928:	4b53      	ldr	r3, [pc, #332]	; (800fa78 <tcp_process+0x7dc>)
 800f92a:	681b      	ldr	r3, [r3, #0]
 800f92c:	613b      	str	r3, [r7, #16]
 800f92e:	e00c      	b.n	800f94a <tcp_process+0x6ae>
 800f930:	693b      	ldr	r3, [r7, #16]
 800f932:	68db      	ldr	r3, [r3, #12]
 800f934:	687a      	ldr	r2, [r7, #4]
 800f936:	429a      	cmp	r2, r3
 800f938:	d104      	bne.n	800f944 <tcp_process+0x6a8>
 800f93a:	687b      	ldr	r3, [r7, #4]
 800f93c:	68da      	ldr	r2, [r3, #12]
 800f93e:	693b      	ldr	r3, [r7, #16]
 800f940:	60da      	str	r2, [r3, #12]
 800f942:	e005      	b.n	800f950 <tcp_process+0x6b4>
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	68db      	ldr	r3, [r3, #12]
 800f948:	613b      	str	r3, [r7, #16]
 800f94a:	693b      	ldr	r3, [r7, #16]
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d1ef      	bne.n	800f930 <tcp_process+0x694>
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	2200      	movs	r2, #0
 800f954:	60da      	str	r2, [r3, #12]
 800f956:	4b43      	ldr	r3, [pc, #268]	; (800fa64 <tcp_process+0x7c8>)
 800f958:	2201      	movs	r2, #1
 800f95a:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f95c:	687b      	ldr	r3, [r7, #4]
 800f95e:	220a      	movs	r2, #10
 800f960:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f962:	4b41      	ldr	r3, [pc, #260]	; (800fa68 <tcp_process+0x7cc>)
 800f964:	681a      	ldr	r2, [r3, #0]
 800f966:	687b      	ldr	r3, [r7, #4]
 800f968:	60da      	str	r2, [r3, #12]
 800f96a:	4a3f      	ldr	r2, [pc, #252]	; (800fa68 <tcp_process+0x7cc>)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6013      	str	r3, [r2, #0]
 800f970:	f003 f8ea 	bl	8012b48 <tcp_timer_needed>
      }
      break;
 800f974:	e06c      	b.n	800fa50 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 800f976:	6878      	ldr	r0, [r7, #4]
 800f978:	f000 f984 	bl	800fc84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800f97c:	4b3b      	ldr	r3, [pc, #236]	; (800fa6c <tcp_process+0x7d0>)
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	f003 0310 	and.w	r3, r3, #16
 800f984:	2b00      	cmp	r3, #0
 800f986:	d065      	beq.n	800fa54 <tcp_process+0x7b8>
 800f988:	687b      	ldr	r3, [r7, #4]
 800f98a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800f98c:	4b38      	ldr	r3, [pc, #224]	; (800fa70 <tcp_process+0x7d4>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	429a      	cmp	r2, r3
 800f992:	d15f      	bne.n	800fa54 <tcp_process+0x7b8>
 800f994:	687b      	ldr	r3, [r7, #4]
 800f996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d15b      	bne.n	800fa54 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 800f99c:	6878      	ldr	r0, [r7, #4]
 800f99e:	f7fe fcf1 	bl	800e384 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 800f9a2:	4b35      	ldr	r3, [pc, #212]	; (800fa78 <tcp_process+0x7dc>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	687a      	ldr	r2, [r7, #4]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d105      	bne.n	800f9b8 <tcp_process+0x71c>
 800f9ac:	4b32      	ldr	r3, [pc, #200]	; (800fa78 <tcp_process+0x7dc>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	68db      	ldr	r3, [r3, #12]
 800f9b2:	4a31      	ldr	r2, [pc, #196]	; (800fa78 <tcp_process+0x7dc>)
 800f9b4:	6013      	str	r3, [r2, #0]
 800f9b6:	e013      	b.n	800f9e0 <tcp_process+0x744>
 800f9b8:	4b2f      	ldr	r3, [pc, #188]	; (800fa78 <tcp_process+0x7dc>)
 800f9ba:	681b      	ldr	r3, [r3, #0]
 800f9bc:	60fb      	str	r3, [r7, #12]
 800f9be:	e00c      	b.n	800f9da <tcp_process+0x73e>
 800f9c0:	68fb      	ldr	r3, [r7, #12]
 800f9c2:	68db      	ldr	r3, [r3, #12]
 800f9c4:	687a      	ldr	r2, [r7, #4]
 800f9c6:	429a      	cmp	r2, r3
 800f9c8:	d104      	bne.n	800f9d4 <tcp_process+0x738>
 800f9ca:	687b      	ldr	r3, [r7, #4]
 800f9cc:	68da      	ldr	r2, [r3, #12]
 800f9ce:	68fb      	ldr	r3, [r7, #12]
 800f9d0:	60da      	str	r2, [r3, #12]
 800f9d2:	e005      	b.n	800f9e0 <tcp_process+0x744>
 800f9d4:	68fb      	ldr	r3, [r7, #12]
 800f9d6:	68db      	ldr	r3, [r3, #12]
 800f9d8:	60fb      	str	r3, [r7, #12]
 800f9da:	68fb      	ldr	r3, [r7, #12]
 800f9dc:	2b00      	cmp	r3, #0
 800f9de:	d1ef      	bne.n	800f9c0 <tcp_process+0x724>
 800f9e0:	687b      	ldr	r3, [r7, #4]
 800f9e2:	2200      	movs	r2, #0
 800f9e4:	60da      	str	r2, [r3, #12]
 800f9e6:	4b1f      	ldr	r3, [pc, #124]	; (800fa64 <tcp_process+0x7c8>)
 800f9e8:	2201      	movs	r2, #1
 800f9ea:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	220a      	movs	r2, #10
 800f9f0:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 800f9f2:	4b1d      	ldr	r3, [pc, #116]	; (800fa68 <tcp_process+0x7cc>)
 800f9f4:	681a      	ldr	r2, [r3, #0]
 800f9f6:	687b      	ldr	r3, [r7, #4]
 800f9f8:	60da      	str	r2, [r3, #12]
 800f9fa:	4a1b      	ldr	r2, [pc, #108]	; (800fa68 <tcp_process+0x7cc>)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	6013      	str	r3, [r2, #0]
 800fa00:	f003 f8a2 	bl	8012b48 <tcp_timer_needed>
      }
      break;
 800fa04:	e026      	b.n	800fa54 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 800fa06:	6878      	ldr	r0, [r7, #4]
 800fa08:	f000 f93c 	bl	800fc84 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 800fa0c:	4b17      	ldr	r3, [pc, #92]	; (800fa6c <tcp_process+0x7d0>)
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	f003 0310 	and.w	r3, r3, #16
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d01f      	beq.n	800fa58 <tcp_process+0x7bc>
 800fa18:	687b      	ldr	r3, [r7, #4]
 800fa1a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800fa1c:	4b14      	ldr	r3, [pc, #80]	; (800fa70 <tcp_process+0x7d4>)
 800fa1e:	681b      	ldr	r3, [r3, #0]
 800fa20:	429a      	cmp	r2, r3
 800fa22:	d119      	bne.n	800fa58 <tcp_process+0x7bc>
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d115      	bne.n	800fa58 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 800fa2c:	4b11      	ldr	r3, [pc, #68]	; (800fa74 <tcp_process+0x7d8>)
 800fa2e:	781b      	ldrb	r3, [r3, #0]
 800fa30:	f043 0310 	orr.w	r3, r3, #16
 800fa34:	b2da      	uxtb	r2, r3
 800fa36:	4b0f      	ldr	r3, [pc, #60]	; (800fa74 <tcp_process+0x7d8>)
 800fa38:	701a      	strb	r2, [r3, #0]
      }
      break;
 800fa3a:	e00d      	b.n	800fa58 <tcp_process+0x7bc>
    default:
      break;
 800fa3c:	bf00      	nop
 800fa3e:	e00c      	b.n	800fa5a <tcp_process+0x7be>
      break;
 800fa40:	bf00      	nop
 800fa42:	e00a      	b.n	800fa5a <tcp_process+0x7be>
      break;
 800fa44:	bf00      	nop
 800fa46:	e008      	b.n	800fa5a <tcp_process+0x7be>
      break;
 800fa48:	bf00      	nop
 800fa4a:	e006      	b.n	800fa5a <tcp_process+0x7be>
      break;
 800fa4c:	bf00      	nop
 800fa4e:	e004      	b.n	800fa5a <tcp_process+0x7be>
      break;
 800fa50:	bf00      	nop
 800fa52:	e002      	b.n	800fa5a <tcp_process+0x7be>
      break;
 800fa54:	bf00      	nop
 800fa56:	e000      	b.n	800fa5a <tcp_process+0x7be>
      break;
 800fa58:	bf00      	nop
  }
  return ERR_OK;
 800fa5a:	2300      	movs	r3, #0
}
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	3724      	adds	r7, #36	; 0x24
 800fa60:	46bd      	mov	sp, r7
 800fa62:	bd90      	pop	{r4, r7, pc}
 800fa64:	2000d14c 	.word	0x2000d14c
 800fa68:	2000d148 	.word	0x2000d148
 800fa6c:	2000d17c 	.word	0x2000d17c
 800fa70:	2000d174 	.word	0x2000d174
 800fa74:	2000d17d 	.word	0x2000d17d
 800fa78:	2000d144 	.word	0x2000d144

0800fa7c <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 800fa7c:	b590      	push	{r4, r7, lr}
 800fa7e:	b085      	sub	sp, #20
 800fa80:	af00      	add	r7, sp, #0
 800fa82:	6078      	str	r0, [r7, #4]
 800fa84:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 800fa86:	687b      	ldr	r3, [r7, #4]
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d106      	bne.n	800fa9a <tcp_oos_insert_segment+0x1e>
 800fa8c:	4b3b      	ldr	r3, [pc, #236]	; (800fb7c <tcp_oos_insert_segment+0x100>)
 800fa8e:	f240 421f 	movw	r2, #1055	; 0x41f
 800fa92:	493b      	ldr	r1, [pc, #236]	; (800fb80 <tcp_oos_insert_segment+0x104>)
 800fa94:	483b      	ldr	r0, [pc, #236]	; (800fb84 <tcp_oos_insert_segment+0x108>)
 800fa96:	f006 fd5b 	bl	8016550 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 800fa9a:	687b      	ldr	r3, [r7, #4]
 800fa9c:	68db      	ldr	r3, [r3, #12]
 800fa9e:	899b      	ldrh	r3, [r3, #12]
 800faa0:	b29b      	uxth	r3, r3
 800faa2:	4618      	mov	r0, r3
 800faa4:	f7fa fcd8 	bl	800a458 <lwip_htons>
 800faa8:	4603      	mov	r3, r0
 800faaa:	b2db      	uxtb	r3, r3
 800faac:	f003 0301 	and.w	r3, r3, #1
 800fab0:	2b00      	cmp	r3, #0
 800fab2:	d028      	beq.n	800fb06 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 800fab4:	6838      	ldr	r0, [r7, #0]
 800fab6:	f7fe f9ad 	bl	800de14 <tcp_segs_free>
    next = NULL;
 800faba:	2300      	movs	r3, #0
 800fabc:	603b      	str	r3, [r7, #0]
 800fabe:	e056      	b.n	800fb6e <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 800fac0:	683b      	ldr	r3, [r7, #0]
 800fac2:	68db      	ldr	r3, [r3, #12]
 800fac4:	899b      	ldrh	r3, [r3, #12]
 800fac6:	b29b      	uxth	r3, r3
 800fac8:	4618      	mov	r0, r3
 800faca:	f7fa fcc5 	bl	800a458 <lwip_htons>
 800face:	4603      	mov	r3, r0
 800fad0:	b2db      	uxtb	r3, r3
 800fad2:	f003 0301 	and.w	r3, r3, #1
 800fad6:	2b00      	cmp	r3, #0
 800fad8:	d00d      	beq.n	800faf6 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 800fada:	687b      	ldr	r3, [r7, #4]
 800fadc:	68db      	ldr	r3, [r3, #12]
 800fade:	899b      	ldrh	r3, [r3, #12]
 800fae0:	b29c      	uxth	r4, r3
 800fae2:	2001      	movs	r0, #1
 800fae4:	f7fa fcb8 	bl	800a458 <lwip_htons>
 800fae8:	4603      	mov	r3, r0
 800faea:	461a      	mov	r2, r3
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	68db      	ldr	r3, [r3, #12]
 800faf0:	4322      	orrs	r2, r4
 800faf2:	b292      	uxth	r2, r2
 800faf4:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 800faf6:	683b      	ldr	r3, [r7, #0]
 800faf8:	60fb      	str	r3, [r7, #12]
      next = next->next;
 800fafa:	683b      	ldr	r3, [r7, #0]
 800fafc:	681b      	ldr	r3, [r3, #0]
 800fafe:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 800fb00:	68f8      	ldr	r0, [r7, #12]
 800fb02:	f7fe f99c 	bl	800de3e <tcp_seg_free>
    while (next &&
 800fb06:	683b      	ldr	r3, [r7, #0]
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	d00e      	beq.n	800fb2a <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	891b      	ldrh	r3, [r3, #8]
 800fb10:	461a      	mov	r2, r3
 800fb12:	4b1d      	ldr	r3, [pc, #116]	; (800fb88 <tcp_oos_insert_segment+0x10c>)
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	441a      	add	r2, r3
 800fb18:	683b      	ldr	r3, [r7, #0]
 800fb1a:	68db      	ldr	r3, [r3, #12]
 800fb1c:	685b      	ldr	r3, [r3, #4]
 800fb1e:	6839      	ldr	r1, [r7, #0]
 800fb20:	8909      	ldrh	r1, [r1, #8]
 800fb22:	440b      	add	r3, r1
 800fb24:	1ad3      	subs	r3, r2, r3
    while (next &&
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	daca      	bge.n	800fac0 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 800fb2a:	683b      	ldr	r3, [r7, #0]
 800fb2c:	2b00      	cmp	r3, #0
 800fb2e:	d01e      	beq.n	800fb6e <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 800fb30:	687b      	ldr	r3, [r7, #4]
 800fb32:	891b      	ldrh	r3, [r3, #8]
 800fb34:	461a      	mov	r2, r3
 800fb36:	4b14      	ldr	r3, [pc, #80]	; (800fb88 <tcp_oos_insert_segment+0x10c>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	441a      	add	r2, r3
 800fb3c:	683b      	ldr	r3, [r7, #0]
 800fb3e:	68db      	ldr	r3, [r3, #12]
 800fb40:	685b      	ldr	r3, [r3, #4]
 800fb42:	1ad3      	subs	r3, r2, r3
    if (next &&
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	dd12      	ble.n	800fb6e <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	68db      	ldr	r3, [r3, #12]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	b29a      	uxth	r2, r3
 800fb50:	4b0d      	ldr	r3, [pc, #52]	; (800fb88 <tcp_oos_insert_segment+0x10c>)
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	b29b      	uxth	r3, r3
 800fb56:	1ad3      	subs	r3, r2, r3
 800fb58:	b29a      	uxth	r2, r3
 800fb5a:	687b      	ldr	r3, [r7, #4]
 800fb5c:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 800fb5e:	687b      	ldr	r3, [r7, #4]
 800fb60:	685a      	ldr	r2, [r3, #4]
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	891b      	ldrh	r3, [r3, #8]
 800fb66:	4619      	mov	r1, r3
 800fb68:	4610      	mov	r0, r2
 800fb6a:	f7fc f9c9 	bl	800bf00 <pbuf_realloc>
    }
  }
  cseg->next = next;
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	683a      	ldr	r2, [r7, #0]
 800fb72:	601a      	str	r2, [r3, #0]
}
 800fb74:	bf00      	nop
 800fb76:	3714      	adds	r7, #20
 800fb78:	46bd      	mov	sp, r7
 800fb7a:	bd90      	pop	{r4, r7, pc}
 800fb7c:	080192a0 	.word	0x080192a0
 800fb80:	08019560 	.word	0x08019560
 800fb84:	080192ec 	.word	0x080192ec
 800fb88:	2000d170 	.word	0x2000d170

0800fb8c <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 800fb8c:	b5b0      	push	{r4, r5, r7, lr}
 800fb8e:	b086      	sub	sp, #24
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
 800fb98:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 800fb9a:	e03e      	b.n	800fc1a <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 800fb9c:	68bb      	ldr	r3, [r7, #8]
 800fb9e:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 800fba0:	68bb      	ldr	r3, [r7, #8]
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 800fba6:	697b      	ldr	r3, [r7, #20]
 800fba8:	685b      	ldr	r3, [r3, #4]
 800fbaa:	4618      	mov	r0, r3
 800fbac:	f7fc fbbc 	bl	800c328 <pbuf_clen>
 800fbb0:	4603      	mov	r3, r0
 800fbb2:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbba:	8a7a      	ldrh	r2, [r7, #18]
 800fbbc:	429a      	cmp	r2, r3
 800fbbe:	d906      	bls.n	800fbce <tcp_free_acked_segments+0x42>
 800fbc0:	4b2a      	ldr	r3, [pc, #168]	; (800fc6c <tcp_free_acked_segments+0xe0>)
 800fbc2:	f240 4257 	movw	r2, #1111	; 0x457
 800fbc6:	492a      	ldr	r1, [pc, #168]	; (800fc70 <tcp_free_acked_segments+0xe4>)
 800fbc8:	482a      	ldr	r0, [pc, #168]	; (800fc74 <tcp_free_acked_segments+0xe8>)
 800fbca:	f006 fcc1 	bl	8016550 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 800fbce:	68fb      	ldr	r3, [r7, #12]
 800fbd0:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 800fbd4:	8a7b      	ldrh	r3, [r7, #18]
 800fbd6:	1ad3      	subs	r3, r2, r3
 800fbd8:	b29a      	uxth	r2, r3
 800fbda:	68fb      	ldr	r3, [r7, #12]
 800fbdc:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 800fbe0:	697b      	ldr	r3, [r7, #20]
 800fbe2:	891a      	ldrh	r2, [r3, #8]
 800fbe4:	4b24      	ldr	r3, [pc, #144]	; (800fc78 <tcp_free_acked_segments+0xec>)
 800fbe6:	881b      	ldrh	r3, [r3, #0]
 800fbe8:	4413      	add	r3, r2
 800fbea:	b29a      	uxth	r2, r3
 800fbec:	4b22      	ldr	r3, [pc, #136]	; (800fc78 <tcp_free_acked_segments+0xec>)
 800fbee:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 800fbf0:	6978      	ldr	r0, [r7, #20]
 800fbf2:	f7fe f924 	bl	800de3e <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 800fbf6:	68fb      	ldr	r3, [r7, #12]
 800fbf8:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 800fbfc:	2b00      	cmp	r3, #0
 800fbfe:	d00c      	beq.n	800fc1a <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d109      	bne.n	800fc1a <tcp_free_acked_segments+0x8e>
 800fc06:	683b      	ldr	r3, [r7, #0]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d106      	bne.n	800fc1a <tcp_free_acked_segments+0x8e>
 800fc0c:	4b17      	ldr	r3, [pc, #92]	; (800fc6c <tcp_free_acked_segments+0xe0>)
 800fc0e:	f240 4261 	movw	r2, #1121	; 0x461
 800fc12:	491a      	ldr	r1, [pc, #104]	; (800fc7c <tcp_free_acked_segments+0xf0>)
 800fc14:	4817      	ldr	r0, [pc, #92]	; (800fc74 <tcp_free_acked_segments+0xe8>)
 800fc16:	f006 fc9b 	bl	8016550 <iprintf>
  while (seg_list != NULL &&
 800fc1a:	68bb      	ldr	r3, [r7, #8]
 800fc1c:	2b00      	cmp	r3, #0
 800fc1e:	d020      	beq.n	800fc62 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	4618      	mov	r0, r3
 800fc28:	f7fa fc2b 	bl	800a482 <lwip_htonl>
 800fc2c:	4604      	mov	r4, r0
 800fc2e:	68bb      	ldr	r3, [r7, #8]
 800fc30:	891b      	ldrh	r3, [r3, #8]
 800fc32:	461d      	mov	r5, r3
 800fc34:	68bb      	ldr	r3, [r7, #8]
 800fc36:	68db      	ldr	r3, [r3, #12]
 800fc38:	899b      	ldrh	r3, [r3, #12]
 800fc3a:	b29b      	uxth	r3, r3
 800fc3c:	4618      	mov	r0, r3
 800fc3e:	f7fa fc0b 	bl	800a458 <lwip_htons>
 800fc42:	4603      	mov	r3, r0
 800fc44:	b2db      	uxtb	r3, r3
 800fc46:	f003 0303 	and.w	r3, r3, #3
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d001      	beq.n	800fc52 <tcp_free_acked_segments+0xc6>
 800fc4e:	2301      	movs	r3, #1
 800fc50:	e000      	b.n	800fc54 <tcp_free_acked_segments+0xc8>
 800fc52:	2300      	movs	r3, #0
 800fc54:	442b      	add	r3, r5
 800fc56:	18e2      	adds	r2, r4, r3
 800fc58:	4b09      	ldr	r3, [pc, #36]	; (800fc80 <tcp_free_acked_segments+0xf4>)
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 800fc5e:	2b00      	cmp	r3, #0
 800fc60:	dd9c      	ble.n	800fb9c <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 800fc62:	68bb      	ldr	r3, [r7, #8]
}
 800fc64:	4618      	mov	r0, r3
 800fc66:	3718      	adds	r7, #24
 800fc68:	46bd      	mov	sp, r7
 800fc6a:	bdb0      	pop	{r4, r5, r7, pc}
 800fc6c:	080192a0 	.word	0x080192a0
 800fc70:	08019588 	.word	0x08019588
 800fc74:	080192ec 	.word	0x080192ec
 800fc78:	2000d178 	.word	0x2000d178
 800fc7c:	080195b0 	.word	0x080195b0
 800fc80:	2000d174 	.word	0x2000d174

0800fc84 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 800fc84:	b5b0      	push	{r4, r5, r7, lr}
 800fc86:	b094      	sub	sp, #80	; 0x50
 800fc88:	af00      	add	r7, sp, #0
 800fc8a:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 800fc8c:	2300      	movs	r3, #0
 800fc8e:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	d106      	bne.n	800fca4 <tcp_receive+0x20>
 800fc96:	4b91      	ldr	r3, [pc, #580]	; (800fedc <tcp_receive+0x258>)
 800fc98:	f240 427b 	movw	r2, #1147	; 0x47b
 800fc9c:	4990      	ldr	r1, [pc, #576]	; (800fee0 <tcp_receive+0x25c>)
 800fc9e:	4891      	ldr	r0, [pc, #580]	; (800fee4 <tcp_receive+0x260>)
 800fca0:	f006 fc56 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	7d1b      	ldrb	r3, [r3, #20]
 800fca8:	2b03      	cmp	r3, #3
 800fcaa:	d806      	bhi.n	800fcba <tcp_receive+0x36>
 800fcac:	4b8b      	ldr	r3, [pc, #556]	; (800fedc <tcp_receive+0x258>)
 800fcae:	f240 427c 	movw	r2, #1148	; 0x47c
 800fcb2:	498d      	ldr	r1, [pc, #564]	; (800fee8 <tcp_receive+0x264>)
 800fcb4:	488b      	ldr	r0, [pc, #556]	; (800fee4 <tcp_receive+0x260>)
 800fcb6:	f006 fc4b 	bl	8016550 <iprintf>

  if (flags & TCP_ACK) {
 800fcba:	4b8c      	ldr	r3, [pc, #560]	; (800feec <tcp_receive+0x268>)
 800fcbc:	781b      	ldrb	r3, [r3, #0]
 800fcbe:	f003 0310 	and.w	r3, r3, #16
 800fcc2:	2b00      	cmp	r3, #0
 800fcc4:	f000 8264 	beq.w	8010190 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fcce:	461a      	mov	r2, r3
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fcd4:	4413      	add	r3, r2
 800fcd6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fcdc:	4b84      	ldr	r3, [pc, #528]	; (800fef0 <tcp_receive+0x26c>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	1ad3      	subs	r3, r2, r3
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	db1b      	blt.n	800fd1e <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800fcea:	4b81      	ldr	r3, [pc, #516]	; (800fef0 <tcp_receive+0x26c>)
 800fcec:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 800fcee:	429a      	cmp	r2, r3
 800fcf0:	d106      	bne.n	800fd00 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fcf2:	687b      	ldr	r3, [r7, #4]
 800fcf4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fcf6:	4b7f      	ldr	r3, [pc, #508]	; (800fef4 <tcp_receive+0x270>)
 800fcf8:	681b      	ldr	r3, [r3, #0]
 800fcfa:	1ad3      	subs	r3, r2, r3
 800fcfc:	2b00      	cmp	r3, #0
 800fcfe:	db0e      	blt.n	800fd1e <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800fd04:	4b7b      	ldr	r3, [pc, #492]	; (800fef4 <tcp_receive+0x270>)
 800fd06:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 800fd08:	429a      	cmp	r2, r3
 800fd0a:	d125      	bne.n	800fd58 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 800fd0c:	4b7a      	ldr	r3, [pc, #488]	; (800fef8 <tcp_receive+0x274>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	89db      	ldrh	r3, [r3, #14]
 800fd12:	b29a      	uxth	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd1a:	429a      	cmp	r2, r3
 800fd1c:	d91c      	bls.n	800fd58 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 800fd1e:	4b76      	ldr	r3, [pc, #472]	; (800fef8 <tcp_receive+0x274>)
 800fd20:	681b      	ldr	r3, [r3, #0]
 800fd22:	89db      	ldrh	r3, [r3, #14]
 800fd24:	b29a      	uxth	r2, r3
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 800fd32:	687b      	ldr	r3, [r7, #4]
 800fd34:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800fd38:	429a      	cmp	r2, r3
 800fd3a:	d205      	bcs.n	800fd48 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 800fd3c:	687b      	ldr	r3, [r7, #4]
 800fd3e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800fd42:	687b      	ldr	r3, [r7, #4]
 800fd44:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 800fd48:	4b69      	ldr	r3, [pc, #420]	; (800fef0 <tcp_receive+0x26c>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 800fd50:	4b68      	ldr	r3, [pc, #416]	; (800fef4 <tcp_receive+0x270>)
 800fd52:	681a      	ldr	r2, [r3, #0]
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 800fd58:	4b66      	ldr	r3, [pc, #408]	; (800fef4 <tcp_receive+0x270>)
 800fd5a:	681a      	ldr	r2, [r3, #0]
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fd60:	1ad3      	subs	r3, r2, r3
 800fd62:	2b00      	cmp	r3, #0
 800fd64:	dc58      	bgt.n	800fe18 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 800fd66:	4b65      	ldr	r3, [pc, #404]	; (800fefc <tcp_receive+0x278>)
 800fd68:	881b      	ldrh	r3, [r3, #0]
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d14b      	bne.n	800fe06 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800fd72:	687a      	ldr	r2, [r7, #4]
 800fd74:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 800fd78:	4413      	add	r3, r2
 800fd7a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fd7c:	429a      	cmp	r2, r3
 800fd7e:	d142      	bne.n	800fe06 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	db3d      	blt.n	800fe06 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 800fd8a:	687b      	ldr	r3, [r7, #4]
 800fd8c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800fd8e:	4b59      	ldr	r3, [pc, #356]	; (800fef4 <tcp_receive+0x270>)
 800fd90:	681b      	ldr	r3, [r3, #0]
 800fd92:	429a      	cmp	r2, r3
 800fd94:	d137      	bne.n	800fe06 <tcp_receive+0x182>
              found_dupack = 1;
 800fd96:	2301      	movs	r3, #1
 800fd98:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fda0:	2bff      	cmp	r3, #255	; 0xff
 800fda2:	d007      	beq.n	800fdb4 <tcp_receive+0x130>
                ++pcb->dupacks;
 800fda4:	687b      	ldr	r3, [r7, #4]
 800fda6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdaa:	3301      	adds	r3, #1
 800fdac:	b2da      	uxtb	r2, r3
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 800fdb4:	687b      	ldr	r3, [r7, #4]
 800fdb6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdba:	2b03      	cmp	r3, #3
 800fdbc:	d91b      	bls.n	800fdf6 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 800fdbe:	687b      	ldr	r3, [r7, #4]
 800fdc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fdc8:	4413      	add	r3, r2
 800fdca:	b29a      	uxth	r2, r3
 800fdcc:	687b      	ldr	r3, [r7, #4]
 800fdce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800fdd2:	429a      	cmp	r2, r3
 800fdd4:	d30a      	bcc.n	800fdec <tcp_receive+0x168>
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800fde0:	4413      	add	r3, r2
 800fde2:	b29a      	uxth	r2, r3
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800fdea:	e004      	b.n	800fdf6 <tcp_receive+0x172>
 800fdec:	687b      	ldr	r3, [r7, #4]
 800fdee:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800fdf2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800fdfc:	2b02      	cmp	r3, #2
 800fdfe:	d902      	bls.n	800fe06 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 800fe00:	6878      	ldr	r0, [r7, #4]
 800fe02:	f002 fb43 	bl	801248c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 800fe06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800fe08:	2b00      	cmp	r3, #0
 800fe0a:	f040 8161 	bne.w	80100d0 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	2200      	movs	r2, #0
 800fe12:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800fe16:	e15b      	b.n	80100d0 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 800fe18:	4b36      	ldr	r3, [pc, #216]	; (800fef4 <tcp_receive+0x270>)
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe20:	1ad3      	subs	r3, r2, r3
 800fe22:	3b01      	subs	r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	f2c0 814e 	blt.w	80100c6 <tcp_receive+0x442>
 800fe2a:	4b32      	ldr	r3, [pc, #200]	; (800fef4 <tcp_receive+0x270>)
 800fe2c:	681a      	ldr	r2, [r3, #0]
 800fe2e:	687b      	ldr	r3, [r7, #4]
 800fe30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800fe32:	1ad3      	subs	r3, r2, r3
 800fe34:	2b00      	cmp	r3, #0
 800fe36:	f300 8146 	bgt.w	80100c6 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	8b5b      	ldrh	r3, [r3, #26]
 800fe3e:	f003 0304 	and.w	r3, r3, #4
 800fe42:	2b00      	cmp	r3, #0
 800fe44:	d010      	beq.n	800fe68 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 800fe46:	687b      	ldr	r3, [r7, #4]
 800fe48:	8b5b      	ldrh	r3, [r3, #26]
 800fe4a:	f023 0304 	bic.w	r3, r3, #4
 800fe4e:	b29a      	uxth	r2, r3
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 800fe54:	687b      	ldr	r3, [r7, #4]
 800fe56:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800fe5a:	687b      	ldr	r3, [r7, #4]
 800fe5c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 800fe60:	687b      	ldr	r3, [r7, #4]
 800fe62:	2200      	movs	r2, #0
 800fe64:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	2200      	movs	r2, #0
 800fe6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 800fe70:	687b      	ldr	r3, [r7, #4]
 800fe72:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800fe76:	10db      	asrs	r3, r3, #3
 800fe78:	b21b      	sxth	r3, r3
 800fe7a:	b29a      	uxth	r2, r3
 800fe7c:	687b      	ldr	r3, [r7, #4]
 800fe7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800fe82:	b29b      	uxth	r3, r3
 800fe84:	4413      	add	r3, r2
 800fe86:	b29b      	uxth	r3, r3
 800fe88:	b21a      	sxth	r2, r3
 800fe8a:	687b      	ldr	r3, [r7, #4]
 800fe8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 800fe90:	4b18      	ldr	r3, [pc, #96]	; (800fef4 <tcp_receive+0x270>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	b29a      	uxth	r2, r3
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800fe9a:	b29b      	uxth	r3, r3
 800fe9c:	1ad3      	subs	r3, r2, r3
 800fe9e:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2200      	movs	r2, #0
 800fea4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 800fea8:	4b12      	ldr	r3, [pc, #72]	; (800fef4 <tcp_receive+0x270>)
 800feaa:	681a      	ldr	r2, [r3, #0]
 800feac:	687b      	ldr	r3, [r7, #4]
 800feae:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 800feb0:	687b      	ldr	r3, [r7, #4]
 800feb2:	7d1b      	ldrb	r3, [r3, #20]
 800feb4:	2b03      	cmp	r3, #3
 800feb6:	f240 8097 	bls.w	800ffe8 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 800feba:	687b      	ldr	r3, [r7, #4]
 800febc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 800fec6:	429a      	cmp	r2, r3
 800fec8:	d245      	bcs.n	800ff56 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 800feca:	687b      	ldr	r3, [r7, #4]
 800fecc:	8b5b      	ldrh	r3, [r3, #26]
 800fece:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800fed2:	2b00      	cmp	r3, #0
 800fed4:	d014      	beq.n	800ff00 <tcp_receive+0x27c>
 800fed6:	2301      	movs	r3, #1
 800fed8:	e013      	b.n	800ff02 <tcp_receive+0x27e>
 800feda:	bf00      	nop
 800fedc:	080192a0 	.word	0x080192a0
 800fee0:	080195d0 	.word	0x080195d0
 800fee4:	080192ec 	.word	0x080192ec
 800fee8:	080195ec 	.word	0x080195ec
 800feec:	2000d17c 	.word	0x2000d17c
 800fef0:	2000d170 	.word	0x2000d170
 800fef4:	2000d174 	.word	0x2000d174
 800fef8:	2000d160 	.word	0x2000d160
 800fefc:	2000d17a 	.word	0x2000d17a
 800ff00:	2302      	movs	r3, #2
 800ff02:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 800ff06:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800ff0a:	b29a      	uxth	r2, r3
 800ff0c:	687b      	ldr	r3, [r7, #4]
 800ff0e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ff10:	fb12 f303 	smulbb	r3, r2, r3
 800ff14:	b29b      	uxth	r3, r3
 800ff16:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800ff18:	4293      	cmp	r3, r2
 800ff1a:	bf28      	it	cs
 800ff1c:	4613      	movcs	r3, r2
 800ff1e:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 800ff20:	687b      	ldr	r3, [r7, #4]
 800ff22:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff26:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff28:	4413      	add	r3, r2
 800ff2a:	b29a      	uxth	r2, r3
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff32:	429a      	cmp	r2, r3
 800ff34:	d309      	bcc.n	800ff4a <tcp_receive+0x2c6>
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ff3c:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800ff3e:	4413      	add	r3, r2
 800ff40:	b29a      	uxth	r2, r3
 800ff42:	687b      	ldr	r3, [r7, #4]
 800ff44:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff48:	e04e      	b.n	800ffe8 <tcp_receive+0x364>
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff50:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ff54:	e048      	b.n	800ffe8 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 800ff56:	687b      	ldr	r3, [r7, #4]
 800ff58:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ff5c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff5e:	4413      	add	r3, r2
 800ff60:	b29a      	uxth	r2, r3
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 800ff68:	429a      	cmp	r2, r3
 800ff6a:	d309      	bcc.n	800ff80 <tcp_receive+0x2fc>
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ff72:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800ff74:	4413      	add	r3, r2
 800ff76:	b29a      	uxth	r2, r3
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 800ff7e:	e004      	b.n	800ff8a <tcp_receive+0x306>
 800ff80:	687b      	ldr	r3, [r7, #4]
 800ff82:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ff86:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 800ff8a:	687b      	ldr	r3, [r7, #4]
 800ff8c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ff96:	429a      	cmp	r2, r3
 800ff98:	d326      	bcc.n	800ffe8 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ffa6:	1ad3      	subs	r3, r2, r3
 800ffa8:	b29a      	uxth	r2, r3
 800ffaa:	687b      	ldr	r3, [r7, #4]
 800ffac:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 800ffb0:	687b      	ldr	r3, [r7, #4]
 800ffb2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffba:	4413      	add	r3, r2
 800ffbc:	b29a      	uxth	r2, r3
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800ffc4:	429a      	cmp	r2, r3
 800ffc6:	d30a      	bcc.n	800ffde <tcp_receive+0x35a>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800ffd2:	4413      	add	r3, r2
 800ffd4:	b29a      	uxth	r2, r3
 800ffd6:	687b      	ldr	r3, [r7, #4]
 800ffd8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 800ffdc:	e004      	b.n	800ffe8 <tcp_receive+0x364>
 800ffde:	687b      	ldr	r3, [r7, #4]
 800ffe0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ffe4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	6f19      	ldr	r1, [r3, #112]	; 0x70
 800ffec:	687b      	ldr	r3, [r7, #4]
 800ffee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800fff0:	4a98      	ldr	r2, [pc, #608]	; (8010254 <tcp_receive+0x5d0>)
 800fff2:	6878      	ldr	r0, [r7, #4]
 800fff4:	f7ff fdca 	bl	800fb8c <tcp_free_acked_segments>
 800fff8:	4602      	mov	r2, r0
 800fffa:	687b      	ldr	r3, [r7, #4]
 800fffc:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010002:	687b      	ldr	r3, [r7, #4]
 8010004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010006:	4a94      	ldr	r2, [pc, #592]	; (8010258 <tcp_receive+0x5d4>)
 8010008:	6878      	ldr	r0, [r7, #4]
 801000a:	f7ff fdbf 	bl	800fb8c <tcp_free_acked_segments>
 801000e:	4602      	mov	r2, r0
 8010010:	687b      	ldr	r3, [r7, #4]
 8010012:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010014:	687b      	ldr	r3, [r7, #4]
 8010016:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010018:	2b00      	cmp	r3, #0
 801001a:	d104      	bne.n	8010026 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 801001c:	687b      	ldr	r3, [r7, #4]
 801001e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010022:	861a      	strh	r2, [r3, #48]	; 0x30
 8010024:	e002      	b.n	801002c <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010026:	687b      	ldr	r3, [r7, #4]
 8010028:	2200      	movs	r2, #0
 801002a:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	2200      	movs	r2, #0
 8010030:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010032:	687b      	ldr	r3, [r7, #4]
 8010034:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010036:	2b00      	cmp	r3, #0
 8010038:	d103      	bne.n	8010042 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 801003a:	687b      	ldr	r3, [r7, #4]
 801003c:	2200      	movs	r2, #0
 801003e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010042:	687b      	ldr	r3, [r7, #4]
 8010044:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010048:	4b84      	ldr	r3, [pc, #528]	; (801025c <tcp_receive+0x5d8>)
 801004a:	881b      	ldrh	r3, [r3, #0]
 801004c:	4413      	add	r3, r2
 801004e:	b29a      	uxth	r2, r3
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	8b5b      	ldrh	r3, [r3, #26]
 801005a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801005e:	2b00      	cmp	r3, #0
 8010060:	d035      	beq.n	80100ce <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010062:	687b      	ldr	r3, [r7, #4]
 8010064:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010066:	2b00      	cmp	r3, #0
 8010068:	d118      	bne.n	801009c <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 801006a:	687b      	ldr	r3, [r7, #4]
 801006c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801006e:	2b00      	cmp	r3, #0
 8010070:	d00c      	beq.n	801008c <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010072:	687b      	ldr	r3, [r7, #4]
 8010074:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801007a:	68db      	ldr	r3, [r3, #12]
 801007c:	685b      	ldr	r3, [r3, #4]
 801007e:	4618      	mov	r0, r3
 8010080:	f7fa f9ff 	bl	800a482 <lwip_htonl>
 8010084:	4603      	mov	r3, r0
 8010086:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010088:	2b00      	cmp	r3, #0
 801008a:	dc20      	bgt.n	80100ce <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 801008c:	687b      	ldr	r3, [r7, #4]
 801008e:	8b5b      	ldrh	r3, [r3, #26]
 8010090:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010094:	b29a      	uxth	r2, r3
 8010096:	687b      	ldr	r3, [r7, #4]
 8010098:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801009a:	e018      	b.n	80100ce <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 801009c:	687b      	ldr	r3, [r7, #4]
 801009e:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80100a0:	687b      	ldr	r3, [r7, #4]
 80100a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100a4:	68db      	ldr	r3, [r3, #12]
 80100a6:	685b      	ldr	r3, [r3, #4]
 80100a8:	4618      	mov	r0, r3
 80100aa:	f7fa f9ea 	bl	800a482 <lwip_htonl>
 80100ae:	4603      	mov	r3, r0
 80100b0:	1ae3      	subs	r3, r4, r3
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	dc0b      	bgt.n	80100ce <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 80100b6:	687b      	ldr	r3, [r7, #4]
 80100b8:	8b5b      	ldrh	r3, [r3, #26]
 80100ba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80100be:	b29a      	uxth	r2, r3
 80100c0:	687b      	ldr	r3, [r7, #4]
 80100c2:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80100c4:	e003      	b.n	80100ce <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 80100c6:	6878      	ldr	r0, [r7, #4]
 80100c8:	f002 fbce 	bl	8012868 <tcp_send_empty_ack>
 80100cc:	e000      	b.n	80100d0 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80100ce:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100d4:	2b00      	cmp	r3, #0
 80100d6:	d05b      	beq.n	8010190 <tcp_receive+0x50c>
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80100dc:	4b60      	ldr	r3, [pc, #384]	; (8010260 <tcp_receive+0x5dc>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	1ad3      	subs	r3, r2, r3
 80100e2:	2b00      	cmp	r3, #0
 80100e4:	da54      	bge.n	8010190 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 80100e6:	4b5f      	ldr	r3, [pc, #380]	; (8010264 <tcp_receive+0x5e0>)
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	b29a      	uxth	r2, r3
 80100ec:	687b      	ldr	r3, [r7, #4]
 80100ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80100f0:	b29b      	uxth	r3, r3
 80100f2:	1ad3      	subs	r3, r2, r3
 80100f4:	b29b      	uxth	r3, r3
 80100f6:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 80100fa:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80100fe:	687b      	ldr	r3, [r7, #4]
 8010100:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010104:	10db      	asrs	r3, r3, #3
 8010106:	b21b      	sxth	r3, r3
 8010108:	b29b      	uxth	r3, r3
 801010a:	1ad3      	subs	r3, r2, r3
 801010c:	b29b      	uxth	r3, r3
 801010e:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010112:	687b      	ldr	r3, [r7, #4]
 8010114:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010118:	b29a      	uxth	r2, r3
 801011a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801011e:	4413      	add	r3, r2
 8010120:	b29b      	uxth	r3, r3
 8010122:	b21a      	sxth	r2, r3
 8010124:	687b      	ldr	r3, [r7, #4]
 8010126:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010128:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 801012c:	2b00      	cmp	r3, #0
 801012e:	da05      	bge.n	801013c <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010130:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010134:	425b      	negs	r3, r3
 8010136:	b29b      	uxth	r3, r3
 8010138:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 801013c:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010140:	687b      	ldr	r3, [r7, #4]
 8010142:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010146:	109b      	asrs	r3, r3, #2
 8010148:	b21b      	sxth	r3, r3
 801014a:	b29b      	uxth	r3, r3
 801014c:	1ad3      	subs	r3, r2, r3
 801014e:	b29b      	uxth	r3, r3
 8010150:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801015a:	b29a      	uxth	r2, r3
 801015c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010160:	4413      	add	r3, r2
 8010162:	b29b      	uxth	r3, r3
 8010164:	b21a      	sxth	r2, r3
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 801016a:	687b      	ldr	r3, [r7, #4]
 801016c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010170:	10db      	asrs	r3, r3, #3
 8010172:	b21b      	sxth	r3, r3
 8010174:	b29a      	uxth	r2, r3
 8010176:	687b      	ldr	r3, [r7, #4]
 8010178:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 801017c:	b29b      	uxth	r3, r3
 801017e:	4413      	add	r3, r2
 8010180:	b29b      	uxth	r3, r3
 8010182:	b21a      	sxth	r2, r3
 8010184:	687b      	ldr	r3, [r7, #4]
 8010186:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	2200      	movs	r2, #0
 801018e:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010190:	4b35      	ldr	r3, [pc, #212]	; (8010268 <tcp_receive+0x5e4>)
 8010192:	881b      	ldrh	r3, [r3, #0]
 8010194:	2b00      	cmp	r3, #0
 8010196:	f000 84e2 	beq.w	8010b5e <tcp_receive+0xeda>
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	7d1b      	ldrb	r3, [r3, #20]
 801019e:	2b06      	cmp	r3, #6
 80101a0:	f200 84dd 	bhi.w	8010b5e <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80101a4:	687b      	ldr	r3, [r7, #4]
 80101a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101a8:	4b30      	ldr	r3, [pc, #192]	; (801026c <tcp_receive+0x5e8>)
 80101aa:	681b      	ldr	r3, [r3, #0]
 80101ac:	1ad3      	subs	r3, r2, r3
 80101ae:	3b01      	subs	r3, #1
 80101b0:	2b00      	cmp	r3, #0
 80101b2:	f2c0 808f 	blt.w	80102d4 <tcp_receive+0x650>
 80101b6:	687b      	ldr	r3, [r7, #4]
 80101b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101ba:	4b2b      	ldr	r3, [pc, #172]	; (8010268 <tcp_receive+0x5e4>)
 80101bc:	881b      	ldrh	r3, [r3, #0]
 80101be:	4619      	mov	r1, r3
 80101c0:	4b2a      	ldr	r3, [pc, #168]	; (801026c <tcp_receive+0x5e8>)
 80101c2:	681b      	ldr	r3, [r3, #0]
 80101c4:	440b      	add	r3, r1
 80101c6:	1ad3      	subs	r3, r2, r3
 80101c8:	3301      	adds	r3, #1
 80101ca:	2b00      	cmp	r3, #0
 80101cc:	f300 8082 	bgt.w	80102d4 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 80101d0:	4b27      	ldr	r3, [pc, #156]	; (8010270 <tcp_receive+0x5ec>)
 80101d2:	685b      	ldr	r3, [r3, #4]
 80101d4:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80101da:	4b24      	ldr	r3, [pc, #144]	; (801026c <tcp_receive+0x5e8>)
 80101dc:	681b      	ldr	r3, [r3, #0]
 80101de:	1ad3      	subs	r3, r2, r3
 80101e0:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 80101e2:	4b23      	ldr	r3, [pc, #140]	; (8010270 <tcp_receive+0x5ec>)
 80101e4:	685b      	ldr	r3, [r3, #4]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d106      	bne.n	80101f8 <tcp_receive+0x574>
 80101ea:	4b22      	ldr	r3, [pc, #136]	; (8010274 <tcp_receive+0x5f0>)
 80101ec:	f240 5294 	movw	r2, #1428	; 0x594
 80101f0:	4921      	ldr	r1, [pc, #132]	; (8010278 <tcp_receive+0x5f4>)
 80101f2:	4822      	ldr	r0, [pc, #136]	; (801027c <tcp_receive+0x5f8>)
 80101f4:	f006 f9ac 	bl	8016550 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 80101f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80101fe:	4293      	cmp	r3, r2
 8010200:	d906      	bls.n	8010210 <tcp_receive+0x58c>
 8010202:	4b1c      	ldr	r3, [pc, #112]	; (8010274 <tcp_receive+0x5f0>)
 8010204:	f240 5295 	movw	r2, #1429	; 0x595
 8010208:	491d      	ldr	r1, [pc, #116]	; (8010280 <tcp_receive+0x5fc>)
 801020a:	481c      	ldr	r0, [pc, #112]	; (801027c <tcp_receive+0x5f8>)
 801020c:	f006 f9a0 	bl	8016550 <iprintf>
      off = (u16_t)off32;
 8010210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010212:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8010216:	4b16      	ldr	r3, [pc, #88]	; (8010270 <tcp_receive+0x5ec>)
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	891b      	ldrh	r3, [r3, #8]
 801021c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010220:	429a      	cmp	r2, r3
 8010222:	d906      	bls.n	8010232 <tcp_receive+0x5ae>
 8010224:	4b13      	ldr	r3, [pc, #76]	; (8010274 <tcp_receive+0x5f0>)
 8010226:	f240 5297 	movw	r2, #1431	; 0x597
 801022a:	4916      	ldr	r1, [pc, #88]	; (8010284 <tcp_receive+0x600>)
 801022c:	4813      	ldr	r0, [pc, #76]	; (801027c <tcp_receive+0x5f8>)
 801022e:	f006 f98f 	bl	8016550 <iprintf>
      inseg.len -= off;
 8010232:	4b0f      	ldr	r3, [pc, #60]	; (8010270 <tcp_receive+0x5ec>)
 8010234:	891a      	ldrh	r2, [r3, #8]
 8010236:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801023a:	1ad3      	subs	r3, r2, r3
 801023c:	b29a      	uxth	r2, r3
 801023e:	4b0c      	ldr	r3, [pc, #48]	; (8010270 <tcp_receive+0x5ec>)
 8010240:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8010242:	4b0b      	ldr	r3, [pc, #44]	; (8010270 <tcp_receive+0x5ec>)
 8010244:	685b      	ldr	r3, [r3, #4]
 8010246:	891a      	ldrh	r2, [r3, #8]
 8010248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801024c:	1ad3      	subs	r3, r2, r3
 801024e:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8010250:	e02a      	b.n	80102a8 <tcp_receive+0x624>
 8010252:	bf00      	nop
 8010254:	08019608 	.word	0x08019608
 8010258:	08019610 	.word	0x08019610
 801025c:	2000d178 	.word	0x2000d178
 8010260:	2000d174 	.word	0x2000d174
 8010264:	2000d138 	.word	0x2000d138
 8010268:	2000d17a 	.word	0x2000d17a
 801026c:	2000d170 	.word	0x2000d170
 8010270:	2000d150 	.word	0x2000d150
 8010274:	080192a0 	.word	0x080192a0
 8010278:	08019618 	.word	0x08019618
 801027c:	080192ec 	.word	0x080192ec
 8010280:	08019628 	.word	0x08019628
 8010284:	08019638 	.word	0x08019638
        off -= p->len;
 8010288:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801028a:	895b      	ldrh	r3, [r3, #10]
 801028c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8010290:	1ad3      	subs	r3, r2, r3
 8010292:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8010296:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010298:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801029a:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 801029c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801029e:	2200      	movs	r2, #0
 80102a0:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80102a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102a4:	681b      	ldr	r3, [r3, #0]
 80102a6:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80102a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80102aa:	895b      	ldrh	r3, [r3, #10]
 80102ac:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80102b0:	429a      	cmp	r2, r3
 80102b2:	d8e9      	bhi.n	8010288 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80102b4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80102b8:	4619      	mov	r1, r3
 80102ba:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80102bc:	f7fb ff20 	bl	800c100 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102c4:	4a91      	ldr	r2, [pc, #580]	; (801050c <tcp_receive+0x888>)
 80102c6:	6013      	str	r3, [r2, #0]
 80102c8:	4b91      	ldr	r3, [pc, #580]	; (8010510 <tcp_receive+0x88c>)
 80102ca:	68db      	ldr	r3, [r3, #12]
 80102cc:	4a8f      	ldr	r2, [pc, #572]	; (801050c <tcp_receive+0x888>)
 80102ce:	6812      	ldr	r2, [r2, #0]
 80102d0:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80102d2:	e00d      	b.n	80102f0 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80102d4:	4b8d      	ldr	r3, [pc, #564]	; (801050c <tcp_receive+0x888>)
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	687b      	ldr	r3, [r7, #4]
 80102da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102dc:	1ad3      	subs	r3, r2, r3
 80102de:	2b00      	cmp	r3, #0
 80102e0:	da06      	bge.n	80102f0 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80102e2:	687b      	ldr	r3, [r7, #4]
 80102e4:	8b5b      	ldrh	r3, [r3, #26]
 80102e6:	f043 0302 	orr.w	r3, r3, #2
 80102ea:	b29a      	uxth	r2, r3
 80102ec:	687b      	ldr	r3, [r7, #4]
 80102ee:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80102f0:	4b86      	ldr	r3, [pc, #536]	; (801050c <tcp_receive+0x888>)
 80102f2:	681a      	ldr	r2, [r3, #0]
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	2b00      	cmp	r3, #0
 80102fc:	f2c0 842a 	blt.w	8010b54 <tcp_receive+0xed0>
 8010300:	4b82      	ldr	r3, [pc, #520]	; (801050c <tcp_receive+0x888>)
 8010302:	681a      	ldr	r2, [r3, #0]
 8010304:	687b      	ldr	r3, [r7, #4]
 8010306:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010308:	6879      	ldr	r1, [r7, #4]
 801030a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801030c:	440b      	add	r3, r1
 801030e:	1ad3      	subs	r3, r2, r3
 8010310:	3301      	adds	r3, #1
 8010312:	2b00      	cmp	r3, #0
 8010314:	f300 841e 	bgt.w	8010b54 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801031c:	4b7b      	ldr	r3, [pc, #492]	; (801050c <tcp_receive+0x888>)
 801031e:	681b      	ldr	r3, [r3, #0]
 8010320:	429a      	cmp	r2, r3
 8010322:	f040 829a 	bne.w	801085a <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8010326:	4b7a      	ldr	r3, [pc, #488]	; (8010510 <tcp_receive+0x88c>)
 8010328:	891c      	ldrh	r4, [r3, #8]
 801032a:	4b79      	ldr	r3, [pc, #484]	; (8010510 <tcp_receive+0x88c>)
 801032c:	68db      	ldr	r3, [r3, #12]
 801032e:	899b      	ldrh	r3, [r3, #12]
 8010330:	b29b      	uxth	r3, r3
 8010332:	4618      	mov	r0, r3
 8010334:	f7fa f890 	bl	800a458 <lwip_htons>
 8010338:	4603      	mov	r3, r0
 801033a:	b2db      	uxtb	r3, r3
 801033c:	f003 0303 	and.w	r3, r3, #3
 8010340:	2b00      	cmp	r3, #0
 8010342:	d001      	beq.n	8010348 <tcp_receive+0x6c4>
 8010344:	2301      	movs	r3, #1
 8010346:	e000      	b.n	801034a <tcp_receive+0x6c6>
 8010348:	2300      	movs	r3, #0
 801034a:	4423      	add	r3, r4
 801034c:	b29a      	uxth	r2, r3
 801034e:	4b71      	ldr	r3, [pc, #452]	; (8010514 <tcp_receive+0x890>)
 8010350:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8010352:	687b      	ldr	r3, [r7, #4]
 8010354:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010356:	4b6f      	ldr	r3, [pc, #444]	; (8010514 <tcp_receive+0x890>)
 8010358:	881b      	ldrh	r3, [r3, #0]
 801035a:	429a      	cmp	r2, r3
 801035c:	d275      	bcs.n	801044a <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801035e:	4b6c      	ldr	r3, [pc, #432]	; (8010510 <tcp_receive+0x88c>)
 8010360:	68db      	ldr	r3, [r3, #12]
 8010362:	899b      	ldrh	r3, [r3, #12]
 8010364:	b29b      	uxth	r3, r3
 8010366:	4618      	mov	r0, r3
 8010368:	f7fa f876 	bl	800a458 <lwip_htons>
 801036c:	4603      	mov	r3, r0
 801036e:	b2db      	uxtb	r3, r3
 8010370:	f003 0301 	and.w	r3, r3, #1
 8010374:	2b00      	cmp	r3, #0
 8010376:	d01f      	beq.n	80103b8 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8010378:	4b65      	ldr	r3, [pc, #404]	; (8010510 <tcp_receive+0x88c>)
 801037a:	68db      	ldr	r3, [r3, #12]
 801037c:	899b      	ldrh	r3, [r3, #12]
 801037e:	b29b      	uxth	r3, r3
 8010380:	b21b      	sxth	r3, r3
 8010382:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010386:	b21c      	sxth	r4, r3
 8010388:	4b61      	ldr	r3, [pc, #388]	; (8010510 <tcp_receive+0x88c>)
 801038a:	68db      	ldr	r3, [r3, #12]
 801038c:	899b      	ldrh	r3, [r3, #12]
 801038e:	b29b      	uxth	r3, r3
 8010390:	4618      	mov	r0, r3
 8010392:	f7fa f861 	bl	800a458 <lwip_htons>
 8010396:	4603      	mov	r3, r0
 8010398:	b2db      	uxtb	r3, r3
 801039a:	b29b      	uxth	r3, r3
 801039c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80103a0:	b29b      	uxth	r3, r3
 80103a2:	4618      	mov	r0, r3
 80103a4:	f7fa f858 	bl	800a458 <lwip_htons>
 80103a8:	4603      	mov	r3, r0
 80103aa:	b21b      	sxth	r3, r3
 80103ac:	4323      	orrs	r3, r4
 80103ae:	b21a      	sxth	r2, r3
 80103b0:	4b57      	ldr	r3, [pc, #348]	; (8010510 <tcp_receive+0x88c>)
 80103b2:	68db      	ldr	r3, [r3, #12]
 80103b4:	b292      	uxth	r2, r2
 80103b6:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80103b8:	687b      	ldr	r3, [r7, #4]
 80103ba:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80103bc:	4b54      	ldr	r3, [pc, #336]	; (8010510 <tcp_receive+0x88c>)
 80103be:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80103c0:	4b53      	ldr	r3, [pc, #332]	; (8010510 <tcp_receive+0x88c>)
 80103c2:	68db      	ldr	r3, [r3, #12]
 80103c4:	899b      	ldrh	r3, [r3, #12]
 80103c6:	b29b      	uxth	r3, r3
 80103c8:	4618      	mov	r0, r3
 80103ca:	f7fa f845 	bl	800a458 <lwip_htons>
 80103ce:	4603      	mov	r3, r0
 80103d0:	b2db      	uxtb	r3, r3
 80103d2:	f003 0302 	and.w	r3, r3, #2
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d005      	beq.n	80103e6 <tcp_receive+0x762>
            inseg.len -= 1;
 80103da:	4b4d      	ldr	r3, [pc, #308]	; (8010510 <tcp_receive+0x88c>)
 80103dc:	891b      	ldrh	r3, [r3, #8]
 80103de:	3b01      	subs	r3, #1
 80103e0:	b29a      	uxth	r2, r3
 80103e2:	4b4b      	ldr	r3, [pc, #300]	; (8010510 <tcp_receive+0x88c>)
 80103e4:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80103e6:	4b4a      	ldr	r3, [pc, #296]	; (8010510 <tcp_receive+0x88c>)
 80103e8:	685b      	ldr	r3, [r3, #4]
 80103ea:	4a49      	ldr	r2, [pc, #292]	; (8010510 <tcp_receive+0x88c>)
 80103ec:	8912      	ldrh	r2, [r2, #8]
 80103ee:	4611      	mov	r1, r2
 80103f0:	4618      	mov	r0, r3
 80103f2:	f7fb fd85 	bl	800bf00 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80103f6:	4b46      	ldr	r3, [pc, #280]	; (8010510 <tcp_receive+0x88c>)
 80103f8:	891c      	ldrh	r4, [r3, #8]
 80103fa:	4b45      	ldr	r3, [pc, #276]	; (8010510 <tcp_receive+0x88c>)
 80103fc:	68db      	ldr	r3, [r3, #12]
 80103fe:	899b      	ldrh	r3, [r3, #12]
 8010400:	b29b      	uxth	r3, r3
 8010402:	4618      	mov	r0, r3
 8010404:	f7fa f828 	bl	800a458 <lwip_htons>
 8010408:	4603      	mov	r3, r0
 801040a:	b2db      	uxtb	r3, r3
 801040c:	f003 0303 	and.w	r3, r3, #3
 8010410:	2b00      	cmp	r3, #0
 8010412:	d001      	beq.n	8010418 <tcp_receive+0x794>
 8010414:	2301      	movs	r3, #1
 8010416:	e000      	b.n	801041a <tcp_receive+0x796>
 8010418:	2300      	movs	r3, #0
 801041a:	4423      	add	r3, r4
 801041c:	b29a      	uxth	r2, r3
 801041e:	4b3d      	ldr	r3, [pc, #244]	; (8010514 <tcp_receive+0x890>)
 8010420:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010422:	4b3c      	ldr	r3, [pc, #240]	; (8010514 <tcp_receive+0x890>)
 8010424:	881b      	ldrh	r3, [r3, #0]
 8010426:	461a      	mov	r2, r3
 8010428:	4b38      	ldr	r3, [pc, #224]	; (801050c <tcp_receive+0x888>)
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	441a      	add	r2, r3
 801042e:	687b      	ldr	r3, [r7, #4]
 8010430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010432:	6879      	ldr	r1, [r7, #4]
 8010434:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010436:	440b      	add	r3, r1
 8010438:	429a      	cmp	r2, r3
 801043a:	d006      	beq.n	801044a <tcp_receive+0x7c6>
 801043c:	4b36      	ldr	r3, [pc, #216]	; (8010518 <tcp_receive+0x894>)
 801043e:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8010442:	4936      	ldr	r1, [pc, #216]	; (801051c <tcp_receive+0x898>)
 8010444:	4836      	ldr	r0, [pc, #216]	; (8010520 <tcp_receive+0x89c>)
 8010446:	f006 f883 	bl	8016550 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801044e:	2b00      	cmp	r3, #0
 8010450:	f000 80e7 	beq.w	8010622 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8010454:	4b2e      	ldr	r3, [pc, #184]	; (8010510 <tcp_receive+0x88c>)
 8010456:	68db      	ldr	r3, [r3, #12]
 8010458:	899b      	ldrh	r3, [r3, #12]
 801045a:	b29b      	uxth	r3, r3
 801045c:	4618      	mov	r0, r3
 801045e:	f7f9 fffb 	bl	800a458 <lwip_htons>
 8010462:	4603      	mov	r3, r0
 8010464:	b2db      	uxtb	r3, r3
 8010466:	f003 0301 	and.w	r3, r3, #1
 801046a:	2b00      	cmp	r3, #0
 801046c:	d010      	beq.n	8010490 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 801046e:	e00a      	b.n	8010486 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8010470:	687b      	ldr	r3, [r7, #4]
 8010472:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010474:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8010476:	687b      	ldr	r3, [r7, #4]
 8010478:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801047a:	681a      	ldr	r2, [r3, #0]
 801047c:	687b      	ldr	r3, [r7, #4]
 801047e:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8010480:	68f8      	ldr	r0, [r7, #12]
 8010482:	f7fd fcdc 	bl	800de3e <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801048a:	2b00      	cmp	r3, #0
 801048c:	d1f0      	bne.n	8010470 <tcp_receive+0x7ec>
 801048e:	e0c8      	b.n	8010622 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8010490:	687b      	ldr	r3, [r7, #4]
 8010492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010494:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8010496:	e052      	b.n	801053e <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8010498:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801049a:	68db      	ldr	r3, [r3, #12]
 801049c:	899b      	ldrh	r3, [r3, #12]
 801049e:	b29b      	uxth	r3, r3
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7f9 ffd9 	bl	800a458 <lwip_htons>
 80104a6:	4603      	mov	r3, r0
 80104a8:	b2db      	uxtb	r3, r3
 80104aa:	f003 0301 	and.w	r3, r3, #1
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d03d      	beq.n	801052e <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80104b2:	4b17      	ldr	r3, [pc, #92]	; (8010510 <tcp_receive+0x88c>)
 80104b4:	68db      	ldr	r3, [r3, #12]
 80104b6:	899b      	ldrh	r3, [r3, #12]
 80104b8:	b29b      	uxth	r3, r3
 80104ba:	4618      	mov	r0, r3
 80104bc:	f7f9 ffcc 	bl	800a458 <lwip_htons>
 80104c0:	4603      	mov	r3, r0
 80104c2:	b2db      	uxtb	r3, r3
 80104c4:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d130      	bne.n	801052e <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80104cc:	4b10      	ldr	r3, [pc, #64]	; (8010510 <tcp_receive+0x88c>)
 80104ce:	68db      	ldr	r3, [r3, #12]
 80104d0:	899b      	ldrh	r3, [r3, #12]
 80104d2:	b29c      	uxth	r4, r3
 80104d4:	2001      	movs	r0, #1
 80104d6:	f7f9 ffbf 	bl	800a458 <lwip_htons>
 80104da:	4603      	mov	r3, r0
 80104dc:	461a      	mov	r2, r3
 80104de:	4b0c      	ldr	r3, [pc, #48]	; (8010510 <tcp_receive+0x88c>)
 80104e0:	68db      	ldr	r3, [r3, #12]
 80104e2:	4322      	orrs	r2, r4
 80104e4:	b292      	uxth	r2, r2
 80104e6:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80104e8:	4b09      	ldr	r3, [pc, #36]	; (8010510 <tcp_receive+0x88c>)
 80104ea:	891c      	ldrh	r4, [r3, #8]
 80104ec:	4b08      	ldr	r3, [pc, #32]	; (8010510 <tcp_receive+0x88c>)
 80104ee:	68db      	ldr	r3, [r3, #12]
 80104f0:	899b      	ldrh	r3, [r3, #12]
 80104f2:	b29b      	uxth	r3, r3
 80104f4:	4618      	mov	r0, r3
 80104f6:	f7f9 ffaf 	bl	800a458 <lwip_htons>
 80104fa:	4603      	mov	r3, r0
 80104fc:	b2db      	uxtb	r3, r3
 80104fe:	f003 0303 	and.w	r3, r3, #3
 8010502:	2b00      	cmp	r3, #0
 8010504:	d00e      	beq.n	8010524 <tcp_receive+0x8a0>
 8010506:	2301      	movs	r3, #1
 8010508:	e00d      	b.n	8010526 <tcp_receive+0x8a2>
 801050a:	bf00      	nop
 801050c:	2000d170 	.word	0x2000d170
 8010510:	2000d150 	.word	0x2000d150
 8010514:	2000d17a 	.word	0x2000d17a
 8010518:	080192a0 	.word	0x080192a0
 801051c:	08019648 	.word	0x08019648
 8010520:	080192ec 	.word	0x080192ec
 8010524:	2300      	movs	r3, #0
 8010526:	4423      	add	r3, r4
 8010528:	b29a      	uxth	r2, r3
 801052a:	4b98      	ldr	r3, [pc, #608]	; (801078c <tcp_receive+0xb08>)
 801052c:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801052e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010530:	613b      	str	r3, [r7, #16]
              next = next->next;
 8010532:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8010538:	6938      	ldr	r0, [r7, #16]
 801053a:	f7fd fc80 	bl	800de3e <tcp_seg_free>
            while (next &&
 801053e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010540:	2b00      	cmp	r3, #0
 8010542:	d00e      	beq.n	8010562 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8010544:	4b91      	ldr	r3, [pc, #580]	; (801078c <tcp_receive+0xb08>)
 8010546:	881b      	ldrh	r3, [r3, #0]
 8010548:	461a      	mov	r2, r3
 801054a:	4b91      	ldr	r3, [pc, #580]	; (8010790 <tcp_receive+0xb0c>)
 801054c:	681b      	ldr	r3, [r3, #0]
 801054e:	441a      	add	r2, r3
 8010550:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010552:	68db      	ldr	r3, [r3, #12]
 8010554:	685b      	ldr	r3, [r3, #4]
 8010556:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8010558:	8909      	ldrh	r1, [r1, #8]
 801055a:	440b      	add	r3, r1
 801055c:	1ad3      	subs	r3, r2, r3
            while (next &&
 801055e:	2b00      	cmp	r3, #0
 8010560:	da9a      	bge.n	8010498 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8010562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010564:	2b00      	cmp	r3, #0
 8010566:	d059      	beq.n	801061c <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8010568:	4b88      	ldr	r3, [pc, #544]	; (801078c <tcp_receive+0xb08>)
 801056a:	881b      	ldrh	r3, [r3, #0]
 801056c:	461a      	mov	r2, r3
 801056e:	4b88      	ldr	r3, [pc, #544]	; (8010790 <tcp_receive+0xb0c>)
 8010570:	681b      	ldr	r3, [r3, #0]
 8010572:	441a      	add	r2, r3
 8010574:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	685b      	ldr	r3, [r3, #4]
 801057a:	1ad3      	subs	r3, r2, r3
            if (next &&
 801057c:	2b00      	cmp	r3, #0
 801057e:	dd4d      	ble.n	801061c <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8010580:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010582:	68db      	ldr	r3, [r3, #12]
 8010584:	685b      	ldr	r3, [r3, #4]
 8010586:	b29a      	uxth	r2, r3
 8010588:	4b81      	ldr	r3, [pc, #516]	; (8010790 <tcp_receive+0xb0c>)
 801058a:	681b      	ldr	r3, [r3, #0]
 801058c:	b29b      	uxth	r3, r3
 801058e:	1ad3      	subs	r3, r2, r3
 8010590:	b29a      	uxth	r2, r3
 8010592:	4b80      	ldr	r3, [pc, #512]	; (8010794 <tcp_receive+0xb10>)
 8010594:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8010596:	4b7f      	ldr	r3, [pc, #508]	; (8010794 <tcp_receive+0xb10>)
 8010598:	68db      	ldr	r3, [r3, #12]
 801059a:	899b      	ldrh	r3, [r3, #12]
 801059c:	b29b      	uxth	r3, r3
 801059e:	4618      	mov	r0, r3
 80105a0:	f7f9 ff5a 	bl	800a458 <lwip_htons>
 80105a4:	4603      	mov	r3, r0
 80105a6:	b2db      	uxtb	r3, r3
 80105a8:	f003 0302 	and.w	r3, r3, #2
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d005      	beq.n	80105bc <tcp_receive+0x938>
                inseg.len -= 1;
 80105b0:	4b78      	ldr	r3, [pc, #480]	; (8010794 <tcp_receive+0xb10>)
 80105b2:	891b      	ldrh	r3, [r3, #8]
 80105b4:	3b01      	subs	r3, #1
 80105b6:	b29a      	uxth	r2, r3
 80105b8:	4b76      	ldr	r3, [pc, #472]	; (8010794 <tcp_receive+0xb10>)
 80105ba:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80105bc:	4b75      	ldr	r3, [pc, #468]	; (8010794 <tcp_receive+0xb10>)
 80105be:	685b      	ldr	r3, [r3, #4]
 80105c0:	4a74      	ldr	r2, [pc, #464]	; (8010794 <tcp_receive+0xb10>)
 80105c2:	8912      	ldrh	r2, [r2, #8]
 80105c4:	4611      	mov	r1, r2
 80105c6:	4618      	mov	r0, r3
 80105c8:	f7fb fc9a 	bl	800bf00 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80105cc:	4b71      	ldr	r3, [pc, #452]	; (8010794 <tcp_receive+0xb10>)
 80105ce:	891c      	ldrh	r4, [r3, #8]
 80105d0:	4b70      	ldr	r3, [pc, #448]	; (8010794 <tcp_receive+0xb10>)
 80105d2:	68db      	ldr	r3, [r3, #12]
 80105d4:	899b      	ldrh	r3, [r3, #12]
 80105d6:	b29b      	uxth	r3, r3
 80105d8:	4618      	mov	r0, r3
 80105da:	f7f9 ff3d 	bl	800a458 <lwip_htons>
 80105de:	4603      	mov	r3, r0
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	f003 0303 	and.w	r3, r3, #3
 80105e6:	2b00      	cmp	r3, #0
 80105e8:	d001      	beq.n	80105ee <tcp_receive+0x96a>
 80105ea:	2301      	movs	r3, #1
 80105ec:	e000      	b.n	80105f0 <tcp_receive+0x96c>
 80105ee:	2300      	movs	r3, #0
 80105f0:	4423      	add	r3, r4
 80105f2:	b29a      	uxth	r2, r3
 80105f4:	4b65      	ldr	r3, [pc, #404]	; (801078c <tcp_receive+0xb08>)
 80105f6:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80105f8:	4b64      	ldr	r3, [pc, #400]	; (801078c <tcp_receive+0xb08>)
 80105fa:	881b      	ldrh	r3, [r3, #0]
 80105fc:	461a      	mov	r2, r3
 80105fe:	4b64      	ldr	r3, [pc, #400]	; (8010790 <tcp_receive+0xb0c>)
 8010600:	681b      	ldr	r3, [r3, #0]
 8010602:	441a      	add	r2, r3
 8010604:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010606:	68db      	ldr	r3, [r3, #12]
 8010608:	685b      	ldr	r3, [r3, #4]
 801060a:	429a      	cmp	r2, r3
 801060c:	d006      	beq.n	801061c <tcp_receive+0x998>
 801060e:	4b62      	ldr	r3, [pc, #392]	; (8010798 <tcp_receive+0xb14>)
 8010610:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8010614:	4961      	ldr	r1, [pc, #388]	; (801079c <tcp_receive+0xb18>)
 8010616:	4862      	ldr	r0, [pc, #392]	; (80107a0 <tcp_receive+0xb1c>)
 8010618:	f005 ff9a 	bl	8016550 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8010620:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8010622:	4b5a      	ldr	r3, [pc, #360]	; (801078c <tcp_receive+0xb08>)
 8010624:	881b      	ldrh	r3, [r3, #0]
 8010626:	461a      	mov	r2, r3
 8010628:	4b59      	ldr	r3, [pc, #356]	; (8010790 <tcp_receive+0xb0c>)
 801062a:	681b      	ldr	r3, [r3, #0]
 801062c:	441a      	add	r2, r3
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8010632:	687b      	ldr	r3, [r7, #4]
 8010634:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010636:	4b55      	ldr	r3, [pc, #340]	; (801078c <tcp_receive+0xb08>)
 8010638:	881b      	ldrh	r3, [r3, #0]
 801063a:	429a      	cmp	r2, r3
 801063c:	d206      	bcs.n	801064c <tcp_receive+0x9c8>
 801063e:	4b56      	ldr	r3, [pc, #344]	; (8010798 <tcp_receive+0xb14>)
 8010640:	f240 6207 	movw	r2, #1543	; 0x607
 8010644:	4957      	ldr	r1, [pc, #348]	; (80107a4 <tcp_receive+0xb20>)
 8010646:	4856      	ldr	r0, [pc, #344]	; (80107a0 <tcp_receive+0xb1c>)
 8010648:	f005 ff82 	bl	8016550 <iprintf>
        pcb->rcv_wnd -= tcplen;
 801064c:	687b      	ldr	r3, [r7, #4]
 801064e:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010650:	4b4e      	ldr	r3, [pc, #312]	; (801078c <tcp_receive+0xb08>)
 8010652:	881b      	ldrh	r3, [r3, #0]
 8010654:	1ad3      	subs	r3, r2, r3
 8010656:	b29a      	uxth	r2, r3
 8010658:	687b      	ldr	r3, [r7, #4]
 801065a:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 801065c:	6878      	ldr	r0, [r7, #4]
 801065e:	f7fc fdb1 	bl	800d1c4 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8010662:	4b4c      	ldr	r3, [pc, #304]	; (8010794 <tcp_receive+0xb10>)
 8010664:	685b      	ldr	r3, [r3, #4]
 8010666:	891b      	ldrh	r3, [r3, #8]
 8010668:	2b00      	cmp	r3, #0
 801066a:	d006      	beq.n	801067a <tcp_receive+0x9f6>
          recv_data = inseg.p;
 801066c:	4b49      	ldr	r3, [pc, #292]	; (8010794 <tcp_receive+0xb10>)
 801066e:	685b      	ldr	r3, [r3, #4]
 8010670:	4a4d      	ldr	r2, [pc, #308]	; (80107a8 <tcp_receive+0xb24>)
 8010672:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8010674:	4b47      	ldr	r3, [pc, #284]	; (8010794 <tcp_receive+0xb10>)
 8010676:	2200      	movs	r2, #0
 8010678:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801067a:	4b46      	ldr	r3, [pc, #280]	; (8010794 <tcp_receive+0xb10>)
 801067c:	68db      	ldr	r3, [r3, #12]
 801067e:	899b      	ldrh	r3, [r3, #12]
 8010680:	b29b      	uxth	r3, r3
 8010682:	4618      	mov	r0, r3
 8010684:	f7f9 fee8 	bl	800a458 <lwip_htons>
 8010688:	4603      	mov	r3, r0
 801068a:	b2db      	uxtb	r3, r3
 801068c:	f003 0301 	and.w	r3, r3, #1
 8010690:	2b00      	cmp	r3, #0
 8010692:	f000 80b8 	beq.w	8010806 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 8010696:	4b45      	ldr	r3, [pc, #276]	; (80107ac <tcp_receive+0xb28>)
 8010698:	781b      	ldrb	r3, [r3, #0]
 801069a:	f043 0320 	orr.w	r3, r3, #32
 801069e:	b2da      	uxtb	r2, r3
 80106a0:	4b42      	ldr	r3, [pc, #264]	; (80107ac <tcp_receive+0xb28>)
 80106a2:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80106a4:	e0af      	b.n	8010806 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80106a6:	687b      	ldr	r3, [r7, #4]
 80106a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106aa:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80106ac:	687b      	ldr	r3, [r7, #4]
 80106ae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80106b0:	68db      	ldr	r3, [r3, #12]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	4a36      	ldr	r2, [pc, #216]	; (8010790 <tcp_receive+0xb0c>)
 80106b6:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80106b8:	68bb      	ldr	r3, [r7, #8]
 80106ba:	891b      	ldrh	r3, [r3, #8]
 80106bc:	461c      	mov	r4, r3
 80106be:	68bb      	ldr	r3, [r7, #8]
 80106c0:	68db      	ldr	r3, [r3, #12]
 80106c2:	899b      	ldrh	r3, [r3, #12]
 80106c4:	b29b      	uxth	r3, r3
 80106c6:	4618      	mov	r0, r3
 80106c8:	f7f9 fec6 	bl	800a458 <lwip_htons>
 80106cc:	4603      	mov	r3, r0
 80106ce:	b2db      	uxtb	r3, r3
 80106d0:	f003 0303 	and.w	r3, r3, #3
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d001      	beq.n	80106dc <tcp_receive+0xa58>
 80106d8:	2301      	movs	r3, #1
 80106da:	e000      	b.n	80106de <tcp_receive+0xa5a>
 80106dc:	2300      	movs	r3, #0
 80106de:	191a      	adds	r2, r3, r4
 80106e0:	687b      	ldr	r3, [r7, #4]
 80106e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80106e4:	441a      	add	r2, r3
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80106ea:	687b      	ldr	r3, [r7, #4]
 80106ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80106ee:	461c      	mov	r4, r3
 80106f0:	68bb      	ldr	r3, [r7, #8]
 80106f2:	891b      	ldrh	r3, [r3, #8]
 80106f4:	461d      	mov	r5, r3
 80106f6:	68bb      	ldr	r3, [r7, #8]
 80106f8:	68db      	ldr	r3, [r3, #12]
 80106fa:	899b      	ldrh	r3, [r3, #12]
 80106fc:	b29b      	uxth	r3, r3
 80106fe:	4618      	mov	r0, r3
 8010700:	f7f9 feaa 	bl	800a458 <lwip_htons>
 8010704:	4603      	mov	r3, r0
 8010706:	b2db      	uxtb	r3, r3
 8010708:	f003 0303 	and.w	r3, r3, #3
 801070c:	2b00      	cmp	r3, #0
 801070e:	d001      	beq.n	8010714 <tcp_receive+0xa90>
 8010710:	2301      	movs	r3, #1
 8010712:	e000      	b.n	8010716 <tcp_receive+0xa92>
 8010714:	2300      	movs	r3, #0
 8010716:	442b      	add	r3, r5
 8010718:	429c      	cmp	r4, r3
 801071a:	d206      	bcs.n	801072a <tcp_receive+0xaa6>
 801071c:	4b1e      	ldr	r3, [pc, #120]	; (8010798 <tcp_receive+0xb14>)
 801071e:	f240 622b 	movw	r2, #1579	; 0x62b
 8010722:	4923      	ldr	r1, [pc, #140]	; (80107b0 <tcp_receive+0xb2c>)
 8010724:	481e      	ldr	r0, [pc, #120]	; (80107a0 <tcp_receive+0xb1c>)
 8010726:	f005 ff13 	bl	8016550 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801072a:	68bb      	ldr	r3, [r7, #8]
 801072c:	891b      	ldrh	r3, [r3, #8]
 801072e:	461c      	mov	r4, r3
 8010730:	68bb      	ldr	r3, [r7, #8]
 8010732:	68db      	ldr	r3, [r3, #12]
 8010734:	899b      	ldrh	r3, [r3, #12]
 8010736:	b29b      	uxth	r3, r3
 8010738:	4618      	mov	r0, r3
 801073a:	f7f9 fe8d 	bl	800a458 <lwip_htons>
 801073e:	4603      	mov	r3, r0
 8010740:	b2db      	uxtb	r3, r3
 8010742:	f003 0303 	and.w	r3, r3, #3
 8010746:	2b00      	cmp	r3, #0
 8010748:	d001      	beq.n	801074e <tcp_receive+0xaca>
 801074a:	2301      	movs	r3, #1
 801074c:	e000      	b.n	8010750 <tcp_receive+0xacc>
 801074e:	2300      	movs	r3, #0
 8010750:	1919      	adds	r1, r3, r4
 8010752:	687b      	ldr	r3, [r7, #4]
 8010754:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8010756:	b28b      	uxth	r3, r1
 8010758:	1ad3      	subs	r3, r2, r3
 801075a:	b29a      	uxth	r2, r3
 801075c:	687b      	ldr	r3, [r7, #4]
 801075e:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8010760:	6878      	ldr	r0, [r7, #4]
 8010762:	f7fc fd2f 	bl	800d1c4 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 8010766:	68bb      	ldr	r3, [r7, #8]
 8010768:	685b      	ldr	r3, [r3, #4]
 801076a:	891b      	ldrh	r3, [r3, #8]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d028      	beq.n	80107c2 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8010770:	4b0d      	ldr	r3, [pc, #52]	; (80107a8 <tcp_receive+0xb24>)
 8010772:	681b      	ldr	r3, [r3, #0]
 8010774:	2b00      	cmp	r3, #0
 8010776:	d01d      	beq.n	80107b4 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 8010778:	4b0b      	ldr	r3, [pc, #44]	; (80107a8 <tcp_receive+0xb24>)
 801077a:	681a      	ldr	r2, [r3, #0]
 801077c:	68bb      	ldr	r3, [r7, #8]
 801077e:	685b      	ldr	r3, [r3, #4]
 8010780:	4619      	mov	r1, r3
 8010782:	4610      	mov	r0, r2
 8010784:	f7fb fe10 	bl	800c3a8 <pbuf_cat>
 8010788:	e018      	b.n	80107bc <tcp_receive+0xb38>
 801078a:	bf00      	nop
 801078c:	2000d17a 	.word	0x2000d17a
 8010790:	2000d170 	.word	0x2000d170
 8010794:	2000d150 	.word	0x2000d150
 8010798:	080192a0 	.word	0x080192a0
 801079c:	08019680 	.word	0x08019680
 80107a0:	080192ec 	.word	0x080192ec
 80107a4:	080196bc 	.word	0x080196bc
 80107a8:	2000d180 	.word	0x2000d180
 80107ac:	2000d17d 	.word	0x2000d17d
 80107b0:	080196dc 	.word	0x080196dc
            } else {
              recv_data = cseg->p;
 80107b4:	68bb      	ldr	r3, [r7, #8]
 80107b6:	685b      	ldr	r3, [r3, #4]
 80107b8:	4a70      	ldr	r2, [pc, #448]	; (801097c <tcp_receive+0xcf8>)
 80107ba:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80107bc:	68bb      	ldr	r3, [r7, #8]
 80107be:	2200      	movs	r2, #0
 80107c0:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80107c2:	68bb      	ldr	r3, [r7, #8]
 80107c4:	68db      	ldr	r3, [r3, #12]
 80107c6:	899b      	ldrh	r3, [r3, #12]
 80107c8:	b29b      	uxth	r3, r3
 80107ca:	4618      	mov	r0, r3
 80107cc:	f7f9 fe44 	bl	800a458 <lwip_htons>
 80107d0:	4603      	mov	r3, r0
 80107d2:	b2db      	uxtb	r3, r3
 80107d4:	f003 0301 	and.w	r3, r3, #1
 80107d8:	2b00      	cmp	r3, #0
 80107da:	d00d      	beq.n	80107f8 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80107dc:	4b68      	ldr	r3, [pc, #416]	; (8010980 <tcp_receive+0xcfc>)
 80107de:	781b      	ldrb	r3, [r3, #0]
 80107e0:	f043 0320 	orr.w	r3, r3, #32
 80107e4:	b2da      	uxtb	r2, r3
 80107e6:	4b66      	ldr	r3, [pc, #408]	; (8010980 <tcp_receive+0xcfc>)
 80107e8:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	7d1b      	ldrb	r3, [r3, #20]
 80107ee:	2b04      	cmp	r3, #4
 80107f0:	d102      	bne.n	80107f8 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80107f2:	687b      	ldr	r3, [r7, #4]
 80107f4:	2207      	movs	r2, #7
 80107f6:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80107f8:	68bb      	ldr	r3, [r7, #8]
 80107fa:	681a      	ldr	r2, [r3, #0]
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8010800:	68b8      	ldr	r0, [r7, #8]
 8010802:	f7fd fb1c 	bl	800de3e <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8010806:	687b      	ldr	r3, [r7, #4]
 8010808:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801080a:	2b00      	cmp	r3, #0
 801080c:	d008      	beq.n	8010820 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801080e:	687b      	ldr	r3, [r7, #4]
 8010810:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010812:	68db      	ldr	r3, [r3, #12]
 8010814:	685a      	ldr	r2, [r3, #4]
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801081a:	429a      	cmp	r2, r3
 801081c:	f43f af43 	beq.w	80106a6 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8010820:	687b      	ldr	r3, [r7, #4]
 8010822:	8b5b      	ldrh	r3, [r3, #26]
 8010824:	f003 0301 	and.w	r3, r3, #1
 8010828:	2b00      	cmp	r3, #0
 801082a:	d00e      	beq.n	801084a <tcp_receive+0xbc6>
 801082c:	687b      	ldr	r3, [r7, #4]
 801082e:	8b5b      	ldrh	r3, [r3, #26]
 8010830:	f023 0301 	bic.w	r3, r3, #1
 8010834:	b29a      	uxth	r2, r3
 8010836:	687b      	ldr	r3, [r7, #4]
 8010838:	835a      	strh	r2, [r3, #26]
 801083a:	687b      	ldr	r3, [r7, #4]
 801083c:	8b5b      	ldrh	r3, [r3, #26]
 801083e:	f043 0302 	orr.w	r3, r3, #2
 8010842:	b29a      	uxth	r2, r3
 8010844:	687b      	ldr	r3, [r7, #4]
 8010846:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010848:	e188      	b.n	8010b5c <tcp_receive+0xed8>
        tcp_ack(pcb);
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	8b5b      	ldrh	r3, [r3, #26]
 801084e:	f043 0301 	orr.w	r3, r3, #1
 8010852:	b29a      	uxth	r2, r3
 8010854:	687b      	ldr	r3, [r7, #4]
 8010856:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8010858:	e180      	b.n	8010b5c <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801085e:	2b00      	cmp	r3, #0
 8010860:	d106      	bne.n	8010870 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8010862:	4848      	ldr	r0, [pc, #288]	; (8010984 <tcp_receive+0xd00>)
 8010864:	f7fd fb04 	bl	800de70 <tcp_seg_copy>
 8010868:	4602      	mov	r2, r0
 801086a:	687b      	ldr	r3, [r7, #4]
 801086c:	675a      	str	r2, [r3, #116]	; 0x74
 801086e:	e16d      	b.n	8010b4c <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8010870:	2300      	movs	r3, #0
 8010872:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010874:	687b      	ldr	r3, [r7, #4]
 8010876:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010878:	63bb      	str	r3, [r7, #56]	; 0x38
 801087a:	e157      	b.n	8010b2c <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 801087c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801087e:	68db      	ldr	r3, [r3, #12]
 8010880:	685a      	ldr	r2, [r3, #4]
 8010882:	4b41      	ldr	r3, [pc, #260]	; (8010988 <tcp_receive+0xd04>)
 8010884:	681b      	ldr	r3, [r3, #0]
 8010886:	429a      	cmp	r2, r3
 8010888:	d11d      	bne.n	80108c6 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801088a:	4b3e      	ldr	r3, [pc, #248]	; (8010984 <tcp_receive+0xd00>)
 801088c:	891a      	ldrh	r2, [r3, #8]
 801088e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010890:	891b      	ldrh	r3, [r3, #8]
 8010892:	429a      	cmp	r2, r3
 8010894:	f240 814f 	bls.w	8010b36 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010898:	483a      	ldr	r0, [pc, #232]	; (8010984 <tcp_receive+0xd00>)
 801089a:	f7fd fae9 	bl	800de70 <tcp_seg_copy>
 801089e:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80108a0:	697b      	ldr	r3, [r7, #20]
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	f000 8149 	beq.w	8010b3a <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80108a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108aa:	2b00      	cmp	r3, #0
 80108ac:	d003      	beq.n	80108b6 <tcp_receive+0xc32>
                    prev->next = cseg;
 80108ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108b0:	697a      	ldr	r2, [r7, #20]
 80108b2:	601a      	str	r2, [r3, #0]
 80108b4:	e002      	b.n	80108bc <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80108b6:	687b      	ldr	r3, [r7, #4]
 80108b8:	697a      	ldr	r2, [r7, #20]
 80108ba:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80108bc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108be:	6978      	ldr	r0, [r7, #20]
 80108c0:	f7ff f8dc 	bl	800fa7c <tcp_oos_insert_segment>
                }
                break;
 80108c4:	e139      	b.n	8010b3a <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80108c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d117      	bne.n	80108fc <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80108cc:	4b2e      	ldr	r3, [pc, #184]	; (8010988 <tcp_receive+0xd04>)
 80108ce:	681a      	ldr	r2, [r3, #0]
 80108d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80108d2:	68db      	ldr	r3, [r3, #12]
 80108d4:	685b      	ldr	r3, [r3, #4]
 80108d6:	1ad3      	subs	r3, r2, r3
 80108d8:	2b00      	cmp	r3, #0
 80108da:	da57      	bge.n	801098c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80108dc:	4829      	ldr	r0, [pc, #164]	; (8010984 <tcp_receive+0xd00>)
 80108de:	f7fd fac7 	bl	800de70 <tcp_seg_copy>
 80108e2:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80108e4:	69bb      	ldr	r3, [r7, #24]
 80108e6:	2b00      	cmp	r3, #0
 80108e8:	f000 8129 	beq.w	8010b3e <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80108ec:	687b      	ldr	r3, [r7, #4]
 80108ee:	69ba      	ldr	r2, [r7, #24]
 80108f0:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80108f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80108f4:	69b8      	ldr	r0, [r7, #24]
 80108f6:	f7ff f8c1 	bl	800fa7c <tcp_oos_insert_segment>
                  }
                  break;
 80108fa:	e120      	b.n	8010b3e <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 80108fc:	4b22      	ldr	r3, [pc, #136]	; (8010988 <tcp_receive+0xd04>)
 80108fe:	681a      	ldr	r2, [r3, #0]
 8010900:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010902:	68db      	ldr	r3, [r3, #12]
 8010904:	685b      	ldr	r3, [r3, #4]
 8010906:	1ad3      	subs	r3, r2, r3
 8010908:	3b01      	subs	r3, #1
 801090a:	2b00      	cmp	r3, #0
 801090c:	db3e      	blt.n	801098c <tcp_receive+0xd08>
 801090e:	4b1e      	ldr	r3, [pc, #120]	; (8010988 <tcp_receive+0xd04>)
 8010910:	681a      	ldr	r2, [r3, #0]
 8010912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010914:	68db      	ldr	r3, [r3, #12]
 8010916:	685b      	ldr	r3, [r3, #4]
 8010918:	1ad3      	subs	r3, r2, r3
 801091a:	3301      	adds	r3, #1
 801091c:	2b00      	cmp	r3, #0
 801091e:	dc35      	bgt.n	801098c <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8010920:	4818      	ldr	r0, [pc, #96]	; (8010984 <tcp_receive+0xd00>)
 8010922:	f7fd faa5 	bl	800de70 <tcp_seg_copy>
 8010926:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8010928:	69fb      	ldr	r3, [r7, #28]
 801092a:	2b00      	cmp	r3, #0
 801092c:	f000 8109 	beq.w	8010b42 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8010930:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010932:	68db      	ldr	r3, [r3, #12]
 8010934:	685b      	ldr	r3, [r3, #4]
 8010936:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8010938:	8912      	ldrh	r2, [r2, #8]
 801093a:	441a      	add	r2, r3
 801093c:	4b12      	ldr	r3, [pc, #72]	; (8010988 <tcp_receive+0xd04>)
 801093e:	681b      	ldr	r3, [r3, #0]
 8010940:	1ad3      	subs	r3, r2, r3
 8010942:	2b00      	cmp	r3, #0
 8010944:	dd12      	ble.n	801096c <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8010946:	4b10      	ldr	r3, [pc, #64]	; (8010988 <tcp_receive+0xd04>)
 8010948:	681b      	ldr	r3, [r3, #0]
 801094a:	b29a      	uxth	r2, r3
 801094c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	b29b      	uxth	r3, r3
 8010954:	1ad3      	subs	r3, r2, r3
 8010956:	b29a      	uxth	r2, r3
 8010958:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095a:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 801095c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801095e:	685a      	ldr	r2, [r3, #4]
 8010960:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010962:	891b      	ldrh	r3, [r3, #8]
 8010964:	4619      	mov	r1, r3
 8010966:	4610      	mov	r0, r2
 8010968:	f7fb faca 	bl	800bf00 <pbuf_realloc>
                    }
                    prev->next = cseg;
 801096c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801096e:	69fa      	ldr	r2, [r7, #28]
 8010970:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8010972:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010974:	69f8      	ldr	r0, [r7, #28]
 8010976:	f7ff f881 	bl	800fa7c <tcp_oos_insert_segment>
                  }
                  break;
 801097a:	e0e2      	b.n	8010b42 <tcp_receive+0xebe>
 801097c:	2000d180 	.word	0x2000d180
 8010980:	2000d17d 	.word	0x2000d17d
 8010984:	2000d150 	.word	0x2000d150
 8010988:	2000d170 	.word	0x2000d170
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 801098c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801098e:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8010990:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010992:	681b      	ldr	r3, [r3, #0]
 8010994:	2b00      	cmp	r3, #0
 8010996:	f040 80c6 	bne.w	8010b26 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801099a:	4b80      	ldr	r3, [pc, #512]	; (8010b9c <tcp_receive+0xf18>)
 801099c:	681a      	ldr	r2, [r3, #0]
 801099e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109a0:	68db      	ldr	r3, [r3, #12]
 80109a2:	685b      	ldr	r3, [r3, #4]
 80109a4:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80109a6:	2b00      	cmp	r3, #0
 80109a8:	f340 80bd 	ble.w	8010b26 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80109ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109ae:	68db      	ldr	r3, [r3, #12]
 80109b0:	899b      	ldrh	r3, [r3, #12]
 80109b2:	b29b      	uxth	r3, r3
 80109b4:	4618      	mov	r0, r3
 80109b6:	f7f9 fd4f 	bl	800a458 <lwip_htons>
 80109ba:	4603      	mov	r3, r0
 80109bc:	b2db      	uxtb	r3, r3
 80109be:	f003 0301 	and.w	r3, r3, #1
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	f040 80bf 	bne.w	8010b46 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80109c8:	4875      	ldr	r0, [pc, #468]	; (8010ba0 <tcp_receive+0xf1c>)
 80109ca:	f7fd fa51 	bl	800de70 <tcp_seg_copy>
 80109ce:	4602      	mov	r2, r0
 80109d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d2:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80109d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109d6:	681b      	ldr	r3, [r3, #0]
 80109d8:	2b00      	cmp	r3, #0
 80109da:	f000 80b6 	beq.w	8010b4a <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80109de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109e0:	68db      	ldr	r3, [r3, #12]
 80109e2:	685b      	ldr	r3, [r3, #4]
 80109e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80109e6:	8912      	ldrh	r2, [r2, #8]
 80109e8:	441a      	add	r2, r3
 80109ea:	4b6c      	ldr	r3, [pc, #432]	; (8010b9c <tcp_receive+0xf18>)
 80109ec:	681b      	ldr	r3, [r3, #0]
 80109ee:	1ad3      	subs	r3, r2, r3
 80109f0:	2b00      	cmp	r3, #0
 80109f2:	dd12      	ble.n	8010a1a <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80109f4:	4b69      	ldr	r3, [pc, #420]	; (8010b9c <tcp_receive+0xf18>)
 80109f6:	681b      	ldr	r3, [r3, #0]
 80109f8:	b29a      	uxth	r2, r3
 80109fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80109fc:	68db      	ldr	r3, [r3, #12]
 80109fe:	685b      	ldr	r3, [r3, #4]
 8010a00:	b29b      	uxth	r3, r3
 8010a02:	1ad3      	subs	r3, r2, r3
 8010a04:	b29a      	uxth	r2, r3
 8010a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a08:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8010a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a0c:	685a      	ldr	r2, [r3, #4]
 8010a0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a10:	891b      	ldrh	r3, [r3, #8]
 8010a12:	4619      	mov	r1, r3
 8010a14:	4610      	mov	r0, r2
 8010a16:	f7fb fa73 	bl	800bf00 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8010a1a:	4b62      	ldr	r3, [pc, #392]	; (8010ba4 <tcp_receive+0xf20>)
 8010a1c:	881b      	ldrh	r3, [r3, #0]
 8010a1e:	461a      	mov	r2, r3
 8010a20:	4b5e      	ldr	r3, [pc, #376]	; (8010b9c <tcp_receive+0xf18>)
 8010a22:	681b      	ldr	r3, [r3, #0]
 8010a24:	441a      	add	r2, r3
 8010a26:	687b      	ldr	r3, [r7, #4]
 8010a28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a2a:	6879      	ldr	r1, [r7, #4]
 8010a2c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010a2e:	440b      	add	r3, r1
 8010a30:	1ad3      	subs	r3, r2, r3
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	f340 8089 	ble.w	8010b4a <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8010a38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a3a:	681b      	ldr	r3, [r3, #0]
 8010a3c:	68db      	ldr	r3, [r3, #12]
 8010a3e:	899b      	ldrh	r3, [r3, #12]
 8010a40:	b29b      	uxth	r3, r3
 8010a42:	4618      	mov	r0, r3
 8010a44:	f7f9 fd08 	bl	800a458 <lwip_htons>
 8010a48:	4603      	mov	r3, r0
 8010a4a:	b2db      	uxtb	r3, r3
 8010a4c:	f003 0301 	and.w	r3, r3, #1
 8010a50:	2b00      	cmp	r3, #0
 8010a52:	d022      	beq.n	8010a9a <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8010a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	68db      	ldr	r3, [r3, #12]
 8010a5a:	899b      	ldrh	r3, [r3, #12]
 8010a5c:	b29b      	uxth	r3, r3
 8010a5e:	b21b      	sxth	r3, r3
 8010a60:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8010a64:	b21c      	sxth	r4, r3
 8010a66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a68:	681b      	ldr	r3, [r3, #0]
 8010a6a:	68db      	ldr	r3, [r3, #12]
 8010a6c:	899b      	ldrh	r3, [r3, #12]
 8010a6e:	b29b      	uxth	r3, r3
 8010a70:	4618      	mov	r0, r3
 8010a72:	f7f9 fcf1 	bl	800a458 <lwip_htons>
 8010a76:	4603      	mov	r3, r0
 8010a78:	b2db      	uxtb	r3, r3
 8010a7a:	b29b      	uxth	r3, r3
 8010a7c:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8010a80:	b29b      	uxth	r3, r3
 8010a82:	4618      	mov	r0, r3
 8010a84:	f7f9 fce8 	bl	800a458 <lwip_htons>
 8010a88:	4603      	mov	r3, r0
 8010a8a:	b21b      	sxth	r3, r3
 8010a8c:	4323      	orrs	r3, r4
 8010a8e:	b21a      	sxth	r2, r3
 8010a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	68db      	ldr	r3, [r3, #12]
 8010a96:	b292      	uxth	r2, r2
 8010a98:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010a9e:	b29a      	uxth	r2, r3
 8010aa0:	687b      	ldr	r3, [r7, #4]
 8010aa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8010aa4:	4413      	add	r3, r2
 8010aa6:	b299      	uxth	r1, r3
 8010aa8:	4b3c      	ldr	r3, [pc, #240]	; (8010b9c <tcp_receive+0xf18>)
 8010aaa:	681b      	ldr	r3, [r3, #0]
 8010aac:	b29a      	uxth	r2, r3
 8010aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ab0:	681b      	ldr	r3, [r3, #0]
 8010ab2:	1a8a      	subs	r2, r1, r2
 8010ab4:	b292      	uxth	r2, r2
 8010ab6:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8010ab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010aba:	681b      	ldr	r3, [r3, #0]
 8010abc:	685a      	ldr	r2, [r3, #4]
 8010abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ac0:	681b      	ldr	r3, [r3, #0]
 8010ac2:	891b      	ldrh	r3, [r3, #8]
 8010ac4:	4619      	mov	r1, r3
 8010ac6:	4610      	mov	r0, r2
 8010ac8:	f7fb fa1a 	bl	800bf00 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8010acc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ace:	681b      	ldr	r3, [r3, #0]
 8010ad0:	891c      	ldrh	r4, [r3, #8]
 8010ad2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010ad4:	681b      	ldr	r3, [r3, #0]
 8010ad6:	68db      	ldr	r3, [r3, #12]
 8010ad8:	899b      	ldrh	r3, [r3, #12]
 8010ada:	b29b      	uxth	r3, r3
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7f9 fcbb 	bl	800a458 <lwip_htons>
 8010ae2:	4603      	mov	r3, r0
 8010ae4:	b2db      	uxtb	r3, r3
 8010ae6:	f003 0303 	and.w	r3, r3, #3
 8010aea:	2b00      	cmp	r3, #0
 8010aec:	d001      	beq.n	8010af2 <tcp_receive+0xe6e>
 8010aee:	2301      	movs	r3, #1
 8010af0:	e000      	b.n	8010af4 <tcp_receive+0xe70>
 8010af2:	2300      	movs	r3, #0
 8010af4:	4423      	add	r3, r4
 8010af6:	b29a      	uxth	r2, r3
 8010af8:	4b2a      	ldr	r3, [pc, #168]	; (8010ba4 <tcp_receive+0xf20>)
 8010afa:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8010afc:	4b29      	ldr	r3, [pc, #164]	; (8010ba4 <tcp_receive+0xf20>)
 8010afe:	881b      	ldrh	r3, [r3, #0]
 8010b00:	461a      	mov	r2, r3
 8010b02:	4b26      	ldr	r3, [pc, #152]	; (8010b9c <tcp_receive+0xf18>)
 8010b04:	681b      	ldr	r3, [r3, #0]
 8010b06:	441a      	add	r2, r3
 8010b08:	687b      	ldr	r3, [r7, #4]
 8010b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b0c:	6879      	ldr	r1, [r7, #4]
 8010b0e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b10:	440b      	add	r3, r1
 8010b12:	429a      	cmp	r2, r3
 8010b14:	d019      	beq.n	8010b4a <tcp_receive+0xec6>
 8010b16:	4b24      	ldr	r3, [pc, #144]	; (8010ba8 <tcp_receive+0xf24>)
 8010b18:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8010b1c:	4923      	ldr	r1, [pc, #140]	; (8010bac <tcp_receive+0xf28>)
 8010b1e:	4824      	ldr	r0, [pc, #144]	; (8010bb0 <tcp_receive+0xf2c>)
 8010b20:	f005 fd16 	bl	8016550 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8010b24:	e011      	b.n	8010b4a <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8010b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b28:	681b      	ldr	r3, [r3, #0]
 8010b2a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010b2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010b2e:	2b00      	cmp	r3, #0
 8010b30:	f47f aea4 	bne.w	801087c <tcp_receive+0xbf8>
 8010b34:	e00a      	b.n	8010b4c <tcp_receive+0xec8>
                break;
 8010b36:	bf00      	nop
 8010b38:	e008      	b.n	8010b4c <tcp_receive+0xec8>
                break;
 8010b3a:	bf00      	nop
 8010b3c:	e006      	b.n	8010b4c <tcp_receive+0xec8>
                  break;
 8010b3e:	bf00      	nop
 8010b40:	e004      	b.n	8010b4c <tcp_receive+0xec8>
                  break;
 8010b42:	bf00      	nop
 8010b44:	e002      	b.n	8010b4c <tcp_receive+0xec8>
                  break;
 8010b46:	bf00      	nop
 8010b48:	e000      	b.n	8010b4c <tcp_receive+0xec8>
                break;
 8010b4a:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8010b4c:	6878      	ldr	r0, [r7, #4]
 8010b4e:	f001 fe8b 	bl	8012868 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8010b52:	e003      	b.n	8010b5c <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8010b54:	6878      	ldr	r0, [r7, #4]
 8010b56:	f001 fe87 	bl	8012868 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8010b5a:	e01a      	b.n	8010b92 <tcp_receive+0xf0e>
 8010b5c:	e019      	b.n	8010b92 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8010b5e:	4b0f      	ldr	r3, [pc, #60]	; (8010b9c <tcp_receive+0xf18>)
 8010b60:	681a      	ldr	r2, [r3, #0]
 8010b62:	687b      	ldr	r3, [r7, #4]
 8010b64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b66:	1ad3      	subs	r3, r2, r3
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	db0a      	blt.n	8010b82 <tcp_receive+0xefe>
 8010b6c:	4b0b      	ldr	r3, [pc, #44]	; (8010b9c <tcp_receive+0xf18>)
 8010b6e:	681a      	ldr	r2, [r3, #0]
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010b74:	6879      	ldr	r1, [r7, #4]
 8010b76:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010b78:	440b      	add	r3, r1
 8010b7a:	1ad3      	subs	r3, r2, r3
 8010b7c:	3301      	adds	r3, #1
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	dd07      	ble.n	8010b92 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8010b82:	687b      	ldr	r3, [r7, #4]
 8010b84:	8b5b      	ldrh	r3, [r3, #26]
 8010b86:	f043 0302 	orr.w	r3, r3, #2
 8010b8a:	b29a      	uxth	r2, r3
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8010b90:	e7ff      	b.n	8010b92 <tcp_receive+0xf0e>
 8010b92:	bf00      	nop
 8010b94:	3750      	adds	r7, #80	; 0x50
 8010b96:	46bd      	mov	sp, r7
 8010b98:	bdb0      	pop	{r4, r5, r7, pc}
 8010b9a:	bf00      	nop
 8010b9c:	2000d170 	.word	0x2000d170
 8010ba0:	2000d150 	.word	0x2000d150
 8010ba4:	2000d17a 	.word	0x2000d17a
 8010ba8:	080192a0 	.word	0x080192a0
 8010bac:	08019648 	.word	0x08019648
 8010bb0:	080192ec 	.word	0x080192ec

08010bb4 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8010bb4:	b480      	push	{r7}
 8010bb6:	b083      	sub	sp, #12
 8010bb8:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8010bba:	4b15      	ldr	r3, [pc, #84]	; (8010c10 <tcp_get_next_optbyte+0x5c>)
 8010bbc:	881b      	ldrh	r3, [r3, #0]
 8010bbe:	1c5a      	adds	r2, r3, #1
 8010bc0:	b291      	uxth	r1, r2
 8010bc2:	4a13      	ldr	r2, [pc, #76]	; (8010c10 <tcp_get_next_optbyte+0x5c>)
 8010bc4:	8011      	strh	r1, [r2, #0]
 8010bc6:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8010bc8:	4b12      	ldr	r3, [pc, #72]	; (8010c14 <tcp_get_next_optbyte+0x60>)
 8010bca:	681b      	ldr	r3, [r3, #0]
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d004      	beq.n	8010bda <tcp_get_next_optbyte+0x26>
 8010bd0:	4b11      	ldr	r3, [pc, #68]	; (8010c18 <tcp_get_next_optbyte+0x64>)
 8010bd2:	881b      	ldrh	r3, [r3, #0]
 8010bd4:	88fa      	ldrh	r2, [r7, #6]
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d208      	bcs.n	8010bec <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8010bda:	4b10      	ldr	r3, [pc, #64]	; (8010c1c <tcp_get_next_optbyte+0x68>)
 8010bdc:	681b      	ldr	r3, [r3, #0]
 8010bde:	3314      	adds	r3, #20
 8010be0:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8010be2:	88fb      	ldrh	r3, [r7, #6]
 8010be4:	683a      	ldr	r2, [r7, #0]
 8010be6:	4413      	add	r3, r2
 8010be8:	781b      	ldrb	r3, [r3, #0]
 8010bea:	e00b      	b.n	8010c04 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8010bec:	88fb      	ldrh	r3, [r7, #6]
 8010bee:	b2da      	uxtb	r2, r3
 8010bf0:	4b09      	ldr	r3, [pc, #36]	; (8010c18 <tcp_get_next_optbyte+0x64>)
 8010bf2:	881b      	ldrh	r3, [r3, #0]
 8010bf4:	b2db      	uxtb	r3, r3
 8010bf6:	1ad3      	subs	r3, r2, r3
 8010bf8:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8010bfa:	4b06      	ldr	r3, [pc, #24]	; (8010c14 <tcp_get_next_optbyte+0x60>)
 8010bfc:	681a      	ldr	r2, [r3, #0]
 8010bfe:	797b      	ldrb	r3, [r7, #5]
 8010c00:	4413      	add	r3, r2
 8010c02:	781b      	ldrb	r3, [r3, #0]
  }
}
 8010c04:	4618      	mov	r0, r3
 8010c06:	370c      	adds	r7, #12
 8010c08:	46bd      	mov	sp, r7
 8010c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010c0e:	4770      	bx	lr
 8010c10:	2000d16c 	.word	0x2000d16c
 8010c14:	2000d168 	.word	0x2000d168
 8010c18:	2000d166 	.word	0x2000d166
 8010c1c:	2000d160 	.word	0x2000d160

08010c20 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8010c20:	b580      	push	{r7, lr}
 8010c22:	b084      	sub	sp, #16
 8010c24:	af00      	add	r7, sp, #0
 8010c26:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8010c28:	687b      	ldr	r3, [r7, #4]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d106      	bne.n	8010c3c <tcp_parseopt+0x1c>
 8010c2e:	4b32      	ldr	r3, [pc, #200]	; (8010cf8 <tcp_parseopt+0xd8>)
 8010c30:	f240 727d 	movw	r2, #1917	; 0x77d
 8010c34:	4931      	ldr	r1, [pc, #196]	; (8010cfc <tcp_parseopt+0xdc>)
 8010c36:	4832      	ldr	r0, [pc, #200]	; (8010d00 <tcp_parseopt+0xe0>)
 8010c38:	f005 fc8a 	bl	8016550 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8010c3c:	4b31      	ldr	r3, [pc, #196]	; (8010d04 <tcp_parseopt+0xe4>)
 8010c3e:	881b      	ldrh	r3, [r3, #0]
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d055      	beq.n	8010cf0 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010c44:	4b30      	ldr	r3, [pc, #192]	; (8010d08 <tcp_parseopt+0xe8>)
 8010c46:	2200      	movs	r2, #0
 8010c48:	801a      	strh	r2, [r3, #0]
 8010c4a:	e045      	b.n	8010cd8 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8010c4c:	f7ff ffb2 	bl	8010bb4 <tcp_get_next_optbyte>
 8010c50:	4603      	mov	r3, r0
 8010c52:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8010c54:	7bfb      	ldrb	r3, [r7, #15]
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d006      	beq.n	8010c68 <tcp_parseopt+0x48>
 8010c5a:	2b02      	cmp	r3, #2
 8010c5c:	dc2b      	bgt.n	8010cb6 <tcp_parseopt+0x96>
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d041      	beq.n	8010ce6 <tcp_parseopt+0xc6>
 8010c62:	2b01      	cmp	r3, #1
 8010c64:	d127      	bne.n	8010cb6 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8010c66:	e037      	b.n	8010cd8 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8010c68:	f7ff ffa4 	bl	8010bb4 <tcp_get_next_optbyte>
 8010c6c:	4603      	mov	r3, r0
 8010c6e:	2b04      	cmp	r3, #4
 8010c70:	d13b      	bne.n	8010cea <tcp_parseopt+0xca>
 8010c72:	4b25      	ldr	r3, [pc, #148]	; (8010d08 <tcp_parseopt+0xe8>)
 8010c74:	881b      	ldrh	r3, [r3, #0]
 8010c76:	3301      	adds	r3, #1
 8010c78:	4a22      	ldr	r2, [pc, #136]	; (8010d04 <tcp_parseopt+0xe4>)
 8010c7a:	8812      	ldrh	r2, [r2, #0]
 8010c7c:	4293      	cmp	r3, r2
 8010c7e:	da34      	bge.n	8010cea <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8010c80:	f7ff ff98 	bl	8010bb4 <tcp_get_next_optbyte>
 8010c84:	4603      	mov	r3, r0
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	021b      	lsls	r3, r3, #8
 8010c8a:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8010c8c:	f7ff ff92 	bl	8010bb4 <tcp_get_next_optbyte>
 8010c90:	4603      	mov	r3, r0
 8010c92:	b29a      	uxth	r2, r3
 8010c94:	89bb      	ldrh	r3, [r7, #12]
 8010c96:	4313      	orrs	r3, r2
 8010c98:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8010c9a:	89bb      	ldrh	r3, [r7, #12]
 8010c9c:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8010ca0:	d804      	bhi.n	8010cac <tcp_parseopt+0x8c>
 8010ca2:	89bb      	ldrh	r3, [r7, #12]
 8010ca4:	2b00      	cmp	r3, #0
 8010ca6:	d001      	beq.n	8010cac <tcp_parseopt+0x8c>
 8010ca8:	89ba      	ldrh	r2, [r7, #12]
 8010caa:	e001      	b.n	8010cb0 <tcp_parseopt+0x90>
 8010cac:	f44f 7206 	mov.w	r2, #536	; 0x218
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8010cb4:	e010      	b.n	8010cd8 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8010cb6:	f7ff ff7d 	bl	8010bb4 <tcp_get_next_optbyte>
 8010cba:	4603      	mov	r3, r0
 8010cbc:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8010cbe:	7afb      	ldrb	r3, [r7, #11]
 8010cc0:	2b01      	cmp	r3, #1
 8010cc2:	d914      	bls.n	8010cee <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8010cc4:	7afb      	ldrb	r3, [r7, #11]
 8010cc6:	b29a      	uxth	r2, r3
 8010cc8:	4b0f      	ldr	r3, [pc, #60]	; (8010d08 <tcp_parseopt+0xe8>)
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	4413      	add	r3, r2
 8010cce:	b29b      	uxth	r3, r3
 8010cd0:	3b02      	subs	r3, #2
 8010cd2:	b29a      	uxth	r2, r3
 8010cd4:	4b0c      	ldr	r3, [pc, #48]	; (8010d08 <tcp_parseopt+0xe8>)
 8010cd6:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8010cd8:	4b0b      	ldr	r3, [pc, #44]	; (8010d08 <tcp_parseopt+0xe8>)
 8010cda:	881a      	ldrh	r2, [r3, #0]
 8010cdc:	4b09      	ldr	r3, [pc, #36]	; (8010d04 <tcp_parseopt+0xe4>)
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	429a      	cmp	r2, r3
 8010ce2:	d3b3      	bcc.n	8010c4c <tcp_parseopt+0x2c>
 8010ce4:	e004      	b.n	8010cf0 <tcp_parseopt+0xd0>
          return;
 8010ce6:	bf00      	nop
 8010ce8:	e002      	b.n	8010cf0 <tcp_parseopt+0xd0>
            return;
 8010cea:	bf00      	nop
 8010cec:	e000      	b.n	8010cf0 <tcp_parseopt+0xd0>
            return;
 8010cee:	bf00      	nop
      }
    }
  }
}
 8010cf0:	3710      	adds	r7, #16
 8010cf2:	46bd      	mov	sp, r7
 8010cf4:	bd80      	pop	{r7, pc}
 8010cf6:	bf00      	nop
 8010cf8:	080192a0 	.word	0x080192a0
 8010cfc:	08019704 	.word	0x08019704
 8010d00:	080192ec 	.word	0x080192ec
 8010d04:	2000d164 	.word	0x2000d164
 8010d08:	2000d16c 	.word	0x2000d16c

08010d0c <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8010d0c:	b480      	push	{r7}
 8010d0e:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8010d10:	4b05      	ldr	r3, [pc, #20]	; (8010d28 <tcp_trigger_input_pcb_close+0x1c>)
 8010d12:	781b      	ldrb	r3, [r3, #0]
 8010d14:	f043 0310 	orr.w	r3, r3, #16
 8010d18:	b2da      	uxtb	r2, r3
 8010d1a:	4b03      	ldr	r3, [pc, #12]	; (8010d28 <tcp_trigger_input_pcb_close+0x1c>)
 8010d1c:	701a      	strb	r2, [r3, #0]
}
 8010d1e:	bf00      	nop
 8010d20:	46bd      	mov	sp, r7
 8010d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d26:	4770      	bx	lr
 8010d28:	2000d17d 	.word	0x2000d17d

08010d2c <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8010d2c:	b580      	push	{r7, lr}
 8010d2e:	b084      	sub	sp, #16
 8010d30:	af00      	add	r7, sp, #0
 8010d32:	60f8      	str	r0, [r7, #12]
 8010d34:	60b9      	str	r1, [r7, #8]
 8010d36:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	2b00      	cmp	r3, #0
 8010d3c:	d00a      	beq.n	8010d54 <tcp_route+0x28>
 8010d3e:	68fb      	ldr	r3, [r7, #12]
 8010d40:	7a1b      	ldrb	r3, [r3, #8]
 8010d42:	2b00      	cmp	r3, #0
 8010d44:	d006      	beq.n	8010d54 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	7a1b      	ldrb	r3, [r3, #8]
 8010d4a:	4618      	mov	r0, r3
 8010d4c:	f7fa fed0 	bl	800baf0 <netif_get_by_index>
 8010d50:	4603      	mov	r3, r0
 8010d52:	e003      	b.n	8010d5c <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8010d54:	6878      	ldr	r0, [r7, #4]
 8010d56:	f003 fdf7 	bl	8014948 <ip4_route>
 8010d5a:	4603      	mov	r3, r0
  }
}
 8010d5c:	4618      	mov	r0, r3
 8010d5e:	3710      	adds	r7, #16
 8010d60:	46bd      	mov	sp, r7
 8010d62:	bd80      	pop	{r7, pc}

08010d64 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8010d64:	b590      	push	{r4, r7, lr}
 8010d66:	b087      	sub	sp, #28
 8010d68:	af00      	add	r7, sp, #0
 8010d6a:	60f8      	str	r0, [r7, #12]
 8010d6c:	60b9      	str	r1, [r7, #8]
 8010d6e:	603b      	str	r3, [r7, #0]
 8010d70:	4613      	mov	r3, r2
 8010d72:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8010d74:	68fb      	ldr	r3, [r7, #12]
 8010d76:	2b00      	cmp	r3, #0
 8010d78:	d105      	bne.n	8010d86 <tcp_create_segment+0x22>
 8010d7a:	4b44      	ldr	r3, [pc, #272]	; (8010e8c <tcp_create_segment+0x128>)
 8010d7c:	22a3      	movs	r2, #163	; 0xa3
 8010d7e:	4944      	ldr	r1, [pc, #272]	; (8010e90 <tcp_create_segment+0x12c>)
 8010d80:	4844      	ldr	r0, [pc, #272]	; (8010e94 <tcp_create_segment+0x130>)
 8010d82:	f005 fbe5 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8010d86:	68bb      	ldr	r3, [r7, #8]
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d105      	bne.n	8010d98 <tcp_create_segment+0x34>
 8010d8c:	4b3f      	ldr	r3, [pc, #252]	; (8010e8c <tcp_create_segment+0x128>)
 8010d8e:	22a4      	movs	r2, #164	; 0xa4
 8010d90:	4941      	ldr	r1, [pc, #260]	; (8010e98 <tcp_create_segment+0x134>)
 8010d92:	4840      	ldr	r0, [pc, #256]	; (8010e94 <tcp_create_segment+0x130>)
 8010d94:	f005 fbdc 	bl	8016550 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8010d98:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010d9c:	009b      	lsls	r3, r3, #2
 8010d9e:	b2db      	uxtb	r3, r3
 8010da0:	f003 0304 	and.w	r3, r3, #4
 8010da4:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8010da6:	2003      	movs	r0, #3
 8010da8:	f7fa fb20 	bl	800b3ec <memp_malloc>
 8010dac:	6138      	str	r0, [r7, #16]
 8010dae:	693b      	ldr	r3, [r7, #16]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d104      	bne.n	8010dbe <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8010db4:	68b8      	ldr	r0, [r7, #8]
 8010db6:	f7fb fa29 	bl	800c20c <pbuf_free>
    return NULL;
 8010dba:	2300      	movs	r3, #0
 8010dbc:	e061      	b.n	8010e82 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8010dbe:	693b      	ldr	r3, [r7, #16]
 8010dc0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8010dc4:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8010dc6:	693b      	ldr	r3, [r7, #16]
 8010dc8:	2200      	movs	r2, #0
 8010dca:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8010dcc:	693b      	ldr	r3, [r7, #16]
 8010dce:	68ba      	ldr	r2, [r7, #8]
 8010dd0:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	891a      	ldrh	r2, [r3, #8]
 8010dd6:	7dfb      	ldrb	r3, [r7, #23]
 8010dd8:	b29b      	uxth	r3, r3
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d205      	bcs.n	8010dea <tcp_create_segment+0x86>
 8010dde:	4b2b      	ldr	r3, [pc, #172]	; (8010e8c <tcp_create_segment+0x128>)
 8010de0:	22b0      	movs	r2, #176	; 0xb0
 8010de2:	492e      	ldr	r1, [pc, #184]	; (8010e9c <tcp_create_segment+0x138>)
 8010de4:	482b      	ldr	r0, [pc, #172]	; (8010e94 <tcp_create_segment+0x130>)
 8010de6:	f005 fbb3 	bl	8016550 <iprintf>
  seg->len = p->tot_len - optlen;
 8010dea:	68bb      	ldr	r3, [r7, #8]
 8010dec:	891a      	ldrh	r2, [r3, #8]
 8010dee:	7dfb      	ldrb	r3, [r7, #23]
 8010df0:	b29b      	uxth	r3, r3
 8010df2:	1ad3      	subs	r3, r2, r3
 8010df4:	b29a      	uxth	r2, r3
 8010df6:	693b      	ldr	r3, [r7, #16]
 8010df8:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8010dfa:	2114      	movs	r1, #20
 8010dfc:	68b8      	ldr	r0, [r7, #8]
 8010dfe:	f7fb f96f 	bl	800c0e0 <pbuf_add_header>
 8010e02:	4603      	mov	r3, r0
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d004      	beq.n	8010e12 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8010e08:	6938      	ldr	r0, [r7, #16]
 8010e0a:	f7fd f818 	bl	800de3e <tcp_seg_free>
    return NULL;
 8010e0e:	2300      	movs	r3, #0
 8010e10:	e037      	b.n	8010e82 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8010e12:	693b      	ldr	r3, [r7, #16]
 8010e14:	685b      	ldr	r3, [r3, #4]
 8010e16:	685a      	ldr	r2, [r3, #4]
 8010e18:	693b      	ldr	r3, [r7, #16]
 8010e1a:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8010e1c:	68fb      	ldr	r3, [r7, #12]
 8010e1e:	8ada      	ldrh	r2, [r3, #22]
 8010e20:	693b      	ldr	r3, [r7, #16]
 8010e22:	68dc      	ldr	r4, [r3, #12]
 8010e24:	4610      	mov	r0, r2
 8010e26:	f7f9 fb17 	bl	800a458 <lwip_htons>
 8010e2a:	4603      	mov	r3, r0
 8010e2c:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8010e2e:	68fb      	ldr	r3, [r7, #12]
 8010e30:	8b1a      	ldrh	r2, [r3, #24]
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	68dc      	ldr	r4, [r3, #12]
 8010e36:	4610      	mov	r0, r2
 8010e38:	f7f9 fb0e 	bl	800a458 <lwip_htons>
 8010e3c:	4603      	mov	r3, r0
 8010e3e:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8010e40:	693b      	ldr	r3, [r7, #16]
 8010e42:	68dc      	ldr	r4, [r3, #12]
 8010e44:	6838      	ldr	r0, [r7, #0]
 8010e46:	f7f9 fb1c 	bl	800a482 <lwip_htonl>
 8010e4a:	4603      	mov	r3, r0
 8010e4c:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8010e4e:	7dfb      	ldrb	r3, [r7, #23]
 8010e50:	089b      	lsrs	r3, r3, #2
 8010e52:	b2db      	uxtb	r3, r3
 8010e54:	b29b      	uxth	r3, r3
 8010e56:	3305      	adds	r3, #5
 8010e58:	b29b      	uxth	r3, r3
 8010e5a:	031b      	lsls	r3, r3, #12
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	79fb      	ldrb	r3, [r7, #7]
 8010e60:	b29b      	uxth	r3, r3
 8010e62:	4313      	orrs	r3, r2
 8010e64:	b29a      	uxth	r2, r3
 8010e66:	693b      	ldr	r3, [r7, #16]
 8010e68:	68dc      	ldr	r4, [r3, #12]
 8010e6a:	4610      	mov	r0, r2
 8010e6c:	f7f9 faf4 	bl	800a458 <lwip_htons>
 8010e70:	4603      	mov	r3, r0
 8010e72:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8010e74:	693b      	ldr	r3, [r7, #16]
 8010e76:	68db      	ldr	r3, [r3, #12]
 8010e78:	2200      	movs	r2, #0
 8010e7a:	749a      	strb	r2, [r3, #18]
 8010e7c:	2200      	movs	r2, #0
 8010e7e:	74da      	strb	r2, [r3, #19]
  return seg;
 8010e80:	693b      	ldr	r3, [r7, #16]
}
 8010e82:	4618      	mov	r0, r3
 8010e84:	371c      	adds	r7, #28
 8010e86:	46bd      	mov	sp, r7
 8010e88:	bd90      	pop	{r4, r7, pc}
 8010e8a:	bf00      	nop
 8010e8c:	08019720 	.word	0x08019720
 8010e90:	08019754 	.word	0x08019754
 8010e94:	08019774 	.word	0x08019774
 8010e98:	0801979c 	.word	0x0801979c
 8010e9c:	080197c0 	.word	0x080197c0

08010ea0 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8010ea0:	b580      	push	{r7, lr}
 8010ea2:	b086      	sub	sp, #24
 8010ea4:	af00      	add	r7, sp, #0
 8010ea6:	607b      	str	r3, [r7, #4]
 8010ea8:	4603      	mov	r3, r0
 8010eaa:	73fb      	strb	r3, [r7, #15]
 8010eac:	460b      	mov	r3, r1
 8010eae:	81bb      	strh	r3, [r7, #12]
 8010eb0:	4613      	mov	r3, r2
 8010eb2:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8010eb4:	89bb      	ldrh	r3, [r7, #12]
 8010eb6:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	2b00      	cmp	r3, #0
 8010ebc:	d105      	bne.n	8010eca <tcp_pbuf_prealloc+0x2a>
 8010ebe:	4b30      	ldr	r3, [pc, #192]	; (8010f80 <tcp_pbuf_prealloc+0xe0>)
 8010ec0:	22e8      	movs	r2, #232	; 0xe8
 8010ec2:	4930      	ldr	r1, [pc, #192]	; (8010f84 <tcp_pbuf_prealloc+0xe4>)
 8010ec4:	4830      	ldr	r0, [pc, #192]	; (8010f88 <tcp_pbuf_prealloc+0xe8>)
 8010ec6:	f005 fb43 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8010eca:	6a3b      	ldr	r3, [r7, #32]
 8010ecc:	2b00      	cmp	r3, #0
 8010ece:	d105      	bne.n	8010edc <tcp_pbuf_prealloc+0x3c>
 8010ed0:	4b2b      	ldr	r3, [pc, #172]	; (8010f80 <tcp_pbuf_prealloc+0xe0>)
 8010ed2:	22e9      	movs	r2, #233	; 0xe9
 8010ed4:	492d      	ldr	r1, [pc, #180]	; (8010f8c <tcp_pbuf_prealloc+0xec>)
 8010ed6:	482c      	ldr	r0, [pc, #176]	; (8010f88 <tcp_pbuf_prealloc+0xe8>)
 8010ed8:	f005 fb3a 	bl	8016550 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8010edc:	89ba      	ldrh	r2, [r7, #12]
 8010ede:	897b      	ldrh	r3, [r7, #10]
 8010ee0:	429a      	cmp	r2, r3
 8010ee2:	d221      	bcs.n	8010f28 <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010ee4:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8010ee8:	f003 0302 	and.w	r3, r3, #2
 8010eec:	2b00      	cmp	r3, #0
 8010eee:	d111      	bne.n	8010f14 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8010ef0:	6a3b      	ldr	r3, [r7, #32]
 8010ef2:	8b5b      	ldrh	r3, [r3, #26]
 8010ef4:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d115      	bne.n	8010f28 <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8010efc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8010f00:	2b00      	cmp	r3, #0
 8010f02:	d007      	beq.n	8010f14 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8010f04:	6a3b      	ldr	r3, [r7, #32]
 8010f06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8010f08:	2b00      	cmp	r3, #0
 8010f0a:	d103      	bne.n	8010f14 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8010f0c:	6a3b      	ldr	r3, [r7, #32]
 8010f0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8010f10:	2b00      	cmp	r3, #0
 8010f12:	d009      	beq.n	8010f28 <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8010f14:	89bb      	ldrh	r3, [r7, #12]
 8010f16:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8010f1a:	f023 0203 	bic.w	r2, r3, #3
 8010f1e:	897b      	ldrh	r3, [r7, #10]
 8010f20:	4293      	cmp	r3, r2
 8010f22:	bf28      	it	cs
 8010f24:	4613      	movcs	r3, r2
 8010f26:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8010f28:	8af9      	ldrh	r1, [r7, #22]
 8010f2a:	7bfb      	ldrb	r3, [r7, #15]
 8010f2c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8010f30:	4618      	mov	r0, r3
 8010f32:	f7fa fe87 	bl	800bc44 <pbuf_alloc>
 8010f36:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8010f38:	693b      	ldr	r3, [r7, #16]
 8010f3a:	2b00      	cmp	r3, #0
 8010f3c:	d101      	bne.n	8010f42 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8010f3e:	2300      	movs	r3, #0
 8010f40:	e019      	b.n	8010f76 <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8010f42:	693b      	ldr	r3, [r7, #16]
 8010f44:	681b      	ldr	r3, [r3, #0]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d006      	beq.n	8010f58 <tcp_pbuf_prealloc+0xb8>
 8010f4a:	4b0d      	ldr	r3, [pc, #52]	; (8010f80 <tcp_pbuf_prealloc+0xe0>)
 8010f4c:	f240 120b 	movw	r2, #267	; 0x10b
 8010f50:	490f      	ldr	r1, [pc, #60]	; (8010f90 <tcp_pbuf_prealloc+0xf0>)
 8010f52:	480d      	ldr	r0, [pc, #52]	; (8010f88 <tcp_pbuf_prealloc+0xe8>)
 8010f54:	f005 fafc 	bl	8016550 <iprintf>
  *oversize = p->len - length;
 8010f58:	693b      	ldr	r3, [r7, #16]
 8010f5a:	895a      	ldrh	r2, [r3, #10]
 8010f5c:	89bb      	ldrh	r3, [r7, #12]
 8010f5e:	1ad3      	subs	r3, r2, r3
 8010f60:	b29a      	uxth	r2, r3
 8010f62:	687b      	ldr	r3, [r7, #4]
 8010f64:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8010f66:	693b      	ldr	r3, [r7, #16]
 8010f68:	89ba      	ldrh	r2, [r7, #12]
 8010f6a:	811a      	strh	r2, [r3, #8]
 8010f6c:	693b      	ldr	r3, [r7, #16]
 8010f6e:	891a      	ldrh	r2, [r3, #8]
 8010f70:	693b      	ldr	r3, [r7, #16]
 8010f72:	815a      	strh	r2, [r3, #10]
  return p;
 8010f74:	693b      	ldr	r3, [r7, #16]
}
 8010f76:	4618      	mov	r0, r3
 8010f78:	3718      	adds	r7, #24
 8010f7a:	46bd      	mov	sp, r7
 8010f7c:	bd80      	pop	{r7, pc}
 8010f7e:	bf00      	nop
 8010f80:	08019720 	.word	0x08019720
 8010f84:	080197d8 	.word	0x080197d8
 8010f88:	08019774 	.word	0x08019774
 8010f8c:	080197fc 	.word	0x080197fc
 8010f90:	0801981c 	.word	0x0801981c

08010f94 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
 8010f9c:	460b      	mov	r3, r1
 8010f9e:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8010fa0:	687b      	ldr	r3, [r7, #4]
 8010fa2:	2b00      	cmp	r3, #0
 8010fa4:	d106      	bne.n	8010fb4 <tcp_write_checks+0x20>
 8010fa6:	4b33      	ldr	r3, [pc, #204]	; (8011074 <tcp_write_checks+0xe0>)
 8010fa8:	f240 1233 	movw	r2, #307	; 0x133
 8010fac:	4932      	ldr	r1, [pc, #200]	; (8011078 <tcp_write_checks+0xe4>)
 8010fae:	4833      	ldr	r0, [pc, #204]	; (801107c <tcp_write_checks+0xe8>)
 8010fb0:	f005 face 	bl	8016550 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8010fb4:	687b      	ldr	r3, [r7, #4]
 8010fb6:	7d1b      	ldrb	r3, [r3, #20]
 8010fb8:	2b04      	cmp	r3, #4
 8010fba:	d00e      	beq.n	8010fda <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8010fbc:	687b      	ldr	r3, [r7, #4]
 8010fbe:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8010fc0:	2b07      	cmp	r3, #7
 8010fc2:	d00a      	beq.n	8010fda <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8010fc4:	687b      	ldr	r3, [r7, #4]
 8010fc6:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8010fc8:	2b02      	cmp	r3, #2
 8010fca:	d006      	beq.n	8010fda <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8010fd0:	2b03      	cmp	r3, #3
 8010fd2:	d002      	beq.n	8010fda <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8010fd4:	f06f 030a 	mvn.w	r3, #10
 8010fd8:	e048      	b.n	801106c <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8010fda:	887b      	ldrh	r3, [r7, #2]
 8010fdc:	2b00      	cmp	r3, #0
 8010fde:	d101      	bne.n	8010fe4 <tcp_write_checks+0x50>
    return ERR_OK;
 8010fe0:	2300      	movs	r3, #0
 8010fe2:	e043      	b.n	801106c <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8010fe4:	687b      	ldr	r3, [r7, #4]
 8010fe6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8010fea:	887a      	ldrh	r2, [r7, #2]
 8010fec:	429a      	cmp	r2, r3
 8010fee:	d909      	bls.n	8011004 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	8b5b      	ldrh	r3, [r3, #26]
 8010ff4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8010ff8:	b29a      	uxth	r2, r3
 8010ffa:	687b      	ldr	r3, [r7, #4]
 8010ffc:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8010ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8011002:	e033      	b.n	801106c <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011004:	687b      	ldr	r3, [r7, #4]
 8011006:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801100a:	2b08      	cmp	r3, #8
 801100c:	d909      	bls.n	8011022 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801100e:	687b      	ldr	r3, [r7, #4]
 8011010:	8b5b      	ldrh	r3, [r3, #26]
 8011012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011016:	b29a      	uxth	r2, r3
 8011018:	687b      	ldr	r3, [r7, #4]
 801101a:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 801101c:	f04f 33ff 	mov.w	r3, #4294967295
 8011020:	e024      	b.n	801106c <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011022:	687b      	ldr	r3, [r7, #4]
 8011024:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011028:	2b00      	cmp	r3, #0
 801102a:	d00f      	beq.n	801104c <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 801102c:	687b      	ldr	r3, [r7, #4]
 801102e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011030:	2b00      	cmp	r3, #0
 8011032:	d11a      	bne.n	801106a <tcp_write_checks+0xd6>
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011038:	2b00      	cmp	r3, #0
 801103a:	d116      	bne.n	801106a <tcp_write_checks+0xd6>
 801103c:	4b0d      	ldr	r3, [pc, #52]	; (8011074 <tcp_write_checks+0xe0>)
 801103e:	f240 1255 	movw	r2, #341	; 0x155
 8011042:	490f      	ldr	r1, [pc, #60]	; (8011080 <tcp_write_checks+0xec>)
 8011044:	480d      	ldr	r0, [pc, #52]	; (801107c <tcp_write_checks+0xe8>)
 8011046:	f005 fa83 	bl	8016550 <iprintf>
 801104a:	e00e      	b.n	801106a <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 801104c:	687b      	ldr	r3, [r7, #4]
 801104e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011050:	2b00      	cmp	r3, #0
 8011052:	d103      	bne.n	801105c <tcp_write_checks+0xc8>
 8011054:	687b      	ldr	r3, [r7, #4]
 8011056:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011058:	2b00      	cmp	r3, #0
 801105a:	d006      	beq.n	801106a <tcp_write_checks+0xd6>
 801105c:	4b05      	ldr	r3, [pc, #20]	; (8011074 <tcp_write_checks+0xe0>)
 801105e:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011062:	4908      	ldr	r1, [pc, #32]	; (8011084 <tcp_write_checks+0xf0>)
 8011064:	4805      	ldr	r0, [pc, #20]	; (801107c <tcp_write_checks+0xe8>)
 8011066:	f005 fa73 	bl	8016550 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 801106a:	2300      	movs	r3, #0
}
 801106c:	4618      	mov	r0, r3
 801106e:	3708      	adds	r7, #8
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	08019720 	.word	0x08019720
 8011078:	08019830 	.word	0x08019830
 801107c:	08019774 	.word	0x08019774
 8011080:	08019850 	.word	0x08019850
 8011084:	0801988c 	.word	0x0801988c

08011088 <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011088:	b590      	push	{r4, r7, lr}
 801108a:	b09b      	sub	sp, #108	; 0x6c
 801108c:	af04      	add	r7, sp, #16
 801108e:	60f8      	str	r0, [r7, #12]
 8011090:	60b9      	str	r1, [r7, #8]
 8011092:	4611      	mov	r1, r2
 8011094:	461a      	mov	r2, r3
 8011096:	460b      	mov	r3, r1
 8011098:	80fb      	strh	r3, [r7, #6]
 801109a:	4613      	mov	r3, r2
 801109c:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 801109e:	2300      	movs	r3, #0
 80110a0:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 80110a2:	2300      	movs	r3, #0
 80110a4:	653b      	str	r3, [r7, #80]	; 0x50
 80110a6:	2300      	movs	r3, #0
 80110a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80110aa:	2300      	movs	r3, #0
 80110ac:	64bb      	str	r3, [r7, #72]	; 0x48
 80110ae:	2300      	movs	r3, #0
 80110b0:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 80110b2:	2300      	movs	r3, #0
 80110b4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 80110b8:	2300      	movs	r3, #0
 80110ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 80110be:	2300      	movs	r3, #0
 80110c0:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 80110c2:	2300      	movs	r3, #0
 80110c4:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 80110c6:	2300      	movs	r3, #0
 80110c8:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 80110ca:	68fb      	ldr	r3, [r7, #12]
 80110cc:	2b00      	cmp	r3, #0
 80110ce:	d109      	bne.n	80110e4 <tcp_write+0x5c>
 80110d0:	4ba4      	ldr	r3, [pc, #656]	; (8011364 <tcp_write+0x2dc>)
 80110d2:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 80110d6:	49a4      	ldr	r1, [pc, #656]	; (8011368 <tcp_write+0x2e0>)
 80110d8:	48a4      	ldr	r0, [pc, #656]	; (801136c <tcp_write+0x2e4>)
 80110da:	f005 fa39 	bl	8016550 <iprintf>
 80110de:	f06f 030f 	mvn.w	r3, #15
 80110e2:	e32a      	b.n	801173a <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 80110e4:	68fb      	ldr	r3, [r7, #12]
 80110e6:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 80110ea:	085b      	lsrs	r3, r3, #1
 80110ec:	b29a      	uxth	r2, r3
 80110ee:	68fb      	ldr	r3, [r7, #12]
 80110f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80110f2:	4293      	cmp	r3, r2
 80110f4:	bf28      	it	cs
 80110f6:	4613      	movcs	r3, r2
 80110f8:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 80110fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80110fc:	2b00      	cmp	r3, #0
 80110fe:	d102      	bne.n	8011106 <tcp_write+0x7e>
 8011100:	68fb      	ldr	r3, [r7, #12]
 8011102:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011104:	e000      	b.n	8011108 <tcp_write+0x80>
 8011106:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011108:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 801110a:	68bb      	ldr	r3, [r7, #8]
 801110c:	2b00      	cmp	r3, #0
 801110e:	d109      	bne.n	8011124 <tcp_write+0x9c>
 8011110:	4b94      	ldr	r3, [pc, #592]	; (8011364 <tcp_write+0x2dc>)
 8011112:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011116:	4996      	ldr	r1, [pc, #600]	; (8011370 <tcp_write+0x2e8>)
 8011118:	4894      	ldr	r0, [pc, #592]	; (801136c <tcp_write+0x2e4>)
 801111a:	f005 fa19 	bl	8016550 <iprintf>
 801111e:	f06f 030f 	mvn.w	r3, #15
 8011122:	e30a      	b.n	801173a <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011124:	88fb      	ldrh	r3, [r7, #6]
 8011126:	4619      	mov	r1, r3
 8011128:	68f8      	ldr	r0, [r7, #12]
 801112a:	f7ff ff33 	bl	8010f94 <tcp_write_checks>
 801112e:	4603      	mov	r3, r0
 8011130:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011134:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011138:	2b00      	cmp	r3, #0
 801113a:	d002      	beq.n	8011142 <tcp_write+0xba>
    return err;
 801113c:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011140:	e2fb      	b.n	801173a <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011142:	68fb      	ldr	r3, [r7, #12]
 8011144:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011148:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 801114c:	2300      	movs	r3, #0
 801114e:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011156:	2b00      	cmp	r3, #0
 8011158:	f000 80f6 	beq.w	8011348 <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011160:	653b      	str	r3, [r7, #80]	; 0x50
 8011162:	e002      	b.n	801116a <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011166:	681b      	ldr	r3, [r3, #0]
 8011168:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 801116a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801116c:	681b      	ldr	r3, [r3, #0]
 801116e:	2b00      	cmp	r3, #0
 8011170:	d1f8      	bne.n	8011164 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011172:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011174:	7a9b      	ldrb	r3, [r3, #10]
 8011176:	009b      	lsls	r3, r3, #2
 8011178:	b29b      	uxth	r3, r3
 801117a:	f003 0304 	and.w	r3, r3, #4
 801117e:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011180:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011182:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011184:	891b      	ldrh	r3, [r3, #8]
 8011186:	4619      	mov	r1, r3
 8011188:	8c3b      	ldrh	r3, [r7, #32]
 801118a:	440b      	add	r3, r1
 801118c:	429a      	cmp	r2, r3
 801118e:	da06      	bge.n	801119e <tcp_write+0x116>
 8011190:	4b74      	ldr	r3, [pc, #464]	; (8011364 <tcp_write+0x2dc>)
 8011192:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011196:	4977      	ldr	r1, [pc, #476]	; (8011374 <tcp_write+0x2ec>)
 8011198:	4874      	ldr	r0, [pc, #464]	; (801136c <tcp_write+0x2e4>)
 801119a:	f005 f9d9 	bl	8016550 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 801119e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111a0:	891a      	ldrh	r2, [r3, #8]
 80111a2:	8c3b      	ldrh	r3, [r7, #32]
 80111a4:	4413      	add	r3, r2
 80111a6:	b29b      	uxth	r3, r3
 80111a8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80111aa:	1ad3      	subs	r3, r2, r3
 80111ac:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 80111ae:	68fb      	ldr	r3, [r7, #12]
 80111b0:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80111b4:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 80111b6:	8a7b      	ldrh	r3, [r7, #18]
 80111b8:	2b00      	cmp	r3, #0
 80111ba:	d026      	beq.n	801120a <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 80111bc:	8a7b      	ldrh	r3, [r7, #18]
 80111be:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111c0:	429a      	cmp	r2, r3
 80111c2:	d206      	bcs.n	80111d2 <tcp_write+0x14a>
 80111c4:	4b67      	ldr	r3, [pc, #412]	; (8011364 <tcp_write+0x2dc>)
 80111c6:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 80111ca:	496b      	ldr	r1, [pc, #428]	; (8011378 <tcp_write+0x2f0>)
 80111cc:	4867      	ldr	r0, [pc, #412]	; (801136c <tcp_write+0x2e4>)
 80111ce:	f005 f9bf 	bl	8016550 <iprintf>
      seg = last_unsent;
 80111d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80111d4:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 80111d6:	8a7b      	ldrh	r3, [r7, #18]
 80111d8:	88fa      	ldrh	r2, [r7, #6]
 80111da:	4293      	cmp	r3, r2
 80111dc:	bf28      	it	cs
 80111de:	4613      	movcs	r3, r2
 80111e0:	b29b      	uxth	r3, r3
 80111e2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80111e4:	4293      	cmp	r3, r2
 80111e6:	bf28      	it	cs
 80111e8:	4613      	movcs	r3, r2
 80111ea:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 80111ec:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80111f0:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111f2:	4413      	add	r3, r2
 80111f4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 80111f8:	8a7a      	ldrh	r2, [r7, #18]
 80111fa:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80111fc:	1ad3      	subs	r3, r2, r3
 80111fe:	b29b      	uxth	r3, r3
 8011200:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8011202:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011204:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011206:	1ad3      	subs	r3, r2, r3
 8011208:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801120a:	8a7b      	ldrh	r3, [r7, #18]
 801120c:	2b00      	cmp	r3, #0
 801120e:	d00b      	beq.n	8011228 <tcp_write+0x1a0>
 8011210:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011214:	88fb      	ldrh	r3, [r7, #6]
 8011216:	429a      	cmp	r2, r3
 8011218:	d006      	beq.n	8011228 <tcp_write+0x1a0>
 801121a:	4b52      	ldr	r3, [pc, #328]	; (8011364 <tcp_write+0x2dc>)
 801121c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8011220:	4956      	ldr	r1, [pc, #344]	; (801137c <tcp_write+0x2f4>)
 8011222:	4852      	ldr	r0, [pc, #328]	; (801136c <tcp_write+0x2e4>)
 8011224:	f005 f994 	bl	8016550 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 8011228:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801122c:	88fb      	ldrh	r3, [r7, #6]
 801122e:	429a      	cmp	r2, r3
 8011230:	f080 8167 	bcs.w	8011502 <tcp_write+0x47a>
 8011234:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011236:	2b00      	cmp	r3, #0
 8011238:	f000 8163 	beq.w	8011502 <tcp_write+0x47a>
 801123c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801123e:	891b      	ldrh	r3, [r3, #8]
 8011240:	2b00      	cmp	r3, #0
 8011242:	f000 815e 	beq.w	8011502 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 8011246:	88fa      	ldrh	r2, [r7, #6]
 8011248:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801124c:	1ad2      	subs	r2, r2, r3
 801124e:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8011250:	4293      	cmp	r3, r2
 8011252:	bfa8      	it	ge
 8011254:	4613      	movge	r3, r2
 8011256:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 8011258:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801125a:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 801125c:	797b      	ldrb	r3, [r7, #5]
 801125e:	f003 0301 	and.w	r3, r3, #1
 8011262:	2b00      	cmp	r3, #0
 8011264:	d027      	beq.n	80112b6 <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 8011266:	f107 0012 	add.w	r0, r7, #18
 801126a:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 801126c:	8bf9      	ldrh	r1, [r7, #30]
 801126e:	2301      	movs	r3, #1
 8011270:	9302      	str	r3, [sp, #8]
 8011272:	797b      	ldrb	r3, [r7, #5]
 8011274:	9301      	str	r3, [sp, #4]
 8011276:	68fb      	ldr	r3, [r7, #12]
 8011278:	9300      	str	r3, [sp, #0]
 801127a:	4603      	mov	r3, r0
 801127c:	2000      	movs	r0, #0
 801127e:	f7ff fe0f 	bl	8010ea0 <tcp_pbuf_prealloc>
 8011282:	6578      	str	r0, [r7, #84]	; 0x54
 8011284:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011286:	2b00      	cmp	r3, #0
 8011288:	f000 8225 	beq.w	80116d6 <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 801128c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801128e:	6858      	ldr	r0, [r3, #4]
 8011290:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011294:	68ba      	ldr	r2, [r7, #8]
 8011296:	4413      	add	r3, r2
 8011298:	8bfa      	ldrh	r2, [r7, #30]
 801129a:	4619      	mov	r1, r3
 801129c:	f005 f8ad 	bl	80163fa <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80112a0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80112a2:	f7fb f841 	bl	800c328 <pbuf_clen>
 80112a6:	4603      	mov	r3, r0
 80112a8:	461a      	mov	r2, r3
 80112aa:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80112ae:	4413      	add	r3, r2
 80112b0:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80112b4:	e041      	b.n	801133a <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80112b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	637b      	str	r3, [r7, #52]	; 0x34
 80112bc:	e002      	b.n	80112c4 <tcp_write+0x23c>
 80112be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c0:	681b      	ldr	r3, [r3, #0]
 80112c2:	637b      	str	r3, [r7, #52]	; 0x34
 80112c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	2b00      	cmp	r3, #0
 80112ca:	d1f8      	bne.n	80112be <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80112cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112ce:	7b1b      	ldrb	r3, [r3, #12]
 80112d0:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d115      	bne.n	8011304 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80112d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80112da:	685b      	ldr	r3, [r3, #4]
 80112dc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80112de:	8952      	ldrh	r2, [r2, #10]
 80112e0:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80112e2:	68ba      	ldr	r2, [r7, #8]
 80112e4:	429a      	cmp	r2, r3
 80112e6:	d10d      	bne.n	8011304 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80112e8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80112ec:	2b00      	cmp	r3, #0
 80112ee:	d006      	beq.n	80112fe <tcp_write+0x276>
 80112f0:	4b1c      	ldr	r3, [pc, #112]	; (8011364 <tcp_write+0x2dc>)
 80112f2:	f240 2231 	movw	r2, #561	; 0x231
 80112f6:	4922      	ldr	r1, [pc, #136]	; (8011380 <tcp_write+0x2f8>)
 80112f8:	481c      	ldr	r0, [pc, #112]	; (801136c <tcp_write+0x2e4>)
 80112fa:	f005 f929 	bl	8016550 <iprintf>
          extendlen = seglen;
 80112fe:	8bfb      	ldrh	r3, [r7, #30]
 8011300:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8011302:	e01a      	b.n	801133a <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8011304:	8bfb      	ldrh	r3, [r7, #30]
 8011306:	2201      	movs	r2, #1
 8011308:	4619      	mov	r1, r3
 801130a:	2000      	movs	r0, #0
 801130c:	f7fa fc9a 	bl	800bc44 <pbuf_alloc>
 8011310:	6578      	str	r0, [r7, #84]	; 0x54
 8011312:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011314:	2b00      	cmp	r3, #0
 8011316:	f000 81e0 	beq.w	80116da <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801131a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801131e:	68ba      	ldr	r2, [r7, #8]
 8011320:	441a      	add	r2, r3
 8011322:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011324:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 8011326:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8011328:	f7fa fffe 	bl	800c328 <pbuf_clen>
 801132c:	4603      	mov	r3, r0
 801132e:	461a      	mov	r2, r3
 8011330:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011334:	4413      	add	r3, r2
 8011336:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801133a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801133e:	8bfb      	ldrh	r3, [r7, #30]
 8011340:	4413      	add	r3, r2
 8011342:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8011346:	e0dc      	b.n	8011502 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 8011348:	68fb      	ldr	r3, [r7, #12]
 801134a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 801134e:	2b00      	cmp	r3, #0
 8011350:	f000 80d7 	beq.w	8011502 <tcp_write+0x47a>
 8011354:	4b03      	ldr	r3, [pc, #12]	; (8011364 <tcp_write+0x2dc>)
 8011356:	f240 224a 	movw	r2, #586	; 0x24a
 801135a:	490a      	ldr	r1, [pc, #40]	; (8011384 <tcp_write+0x2fc>)
 801135c:	4803      	ldr	r0, [pc, #12]	; (801136c <tcp_write+0x2e4>)
 801135e:	f005 f8f7 	bl	8016550 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8011362:	e0ce      	b.n	8011502 <tcp_write+0x47a>
 8011364:	08019720 	.word	0x08019720
 8011368:	080198c0 	.word	0x080198c0
 801136c:	08019774 	.word	0x08019774
 8011370:	080198d8 	.word	0x080198d8
 8011374:	0801990c 	.word	0x0801990c
 8011378:	08019924 	.word	0x08019924
 801137c:	08019944 	.word	0x08019944
 8011380:	08019964 	.word	0x08019964
 8011384:	08019990 	.word	0x08019990
    struct pbuf *p;
    u16_t left = len - pos;
 8011388:	88fa      	ldrh	r2, [r7, #6]
 801138a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801138e:	1ad3      	subs	r3, r2, r3
 8011390:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8011392:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8011396:	b29b      	uxth	r3, r3
 8011398:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801139a:	1ad3      	subs	r3, r2, r3
 801139c:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 801139e:	8b7a      	ldrh	r2, [r7, #26]
 80113a0:	8bbb      	ldrh	r3, [r7, #28]
 80113a2:	4293      	cmp	r3, r2
 80113a4:	bf28      	it	cs
 80113a6:	4613      	movcs	r3, r2
 80113a8:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80113aa:	797b      	ldrb	r3, [r7, #5]
 80113ac:	f003 0301 	and.w	r3, r3, #1
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d036      	beq.n	8011422 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80113b4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80113b8:	b29a      	uxth	r2, r3
 80113ba:	8b3b      	ldrh	r3, [r7, #24]
 80113bc:	4413      	add	r3, r2
 80113be:	b299      	uxth	r1, r3
 80113c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80113c2:	2b00      	cmp	r3, #0
 80113c4:	bf0c      	ite	eq
 80113c6:	2301      	moveq	r3, #1
 80113c8:	2300      	movne	r3, #0
 80113ca:	b2db      	uxtb	r3, r3
 80113cc:	f107 0012 	add.w	r0, r7, #18
 80113d0:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80113d2:	9302      	str	r3, [sp, #8]
 80113d4:	797b      	ldrb	r3, [r7, #5]
 80113d6:	9301      	str	r3, [sp, #4]
 80113d8:	68fb      	ldr	r3, [r7, #12]
 80113da:	9300      	str	r3, [sp, #0]
 80113dc:	4603      	mov	r3, r0
 80113de:	2036      	movs	r0, #54	; 0x36
 80113e0:	f7ff fd5e 	bl	8010ea0 <tcp_pbuf_prealloc>
 80113e4:	6338      	str	r0, [r7, #48]	; 0x30
 80113e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	f000 8178 	beq.w	80116de <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80113ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80113f0:	895b      	ldrh	r3, [r3, #10]
 80113f2:	8b3a      	ldrh	r2, [r7, #24]
 80113f4:	429a      	cmp	r2, r3
 80113f6:	d906      	bls.n	8011406 <tcp_write+0x37e>
 80113f8:	4b8c      	ldr	r3, [pc, #560]	; (801162c <tcp_write+0x5a4>)
 80113fa:	f240 2266 	movw	r2, #614	; 0x266
 80113fe:	498c      	ldr	r1, [pc, #560]	; (8011630 <tcp_write+0x5a8>)
 8011400:	488c      	ldr	r0, [pc, #560]	; (8011634 <tcp_write+0x5ac>)
 8011402:	f005 f8a5 	bl	8016550 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 8011406:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011408:	685a      	ldr	r2, [r3, #4]
 801140a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801140e:	18d0      	adds	r0, r2, r3
 8011410:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011414:	68ba      	ldr	r2, [r7, #8]
 8011416:	4413      	add	r3, r2
 8011418:	8b3a      	ldrh	r2, [r7, #24]
 801141a:	4619      	mov	r1, r3
 801141c:	f004 ffed 	bl	80163fa <memcpy>
 8011420:	e02f      	b.n	8011482 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8011422:	8a7b      	ldrh	r3, [r7, #18]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d006      	beq.n	8011436 <tcp_write+0x3ae>
 8011428:	4b80      	ldr	r3, [pc, #512]	; (801162c <tcp_write+0x5a4>)
 801142a:	f240 2271 	movw	r2, #625	; 0x271
 801142e:	4982      	ldr	r1, [pc, #520]	; (8011638 <tcp_write+0x5b0>)
 8011430:	4880      	ldr	r0, [pc, #512]	; (8011634 <tcp_write+0x5ac>)
 8011432:	f005 f88d 	bl	8016550 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 8011436:	8b3b      	ldrh	r3, [r7, #24]
 8011438:	2201      	movs	r2, #1
 801143a:	4619      	mov	r1, r3
 801143c:	2036      	movs	r0, #54	; 0x36
 801143e:	f7fa fc01 	bl	800bc44 <pbuf_alloc>
 8011442:	6178      	str	r0, [r7, #20]
 8011444:	697b      	ldr	r3, [r7, #20]
 8011446:	2b00      	cmp	r3, #0
 8011448:	f000 814b 	beq.w	80116e2 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 801144c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011450:	68ba      	ldr	r2, [r7, #8]
 8011452:	441a      	add	r2, r3
 8011454:	697b      	ldr	r3, [r7, #20]
 8011456:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011458:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801145c:	b29b      	uxth	r3, r3
 801145e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011462:	4619      	mov	r1, r3
 8011464:	2036      	movs	r0, #54	; 0x36
 8011466:	f7fa fbed 	bl	800bc44 <pbuf_alloc>
 801146a:	6338      	str	r0, [r7, #48]	; 0x30
 801146c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801146e:	2b00      	cmp	r3, #0
 8011470:	d103      	bne.n	801147a <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8011472:	6978      	ldr	r0, [r7, #20]
 8011474:	f7fa feca 	bl	800c20c <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 8011478:	e136      	b.n	80116e8 <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801147a:	6979      	ldr	r1, [r7, #20]
 801147c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801147e:	f7fa ff93 	bl	800c3a8 <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8011482:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8011484:	f7fa ff50 	bl	800c328 <pbuf_clen>
 8011488:	4603      	mov	r3, r0
 801148a:	461a      	mov	r2, r3
 801148c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8011490:	4413      	add	r3, r2
 8011492:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 8011496:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801149a:	2b09      	cmp	r3, #9
 801149c:	d903      	bls.n	80114a6 <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 801149e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80114a0:	f7fa feb4 	bl	800c20c <pbuf_free>
      goto memerr;
 80114a4:	e120      	b.n	80116e8 <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80114a6:	68fb      	ldr	r3, [r7, #12]
 80114a8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80114aa:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80114ae:	441a      	add	r2, r3
 80114b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80114b4:	9300      	str	r3, [sp, #0]
 80114b6:	4613      	mov	r3, r2
 80114b8:	2200      	movs	r2, #0
 80114ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80114bc:	68f8      	ldr	r0, [r7, #12]
 80114be:	f7ff fc51 	bl	8010d64 <tcp_create_segment>
 80114c2:	64f8      	str	r0, [r7, #76]	; 0x4c
 80114c4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	f000 810d 	beq.w	80116e6 <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80114cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114ce:	2b00      	cmp	r3, #0
 80114d0:	d102      	bne.n	80114d8 <tcp_write+0x450>
      queue = seg;
 80114d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114d4:	647b      	str	r3, [r7, #68]	; 0x44
 80114d6:	e00c      	b.n	80114f2 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80114d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114da:	2b00      	cmp	r3, #0
 80114dc:	d106      	bne.n	80114ec <tcp_write+0x464>
 80114de:	4b53      	ldr	r3, [pc, #332]	; (801162c <tcp_write+0x5a4>)
 80114e0:	f240 22ab 	movw	r2, #683	; 0x2ab
 80114e4:	4955      	ldr	r1, [pc, #340]	; (801163c <tcp_write+0x5b4>)
 80114e6:	4853      	ldr	r0, [pc, #332]	; (8011634 <tcp_write+0x5ac>)
 80114e8:	f005 f832 	bl	8016550 <iprintf>
      prev_seg->next = seg;
 80114ec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80114ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80114f0:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80114f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80114f4:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80114f6:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80114fa:	8b3b      	ldrh	r3, [r7, #24]
 80114fc:	4413      	add	r3, r2
 80114fe:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8011502:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011506:	88fb      	ldrh	r3, [r7, #6]
 8011508:	429a      	cmp	r2, r3
 801150a:	f4ff af3d 	bcc.w	8011388 <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 801150e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011510:	2b00      	cmp	r3, #0
 8011512:	d02c      	beq.n	801156e <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8011514:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011516:	685b      	ldr	r3, [r3, #4]
 8011518:	62fb      	str	r3, [r7, #44]	; 0x2c
 801151a:	e01e      	b.n	801155a <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 801151c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801151e:	891a      	ldrh	r2, [r3, #8]
 8011520:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011522:	4413      	add	r3, r2
 8011524:	b29a      	uxth	r2, r3
 8011526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011528:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801152a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801152c:	681b      	ldr	r3, [r3, #0]
 801152e:	2b00      	cmp	r3, #0
 8011530:	d110      	bne.n	8011554 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8011532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011534:	685b      	ldr	r3, [r3, #4]
 8011536:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011538:	8952      	ldrh	r2, [r2, #10]
 801153a:	4413      	add	r3, r2
 801153c:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801153e:	68b9      	ldr	r1, [r7, #8]
 8011540:	4618      	mov	r0, r3
 8011542:	f004 ff5a 	bl	80163fa <memcpy>
        p->len += oversize_used;
 8011546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011548:	895a      	ldrh	r2, [r3, #10]
 801154a:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801154c:	4413      	add	r3, r2
 801154e:	b29a      	uxth	r2, r3
 8011550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011552:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8011554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011556:	681b      	ldr	r3, [r3, #0]
 8011558:	62fb      	str	r3, [r7, #44]	; 0x2c
 801155a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801155c:	2b00      	cmp	r3, #0
 801155e:	d1dd      	bne.n	801151c <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8011560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011562:	891a      	ldrh	r2, [r3, #8]
 8011564:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011566:	4413      	add	r3, r2
 8011568:	b29a      	uxth	r2, r3
 801156a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801156c:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 801156e:	8a7a      	ldrh	r2, [r7, #18]
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 8011576:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011578:	2b00      	cmp	r3, #0
 801157a:	d018      	beq.n	80115ae <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 801157c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801157e:	2b00      	cmp	r3, #0
 8011580:	d106      	bne.n	8011590 <tcp_write+0x508>
 8011582:	4b2a      	ldr	r3, [pc, #168]	; (801162c <tcp_write+0x5a4>)
 8011584:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 8011588:	492d      	ldr	r1, [pc, #180]	; (8011640 <tcp_write+0x5b8>)
 801158a:	482a      	ldr	r0, [pc, #168]	; (8011634 <tcp_write+0x5ac>)
 801158c:	f004 ffe0 	bl	8016550 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8011590:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011592:	685b      	ldr	r3, [r3, #4]
 8011594:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8011596:	4618      	mov	r0, r3
 8011598:	f7fa ff06 	bl	800c3a8 <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 801159c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801159e:	891a      	ldrh	r2, [r3, #8]
 80115a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80115a2:	891b      	ldrh	r3, [r3, #8]
 80115a4:	4413      	add	r3, r2
 80115a6:	b29a      	uxth	r2, r3
 80115a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115aa:	811a      	strh	r2, [r3, #8]
 80115ac:	e037      	b.n	801161e <tcp_write+0x596>
  } else if (extendlen > 0) {
 80115ae:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80115b0:	2b00      	cmp	r3, #0
 80115b2:	d034      	beq.n	801161e <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80115b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115b6:	2b00      	cmp	r3, #0
 80115b8:	d003      	beq.n	80115c2 <tcp_write+0x53a>
 80115ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115bc:	685b      	ldr	r3, [r3, #4]
 80115be:	2b00      	cmp	r3, #0
 80115c0:	d106      	bne.n	80115d0 <tcp_write+0x548>
 80115c2:	4b1a      	ldr	r3, [pc, #104]	; (801162c <tcp_write+0x5a4>)
 80115c4:	f240 22e6 	movw	r2, #742	; 0x2e6
 80115c8:	491e      	ldr	r1, [pc, #120]	; (8011644 <tcp_write+0x5bc>)
 80115ca:	481a      	ldr	r0, [pc, #104]	; (8011634 <tcp_write+0x5ac>)
 80115cc:	f004 ffc0 	bl	8016550 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80115d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80115d2:	685b      	ldr	r3, [r3, #4]
 80115d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80115d6:	e009      	b.n	80115ec <tcp_write+0x564>
      p->tot_len += extendlen;
 80115d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115da:	891a      	ldrh	r2, [r3, #8]
 80115dc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80115de:	4413      	add	r3, r2
 80115e0:	b29a      	uxth	r2, r3
 80115e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e4:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80115e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115e8:	681b      	ldr	r3, [r3, #0]
 80115ea:	62bb      	str	r3, [r7, #40]	; 0x28
 80115ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115ee:	681b      	ldr	r3, [r3, #0]
 80115f0:	2b00      	cmp	r3, #0
 80115f2:	d1f1      	bne.n	80115d8 <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80115f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80115f6:	891a      	ldrh	r2, [r3, #8]
 80115f8:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80115fa:	4413      	add	r3, r2
 80115fc:	b29a      	uxth	r2, r3
 80115fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011600:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8011602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011604:	895a      	ldrh	r2, [r3, #10]
 8011606:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011608:	4413      	add	r3, r2
 801160a:	b29a      	uxth	r2, r3
 801160c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801160e:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8011610:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011612:	891a      	ldrh	r2, [r3, #8]
 8011614:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8011616:	4413      	add	r3, r2
 8011618:	b29a      	uxth	r2, r3
 801161a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801161c:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 801161e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011620:	2b00      	cmp	r3, #0
 8011622:	d111      	bne.n	8011648 <tcp_write+0x5c0>
    pcb->unsent = queue;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011628:	66da      	str	r2, [r3, #108]	; 0x6c
 801162a:	e010      	b.n	801164e <tcp_write+0x5c6>
 801162c:	08019720 	.word	0x08019720
 8011630:	080199c0 	.word	0x080199c0
 8011634:	08019774 	.word	0x08019774
 8011638:	08019a00 	.word	0x08019a00
 801163c:	08019a10 	.word	0x08019a10
 8011640:	08019a24 	.word	0x08019a24
 8011644:	08019a5c 	.word	0x08019a5c
  } else {
    last_unsent->next = queue;
 8011648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801164a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801164c:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 801164e:	68fb      	ldr	r3, [r7, #12]
 8011650:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8011652:	88fb      	ldrh	r3, [r7, #6]
 8011654:	441a      	add	r2, r3
 8011656:	68fb      	ldr	r3, [r7, #12]
 8011658:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801165a:	68fb      	ldr	r3, [r7, #12]
 801165c:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8011660:	88fb      	ldrh	r3, [r7, #6]
 8011662:	1ad3      	subs	r3, r2, r3
 8011664:	b29a      	uxth	r2, r3
 8011666:	68fb      	ldr	r3, [r7, #12]
 8011668:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 801166c:	68fb      	ldr	r3, [r7, #12]
 801166e:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8011672:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011676:	68fb      	ldr	r3, [r7, #12]
 8011678:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801167c:	2b00      	cmp	r3, #0
 801167e:	d00e      	beq.n	801169e <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8011680:	68fb      	ldr	r3, [r7, #12]
 8011682:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011684:	2b00      	cmp	r3, #0
 8011686:	d10a      	bne.n	801169e <tcp_write+0x616>
 8011688:	68fb      	ldr	r3, [r7, #12]
 801168a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801168c:	2b00      	cmp	r3, #0
 801168e:	d106      	bne.n	801169e <tcp_write+0x616>
 8011690:	4b2c      	ldr	r3, [pc, #176]	; (8011744 <tcp_write+0x6bc>)
 8011692:	f240 3212 	movw	r2, #786	; 0x312
 8011696:	492c      	ldr	r1, [pc, #176]	; (8011748 <tcp_write+0x6c0>)
 8011698:	482c      	ldr	r0, [pc, #176]	; (801174c <tcp_write+0x6c4>)
 801169a:	f004 ff59 	bl	8016550 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 801169e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116a0:	2b00      	cmp	r3, #0
 80116a2:	d016      	beq.n	80116d2 <tcp_write+0x64a>
 80116a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116a6:	68db      	ldr	r3, [r3, #12]
 80116a8:	2b00      	cmp	r3, #0
 80116aa:	d012      	beq.n	80116d2 <tcp_write+0x64a>
 80116ac:	797b      	ldrb	r3, [r7, #5]
 80116ae:	f003 0302 	and.w	r3, r3, #2
 80116b2:	2b00      	cmp	r3, #0
 80116b4:	d10d      	bne.n	80116d2 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80116b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116b8:	68db      	ldr	r3, [r3, #12]
 80116ba:	899b      	ldrh	r3, [r3, #12]
 80116bc:	b29c      	uxth	r4, r3
 80116be:	2008      	movs	r0, #8
 80116c0:	f7f8 feca 	bl	800a458 <lwip_htons>
 80116c4:	4603      	mov	r3, r0
 80116c6:	461a      	mov	r2, r3
 80116c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116ca:	68db      	ldr	r3, [r3, #12]
 80116cc:	4322      	orrs	r2, r4
 80116ce:	b292      	uxth	r2, r2
 80116d0:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80116d2:	2300      	movs	r3, #0
 80116d4:	e031      	b.n	801173a <tcp_write+0x6b2>
          goto memerr;
 80116d6:	bf00      	nop
 80116d8:	e006      	b.n	80116e8 <tcp_write+0x660>
            goto memerr;
 80116da:	bf00      	nop
 80116dc:	e004      	b.n	80116e8 <tcp_write+0x660>
        goto memerr;
 80116de:	bf00      	nop
 80116e0:	e002      	b.n	80116e8 <tcp_write+0x660>
        goto memerr;
 80116e2:	bf00      	nop
 80116e4:	e000      	b.n	80116e8 <tcp_write+0x660>
      goto memerr;
 80116e6:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	8b5b      	ldrh	r3, [r3, #26]
 80116ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80116f0:	b29a      	uxth	r2, r3
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80116f6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d002      	beq.n	8011702 <tcp_write+0x67a>
    pbuf_free(concat_p);
 80116fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80116fe:	f7fa fd85 	bl	800c20c <pbuf_free>
  }
  if (queue != NULL) {
 8011702:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011704:	2b00      	cmp	r3, #0
 8011706:	d002      	beq.n	801170e <tcp_write+0x686>
    tcp_segs_free(queue);
 8011708:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801170a:	f7fc fb83 	bl	800de14 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 801170e:	68fb      	ldr	r3, [r7, #12]
 8011710:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011714:	2b00      	cmp	r3, #0
 8011716:	d00e      	beq.n	8011736 <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 8011718:	68fb      	ldr	r3, [r7, #12]
 801171a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801171c:	2b00      	cmp	r3, #0
 801171e:	d10a      	bne.n	8011736 <tcp_write+0x6ae>
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011724:	2b00      	cmp	r3, #0
 8011726:	d106      	bne.n	8011736 <tcp_write+0x6ae>
 8011728:	4b06      	ldr	r3, [pc, #24]	; (8011744 <tcp_write+0x6bc>)
 801172a:	f240 3227 	movw	r2, #807	; 0x327
 801172e:	4906      	ldr	r1, [pc, #24]	; (8011748 <tcp_write+0x6c0>)
 8011730:	4806      	ldr	r0, [pc, #24]	; (801174c <tcp_write+0x6c4>)
 8011732:	f004 ff0d 	bl	8016550 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 8011736:	f04f 33ff 	mov.w	r3, #4294967295
}
 801173a:	4618      	mov	r0, r3
 801173c:	375c      	adds	r7, #92	; 0x5c
 801173e:	46bd      	mov	sp, r7
 8011740:	bd90      	pop	{r4, r7, pc}
 8011742:	bf00      	nop
 8011744:	08019720 	.word	0x08019720
 8011748:	08019a94 	.word	0x08019a94
 801174c:	08019774 	.word	0x08019774

08011750 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8011750:	b590      	push	{r4, r7, lr}
 8011752:	b08b      	sub	sp, #44	; 0x2c
 8011754:	af02      	add	r7, sp, #8
 8011756:	6078      	str	r0, [r7, #4]
 8011758:	460b      	mov	r3, r1
 801175a:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 801175c:	2300      	movs	r3, #0
 801175e:	61fb      	str	r3, [r7, #28]
 8011760:	2300      	movs	r3, #0
 8011762:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8011764:	2300      	movs	r3, #0
 8011766:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8011768:	687b      	ldr	r3, [r7, #4]
 801176a:	2b00      	cmp	r3, #0
 801176c:	d106      	bne.n	801177c <tcp_split_unsent_seg+0x2c>
 801176e:	4b95      	ldr	r3, [pc, #596]	; (80119c4 <tcp_split_unsent_seg+0x274>)
 8011770:	f240 324b 	movw	r2, #843	; 0x34b
 8011774:	4994      	ldr	r1, [pc, #592]	; (80119c8 <tcp_split_unsent_seg+0x278>)
 8011776:	4895      	ldr	r0, [pc, #596]	; (80119cc <tcp_split_unsent_seg+0x27c>)
 8011778:	f004 feea 	bl	8016550 <iprintf>

  useg = pcb->unsent;
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011780:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8011782:	697b      	ldr	r3, [r7, #20]
 8011784:	2b00      	cmp	r3, #0
 8011786:	d102      	bne.n	801178e <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8011788:	f04f 33ff 	mov.w	r3, #4294967295
 801178c:	e116      	b.n	80119bc <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801178e:	887b      	ldrh	r3, [r7, #2]
 8011790:	2b00      	cmp	r3, #0
 8011792:	d109      	bne.n	80117a8 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8011794:	4b8b      	ldr	r3, [pc, #556]	; (80119c4 <tcp_split_unsent_seg+0x274>)
 8011796:	f240 3253 	movw	r2, #851	; 0x353
 801179a:	498d      	ldr	r1, [pc, #564]	; (80119d0 <tcp_split_unsent_seg+0x280>)
 801179c:	488b      	ldr	r0, [pc, #556]	; (80119cc <tcp_split_unsent_seg+0x27c>)
 801179e:	f004 fed7 	bl	8016550 <iprintf>
    return ERR_VAL;
 80117a2:	f06f 0305 	mvn.w	r3, #5
 80117a6:	e109      	b.n	80119bc <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80117a8:	697b      	ldr	r3, [r7, #20]
 80117aa:	891b      	ldrh	r3, [r3, #8]
 80117ac:	887a      	ldrh	r2, [r7, #2]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d301      	bcc.n	80117b6 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80117b2:	2300      	movs	r3, #0
 80117b4:	e102      	b.n	80119bc <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80117b6:	687b      	ldr	r3, [r7, #4]
 80117b8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80117ba:	887a      	ldrh	r2, [r7, #2]
 80117bc:	429a      	cmp	r2, r3
 80117be:	d906      	bls.n	80117ce <tcp_split_unsent_seg+0x7e>
 80117c0:	4b80      	ldr	r3, [pc, #512]	; (80119c4 <tcp_split_unsent_seg+0x274>)
 80117c2:	f240 325b 	movw	r2, #859	; 0x35b
 80117c6:	4983      	ldr	r1, [pc, #524]	; (80119d4 <tcp_split_unsent_seg+0x284>)
 80117c8:	4880      	ldr	r0, [pc, #512]	; (80119cc <tcp_split_unsent_seg+0x27c>)
 80117ca:	f004 fec1 	bl	8016550 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80117ce:	697b      	ldr	r3, [r7, #20]
 80117d0:	891b      	ldrh	r3, [r3, #8]
 80117d2:	2b00      	cmp	r3, #0
 80117d4:	d106      	bne.n	80117e4 <tcp_split_unsent_seg+0x94>
 80117d6:	4b7b      	ldr	r3, [pc, #492]	; (80119c4 <tcp_split_unsent_seg+0x274>)
 80117d8:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80117dc:	497e      	ldr	r1, [pc, #504]	; (80119d8 <tcp_split_unsent_seg+0x288>)
 80117de:	487b      	ldr	r0, [pc, #492]	; (80119cc <tcp_split_unsent_seg+0x27c>)
 80117e0:	f004 feb6 	bl	8016550 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80117e4:	697b      	ldr	r3, [r7, #20]
 80117e6:	7a9b      	ldrb	r3, [r3, #10]
 80117e8:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80117ea:	7bfb      	ldrb	r3, [r7, #15]
 80117ec:	009b      	lsls	r3, r3, #2
 80117ee:	b2db      	uxtb	r3, r3
 80117f0:	f003 0304 	and.w	r3, r3, #4
 80117f4:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80117f6:	697b      	ldr	r3, [r7, #20]
 80117f8:	891a      	ldrh	r2, [r3, #8]
 80117fa:	887b      	ldrh	r3, [r7, #2]
 80117fc:	1ad3      	subs	r3, r2, r3
 80117fe:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8011800:	7bbb      	ldrb	r3, [r7, #14]
 8011802:	b29a      	uxth	r2, r3
 8011804:	89bb      	ldrh	r3, [r7, #12]
 8011806:	4413      	add	r3, r2
 8011808:	b29b      	uxth	r3, r3
 801180a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801180e:	4619      	mov	r1, r3
 8011810:	2036      	movs	r0, #54	; 0x36
 8011812:	f7fa fa17 	bl	800bc44 <pbuf_alloc>
 8011816:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011818:	693b      	ldr	r3, [r7, #16]
 801181a:	2b00      	cmp	r3, #0
 801181c:	f000 80b7 	beq.w	801198e <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	685b      	ldr	r3, [r3, #4]
 8011824:	891a      	ldrh	r2, [r3, #8]
 8011826:	697b      	ldr	r3, [r7, #20]
 8011828:	891b      	ldrh	r3, [r3, #8]
 801182a:	1ad3      	subs	r3, r2, r3
 801182c:	b29a      	uxth	r2, r3
 801182e:	887b      	ldrh	r3, [r7, #2]
 8011830:	4413      	add	r3, r2
 8011832:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8011834:	697b      	ldr	r3, [r7, #20]
 8011836:	6858      	ldr	r0, [r3, #4]
 8011838:	693b      	ldr	r3, [r7, #16]
 801183a:	685a      	ldr	r2, [r3, #4]
 801183c:	7bbb      	ldrb	r3, [r7, #14]
 801183e:	18d1      	adds	r1, r2, r3
 8011840:	897b      	ldrh	r3, [r7, #10]
 8011842:	89ba      	ldrh	r2, [r7, #12]
 8011844:	f7fa fee8 	bl	800c618 <pbuf_copy_partial>
 8011848:	4603      	mov	r3, r0
 801184a:	461a      	mov	r2, r3
 801184c:	89bb      	ldrh	r3, [r7, #12]
 801184e:	4293      	cmp	r3, r2
 8011850:	f040 809f 	bne.w	8011992 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8011854:	697b      	ldr	r3, [r7, #20]
 8011856:	68db      	ldr	r3, [r3, #12]
 8011858:	899b      	ldrh	r3, [r3, #12]
 801185a:	b29b      	uxth	r3, r3
 801185c:	4618      	mov	r0, r3
 801185e:	f7f8 fdfb 	bl	800a458 <lwip_htons>
 8011862:	4603      	mov	r3, r0
 8011864:	b2db      	uxtb	r3, r3
 8011866:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801186a:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 801186c:	2300      	movs	r3, #0
 801186e:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8011870:	7efb      	ldrb	r3, [r7, #27]
 8011872:	f003 0308 	and.w	r3, r3, #8
 8011876:	2b00      	cmp	r3, #0
 8011878:	d007      	beq.n	801188a <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801187a:	7efb      	ldrb	r3, [r7, #27]
 801187c:	f023 0308 	bic.w	r3, r3, #8
 8011880:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8011882:	7ebb      	ldrb	r3, [r7, #26]
 8011884:	f043 0308 	orr.w	r3, r3, #8
 8011888:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801188a:	7efb      	ldrb	r3, [r7, #27]
 801188c:	f003 0301 	and.w	r3, r3, #1
 8011890:	2b00      	cmp	r3, #0
 8011892:	d007      	beq.n	80118a4 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8011894:	7efb      	ldrb	r3, [r7, #27]
 8011896:	f023 0301 	bic.w	r3, r3, #1
 801189a:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 801189c:	7ebb      	ldrb	r3, [r7, #26]
 801189e:	f043 0301 	orr.w	r3, r3, #1
 80118a2:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80118a4:	697b      	ldr	r3, [r7, #20]
 80118a6:	68db      	ldr	r3, [r3, #12]
 80118a8:	685b      	ldr	r3, [r3, #4]
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7f8 fde9 	bl	800a482 <lwip_htonl>
 80118b0:	4602      	mov	r2, r0
 80118b2:	887b      	ldrh	r3, [r7, #2]
 80118b4:	18d1      	adds	r1, r2, r3
 80118b6:	7eba      	ldrb	r2, [r7, #26]
 80118b8:	7bfb      	ldrb	r3, [r7, #15]
 80118ba:	9300      	str	r3, [sp, #0]
 80118bc:	460b      	mov	r3, r1
 80118be:	6939      	ldr	r1, [r7, #16]
 80118c0:	6878      	ldr	r0, [r7, #4]
 80118c2:	f7ff fa4f 	bl	8010d64 <tcp_create_segment>
 80118c6:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80118c8:	69fb      	ldr	r3, [r7, #28]
 80118ca:	2b00      	cmp	r3, #0
 80118cc:	d063      	beq.n	8011996 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80118ce:	697b      	ldr	r3, [r7, #20]
 80118d0:	685b      	ldr	r3, [r3, #4]
 80118d2:	4618      	mov	r0, r3
 80118d4:	f7fa fd28 	bl	800c328 <pbuf_clen>
 80118d8:	4603      	mov	r3, r0
 80118da:	461a      	mov	r2, r3
 80118dc:	687b      	ldr	r3, [r7, #4]
 80118de:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80118e2:	1a9b      	subs	r3, r3, r2
 80118e4:	b29a      	uxth	r2, r3
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80118ec:	697b      	ldr	r3, [r7, #20]
 80118ee:	6858      	ldr	r0, [r3, #4]
 80118f0:	697b      	ldr	r3, [r7, #20]
 80118f2:	685b      	ldr	r3, [r3, #4]
 80118f4:	891a      	ldrh	r2, [r3, #8]
 80118f6:	89bb      	ldrh	r3, [r7, #12]
 80118f8:	1ad3      	subs	r3, r2, r3
 80118fa:	b29b      	uxth	r3, r3
 80118fc:	4619      	mov	r1, r3
 80118fe:	f7fa faff 	bl	800bf00 <pbuf_realloc>
  useg->len -= remainder;
 8011902:	697b      	ldr	r3, [r7, #20]
 8011904:	891a      	ldrh	r2, [r3, #8]
 8011906:	89bb      	ldrh	r3, [r7, #12]
 8011908:	1ad3      	subs	r3, r2, r3
 801190a:	b29a      	uxth	r2, r3
 801190c:	697b      	ldr	r3, [r7, #20]
 801190e:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8011910:	697b      	ldr	r3, [r7, #20]
 8011912:	68db      	ldr	r3, [r3, #12]
 8011914:	899b      	ldrh	r3, [r3, #12]
 8011916:	b29c      	uxth	r4, r3
 8011918:	7efb      	ldrb	r3, [r7, #27]
 801191a:	b29b      	uxth	r3, r3
 801191c:	4618      	mov	r0, r3
 801191e:	f7f8 fd9b 	bl	800a458 <lwip_htons>
 8011922:	4603      	mov	r3, r0
 8011924:	461a      	mov	r2, r3
 8011926:	697b      	ldr	r3, [r7, #20]
 8011928:	68db      	ldr	r3, [r3, #12]
 801192a:	4322      	orrs	r2, r4
 801192c:	b292      	uxth	r2, r2
 801192e:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8011930:	697b      	ldr	r3, [r7, #20]
 8011932:	685b      	ldr	r3, [r3, #4]
 8011934:	4618      	mov	r0, r3
 8011936:	f7fa fcf7 	bl	800c328 <pbuf_clen>
 801193a:	4603      	mov	r3, r0
 801193c:	461a      	mov	r2, r3
 801193e:	687b      	ldr	r3, [r7, #4]
 8011940:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011944:	4413      	add	r3, r2
 8011946:	b29a      	uxth	r2, r3
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 801194e:	69fb      	ldr	r3, [r7, #28]
 8011950:	685b      	ldr	r3, [r3, #4]
 8011952:	4618      	mov	r0, r3
 8011954:	f7fa fce8 	bl	800c328 <pbuf_clen>
 8011958:	4603      	mov	r3, r0
 801195a:	461a      	mov	r2, r3
 801195c:	687b      	ldr	r3, [r7, #4]
 801195e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011962:	4413      	add	r3, r2
 8011964:	b29a      	uxth	r2, r3
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 801196c:	697b      	ldr	r3, [r7, #20]
 801196e:	681a      	ldr	r2, [r3, #0]
 8011970:	69fb      	ldr	r3, [r7, #28]
 8011972:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8011974:	697b      	ldr	r3, [r7, #20]
 8011976:	69fa      	ldr	r2, [r7, #28]
 8011978:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801197a:	69fb      	ldr	r3, [r7, #28]
 801197c:	681b      	ldr	r3, [r3, #0]
 801197e:	2b00      	cmp	r3, #0
 8011980:	d103      	bne.n	801198a <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8011982:	687b      	ldr	r3, [r7, #4]
 8011984:	2200      	movs	r2, #0
 8011986:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801198a:	2300      	movs	r3, #0
 801198c:	e016      	b.n	80119bc <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801198e:	bf00      	nop
 8011990:	e002      	b.n	8011998 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011992:	bf00      	nop
 8011994:	e000      	b.n	8011998 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8011996:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8011998:	69fb      	ldr	r3, [r7, #28]
 801199a:	2b00      	cmp	r3, #0
 801199c:	d006      	beq.n	80119ac <tcp_split_unsent_seg+0x25c>
 801199e:	4b09      	ldr	r3, [pc, #36]	; (80119c4 <tcp_split_unsent_seg+0x274>)
 80119a0:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80119a4:	490d      	ldr	r1, [pc, #52]	; (80119dc <tcp_split_unsent_seg+0x28c>)
 80119a6:	4809      	ldr	r0, [pc, #36]	; (80119cc <tcp_split_unsent_seg+0x27c>)
 80119a8:	f004 fdd2 	bl	8016550 <iprintf>
  if (p != NULL) {
 80119ac:	693b      	ldr	r3, [r7, #16]
 80119ae:	2b00      	cmp	r3, #0
 80119b0:	d002      	beq.n	80119b8 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80119b2:	6938      	ldr	r0, [r7, #16]
 80119b4:	f7fa fc2a 	bl	800c20c <pbuf_free>
  }

  return ERR_MEM;
 80119b8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3724      	adds	r7, #36	; 0x24
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd90      	pop	{r4, r7, pc}
 80119c4:	08019720 	.word	0x08019720
 80119c8:	08019ab4 	.word	0x08019ab4
 80119cc:	08019774 	.word	0x08019774
 80119d0:	08019ad8 	.word	0x08019ad8
 80119d4:	08019afc 	.word	0x08019afc
 80119d8:	08019b0c 	.word	0x08019b0c
 80119dc:	08019b1c 	.word	0x08019b1c

080119e0 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80119e0:	b590      	push	{r4, r7, lr}
 80119e2:	b085      	sub	sp, #20
 80119e4:	af00      	add	r7, sp, #0
 80119e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80119e8:	687b      	ldr	r3, [r7, #4]
 80119ea:	2b00      	cmp	r3, #0
 80119ec:	d106      	bne.n	80119fc <tcp_send_fin+0x1c>
 80119ee:	4b21      	ldr	r3, [pc, #132]	; (8011a74 <tcp_send_fin+0x94>)
 80119f0:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80119f4:	4920      	ldr	r1, [pc, #128]	; (8011a78 <tcp_send_fin+0x98>)
 80119f6:	4821      	ldr	r0, [pc, #132]	; (8011a7c <tcp_send_fin+0x9c>)
 80119f8:	f004 fdaa 	bl	8016550 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d02e      	beq.n	8011a62 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a04:	687b      	ldr	r3, [r7, #4]
 8011a06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011a08:	60fb      	str	r3, [r7, #12]
 8011a0a:	e002      	b.n	8011a12 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8011a0c:	68fb      	ldr	r3, [r7, #12]
 8011a0e:	681b      	ldr	r3, [r3, #0]
 8011a10:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	681b      	ldr	r3, [r3, #0]
 8011a16:	2b00      	cmp	r3, #0
 8011a18:	d1f8      	bne.n	8011a0c <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	68db      	ldr	r3, [r3, #12]
 8011a1e:	899b      	ldrh	r3, [r3, #12]
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	4618      	mov	r0, r3
 8011a24:	f7f8 fd18 	bl	800a458 <lwip_htons>
 8011a28:	4603      	mov	r3, r0
 8011a2a:	b2db      	uxtb	r3, r3
 8011a2c:	f003 0307 	and.w	r3, r3, #7
 8011a30:	2b00      	cmp	r3, #0
 8011a32:	d116      	bne.n	8011a62 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	68db      	ldr	r3, [r3, #12]
 8011a38:	899b      	ldrh	r3, [r3, #12]
 8011a3a:	b29c      	uxth	r4, r3
 8011a3c:	2001      	movs	r0, #1
 8011a3e:	f7f8 fd0b 	bl	800a458 <lwip_htons>
 8011a42:	4603      	mov	r3, r0
 8011a44:	461a      	mov	r2, r3
 8011a46:	68fb      	ldr	r3, [r7, #12]
 8011a48:	68db      	ldr	r3, [r3, #12]
 8011a4a:	4322      	orrs	r2, r4
 8011a4c:	b292      	uxth	r2, r2
 8011a4e:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8011a50:	687b      	ldr	r3, [r7, #4]
 8011a52:	8b5b      	ldrh	r3, [r3, #26]
 8011a54:	f043 0320 	orr.w	r3, r3, #32
 8011a58:	b29a      	uxth	r2, r3
 8011a5a:	687b      	ldr	r3, [r7, #4]
 8011a5c:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8011a5e:	2300      	movs	r3, #0
 8011a60:	e004      	b.n	8011a6c <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8011a62:	2101      	movs	r1, #1
 8011a64:	6878      	ldr	r0, [r7, #4]
 8011a66:	f000 f80b 	bl	8011a80 <tcp_enqueue_flags>
 8011a6a:	4603      	mov	r3, r0
}
 8011a6c:	4618      	mov	r0, r3
 8011a6e:	3714      	adds	r7, #20
 8011a70:	46bd      	mov	sp, r7
 8011a72:	bd90      	pop	{r4, r7, pc}
 8011a74:	08019720 	.word	0x08019720
 8011a78:	08019b28 	.word	0x08019b28
 8011a7c:	08019774 	.word	0x08019774

08011a80 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8011a80:	b580      	push	{r7, lr}
 8011a82:	b08a      	sub	sp, #40	; 0x28
 8011a84:	af02      	add	r7, sp, #8
 8011a86:	6078      	str	r0, [r7, #4]
 8011a88:	460b      	mov	r3, r1
 8011a8a:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8011a8c:	2300      	movs	r3, #0
 8011a8e:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8011a90:	2300      	movs	r3, #0
 8011a92:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8011a94:	78fb      	ldrb	r3, [r7, #3]
 8011a96:	f003 0303 	and.w	r3, r3, #3
 8011a9a:	2b00      	cmp	r3, #0
 8011a9c:	d106      	bne.n	8011aac <tcp_enqueue_flags+0x2c>
 8011a9e:	4b67      	ldr	r3, [pc, #412]	; (8011c3c <tcp_enqueue_flags+0x1bc>)
 8011aa0:	f240 4211 	movw	r2, #1041	; 0x411
 8011aa4:	4966      	ldr	r1, [pc, #408]	; (8011c40 <tcp_enqueue_flags+0x1c0>)
 8011aa6:	4867      	ldr	r0, [pc, #412]	; (8011c44 <tcp_enqueue_flags+0x1c4>)
 8011aa8:	f004 fd52 	bl	8016550 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8011aac:	687b      	ldr	r3, [r7, #4]
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d106      	bne.n	8011ac0 <tcp_enqueue_flags+0x40>
 8011ab2:	4b62      	ldr	r3, [pc, #392]	; (8011c3c <tcp_enqueue_flags+0x1bc>)
 8011ab4:	f240 4213 	movw	r2, #1043	; 0x413
 8011ab8:	4963      	ldr	r1, [pc, #396]	; (8011c48 <tcp_enqueue_flags+0x1c8>)
 8011aba:	4862      	ldr	r0, [pc, #392]	; (8011c44 <tcp_enqueue_flags+0x1c4>)
 8011abc:	f004 fd48 	bl	8016550 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8011ac0:	78fb      	ldrb	r3, [r7, #3]
 8011ac2:	f003 0302 	and.w	r3, r3, #2
 8011ac6:	2b00      	cmp	r3, #0
 8011ac8:	d001      	beq.n	8011ace <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8011aca:	2301      	movs	r3, #1
 8011acc:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011ace:	7ffb      	ldrb	r3, [r7, #31]
 8011ad0:	009b      	lsls	r3, r3, #2
 8011ad2:	b2db      	uxtb	r3, r3
 8011ad4:	f003 0304 	and.w	r3, r3, #4
 8011ad8:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8011ada:	7dfb      	ldrb	r3, [r7, #23]
 8011adc:	b29b      	uxth	r3, r3
 8011ade:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011ae2:	4619      	mov	r1, r3
 8011ae4:	2036      	movs	r0, #54	; 0x36
 8011ae6:	f7fa f8ad 	bl	800bc44 <pbuf_alloc>
 8011aea:	6138      	str	r0, [r7, #16]
 8011aec:	693b      	ldr	r3, [r7, #16]
 8011aee:	2b00      	cmp	r3, #0
 8011af0:	d109      	bne.n	8011b06 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011af2:	687b      	ldr	r3, [r7, #4]
 8011af4:	8b5b      	ldrh	r3, [r3, #26]
 8011af6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011afa:	b29a      	uxth	r2, r3
 8011afc:	687b      	ldr	r3, [r7, #4]
 8011afe:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b00:	f04f 33ff 	mov.w	r3, #4294967295
 8011b04:	e095      	b.n	8011c32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8011b06:	693b      	ldr	r3, [r7, #16]
 8011b08:	895a      	ldrh	r2, [r3, #10]
 8011b0a:	7dfb      	ldrb	r3, [r7, #23]
 8011b0c:	b29b      	uxth	r3, r3
 8011b0e:	429a      	cmp	r2, r3
 8011b10:	d206      	bcs.n	8011b20 <tcp_enqueue_flags+0xa0>
 8011b12:	4b4a      	ldr	r3, [pc, #296]	; (8011c3c <tcp_enqueue_flags+0x1bc>)
 8011b14:	f240 4239 	movw	r2, #1081	; 0x439
 8011b18:	494c      	ldr	r1, [pc, #304]	; (8011c4c <tcp_enqueue_flags+0x1cc>)
 8011b1a:	484a      	ldr	r0, [pc, #296]	; (8011c44 <tcp_enqueue_flags+0x1c4>)
 8011b1c:	f004 fd18 	bl	8016550 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8011b24:	78fa      	ldrb	r2, [r7, #3]
 8011b26:	7ffb      	ldrb	r3, [r7, #31]
 8011b28:	9300      	str	r3, [sp, #0]
 8011b2a:	460b      	mov	r3, r1
 8011b2c:	6939      	ldr	r1, [r7, #16]
 8011b2e:	6878      	ldr	r0, [r7, #4]
 8011b30:	f7ff f918 	bl	8010d64 <tcp_create_segment>
 8011b34:	60f8      	str	r0, [r7, #12]
 8011b36:	68fb      	ldr	r3, [r7, #12]
 8011b38:	2b00      	cmp	r3, #0
 8011b3a:	d109      	bne.n	8011b50 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011b3c:	687b      	ldr	r3, [r7, #4]
 8011b3e:	8b5b      	ldrh	r3, [r3, #26]
 8011b40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011b44:	b29a      	uxth	r2, r3
 8011b46:	687b      	ldr	r3, [r7, #4]
 8011b48:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8011b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4e:	e070      	b.n	8011c32 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8011b50:	68fb      	ldr	r3, [r7, #12]
 8011b52:	68db      	ldr	r3, [r3, #12]
 8011b54:	f003 0303 	and.w	r3, r3, #3
 8011b58:	2b00      	cmp	r3, #0
 8011b5a:	d006      	beq.n	8011b6a <tcp_enqueue_flags+0xea>
 8011b5c:	4b37      	ldr	r3, [pc, #220]	; (8011c3c <tcp_enqueue_flags+0x1bc>)
 8011b5e:	f240 4242 	movw	r2, #1090	; 0x442
 8011b62:	493b      	ldr	r1, [pc, #236]	; (8011c50 <tcp_enqueue_flags+0x1d0>)
 8011b64:	4837      	ldr	r0, [pc, #220]	; (8011c44 <tcp_enqueue_flags+0x1c4>)
 8011b66:	f004 fcf3 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8011b6a:	68fb      	ldr	r3, [r7, #12]
 8011b6c:	891b      	ldrh	r3, [r3, #8]
 8011b6e:	2b00      	cmp	r3, #0
 8011b70:	d006      	beq.n	8011b80 <tcp_enqueue_flags+0x100>
 8011b72:	4b32      	ldr	r3, [pc, #200]	; (8011c3c <tcp_enqueue_flags+0x1bc>)
 8011b74:	f240 4243 	movw	r2, #1091	; 0x443
 8011b78:	4936      	ldr	r1, [pc, #216]	; (8011c54 <tcp_enqueue_flags+0x1d4>)
 8011b7a:	4832      	ldr	r0, [pc, #200]	; (8011c44 <tcp_enqueue_flags+0x1c4>)
 8011b7c:	f004 fce8 	bl	8016550 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8011b80:	687b      	ldr	r3, [r7, #4]
 8011b82:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b84:	2b00      	cmp	r3, #0
 8011b86:	d103      	bne.n	8011b90 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8011b88:	687b      	ldr	r3, [r7, #4]
 8011b8a:	68fa      	ldr	r2, [r7, #12]
 8011b8c:	66da      	str	r2, [r3, #108]	; 0x6c
 8011b8e:	e00d      	b.n	8011bac <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8011b90:	687b      	ldr	r3, [r7, #4]
 8011b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011b94:	61bb      	str	r3, [r7, #24]
 8011b96:	e002      	b.n	8011b9e <tcp_enqueue_flags+0x11e>
 8011b98:	69bb      	ldr	r3, [r7, #24]
 8011b9a:	681b      	ldr	r3, [r3, #0]
 8011b9c:	61bb      	str	r3, [r7, #24]
 8011b9e:	69bb      	ldr	r3, [r7, #24]
 8011ba0:	681b      	ldr	r3, [r3, #0]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d1f8      	bne.n	8011b98 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8011ba6:	69bb      	ldr	r3, [r7, #24]
 8011ba8:	68fa      	ldr	r2, [r7, #12]
 8011baa:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	2200      	movs	r2, #0
 8011bb0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8011bb4:	78fb      	ldrb	r3, [r7, #3]
 8011bb6:	f003 0302 	and.w	r3, r3, #2
 8011bba:	2b00      	cmp	r3, #0
 8011bbc:	d104      	bne.n	8011bc8 <tcp_enqueue_flags+0x148>
 8011bbe:	78fb      	ldrb	r3, [r7, #3]
 8011bc0:	f003 0301 	and.w	r3, r3, #1
 8011bc4:	2b00      	cmp	r3, #0
 8011bc6:	d004      	beq.n	8011bd2 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8011bc8:	687b      	ldr	r3, [r7, #4]
 8011bca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8011bcc:	1c5a      	adds	r2, r3, #1
 8011bce:	687b      	ldr	r3, [r7, #4]
 8011bd0:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8011bd2:	78fb      	ldrb	r3, [r7, #3]
 8011bd4:	f003 0301 	and.w	r3, r3, #1
 8011bd8:	2b00      	cmp	r3, #0
 8011bda:	d006      	beq.n	8011bea <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	8b5b      	ldrh	r3, [r3, #26]
 8011be0:	f043 0320 	orr.w	r3, r3, #32
 8011be4:	b29a      	uxth	r2, r3
 8011be6:	687b      	ldr	r3, [r7, #4]
 8011be8:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	685b      	ldr	r3, [r3, #4]
 8011bee:	4618      	mov	r0, r3
 8011bf0:	f7fa fb9a 	bl	800c328 <pbuf_clen>
 8011bf4:	4603      	mov	r3, r0
 8011bf6:	461a      	mov	r2, r3
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011bfe:	4413      	add	r3, r2
 8011c00:	b29a      	uxth	r2, r3
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8011c08:	687b      	ldr	r3, [r7, #4]
 8011c0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011c0e:	2b00      	cmp	r3, #0
 8011c10:	d00e      	beq.n	8011c30 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8011c12:	687b      	ldr	r3, [r7, #4]
 8011c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d10a      	bne.n	8011c30 <tcp_enqueue_flags+0x1b0>
 8011c1a:	687b      	ldr	r3, [r7, #4]
 8011c1c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011c1e:	2b00      	cmp	r3, #0
 8011c20:	d106      	bne.n	8011c30 <tcp_enqueue_flags+0x1b0>
 8011c22:	4b06      	ldr	r3, [pc, #24]	; (8011c3c <tcp_enqueue_flags+0x1bc>)
 8011c24:	f240 4265 	movw	r2, #1125	; 0x465
 8011c28:	490b      	ldr	r1, [pc, #44]	; (8011c58 <tcp_enqueue_flags+0x1d8>)
 8011c2a:	4806      	ldr	r0, [pc, #24]	; (8011c44 <tcp_enqueue_flags+0x1c4>)
 8011c2c:	f004 fc90 	bl	8016550 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8011c30:	2300      	movs	r3, #0
}
 8011c32:	4618      	mov	r0, r3
 8011c34:	3720      	adds	r7, #32
 8011c36:	46bd      	mov	sp, r7
 8011c38:	bd80      	pop	{r7, pc}
 8011c3a:	bf00      	nop
 8011c3c:	08019720 	.word	0x08019720
 8011c40:	08019b44 	.word	0x08019b44
 8011c44:	08019774 	.word	0x08019774
 8011c48:	08019b9c 	.word	0x08019b9c
 8011c4c:	08019bbc 	.word	0x08019bbc
 8011c50:	08019bf8 	.word	0x08019bf8
 8011c54:	08019c10 	.word	0x08019c10
 8011c58:	08019c3c 	.word	0x08019c3c

08011c5c <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8011c5c:	b5b0      	push	{r4, r5, r7, lr}
 8011c5e:	b08a      	sub	sp, #40	; 0x28
 8011c60:	af00      	add	r7, sp, #0
 8011c62:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8011c64:	687b      	ldr	r3, [r7, #4]
 8011c66:	2b00      	cmp	r3, #0
 8011c68:	d106      	bne.n	8011c78 <tcp_output+0x1c>
 8011c6a:	4b8a      	ldr	r3, [pc, #552]	; (8011e94 <tcp_output+0x238>)
 8011c6c:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8011c70:	4989      	ldr	r1, [pc, #548]	; (8011e98 <tcp_output+0x23c>)
 8011c72:	488a      	ldr	r0, [pc, #552]	; (8011e9c <tcp_output+0x240>)
 8011c74:	f004 fc6c 	bl	8016550 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8011c78:	687b      	ldr	r3, [r7, #4]
 8011c7a:	7d1b      	ldrb	r3, [r3, #20]
 8011c7c:	2b01      	cmp	r3, #1
 8011c7e:	d106      	bne.n	8011c8e <tcp_output+0x32>
 8011c80:	4b84      	ldr	r3, [pc, #528]	; (8011e94 <tcp_output+0x238>)
 8011c82:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8011c86:	4986      	ldr	r1, [pc, #536]	; (8011ea0 <tcp_output+0x244>)
 8011c88:	4884      	ldr	r0, [pc, #528]	; (8011e9c <tcp_output+0x240>)
 8011c8a:	f004 fc61 	bl	8016550 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8011c8e:	4b85      	ldr	r3, [pc, #532]	; (8011ea4 <tcp_output+0x248>)
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	687a      	ldr	r2, [r7, #4]
 8011c94:	429a      	cmp	r2, r3
 8011c96:	d101      	bne.n	8011c9c <tcp_output+0x40>
    return ERR_OK;
 8011c98:	2300      	movs	r3, #0
 8011c9a:	e1ce      	b.n	801203a <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8011c9c:	687b      	ldr	r3, [r7, #4]
 8011c9e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8011ca2:	687b      	ldr	r3, [r7, #4]
 8011ca4:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011ca8:	4293      	cmp	r3, r2
 8011caa:	bf28      	it	cs
 8011cac:	4613      	movcs	r3, r2
 8011cae:	b29b      	uxth	r3, r3
 8011cb0:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8011cb2:	687b      	ldr	r3, [r7, #4]
 8011cb4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011cb6:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011cba:	2b00      	cmp	r3, #0
 8011cbc:	d10b      	bne.n	8011cd6 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8011cbe:	687b      	ldr	r3, [r7, #4]
 8011cc0:	8b5b      	ldrh	r3, [r3, #26]
 8011cc2:	f003 0302 	and.w	r3, r3, #2
 8011cc6:	2b00      	cmp	r3, #0
 8011cc8:	f000 81aa 	beq.w	8012020 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8011ccc:	6878      	ldr	r0, [r7, #4]
 8011cce:	f000 fdcb 	bl	8012868 <tcp_send_empty_ack>
 8011cd2:	4603      	mov	r3, r0
 8011cd4:	e1b1      	b.n	801203a <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8011cd6:	6879      	ldr	r1, [r7, #4]
 8011cd8:	687b      	ldr	r3, [r7, #4]
 8011cda:	3304      	adds	r3, #4
 8011cdc:	461a      	mov	r2, r3
 8011cde:	6878      	ldr	r0, [r7, #4]
 8011ce0:	f7ff f824 	bl	8010d2c <tcp_route>
 8011ce4:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8011ce6:	697b      	ldr	r3, [r7, #20]
 8011ce8:	2b00      	cmp	r3, #0
 8011cea:	d102      	bne.n	8011cf2 <tcp_output+0x96>
    return ERR_RTE;
 8011cec:	f06f 0303 	mvn.w	r3, #3
 8011cf0:	e1a3      	b.n	801203a <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8011cf2:	687b      	ldr	r3, [r7, #4]
 8011cf4:	2b00      	cmp	r3, #0
 8011cf6:	d003      	beq.n	8011d00 <tcp_output+0xa4>
 8011cf8:	687b      	ldr	r3, [r7, #4]
 8011cfa:	681b      	ldr	r3, [r3, #0]
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d111      	bne.n	8011d24 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8011d00:	697b      	ldr	r3, [r7, #20]
 8011d02:	2b00      	cmp	r3, #0
 8011d04:	d002      	beq.n	8011d0c <tcp_output+0xb0>
 8011d06:	697b      	ldr	r3, [r7, #20]
 8011d08:	3304      	adds	r3, #4
 8011d0a:	e000      	b.n	8011d0e <tcp_output+0xb2>
 8011d0c:	2300      	movs	r3, #0
 8011d0e:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8011d10:	693b      	ldr	r3, [r7, #16]
 8011d12:	2b00      	cmp	r3, #0
 8011d14:	d102      	bne.n	8011d1c <tcp_output+0xc0>
      return ERR_RTE;
 8011d16:	f06f 0303 	mvn.w	r3, #3
 8011d1a:	e18e      	b.n	801203a <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8011d1c:	693b      	ldr	r3, [r7, #16]
 8011d1e:	681a      	ldr	r2, [r3, #0]
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d26:	68db      	ldr	r3, [r3, #12]
 8011d28:	685b      	ldr	r3, [r3, #4]
 8011d2a:	4618      	mov	r0, r3
 8011d2c:	f7f8 fba9 	bl	800a482 <lwip_htonl>
 8011d30:	4602      	mov	r2, r0
 8011d32:	687b      	ldr	r3, [r7, #4]
 8011d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011d36:	1ad3      	subs	r3, r2, r3
 8011d38:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011d3a:	8912      	ldrh	r2, [r2, #8]
 8011d3c:	4413      	add	r3, r2
 8011d3e:	69ba      	ldr	r2, [r7, #24]
 8011d40:	429a      	cmp	r2, r3
 8011d42:	d227      	bcs.n	8011d94 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8011d44:	687b      	ldr	r3, [r7, #4]
 8011d46:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8011d4a:	461a      	mov	r2, r3
 8011d4c:	69bb      	ldr	r3, [r7, #24]
 8011d4e:	4293      	cmp	r3, r2
 8011d50:	d114      	bne.n	8011d7c <tcp_output+0x120>
 8011d52:	687b      	ldr	r3, [r7, #4]
 8011d54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011d56:	2b00      	cmp	r3, #0
 8011d58:	d110      	bne.n	8011d7c <tcp_output+0x120>
 8011d5a:	687b      	ldr	r3, [r7, #4]
 8011d5c:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d10b      	bne.n	8011d7c <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	2200      	movs	r2, #0
 8011d68:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	2201      	movs	r2, #1
 8011d70:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8011d74:	687b      	ldr	r3, [r7, #4]
 8011d76:	2200      	movs	r2, #0
 8011d78:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8011d7c:	687b      	ldr	r3, [r7, #4]
 8011d7e:	8b5b      	ldrh	r3, [r3, #26]
 8011d80:	f003 0302 	and.w	r3, r3, #2
 8011d84:	2b00      	cmp	r3, #0
 8011d86:	f000 814d 	beq.w	8012024 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8011d8a:	6878      	ldr	r0, [r7, #4]
 8011d8c:	f000 fd6c 	bl	8012868 <tcp_send_empty_ack>
 8011d90:	4603      	mov	r3, r0
 8011d92:	e152      	b.n	801203a <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8011d94:	687b      	ldr	r3, [r7, #4]
 8011d96:	2200      	movs	r2, #0
 8011d98:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8011d9c:	687b      	ldr	r3, [r7, #4]
 8011d9e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011da0:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8011da2:	6a3b      	ldr	r3, [r7, #32]
 8011da4:	2b00      	cmp	r3, #0
 8011da6:	f000 811c 	beq.w	8011fe2 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8011daa:	e002      	b.n	8011db2 <tcp_output+0x156>
 8011dac:	6a3b      	ldr	r3, [r7, #32]
 8011dae:	681b      	ldr	r3, [r3, #0]
 8011db0:	623b      	str	r3, [r7, #32]
 8011db2:	6a3b      	ldr	r3, [r7, #32]
 8011db4:	681b      	ldr	r3, [r3, #0]
 8011db6:	2b00      	cmp	r3, #0
 8011db8:	d1f8      	bne.n	8011dac <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8011dba:	e112      	b.n	8011fe2 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8011dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011dbe:	68db      	ldr	r3, [r3, #12]
 8011dc0:	899b      	ldrh	r3, [r3, #12]
 8011dc2:	b29b      	uxth	r3, r3
 8011dc4:	4618      	mov	r0, r3
 8011dc6:	f7f8 fb47 	bl	800a458 <lwip_htons>
 8011dca:	4603      	mov	r3, r0
 8011dcc:	b2db      	uxtb	r3, r3
 8011dce:	f003 0304 	and.w	r3, r3, #4
 8011dd2:	2b00      	cmp	r3, #0
 8011dd4:	d006      	beq.n	8011de4 <tcp_output+0x188>
 8011dd6:	4b2f      	ldr	r3, [pc, #188]	; (8011e94 <tcp_output+0x238>)
 8011dd8:	f240 5236 	movw	r2, #1334	; 0x536
 8011ddc:	4932      	ldr	r1, [pc, #200]	; (8011ea8 <tcp_output+0x24c>)
 8011dde:	482f      	ldr	r0, [pc, #188]	; (8011e9c <tcp_output+0x240>)
 8011de0:	f004 fbb6 	bl	8016550 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	d01f      	beq.n	8011e2c <tcp_output+0x1d0>
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	8b5b      	ldrh	r3, [r3, #26]
 8011df0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d119      	bne.n	8011e2c <tcp_output+0x1d0>
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d00b      	beq.n	8011e18 <tcp_output+0x1bc>
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e04:	681b      	ldr	r3, [r3, #0]
 8011e06:	2b00      	cmp	r3, #0
 8011e08:	d110      	bne.n	8011e2c <tcp_output+0x1d0>
 8011e0a:	687b      	ldr	r3, [r7, #4]
 8011e0c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e0e:	891a      	ldrh	r2, [r3, #8]
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011e14:	429a      	cmp	r2, r3
 8011e16:	d209      	bcs.n	8011e2c <tcp_output+0x1d0>
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	d004      	beq.n	8011e2c <tcp_output+0x1d0>
 8011e22:	687b      	ldr	r3, [r7, #4]
 8011e24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e28:	2b08      	cmp	r3, #8
 8011e2a:	d901      	bls.n	8011e30 <tcp_output+0x1d4>
 8011e2c:	2301      	movs	r3, #1
 8011e2e:	e000      	b.n	8011e32 <tcp_output+0x1d6>
 8011e30:	2300      	movs	r3, #0
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	d106      	bne.n	8011e44 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	8b5b      	ldrh	r3, [r3, #26]
 8011e3a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8011e3e:	2b00      	cmp	r3, #0
 8011e40:	f000 80e4 	beq.w	801200c <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8011e44:	687b      	ldr	r3, [r7, #4]
 8011e46:	7d1b      	ldrb	r3, [r3, #20]
 8011e48:	2b02      	cmp	r3, #2
 8011e4a:	d00d      	beq.n	8011e68 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8011e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e4e:	68db      	ldr	r3, [r3, #12]
 8011e50:	899b      	ldrh	r3, [r3, #12]
 8011e52:	b29c      	uxth	r4, r3
 8011e54:	2010      	movs	r0, #16
 8011e56:	f7f8 faff 	bl	800a458 <lwip_htons>
 8011e5a:	4603      	mov	r3, r0
 8011e5c:	461a      	mov	r2, r3
 8011e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e60:	68db      	ldr	r3, [r3, #12]
 8011e62:	4322      	orrs	r2, r4
 8011e64:	b292      	uxth	r2, r2
 8011e66:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8011e68:	697a      	ldr	r2, [r7, #20]
 8011e6a:	6879      	ldr	r1, [r7, #4]
 8011e6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011e6e:	f000 f909 	bl	8012084 <tcp_output_segment>
 8011e72:	4603      	mov	r3, r0
 8011e74:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8011e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d016      	beq.n	8011eac <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e7e:	687b      	ldr	r3, [r7, #4]
 8011e80:	8b5b      	ldrh	r3, [r3, #26]
 8011e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e86:	b29a      	uxth	r2, r3
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	835a      	strh	r2, [r3, #26]
      return err;
 8011e8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8011e90:	e0d3      	b.n	801203a <tcp_output+0x3de>
 8011e92:	bf00      	nop
 8011e94:	08019720 	.word	0x08019720
 8011e98:	08019c64 	.word	0x08019c64
 8011e9c:	08019774 	.word	0x08019774
 8011ea0:	08019c7c 	.word	0x08019c7c
 8011ea4:	2000d184 	.word	0x2000d184
 8011ea8:	08019ca4 	.word	0x08019ca4
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8011eac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eae:	681a      	ldr	r2, [r3, #0]
 8011eb0:	687b      	ldr	r3, [r7, #4]
 8011eb2:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8011eb4:	687b      	ldr	r3, [r7, #4]
 8011eb6:	7d1b      	ldrb	r3, [r3, #20]
 8011eb8:	2b02      	cmp	r3, #2
 8011eba:	d006      	beq.n	8011eca <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8011ebc:	687b      	ldr	r3, [r7, #4]
 8011ebe:	8b5b      	ldrh	r3, [r3, #26]
 8011ec0:	f023 0303 	bic.w	r3, r3, #3
 8011ec4:	b29a      	uxth	r2, r3
 8011ec6:	687b      	ldr	r3, [r7, #4]
 8011ec8:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	68db      	ldr	r3, [r3, #12]
 8011ece:	685b      	ldr	r3, [r3, #4]
 8011ed0:	4618      	mov	r0, r3
 8011ed2:	f7f8 fad6 	bl	800a482 <lwip_htonl>
 8011ed6:	4604      	mov	r4, r0
 8011ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eda:	891b      	ldrh	r3, [r3, #8]
 8011edc:	461d      	mov	r5, r3
 8011ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee0:	68db      	ldr	r3, [r3, #12]
 8011ee2:	899b      	ldrh	r3, [r3, #12]
 8011ee4:	b29b      	uxth	r3, r3
 8011ee6:	4618      	mov	r0, r3
 8011ee8:	f7f8 fab6 	bl	800a458 <lwip_htons>
 8011eec:	4603      	mov	r3, r0
 8011eee:	b2db      	uxtb	r3, r3
 8011ef0:	f003 0303 	and.w	r3, r3, #3
 8011ef4:	2b00      	cmp	r3, #0
 8011ef6:	d001      	beq.n	8011efc <tcp_output+0x2a0>
 8011ef8:	2301      	movs	r3, #1
 8011efa:	e000      	b.n	8011efe <tcp_output+0x2a2>
 8011efc:	2300      	movs	r3, #0
 8011efe:	442b      	add	r3, r5
 8011f00:	4423      	add	r3, r4
 8011f02:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8011f04:	687b      	ldr	r3, [r7, #4]
 8011f06:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8011f08:	68bb      	ldr	r3, [r7, #8]
 8011f0a:	1ad3      	subs	r3, r2, r3
 8011f0c:	2b00      	cmp	r3, #0
 8011f0e:	da02      	bge.n	8011f16 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8011f10:	687b      	ldr	r3, [r7, #4]
 8011f12:	68ba      	ldr	r2, [r7, #8]
 8011f14:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8011f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f18:	891b      	ldrh	r3, [r3, #8]
 8011f1a:	461c      	mov	r4, r3
 8011f1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f1e:	68db      	ldr	r3, [r3, #12]
 8011f20:	899b      	ldrh	r3, [r3, #12]
 8011f22:	b29b      	uxth	r3, r3
 8011f24:	4618      	mov	r0, r3
 8011f26:	f7f8 fa97 	bl	800a458 <lwip_htons>
 8011f2a:	4603      	mov	r3, r0
 8011f2c:	b2db      	uxtb	r3, r3
 8011f2e:	f003 0303 	and.w	r3, r3, #3
 8011f32:	2b00      	cmp	r3, #0
 8011f34:	d001      	beq.n	8011f3a <tcp_output+0x2de>
 8011f36:	2301      	movs	r3, #1
 8011f38:	e000      	b.n	8011f3c <tcp_output+0x2e0>
 8011f3a:	2300      	movs	r3, #0
 8011f3c:	4423      	add	r3, r4
 8011f3e:	2b00      	cmp	r3, #0
 8011f40:	d049      	beq.n	8011fd6 <tcp_output+0x37a>
      seg->next = NULL;
 8011f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f44:	2200      	movs	r2, #0
 8011f46:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8011f48:	687b      	ldr	r3, [r7, #4]
 8011f4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d105      	bne.n	8011f5c <tcp_output+0x300>
        pcb->unacked = seg;
 8011f50:	687b      	ldr	r3, [r7, #4]
 8011f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011f54:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8011f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f58:	623b      	str	r3, [r7, #32]
 8011f5a:	e03f      	b.n	8011fdc <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8011f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f5e:	68db      	ldr	r3, [r3, #12]
 8011f60:	685b      	ldr	r3, [r3, #4]
 8011f62:	4618      	mov	r0, r3
 8011f64:	f7f8 fa8d 	bl	800a482 <lwip_htonl>
 8011f68:	4604      	mov	r4, r0
 8011f6a:	6a3b      	ldr	r3, [r7, #32]
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	685b      	ldr	r3, [r3, #4]
 8011f70:	4618      	mov	r0, r3
 8011f72:	f7f8 fa86 	bl	800a482 <lwip_htonl>
 8011f76:	4603      	mov	r3, r0
 8011f78:	1ae3      	subs	r3, r4, r3
 8011f7a:	2b00      	cmp	r3, #0
 8011f7c:	da24      	bge.n	8011fc8 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	3370      	adds	r3, #112	; 0x70
 8011f82:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011f84:	e002      	b.n	8011f8c <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8011f86:	69fb      	ldr	r3, [r7, #28]
 8011f88:	681b      	ldr	r3, [r3, #0]
 8011f8a:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8011f8c:	69fb      	ldr	r3, [r7, #28]
 8011f8e:	681b      	ldr	r3, [r3, #0]
 8011f90:	2b00      	cmp	r3, #0
 8011f92:	d011      	beq.n	8011fb8 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8011f94:	69fb      	ldr	r3, [r7, #28]
 8011f96:	681b      	ldr	r3, [r3, #0]
 8011f98:	68db      	ldr	r3, [r3, #12]
 8011f9a:	685b      	ldr	r3, [r3, #4]
 8011f9c:	4618      	mov	r0, r3
 8011f9e:	f7f8 fa70 	bl	800a482 <lwip_htonl>
 8011fa2:	4604      	mov	r4, r0
 8011fa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fa6:	68db      	ldr	r3, [r3, #12]
 8011fa8:	685b      	ldr	r3, [r3, #4]
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7f8 fa69 	bl	800a482 <lwip_htonl>
 8011fb0:	4603      	mov	r3, r0
 8011fb2:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8011fb4:	2b00      	cmp	r3, #0
 8011fb6:	dbe6      	blt.n	8011f86 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8011fb8:	69fb      	ldr	r3, [r7, #28]
 8011fba:	681a      	ldr	r2, [r3, #0]
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fbe:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8011fc0:	69fb      	ldr	r3, [r7, #28]
 8011fc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fc4:	601a      	str	r2, [r3, #0]
 8011fc6:	e009      	b.n	8011fdc <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8011fc8:	6a3b      	ldr	r3, [r7, #32]
 8011fca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011fcc:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8011fce:	6a3b      	ldr	r3, [r7, #32]
 8011fd0:	681b      	ldr	r3, [r3, #0]
 8011fd2:	623b      	str	r3, [r7, #32]
 8011fd4:	e002      	b.n	8011fdc <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8011fd6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fd8:	f7fb ff31 	bl	800de3e <tcp_seg_free>
    }
    seg = pcb->unsent;
 8011fdc:	687b      	ldr	r3, [r7, #4]
 8011fde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011fe0:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8011fe2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d012      	beq.n	801200e <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8011fe8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011fea:	68db      	ldr	r3, [r3, #12]
 8011fec:	685b      	ldr	r3, [r3, #4]
 8011fee:	4618      	mov	r0, r3
 8011ff0:	f7f8 fa47 	bl	800a482 <lwip_htonl>
 8011ff4:	4602      	mov	r2, r0
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011ffa:	1ad3      	subs	r3, r2, r3
 8011ffc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011ffe:	8912      	ldrh	r2, [r2, #8]
 8012000:	4413      	add	r3, r2
  while (seg != NULL &&
 8012002:	69ba      	ldr	r2, [r7, #24]
 8012004:	429a      	cmp	r2, r3
 8012006:	f4bf aed9 	bcs.w	8011dbc <tcp_output+0x160>
 801200a:	e000      	b.n	801200e <tcp_output+0x3b2>
      break;
 801200c:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012012:	2b00      	cmp	r3, #0
 8012014:	d108      	bne.n	8012028 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	2200      	movs	r2, #0
 801201a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 801201e:	e004      	b.n	801202a <tcp_output+0x3ce>
    goto output_done;
 8012020:	bf00      	nop
 8012022:	e002      	b.n	801202a <tcp_output+0x3ce>
    goto output_done;
 8012024:	bf00      	nop
 8012026:	e000      	b.n	801202a <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012028:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 801202a:	687b      	ldr	r3, [r7, #4]
 801202c:	8b5b      	ldrh	r3, [r3, #26]
 801202e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012032:	b29a      	uxth	r2, r3
 8012034:	687b      	ldr	r3, [r7, #4]
 8012036:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3728      	adds	r7, #40	; 0x28
 801203e:	46bd      	mov	sp, r7
 8012040:	bdb0      	pop	{r4, r5, r7, pc}
 8012042:	bf00      	nop

08012044 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b082      	sub	sp, #8
 8012048:	af00      	add	r7, sp, #0
 801204a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <tcp_output_segment_busy+0x1c>
 8012052:	4b09      	ldr	r3, [pc, #36]	; (8012078 <tcp_output_segment_busy+0x34>)
 8012054:	f240 529a 	movw	r2, #1434	; 0x59a
 8012058:	4908      	ldr	r1, [pc, #32]	; (801207c <tcp_output_segment_busy+0x38>)
 801205a:	4809      	ldr	r0, [pc, #36]	; (8012080 <tcp_output_segment_busy+0x3c>)
 801205c:	f004 fa78 	bl	8016550 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	685b      	ldr	r3, [r3, #4]
 8012064:	7b9b      	ldrb	r3, [r3, #14]
 8012066:	2b01      	cmp	r3, #1
 8012068:	d001      	beq.n	801206e <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 801206a:	2301      	movs	r3, #1
 801206c:	e000      	b.n	8012070 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 801206e:	2300      	movs	r3, #0
}
 8012070:	4618      	mov	r0, r3
 8012072:	3708      	adds	r7, #8
 8012074:	46bd      	mov	sp, r7
 8012076:	bd80      	pop	{r7, pc}
 8012078:	08019720 	.word	0x08019720
 801207c:	08019cbc 	.word	0x08019cbc
 8012080:	08019774 	.word	0x08019774

08012084 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012084:	b5b0      	push	{r4, r5, r7, lr}
 8012086:	b08c      	sub	sp, #48	; 0x30
 8012088:	af04      	add	r7, sp, #16
 801208a:	60f8      	str	r0, [r7, #12]
 801208c:	60b9      	str	r1, [r7, #8]
 801208e:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012090:	68fb      	ldr	r3, [r7, #12]
 8012092:	2b00      	cmp	r3, #0
 8012094:	d106      	bne.n	80120a4 <tcp_output_segment+0x20>
 8012096:	4b63      	ldr	r3, [pc, #396]	; (8012224 <tcp_output_segment+0x1a0>)
 8012098:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 801209c:	4962      	ldr	r1, [pc, #392]	; (8012228 <tcp_output_segment+0x1a4>)
 801209e:	4863      	ldr	r0, [pc, #396]	; (801222c <tcp_output_segment+0x1a8>)
 80120a0:	f004 fa56 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 80120a4:	68bb      	ldr	r3, [r7, #8]
 80120a6:	2b00      	cmp	r3, #0
 80120a8:	d106      	bne.n	80120b8 <tcp_output_segment+0x34>
 80120aa:	4b5e      	ldr	r3, [pc, #376]	; (8012224 <tcp_output_segment+0x1a0>)
 80120ac:	f240 52b9 	movw	r2, #1465	; 0x5b9
 80120b0:	495f      	ldr	r1, [pc, #380]	; (8012230 <tcp_output_segment+0x1ac>)
 80120b2:	485e      	ldr	r0, [pc, #376]	; (801222c <tcp_output_segment+0x1a8>)
 80120b4:	f004 fa4c 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 80120b8:	687b      	ldr	r3, [r7, #4]
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	d106      	bne.n	80120cc <tcp_output_segment+0x48>
 80120be:	4b59      	ldr	r3, [pc, #356]	; (8012224 <tcp_output_segment+0x1a0>)
 80120c0:	f240 52ba 	movw	r2, #1466	; 0x5ba
 80120c4:	495b      	ldr	r1, [pc, #364]	; (8012234 <tcp_output_segment+0x1b0>)
 80120c6:	4859      	ldr	r0, [pc, #356]	; (801222c <tcp_output_segment+0x1a8>)
 80120c8:	f004 fa42 	bl	8016550 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 80120cc:	68f8      	ldr	r0, [r7, #12]
 80120ce:	f7ff ffb9 	bl	8012044 <tcp_output_segment_busy>
 80120d2:	4603      	mov	r3, r0
 80120d4:	2b00      	cmp	r3, #0
 80120d6:	d001      	beq.n	80120dc <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 80120d8:	2300      	movs	r3, #0
 80120da:	e09f      	b.n	801221c <tcp_output_segment+0x198>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 80120dc:	68bb      	ldr	r3, [r7, #8]
 80120de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80120e0:	68fb      	ldr	r3, [r7, #12]
 80120e2:	68dc      	ldr	r4, [r3, #12]
 80120e4:	4610      	mov	r0, r2
 80120e6:	f7f8 f9cc 	bl	800a482 <lwip_htonl>
 80120ea:	4603      	mov	r3, r0
 80120ec:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 80120ee:	68bb      	ldr	r3, [r7, #8]
 80120f0:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 80120f2:	68fb      	ldr	r3, [r7, #12]
 80120f4:	68dc      	ldr	r4, [r3, #12]
 80120f6:	4610      	mov	r0, r2
 80120f8:	f7f8 f9ae 	bl	800a458 <lwip_htons>
 80120fc:	4603      	mov	r3, r0
 80120fe:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012100:	68bb      	ldr	r3, [r7, #8]
 8012102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012104:	68ba      	ldr	r2, [r7, #8]
 8012106:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012108:	441a      	add	r2, r3
 801210a:	68bb      	ldr	r3, [r7, #8]
 801210c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801210e:	68fb      	ldr	r3, [r7, #12]
 8012110:	68db      	ldr	r3, [r3, #12]
 8012112:	3314      	adds	r3, #20
 8012114:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	7a9b      	ldrb	r3, [r3, #10]
 801211a:	f003 0301 	and.w	r3, r3, #1
 801211e:	2b00      	cmp	r3, #0
 8012120:	d015      	beq.n	801214e <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012122:	68bb      	ldr	r3, [r7, #8]
 8012124:	3304      	adds	r3, #4
 8012126:	461a      	mov	r2, r3
 8012128:	6879      	ldr	r1, [r7, #4]
 801212a:	f44f 7006 	mov.w	r0, #536	; 0x218
 801212e:	f7fc fa33 	bl	800e598 <tcp_eff_send_mss_netif>
 8012132:	4603      	mov	r3, r0
 8012134:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012136:	8b7b      	ldrh	r3, [r7, #26]
 8012138:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 801213c:	4618      	mov	r0, r3
 801213e:	f7f8 f9a0 	bl	800a482 <lwip_htonl>
 8012142:	4602      	mov	r2, r0
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012148:	69fb      	ldr	r3, [r7, #28]
 801214a:	3304      	adds	r3, #4
 801214c:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 801214e:	68bb      	ldr	r3, [r7, #8]
 8012150:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012154:	2b00      	cmp	r3, #0
 8012156:	da02      	bge.n	801215e <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	2200      	movs	r2, #0
 801215c:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 801215e:	68bb      	ldr	r3, [r7, #8]
 8012160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012162:	2b00      	cmp	r3, #0
 8012164:	d10c      	bne.n	8012180 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012166:	4b34      	ldr	r3, [pc, #208]	; (8012238 <tcp_output_segment+0x1b4>)
 8012168:	681a      	ldr	r2, [r3, #0]
 801216a:	68bb      	ldr	r3, [r7, #8]
 801216c:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 801216e:	68fb      	ldr	r3, [r7, #12]
 8012170:	68db      	ldr	r3, [r3, #12]
 8012172:	685b      	ldr	r3, [r3, #4]
 8012174:	4618      	mov	r0, r3
 8012176:	f7f8 f984 	bl	800a482 <lwip_htonl>
 801217a:	4602      	mov	r2, r0
 801217c:	68bb      	ldr	r3, [r7, #8]
 801217e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012180:	68fb      	ldr	r3, [r7, #12]
 8012182:	68da      	ldr	r2, [r3, #12]
 8012184:	68fb      	ldr	r3, [r7, #12]
 8012186:	685b      	ldr	r3, [r3, #4]
 8012188:	685b      	ldr	r3, [r3, #4]
 801218a:	1ad3      	subs	r3, r2, r3
 801218c:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801218e:	68fb      	ldr	r3, [r7, #12]
 8012190:	685b      	ldr	r3, [r3, #4]
 8012192:	8959      	ldrh	r1, [r3, #10]
 8012194:	68fb      	ldr	r3, [r7, #12]
 8012196:	685b      	ldr	r3, [r3, #4]
 8012198:	8b3a      	ldrh	r2, [r7, #24]
 801219a:	1a8a      	subs	r2, r1, r2
 801219c:	b292      	uxth	r2, r2
 801219e:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	685b      	ldr	r3, [r3, #4]
 80121a4:	8919      	ldrh	r1, [r3, #8]
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	685b      	ldr	r3, [r3, #4]
 80121aa:	8b3a      	ldrh	r2, [r7, #24]
 80121ac:	1a8a      	subs	r2, r1, r2
 80121ae:	b292      	uxth	r2, r2
 80121b0:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 80121b2:	68fb      	ldr	r3, [r7, #12]
 80121b4:	685b      	ldr	r3, [r3, #4]
 80121b6:	68fa      	ldr	r2, [r7, #12]
 80121b8:	68d2      	ldr	r2, [r2, #12]
 80121ba:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 80121bc:	68fb      	ldr	r3, [r7, #12]
 80121be:	68db      	ldr	r3, [r3, #12]
 80121c0:	2200      	movs	r2, #0
 80121c2:	741a      	strb	r2, [r3, #16]
 80121c4:	2200      	movs	r2, #0
 80121c6:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 80121c8:	68fb      	ldr	r3, [r7, #12]
 80121ca:	68db      	ldr	r3, [r3, #12]
 80121cc:	f103 0214 	add.w	r2, r3, #20
 80121d0:	68fb      	ldr	r3, [r7, #12]
 80121d2:	7a9b      	ldrb	r3, [r3, #10]
 80121d4:	009b      	lsls	r3, r3, #2
 80121d6:	f003 0304 	and.w	r3, r3, #4
 80121da:	4413      	add	r3, r2
 80121dc:	69fa      	ldr	r2, [r7, #28]
 80121de:	429a      	cmp	r2, r3
 80121e0:	d006      	beq.n	80121f0 <tcp_output_segment+0x16c>
 80121e2:	4b10      	ldr	r3, [pc, #64]	; (8012224 <tcp_output_segment+0x1a0>)
 80121e4:	f240 621c 	movw	r2, #1564	; 0x61c
 80121e8:	4914      	ldr	r1, [pc, #80]	; (801223c <tcp_output_segment+0x1b8>)
 80121ea:	4810      	ldr	r0, [pc, #64]	; (801222c <tcp_output_segment+0x1a8>)
 80121ec:	f004 f9b0 	bl	8016550 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 80121f0:	68fb      	ldr	r3, [r7, #12]
 80121f2:	6858      	ldr	r0, [r3, #4]
 80121f4:	68b9      	ldr	r1, [r7, #8]
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	1d1c      	adds	r4, r3, #4
 80121fa:	68bb      	ldr	r3, [r7, #8]
 80121fc:	7add      	ldrb	r5, [r3, #11]
 80121fe:	68bb      	ldr	r3, [r7, #8]
 8012200:	7a9b      	ldrb	r3, [r3, #10]
 8012202:	687a      	ldr	r2, [r7, #4]
 8012204:	9202      	str	r2, [sp, #8]
 8012206:	2206      	movs	r2, #6
 8012208:	9201      	str	r2, [sp, #4]
 801220a:	9300      	str	r3, [sp, #0]
 801220c:	462b      	mov	r3, r5
 801220e:	4622      	mov	r2, r4
 8012210:	f002 fd58 	bl	8014cc4 <ip4_output_if>
 8012214:	4603      	mov	r3, r0
 8012216:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8012218:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801221c:	4618      	mov	r0, r3
 801221e:	3720      	adds	r7, #32
 8012220:	46bd      	mov	sp, r7
 8012222:	bdb0      	pop	{r4, r5, r7, pc}
 8012224:	08019720 	.word	0x08019720
 8012228:	08019ce4 	.word	0x08019ce4
 801222c:	08019774 	.word	0x08019774
 8012230:	08019d04 	.word	0x08019d04
 8012234:	08019d24 	.word	0x08019d24
 8012238:	2000d138 	.word	0x2000d138
 801223c:	08019d48 	.word	0x08019d48

08012240 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8012240:	b5b0      	push	{r4, r5, r7, lr}
 8012242:	b084      	sub	sp, #16
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	2b00      	cmp	r3, #0
 801224c:	d106      	bne.n	801225c <tcp_rexmit_rto_prepare+0x1c>
 801224e:	4b31      	ldr	r3, [pc, #196]	; (8012314 <tcp_rexmit_rto_prepare+0xd4>)
 8012250:	f240 6263 	movw	r2, #1635	; 0x663
 8012254:	4930      	ldr	r1, [pc, #192]	; (8012318 <tcp_rexmit_rto_prepare+0xd8>)
 8012256:	4831      	ldr	r0, [pc, #196]	; (801231c <tcp_rexmit_rto_prepare+0xdc>)
 8012258:	f004 f97a 	bl	8016550 <iprintf>

  if (pcb->unacked == NULL) {
 801225c:	687b      	ldr	r3, [r7, #4]
 801225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012260:	2b00      	cmp	r3, #0
 8012262:	d102      	bne.n	801226a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8012264:	f06f 0305 	mvn.w	r3, #5
 8012268:	e050      	b.n	801230c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801226a:	687b      	ldr	r3, [r7, #4]
 801226c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801226e:	60fb      	str	r3, [r7, #12]
 8012270:	e00b      	b.n	801228a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8012272:	68f8      	ldr	r0, [r7, #12]
 8012274:	f7ff fee6 	bl	8012044 <tcp_output_segment_busy>
 8012278:	4603      	mov	r3, r0
 801227a:	2b00      	cmp	r3, #0
 801227c:	d002      	beq.n	8012284 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801227e:	f06f 0305 	mvn.w	r3, #5
 8012282:	e043      	b.n	801230c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8012284:	68fb      	ldr	r3, [r7, #12]
 8012286:	681b      	ldr	r3, [r3, #0]
 8012288:	60fb      	str	r3, [r7, #12]
 801228a:	68fb      	ldr	r3, [r7, #12]
 801228c:	681b      	ldr	r3, [r3, #0]
 801228e:	2b00      	cmp	r3, #0
 8012290:	d1ef      	bne.n	8012272 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8012292:	68f8      	ldr	r0, [r7, #12]
 8012294:	f7ff fed6 	bl	8012044 <tcp_output_segment_busy>
 8012298:	4603      	mov	r3, r0
 801229a:	2b00      	cmp	r3, #0
 801229c:	d002      	beq.n	80122a4 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801229e:	f06f 0305 	mvn.w	r3, #5
 80122a2:	e033      	b.n	801230c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80122a4:	687b      	ldr	r3, [r7, #4]
 80122a6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80122a8:	68fb      	ldr	r3, [r7, #12]
 80122aa:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80122b0:	687b      	ldr	r3, [r7, #4]
 80122b2:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80122b4:	687b      	ldr	r3, [r7, #4]
 80122b6:	2200      	movs	r2, #0
 80122b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80122ba:	687b      	ldr	r3, [r7, #4]
 80122bc:	8b5b      	ldrh	r3, [r3, #26]
 80122be:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80122c2:	b29a      	uxth	r2, r3
 80122c4:	687b      	ldr	r3, [r7, #4]
 80122c6:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	68db      	ldr	r3, [r3, #12]
 80122cc:	685b      	ldr	r3, [r3, #4]
 80122ce:	4618      	mov	r0, r3
 80122d0:	f7f8 f8d7 	bl	800a482 <lwip_htonl>
 80122d4:	4604      	mov	r4, r0
 80122d6:	68fb      	ldr	r3, [r7, #12]
 80122d8:	891b      	ldrh	r3, [r3, #8]
 80122da:	461d      	mov	r5, r3
 80122dc:	68fb      	ldr	r3, [r7, #12]
 80122de:	68db      	ldr	r3, [r3, #12]
 80122e0:	899b      	ldrh	r3, [r3, #12]
 80122e2:	b29b      	uxth	r3, r3
 80122e4:	4618      	mov	r0, r3
 80122e6:	f7f8 f8b7 	bl	800a458 <lwip_htons>
 80122ea:	4603      	mov	r3, r0
 80122ec:	b2db      	uxtb	r3, r3
 80122ee:	f003 0303 	and.w	r3, r3, #3
 80122f2:	2b00      	cmp	r3, #0
 80122f4:	d001      	beq.n	80122fa <tcp_rexmit_rto_prepare+0xba>
 80122f6:	2301      	movs	r3, #1
 80122f8:	e000      	b.n	80122fc <tcp_rexmit_rto_prepare+0xbc>
 80122fa:	2300      	movs	r3, #0
 80122fc:	442b      	add	r3, r5
 80122fe:	18e2      	adds	r2, r4, r3
 8012300:	687b      	ldr	r3, [r7, #4]
 8012302:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8012304:	687b      	ldr	r3, [r7, #4]
 8012306:	2200      	movs	r2, #0
 8012308:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801230a:	2300      	movs	r3, #0
}
 801230c:	4618      	mov	r0, r3
 801230e:	3710      	adds	r7, #16
 8012310:	46bd      	mov	sp, r7
 8012312:	bdb0      	pop	{r4, r5, r7, pc}
 8012314:	08019720 	.word	0x08019720
 8012318:	08019d5c 	.word	0x08019d5c
 801231c:	08019774 	.word	0x08019774

08012320 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8012320:	b580      	push	{r7, lr}
 8012322:	b082      	sub	sp, #8
 8012324:	af00      	add	r7, sp, #0
 8012326:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2b00      	cmp	r3, #0
 801232c:	d106      	bne.n	801233c <tcp_rexmit_rto_commit+0x1c>
 801232e:	4b0d      	ldr	r3, [pc, #52]	; (8012364 <tcp_rexmit_rto_commit+0x44>)
 8012330:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8012334:	490c      	ldr	r1, [pc, #48]	; (8012368 <tcp_rexmit_rto_commit+0x48>)
 8012336:	480d      	ldr	r0, [pc, #52]	; (801236c <tcp_rexmit_rto_commit+0x4c>)
 8012338:	f004 f90a 	bl	8016550 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 801233c:	687b      	ldr	r3, [r7, #4]
 801233e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012342:	2bff      	cmp	r3, #255	; 0xff
 8012344:	d007      	beq.n	8012356 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8012346:	687b      	ldr	r3, [r7, #4]
 8012348:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801234c:	3301      	adds	r3, #1
 801234e:	b2da      	uxtb	r2, r3
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8012356:	6878      	ldr	r0, [r7, #4]
 8012358:	f7ff fc80 	bl	8011c5c <tcp_output>
}
 801235c:	bf00      	nop
 801235e:	3708      	adds	r7, #8
 8012360:	46bd      	mov	sp, r7
 8012362:	bd80      	pop	{r7, pc}
 8012364:	08019720 	.word	0x08019720
 8012368:	08019d80 	.word	0x08019d80
 801236c:	08019774 	.word	0x08019774

08012370 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8012370:	b580      	push	{r7, lr}
 8012372:	b082      	sub	sp, #8
 8012374:	af00      	add	r7, sp, #0
 8012376:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8012378:	687b      	ldr	r3, [r7, #4]
 801237a:	2b00      	cmp	r3, #0
 801237c:	d106      	bne.n	801238c <tcp_rexmit_rto+0x1c>
 801237e:	4b0a      	ldr	r3, [pc, #40]	; (80123a8 <tcp_rexmit_rto+0x38>)
 8012380:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8012384:	4909      	ldr	r1, [pc, #36]	; (80123ac <tcp_rexmit_rto+0x3c>)
 8012386:	480a      	ldr	r0, [pc, #40]	; (80123b0 <tcp_rexmit_rto+0x40>)
 8012388:	f004 f8e2 	bl	8016550 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801238c:	6878      	ldr	r0, [r7, #4]
 801238e:	f7ff ff57 	bl	8012240 <tcp_rexmit_rto_prepare>
 8012392:	4603      	mov	r3, r0
 8012394:	2b00      	cmp	r3, #0
 8012396:	d102      	bne.n	801239e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff ffc1 	bl	8012320 <tcp_rexmit_rto_commit>
  }
}
 801239e:	bf00      	nop
 80123a0:	3708      	adds	r7, #8
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	08019720 	.word	0x08019720
 80123ac:	08019da4 	.word	0x08019da4
 80123b0:	08019774 	.word	0x08019774

080123b4 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80123b4:	b590      	push	{r4, r7, lr}
 80123b6:	b085      	sub	sp, #20
 80123b8:	af00      	add	r7, sp, #0
 80123ba:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80123bc:	687b      	ldr	r3, [r7, #4]
 80123be:	2b00      	cmp	r3, #0
 80123c0:	d106      	bne.n	80123d0 <tcp_rexmit+0x1c>
 80123c2:	4b2f      	ldr	r3, [pc, #188]	; (8012480 <tcp_rexmit+0xcc>)
 80123c4:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80123c8:	492e      	ldr	r1, [pc, #184]	; (8012484 <tcp_rexmit+0xd0>)
 80123ca:	482f      	ldr	r0, [pc, #188]	; (8012488 <tcp_rexmit+0xd4>)
 80123cc:	f004 f8c0 	bl	8016550 <iprintf>

  if (pcb->unacked == NULL) {
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123d4:	2b00      	cmp	r3, #0
 80123d6:	d102      	bne.n	80123de <tcp_rexmit+0x2a>
    return ERR_VAL;
 80123d8:	f06f 0305 	mvn.w	r3, #5
 80123dc:	e04c      	b.n	8012478 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80123de:	687b      	ldr	r3, [r7, #4]
 80123e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80123e2:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80123e4:	68b8      	ldr	r0, [r7, #8]
 80123e6:	f7ff fe2d 	bl	8012044 <tcp_output_segment_busy>
 80123ea:	4603      	mov	r3, r0
 80123ec:	2b00      	cmp	r3, #0
 80123ee:	d002      	beq.n	80123f6 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80123f0:	f06f 0305 	mvn.w	r3, #5
 80123f4:	e040      	b.n	8012478 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80123f6:	68bb      	ldr	r3, [r7, #8]
 80123f8:	681a      	ldr	r2, [r3, #0]
 80123fa:	687b      	ldr	r3, [r7, #4]
 80123fc:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	336c      	adds	r3, #108	; 0x6c
 8012402:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8012404:	e002      	b.n	801240c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8012406:	68fb      	ldr	r3, [r7, #12]
 8012408:	681b      	ldr	r3, [r3, #0]
 801240a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	2b00      	cmp	r3, #0
 8012412:	d011      	beq.n	8012438 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	681b      	ldr	r3, [r3, #0]
 8012418:	68db      	ldr	r3, [r3, #12]
 801241a:	685b      	ldr	r3, [r3, #4]
 801241c:	4618      	mov	r0, r3
 801241e:	f7f8 f830 	bl	800a482 <lwip_htonl>
 8012422:	4604      	mov	r4, r0
 8012424:	68bb      	ldr	r3, [r7, #8]
 8012426:	68db      	ldr	r3, [r3, #12]
 8012428:	685b      	ldr	r3, [r3, #4]
 801242a:	4618      	mov	r0, r3
 801242c:	f7f8 f829 	bl	800a482 <lwip_htonl>
 8012430:	4603      	mov	r3, r0
 8012432:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8012434:	2b00      	cmp	r3, #0
 8012436:	dbe6      	blt.n	8012406 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8012438:	68fb      	ldr	r3, [r7, #12]
 801243a:	681a      	ldr	r2, [r3, #0]
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	68ba      	ldr	r2, [r7, #8]
 8012444:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8012446:	68bb      	ldr	r3, [r7, #8]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2b00      	cmp	r3, #0
 801244c:	d103      	bne.n	8012456 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 801244e:	687b      	ldr	r3, [r7, #4]
 8012450:	2200      	movs	r2, #0
 8012452:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801245c:	2bff      	cmp	r3, #255	; 0xff
 801245e:	d007      	beq.n	8012470 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8012466:	3301      	adds	r3, #1
 8012468:	b2da      	uxtb	r2, r3
 801246a:	687b      	ldr	r3, [r7, #4]
 801246c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8012470:	687b      	ldr	r3, [r7, #4]
 8012472:	2200      	movs	r2, #0
 8012474:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8012476:	2300      	movs	r3, #0
}
 8012478:	4618      	mov	r0, r3
 801247a:	3714      	adds	r7, #20
 801247c:	46bd      	mov	sp, r7
 801247e:	bd90      	pop	{r4, r7, pc}
 8012480:	08019720 	.word	0x08019720
 8012484:	08019dc0 	.word	0x08019dc0
 8012488:	08019774 	.word	0x08019774

0801248c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801248c:	b580      	push	{r7, lr}
 801248e:	b082      	sub	sp, #8
 8012490:	af00      	add	r7, sp, #0
 8012492:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8012494:	687b      	ldr	r3, [r7, #4]
 8012496:	2b00      	cmp	r3, #0
 8012498:	d106      	bne.n	80124a8 <tcp_rexmit_fast+0x1c>
 801249a:	4b2a      	ldr	r3, [pc, #168]	; (8012544 <tcp_rexmit_fast+0xb8>)
 801249c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80124a0:	4929      	ldr	r1, [pc, #164]	; (8012548 <tcp_rexmit_fast+0xbc>)
 80124a2:	482a      	ldr	r0, [pc, #168]	; (801254c <tcp_rexmit_fast+0xc0>)
 80124a4:	f004 f854 	bl	8016550 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80124a8:	687b      	ldr	r3, [r7, #4]
 80124aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d045      	beq.n	801253c <tcp_rexmit_fast+0xb0>
 80124b0:	687b      	ldr	r3, [r7, #4]
 80124b2:	8b5b      	ldrh	r3, [r3, #26]
 80124b4:	f003 0304 	and.w	r3, r3, #4
 80124b8:	2b00      	cmp	r3, #0
 80124ba:	d13f      	bne.n	801253c <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80124bc:	6878      	ldr	r0, [r7, #4]
 80124be:	f7ff ff79 	bl	80123b4 <tcp_rexmit>
 80124c2:	4603      	mov	r3, r0
 80124c4:	2b00      	cmp	r3, #0
 80124c6:	d139      	bne.n	801253c <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80124c8:	687b      	ldr	r3, [r7, #4]
 80124ca:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80124ce:	687b      	ldr	r3, [r7, #4]
 80124d0:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80124d4:	4293      	cmp	r3, r2
 80124d6:	bf28      	it	cs
 80124d8:	4613      	movcs	r3, r2
 80124da:	b29b      	uxth	r3, r3
 80124dc:	2b00      	cmp	r3, #0
 80124de:	da00      	bge.n	80124e2 <tcp_rexmit_fast+0x56>
 80124e0:	3301      	adds	r3, #1
 80124e2:	105b      	asrs	r3, r3, #1
 80124e4:	b29a      	uxth	r2, r3
 80124e6:	687b      	ldr	r3, [r7, #4]
 80124e8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80124ec:	687b      	ldr	r3, [r7, #4]
 80124ee:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80124f2:	461a      	mov	r2, r3
 80124f4:	687b      	ldr	r3, [r7, #4]
 80124f6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80124f8:	005b      	lsls	r3, r3, #1
 80124fa:	429a      	cmp	r2, r3
 80124fc:	d206      	bcs.n	801250c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012502:	005b      	lsls	r3, r3, #1
 8012504:	b29a      	uxth	r2, r3
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801250c:	687b      	ldr	r3, [r7, #4]
 801250e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012516:	4619      	mov	r1, r3
 8012518:	0049      	lsls	r1, r1, #1
 801251a:	440b      	add	r3, r1
 801251c:	b29b      	uxth	r3, r3
 801251e:	4413      	add	r3, r2
 8012520:	b29a      	uxth	r2, r3
 8012522:	687b      	ldr	r3, [r7, #4]
 8012524:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8012528:	687b      	ldr	r3, [r7, #4]
 801252a:	8b5b      	ldrh	r3, [r3, #26]
 801252c:	f043 0304 	orr.w	r3, r3, #4
 8012530:	b29a      	uxth	r2, r3
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	2200      	movs	r2, #0
 801253a:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 801253c:	bf00      	nop
 801253e:	3708      	adds	r7, #8
 8012540:	46bd      	mov	sp, r7
 8012542:	bd80      	pop	{r7, pc}
 8012544:	08019720 	.word	0x08019720
 8012548:	08019dd8 	.word	0x08019dd8
 801254c:	08019774 	.word	0x08019774

08012550 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8012550:	b580      	push	{r7, lr}
 8012552:	b086      	sub	sp, #24
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	607b      	str	r3, [r7, #4]
 801255a:	460b      	mov	r3, r1
 801255c:	817b      	strh	r3, [r7, #10]
 801255e:	4613      	mov	r3, r2
 8012560:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8012562:	897a      	ldrh	r2, [r7, #10]
 8012564:	893b      	ldrh	r3, [r7, #8]
 8012566:	4413      	add	r3, r2
 8012568:	b29b      	uxth	r3, r3
 801256a:	3314      	adds	r3, #20
 801256c:	b29b      	uxth	r3, r3
 801256e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012572:	4619      	mov	r1, r3
 8012574:	2022      	movs	r0, #34	; 0x22
 8012576:	f7f9 fb65 	bl	800bc44 <pbuf_alloc>
 801257a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801257c:	697b      	ldr	r3, [r7, #20]
 801257e:	2b00      	cmp	r3, #0
 8012580:	d04d      	beq.n	801261e <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8012582:	897b      	ldrh	r3, [r7, #10]
 8012584:	3313      	adds	r3, #19
 8012586:	697a      	ldr	r2, [r7, #20]
 8012588:	8952      	ldrh	r2, [r2, #10]
 801258a:	4293      	cmp	r3, r2
 801258c:	db06      	blt.n	801259c <tcp_output_alloc_header_common+0x4c>
 801258e:	4b26      	ldr	r3, [pc, #152]	; (8012628 <tcp_output_alloc_header_common+0xd8>)
 8012590:	f240 7223 	movw	r2, #1827	; 0x723
 8012594:	4925      	ldr	r1, [pc, #148]	; (801262c <tcp_output_alloc_header_common+0xdc>)
 8012596:	4826      	ldr	r0, [pc, #152]	; (8012630 <tcp_output_alloc_header_common+0xe0>)
 8012598:	f003 ffda 	bl	8016550 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801259c:	697b      	ldr	r3, [r7, #20]
 801259e:	685b      	ldr	r3, [r3, #4]
 80125a0:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80125a2:	8c3b      	ldrh	r3, [r7, #32]
 80125a4:	4618      	mov	r0, r3
 80125a6:	f7f7 ff57 	bl	800a458 <lwip_htons>
 80125aa:	4603      	mov	r3, r0
 80125ac:	461a      	mov	r2, r3
 80125ae:	693b      	ldr	r3, [r7, #16]
 80125b0:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80125b2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80125b4:	4618      	mov	r0, r3
 80125b6:	f7f7 ff4f 	bl	800a458 <lwip_htons>
 80125ba:	4603      	mov	r3, r0
 80125bc:	461a      	mov	r2, r3
 80125be:	693b      	ldr	r3, [r7, #16]
 80125c0:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80125c2:	693b      	ldr	r3, [r7, #16]
 80125c4:	687a      	ldr	r2, [r7, #4]
 80125c6:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80125c8:	68f8      	ldr	r0, [r7, #12]
 80125ca:	f7f7 ff5a 	bl	800a482 <lwip_htonl>
 80125ce:	4602      	mov	r2, r0
 80125d0:	693b      	ldr	r3, [r7, #16]
 80125d2:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80125d4:	897b      	ldrh	r3, [r7, #10]
 80125d6:	089b      	lsrs	r3, r3, #2
 80125d8:	b29b      	uxth	r3, r3
 80125da:	3305      	adds	r3, #5
 80125dc:	b29b      	uxth	r3, r3
 80125de:	031b      	lsls	r3, r3, #12
 80125e0:	b29a      	uxth	r2, r3
 80125e2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80125e6:	b29b      	uxth	r3, r3
 80125e8:	4313      	orrs	r3, r2
 80125ea:	b29b      	uxth	r3, r3
 80125ec:	4618      	mov	r0, r3
 80125ee:	f7f7 ff33 	bl	800a458 <lwip_htons>
 80125f2:	4603      	mov	r3, r0
 80125f4:	461a      	mov	r2, r3
 80125f6:	693b      	ldr	r3, [r7, #16]
 80125f8:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 80125fa:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80125fc:	4618      	mov	r0, r3
 80125fe:	f7f7 ff2b 	bl	800a458 <lwip_htons>
 8012602:	4603      	mov	r3, r0
 8012604:	461a      	mov	r2, r3
 8012606:	693b      	ldr	r3, [r7, #16]
 8012608:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801260a:	693b      	ldr	r3, [r7, #16]
 801260c:	2200      	movs	r2, #0
 801260e:	741a      	strb	r2, [r3, #16]
 8012610:	2200      	movs	r2, #0
 8012612:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8012614:	693b      	ldr	r3, [r7, #16]
 8012616:	2200      	movs	r2, #0
 8012618:	749a      	strb	r2, [r3, #18]
 801261a:	2200      	movs	r2, #0
 801261c:	74da      	strb	r2, [r3, #19]
  }
  return p;
 801261e:	697b      	ldr	r3, [r7, #20]
}
 8012620:	4618      	mov	r0, r3
 8012622:	3718      	adds	r7, #24
 8012624:	46bd      	mov	sp, r7
 8012626:	bd80      	pop	{r7, pc}
 8012628:	08019720 	.word	0x08019720
 801262c:	08019df8 	.word	0x08019df8
 8012630:	08019774 	.word	0x08019774

08012634 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8012634:	b5b0      	push	{r4, r5, r7, lr}
 8012636:	b08a      	sub	sp, #40	; 0x28
 8012638:	af04      	add	r7, sp, #16
 801263a:	60f8      	str	r0, [r7, #12]
 801263c:	607b      	str	r3, [r7, #4]
 801263e:	460b      	mov	r3, r1
 8012640:	817b      	strh	r3, [r7, #10]
 8012642:	4613      	mov	r3, r2
 8012644:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	2b00      	cmp	r3, #0
 801264a:	d106      	bne.n	801265a <tcp_output_alloc_header+0x26>
 801264c:	4b15      	ldr	r3, [pc, #84]	; (80126a4 <tcp_output_alloc_header+0x70>)
 801264e:	f240 7242 	movw	r2, #1858	; 0x742
 8012652:	4915      	ldr	r1, [pc, #84]	; (80126a8 <tcp_output_alloc_header+0x74>)
 8012654:	4815      	ldr	r0, [pc, #84]	; (80126ac <tcp_output_alloc_header+0x78>)
 8012656:	f003 ff7b 	bl	8016550 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	6a58      	ldr	r0, [r3, #36]	; 0x24
 801265e:	68fb      	ldr	r3, [r7, #12]
 8012660:	8adb      	ldrh	r3, [r3, #22]
 8012662:	68fa      	ldr	r2, [r7, #12]
 8012664:	8b12      	ldrh	r2, [r2, #24]
 8012666:	68f9      	ldr	r1, [r7, #12]
 8012668:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801266a:	893d      	ldrh	r5, [r7, #8]
 801266c:	897c      	ldrh	r4, [r7, #10]
 801266e:	9103      	str	r1, [sp, #12]
 8012670:	2110      	movs	r1, #16
 8012672:	9102      	str	r1, [sp, #8]
 8012674:	9201      	str	r2, [sp, #4]
 8012676:	9300      	str	r3, [sp, #0]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	462a      	mov	r2, r5
 801267c:	4621      	mov	r1, r4
 801267e:	f7ff ff67 	bl	8012550 <tcp_output_alloc_header_common>
 8012682:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8012684:	697b      	ldr	r3, [r7, #20]
 8012686:	2b00      	cmp	r3, #0
 8012688:	d006      	beq.n	8012698 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801268a:	68fb      	ldr	r3, [r7, #12]
 801268c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801268e:	68fa      	ldr	r2, [r7, #12]
 8012690:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012692:	441a      	add	r2, r3
 8012694:	68fb      	ldr	r3, [r7, #12]
 8012696:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8012698:	697b      	ldr	r3, [r7, #20]
}
 801269a:	4618      	mov	r0, r3
 801269c:	3718      	adds	r7, #24
 801269e:	46bd      	mov	sp, r7
 80126a0:	bdb0      	pop	{r4, r5, r7, pc}
 80126a2:	bf00      	nop
 80126a4:	08019720 	.word	0x08019720
 80126a8:	08019e28 	.word	0x08019e28
 80126ac:	08019774 	.word	0x08019774

080126b0 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80126b0:	b580      	push	{r7, lr}
 80126b2:	b088      	sub	sp, #32
 80126b4:	af00      	add	r7, sp, #0
 80126b6:	60f8      	str	r0, [r7, #12]
 80126b8:	60b9      	str	r1, [r7, #8]
 80126ba:	4611      	mov	r1, r2
 80126bc:	461a      	mov	r2, r3
 80126be:	460b      	mov	r3, r1
 80126c0:	71fb      	strb	r3, [r7, #7]
 80126c2:	4613      	mov	r3, r2
 80126c4:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80126c6:	2300      	movs	r3, #0
 80126c8:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80126ca:	68bb      	ldr	r3, [r7, #8]
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d106      	bne.n	80126de <tcp_output_fill_options+0x2e>
 80126d0:	4b13      	ldr	r3, [pc, #76]	; (8012720 <tcp_output_fill_options+0x70>)
 80126d2:	f240 7256 	movw	r2, #1878	; 0x756
 80126d6:	4913      	ldr	r1, [pc, #76]	; (8012724 <tcp_output_fill_options+0x74>)
 80126d8:	4813      	ldr	r0, [pc, #76]	; (8012728 <tcp_output_fill_options+0x78>)
 80126da:	f003 ff39 	bl	8016550 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80126de:	68bb      	ldr	r3, [r7, #8]
 80126e0:	685b      	ldr	r3, [r3, #4]
 80126e2:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80126e4:	69bb      	ldr	r3, [r7, #24]
 80126e6:	3314      	adds	r3, #20
 80126e8:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80126ea:	69bb      	ldr	r3, [r7, #24]
 80126ec:	f103 0214 	add.w	r2, r3, #20
 80126f0:	8bfb      	ldrh	r3, [r7, #30]
 80126f2:	009b      	lsls	r3, r3, #2
 80126f4:	4619      	mov	r1, r3
 80126f6:	79fb      	ldrb	r3, [r7, #7]
 80126f8:	009b      	lsls	r3, r3, #2
 80126fa:	f003 0304 	and.w	r3, r3, #4
 80126fe:	440b      	add	r3, r1
 8012700:	4413      	add	r3, r2
 8012702:	697a      	ldr	r2, [r7, #20]
 8012704:	429a      	cmp	r2, r3
 8012706:	d006      	beq.n	8012716 <tcp_output_fill_options+0x66>
 8012708:	4b05      	ldr	r3, [pc, #20]	; (8012720 <tcp_output_fill_options+0x70>)
 801270a:	f240 7275 	movw	r2, #1909	; 0x775
 801270e:	4907      	ldr	r1, [pc, #28]	; (801272c <tcp_output_fill_options+0x7c>)
 8012710:	4805      	ldr	r0, [pc, #20]	; (8012728 <tcp_output_fill_options+0x78>)
 8012712:	f003 ff1d 	bl	8016550 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 8012716:	bf00      	nop
 8012718:	3720      	adds	r7, #32
 801271a:	46bd      	mov	sp, r7
 801271c:	bd80      	pop	{r7, pc}
 801271e:	bf00      	nop
 8012720:	08019720 	.word	0x08019720
 8012724:	08019e50 	.word	0x08019e50
 8012728:	08019774 	.word	0x08019774
 801272c:	08019d48 	.word	0x08019d48

08012730 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	b08a      	sub	sp, #40	; 0x28
 8012734:	af04      	add	r7, sp, #16
 8012736:	60f8      	str	r0, [r7, #12]
 8012738:	60b9      	str	r1, [r7, #8]
 801273a:	607a      	str	r2, [r7, #4]
 801273c:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 801273e:	68bb      	ldr	r3, [r7, #8]
 8012740:	2b00      	cmp	r3, #0
 8012742:	d106      	bne.n	8012752 <tcp_output_control_segment+0x22>
 8012744:	4b1c      	ldr	r3, [pc, #112]	; (80127b8 <tcp_output_control_segment+0x88>)
 8012746:	f240 7287 	movw	r2, #1927	; 0x787
 801274a:	491c      	ldr	r1, [pc, #112]	; (80127bc <tcp_output_control_segment+0x8c>)
 801274c:	481c      	ldr	r0, [pc, #112]	; (80127c0 <tcp_output_control_segment+0x90>)
 801274e:	f003 feff 	bl	8016550 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8012752:	683a      	ldr	r2, [r7, #0]
 8012754:	6879      	ldr	r1, [r7, #4]
 8012756:	68f8      	ldr	r0, [r7, #12]
 8012758:	f7fe fae8 	bl	8010d2c <tcp_route>
 801275c:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 801275e:	693b      	ldr	r3, [r7, #16]
 8012760:	2b00      	cmp	r3, #0
 8012762:	d102      	bne.n	801276a <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8012764:	23fc      	movs	r3, #252	; 0xfc
 8012766:	75fb      	strb	r3, [r7, #23]
 8012768:	e01c      	b.n	80127a4 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801276a:	68fb      	ldr	r3, [r7, #12]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d006      	beq.n	801277e <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8012770:	68fb      	ldr	r3, [r7, #12]
 8012772:	7adb      	ldrb	r3, [r3, #11]
 8012774:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8012776:	68fb      	ldr	r3, [r7, #12]
 8012778:	7a9b      	ldrb	r3, [r3, #10]
 801277a:	757b      	strb	r3, [r7, #21]
 801277c:	e003      	b.n	8012786 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801277e:	23ff      	movs	r3, #255	; 0xff
 8012780:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8012782:	2300      	movs	r3, #0
 8012784:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8012786:	7dba      	ldrb	r2, [r7, #22]
 8012788:	693b      	ldr	r3, [r7, #16]
 801278a:	9302      	str	r3, [sp, #8]
 801278c:	2306      	movs	r3, #6
 801278e:	9301      	str	r3, [sp, #4]
 8012790:	7d7b      	ldrb	r3, [r7, #21]
 8012792:	9300      	str	r3, [sp, #0]
 8012794:	4613      	mov	r3, r2
 8012796:	683a      	ldr	r2, [r7, #0]
 8012798:	6879      	ldr	r1, [r7, #4]
 801279a:	68b8      	ldr	r0, [r7, #8]
 801279c:	f002 fa92 	bl	8014cc4 <ip4_output_if>
 80127a0:	4603      	mov	r3, r0
 80127a2:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80127a4:	68b8      	ldr	r0, [r7, #8]
 80127a6:	f7f9 fd31 	bl	800c20c <pbuf_free>
  return err;
 80127aa:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80127ae:	4618      	mov	r0, r3
 80127b0:	3718      	adds	r7, #24
 80127b2:	46bd      	mov	sp, r7
 80127b4:	bd80      	pop	{r7, pc}
 80127b6:	bf00      	nop
 80127b8:	08019720 	.word	0x08019720
 80127bc:	08019e78 	.word	0x08019e78
 80127c0:	08019774 	.word	0x08019774

080127c4 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80127c4:	b590      	push	{r4, r7, lr}
 80127c6:	b08b      	sub	sp, #44	; 0x2c
 80127c8:	af04      	add	r7, sp, #16
 80127ca:	60f8      	str	r0, [r7, #12]
 80127cc:	60b9      	str	r1, [r7, #8]
 80127ce:	607a      	str	r2, [r7, #4]
 80127d0:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80127d2:	683b      	ldr	r3, [r7, #0]
 80127d4:	2b00      	cmp	r3, #0
 80127d6:	d106      	bne.n	80127e6 <tcp_rst+0x22>
 80127d8:	4b1f      	ldr	r3, [pc, #124]	; (8012858 <tcp_rst+0x94>)
 80127da:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80127de:	491f      	ldr	r1, [pc, #124]	; (801285c <tcp_rst+0x98>)
 80127e0:	481f      	ldr	r0, [pc, #124]	; (8012860 <tcp_rst+0x9c>)
 80127e2:	f003 feb5 	bl	8016550 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80127e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80127e8:	2b00      	cmp	r3, #0
 80127ea:	d106      	bne.n	80127fa <tcp_rst+0x36>
 80127ec:	4b1a      	ldr	r3, [pc, #104]	; (8012858 <tcp_rst+0x94>)
 80127ee:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80127f2:	491c      	ldr	r1, [pc, #112]	; (8012864 <tcp_rst+0xa0>)
 80127f4:	481a      	ldr	r0, [pc, #104]	; (8012860 <tcp_rst+0x9c>)
 80127f6:	f003 feab 	bl	8016550 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80127fa:	2300      	movs	r3, #0
 80127fc:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 80127fe:	f246 0308 	movw	r3, #24584	; 0x6008
 8012802:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8012804:	7dfb      	ldrb	r3, [r7, #23]
 8012806:	b29c      	uxth	r4, r3
 8012808:	68b8      	ldr	r0, [r7, #8]
 801280a:	f7f7 fe3a 	bl	800a482 <lwip_htonl>
 801280e:	4602      	mov	r2, r0
 8012810:	8abb      	ldrh	r3, [r7, #20]
 8012812:	9303      	str	r3, [sp, #12]
 8012814:	2314      	movs	r3, #20
 8012816:	9302      	str	r3, [sp, #8]
 8012818:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801281a:	9301      	str	r3, [sp, #4]
 801281c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801281e:	9300      	str	r3, [sp, #0]
 8012820:	4613      	mov	r3, r2
 8012822:	2200      	movs	r2, #0
 8012824:	4621      	mov	r1, r4
 8012826:	6878      	ldr	r0, [r7, #4]
 8012828:	f7ff fe92 	bl	8012550 <tcp_output_alloc_header_common>
 801282c:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 801282e:	693b      	ldr	r3, [r7, #16]
 8012830:	2b00      	cmp	r3, #0
 8012832:	d00c      	beq.n	801284e <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012834:	7dfb      	ldrb	r3, [r7, #23]
 8012836:	2200      	movs	r2, #0
 8012838:	6939      	ldr	r1, [r7, #16]
 801283a:	68f8      	ldr	r0, [r7, #12]
 801283c:	f7ff ff38 	bl	80126b0 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8012840:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012842:	683a      	ldr	r2, [r7, #0]
 8012844:	6939      	ldr	r1, [r7, #16]
 8012846:	68f8      	ldr	r0, [r7, #12]
 8012848:	f7ff ff72 	bl	8012730 <tcp_output_control_segment>
 801284c:	e000      	b.n	8012850 <tcp_rst+0x8c>
    return;
 801284e:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8012850:	371c      	adds	r7, #28
 8012852:	46bd      	mov	sp, r7
 8012854:	bd90      	pop	{r4, r7, pc}
 8012856:	bf00      	nop
 8012858:	08019720 	.word	0x08019720
 801285c:	08019ea4 	.word	0x08019ea4
 8012860:	08019774 	.word	0x08019774
 8012864:	08019ec0 	.word	0x08019ec0

08012868 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8012868:	b590      	push	{r4, r7, lr}
 801286a:	b087      	sub	sp, #28
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8012870:	2300      	movs	r3, #0
 8012872:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8012874:	2300      	movs	r3, #0
 8012876:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8012878:	687b      	ldr	r3, [r7, #4]
 801287a:	2b00      	cmp	r3, #0
 801287c:	d106      	bne.n	801288c <tcp_send_empty_ack+0x24>
 801287e:	4b28      	ldr	r3, [pc, #160]	; (8012920 <tcp_send_empty_ack+0xb8>)
 8012880:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8012884:	4927      	ldr	r1, [pc, #156]	; (8012924 <tcp_send_empty_ack+0xbc>)
 8012886:	4828      	ldr	r0, [pc, #160]	; (8012928 <tcp_send_empty_ack+0xc0>)
 8012888:	f003 fe62 	bl	8016550 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801288c:	7dfb      	ldrb	r3, [r7, #23]
 801288e:	009b      	lsls	r3, r3, #2
 8012890:	b2db      	uxtb	r3, r3
 8012892:	f003 0304 	and.w	r3, r3, #4
 8012896:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8012898:	7d7b      	ldrb	r3, [r7, #21]
 801289a:	b29c      	uxth	r4, r3
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80128a0:	4618      	mov	r0, r3
 80128a2:	f7f7 fdee 	bl	800a482 <lwip_htonl>
 80128a6:	4603      	mov	r3, r0
 80128a8:	2200      	movs	r2, #0
 80128aa:	4621      	mov	r1, r4
 80128ac:	6878      	ldr	r0, [r7, #4]
 80128ae:	f7ff fec1 	bl	8012634 <tcp_output_alloc_header>
 80128b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80128b4:	693b      	ldr	r3, [r7, #16]
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d109      	bne.n	80128ce <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128ba:	687b      	ldr	r3, [r7, #4]
 80128bc:	8b5b      	ldrh	r3, [r3, #26]
 80128be:	f043 0303 	orr.w	r3, r3, #3
 80128c2:	b29a      	uxth	r2, r3
 80128c4:	687b      	ldr	r3, [r7, #4]
 80128c6:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80128c8:	f06f 0301 	mvn.w	r3, #1
 80128cc:	e023      	b.n	8012916 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80128ce:	7dbb      	ldrb	r3, [r7, #22]
 80128d0:	7dfa      	ldrb	r2, [r7, #23]
 80128d2:	6939      	ldr	r1, [r7, #16]
 80128d4:	6878      	ldr	r0, [r7, #4]
 80128d6:	f7ff feeb 	bl	80126b0 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80128da:	687a      	ldr	r2, [r7, #4]
 80128dc:	687b      	ldr	r3, [r7, #4]
 80128de:	3304      	adds	r3, #4
 80128e0:	6939      	ldr	r1, [r7, #16]
 80128e2:	6878      	ldr	r0, [r7, #4]
 80128e4:	f7ff ff24 	bl	8012730 <tcp_output_control_segment>
 80128e8:	4603      	mov	r3, r0
 80128ea:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80128ec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80128f0:	2b00      	cmp	r3, #0
 80128f2:	d007      	beq.n	8012904 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	8b5b      	ldrh	r3, [r3, #26]
 80128f8:	f043 0303 	orr.w	r3, r3, #3
 80128fc:	b29a      	uxth	r2, r3
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	835a      	strh	r2, [r3, #26]
 8012902:	e006      	b.n	8012912 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012904:	687b      	ldr	r3, [r7, #4]
 8012906:	8b5b      	ldrh	r3, [r3, #26]
 8012908:	f023 0303 	bic.w	r3, r3, #3
 801290c:	b29a      	uxth	r2, r3
 801290e:	687b      	ldr	r3, [r7, #4]
 8012910:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8012912:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012916:	4618      	mov	r0, r3
 8012918:	371c      	adds	r7, #28
 801291a:	46bd      	mov	sp, r7
 801291c:	bd90      	pop	{r4, r7, pc}
 801291e:	bf00      	nop
 8012920:	08019720 	.word	0x08019720
 8012924:	08019edc 	.word	0x08019edc
 8012928:	08019774 	.word	0x08019774

0801292c <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 801292c:	b590      	push	{r4, r7, lr}
 801292e:	b087      	sub	sp, #28
 8012930:	af00      	add	r7, sp, #0
 8012932:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8012934:	2300      	movs	r3, #0
 8012936:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d106      	bne.n	801294c <tcp_keepalive+0x20>
 801293e:	4b18      	ldr	r3, [pc, #96]	; (80129a0 <tcp_keepalive+0x74>)
 8012940:	f640 0224 	movw	r2, #2084	; 0x824
 8012944:	4917      	ldr	r1, [pc, #92]	; (80129a4 <tcp_keepalive+0x78>)
 8012946:	4818      	ldr	r0, [pc, #96]	; (80129a8 <tcp_keepalive+0x7c>)
 8012948:	f003 fe02 	bl	8016550 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 801294c:	7dfb      	ldrb	r3, [r7, #23]
 801294e:	b29c      	uxth	r4, r3
 8012950:	687b      	ldr	r3, [r7, #4]
 8012952:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8012954:	3b01      	subs	r3, #1
 8012956:	4618      	mov	r0, r3
 8012958:	f7f7 fd93 	bl	800a482 <lwip_htonl>
 801295c:	4603      	mov	r3, r0
 801295e:	2200      	movs	r2, #0
 8012960:	4621      	mov	r1, r4
 8012962:	6878      	ldr	r0, [r7, #4]
 8012964:	f7ff fe66 	bl	8012634 <tcp_output_alloc_header>
 8012968:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801296a:	693b      	ldr	r3, [r7, #16]
 801296c:	2b00      	cmp	r3, #0
 801296e:	d102      	bne.n	8012976 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8012970:	f04f 33ff 	mov.w	r3, #4294967295
 8012974:	e010      	b.n	8012998 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012976:	7dfb      	ldrb	r3, [r7, #23]
 8012978:	2200      	movs	r2, #0
 801297a:	6939      	ldr	r1, [r7, #16]
 801297c:	6878      	ldr	r0, [r7, #4]
 801297e:	f7ff fe97 	bl	80126b0 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012982:	687a      	ldr	r2, [r7, #4]
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	3304      	adds	r3, #4
 8012988:	6939      	ldr	r1, [r7, #16]
 801298a:	6878      	ldr	r0, [r7, #4]
 801298c:	f7ff fed0 	bl	8012730 <tcp_output_control_segment>
 8012990:	4603      	mov	r3, r0
 8012992:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012994:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8012998:	4618      	mov	r0, r3
 801299a:	371c      	adds	r7, #28
 801299c:	46bd      	mov	sp, r7
 801299e:	bd90      	pop	{r4, r7, pc}
 80129a0:	08019720 	.word	0x08019720
 80129a4:	08019efc 	.word	0x08019efc
 80129a8:	08019774 	.word	0x08019774

080129ac <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80129ac:	b590      	push	{r4, r7, lr}
 80129ae:	b08b      	sub	sp, #44	; 0x2c
 80129b0:	af00      	add	r7, sp, #0
 80129b2:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80129b4:	2300      	movs	r3, #0
 80129b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	2b00      	cmp	r3, #0
 80129be:	d106      	bne.n	80129ce <tcp_zero_window_probe+0x22>
 80129c0:	4b4c      	ldr	r3, [pc, #304]	; (8012af4 <tcp_zero_window_probe+0x148>)
 80129c2:	f640 024f 	movw	r2, #2127	; 0x84f
 80129c6:	494c      	ldr	r1, [pc, #304]	; (8012af8 <tcp_zero_window_probe+0x14c>)
 80129c8:	484c      	ldr	r0, [pc, #304]	; (8012afc <tcp_zero_window_probe+0x150>)
 80129ca:	f003 fdc1 	bl	8016550 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80129ce:	687b      	ldr	r3, [r7, #4]
 80129d0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80129d2:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80129d4:	6a3b      	ldr	r3, [r7, #32]
 80129d6:	2b00      	cmp	r3, #0
 80129d8:	d101      	bne.n	80129de <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80129da:	2300      	movs	r3, #0
 80129dc:	e086      	b.n	8012aec <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80129de:	687b      	ldr	r3, [r7, #4]
 80129e0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80129e4:	2bff      	cmp	r3, #255	; 0xff
 80129e6:	d007      	beq.n	80129f8 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80129e8:	687b      	ldr	r3, [r7, #4]
 80129ea:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80129ee:	3301      	adds	r3, #1
 80129f0:	b2da      	uxtb	r2, r3
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80129f8:	6a3b      	ldr	r3, [r7, #32]
 80129fa:	68db      	ldr	r3, [r3, #12]
 80129fc:	899b      	ldrh	r3, [r3, #12]
 80129fe:	b29b      	uxth	r3, r3
 8012a00:	4618      	mov	r0, r3
 8012a02:	f7f7 fd29 	bl	800a458 <lwip_htons>
 8012a06:	4603      	mov	r3, r0
 8012a08:	b2db      	uxtb	r3, r3
 8012a0a:	f003 0301 	and.w	r3, r3, #1
 8012a0e:	2b00      	cmp	r3, #0
 8012a10:	d005      	beq.n	8012a1e <tcp_zero_window_probe+0x72>
 8012a12:	6a3b      	ldr	r3, [r7, #32]
 8012a14:	891b      	ldrh	r3, [r3, #8]
 8012a16:	2b00      	cmp	r3, #0
 8012a18:	d101      	bne.n	8012a1e <tcp_zero_window_probe+0x72>
 8012a1a:	2301      	movs	r3, #1
 8012a1c:	e000      	b.n	8012a20 <tcp_zero_window_probe+0x74>
 8012a1e:	2300      	movs	r3, #0
 8012a20:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8012a22:	7ffb      	ldrb	r3, [r7, #31]
 8012a24:	2b00      	cmp	r3, #0
 8012a26:	bf0c      	ite	eq
 8012a28:	2301      	moveq	r3, #1
 8012a2a:	2300      	movne	r3, #0
 8012a2c:	b2db      	uxtb	r3, r3
 8012a2e:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8012a30:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012a34:	b299      	uxth	r1, r3
 8012a36:	6a3b      	ldr	r3, [r7, #32]
 8012a38:	68db      	ldr	r3, [r3, #12]
 8012a3a:	685b      	ldr	r3, [r3, #4]
 8012a3c:	8bba      	ldrh	r2, [r7, #28]
 8012a3e:	6878      	ldr	r0, [r7, #4]
 8012a40:	f7ff fdf8 	bl	8012634 <tcp_output_alloc_header>
 8012a44:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8012a46:	69bb      	ldr	r3, [r7, #24]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d102      	bne.n	8012a52 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8012a4c:	f04f 33ff 	mov.w	r3, #4294967295
 8012a50:	e04c      	b.n	8012aec <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	685b      	ldr	r3, [r3, #4]
 8012a56:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8012a58:	7ffb      	ldrb	r3, [r7, #31]
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d011      	beq.n	8012a82 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8012a5e:	697b      	ldr	r3, [r7, #20]
 8012a60:	899b      	ldrh	r3, [r3, #12]
 8012a62:	b29b      	uxth	r3, r3
 8012a64:	b21b      	sxth	r3, r3
 8012a66:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8012a6a:	b21c      	sxth	r4, r3
 8012a6c:	2011      	movs	r0, #17
 8012a6e:	f7f7 fcf3 	bl	800a458 <lwip_htons>
 8012a72:	4603      	mov	r3, r0
 8012a74:	b21b      	sxth	r3, r3
 8012a76:	4323      	orrs	r3, r4
 8012a78:	b21b      	sxth	r3, r3
 8012a7a:	b29a      	uxth	r2, r3
 8012a7c:	697b      	ldr	r3, [r7, #20]
 8012a7e:	819a      	strh	r2, [r3, #12]
 8012a80:	e010      	b.n	8012aa4 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8012a82:	69bb      	ldr	r3, [r7, #24]
 8012a84:	685b      	ldr	r3, [r3, #4]
 8012a86:	3314      	adds	r3, #20
 8012a88:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8012a8a:	6a3b      	ldr	r3, [r7, #32]
 8012a8c:	6858      	ldr	r0, [r3, #4]
 8012a8e:	6a3b      	ldr	r3, [r7, #32]
 8012a90:	685b      	ldr	r3, [r3, #4]
 8012a92:	891a      	ldrh	r2, [r3, #8]
 8012a94:	6a3b      	ldr	r3, [r7, #32]
 8012a96:	891b      	ldrh	r3, [r3, #8]
 8012a98:	1ad3      	subs	r3, r2, r3
 8012a9a:	b29b      	uxth	r3, r3
 8012a9c:	2201      	movs	r2, #1
 8012a9e:	6939      	ldr	r1, [r7, #16]
 8012aa0:	f7f9 fdba 	bl	800c618 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8012aa4:	6a3b      	ldr	r3, [r7, #32]
 8012aa6:	68db      	ldr	r3, [r3, #12]
 8012aa8:	685b      	ldr	r3, [r3, #4]
 8012aaa:	4618      	mov	r0, r3
 8012aac:	f7f7 fce9 	bl	800a482 <lwip_htonl>
 8012ab0:	4603      	mov	r3, r0
 8012ab2:	3301      	adds	r3, #1
 8012ab4:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012aba:	68fb      	ldr	r3, [r7, #12]
 8012abc:	1ad3      	subs	r3, r2, r3
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	da02      	bge.n	8012ac8 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	68fa      	ldr	r2, [r7, #12]
 8012ac6:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8012ac8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8012acc:	2200      	movs	r2, #0
 8012ace:	69b9      	ldr	r1, [r7, #24]
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f7ff fded 	bl	80126b0 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8012ad6:	687a      	ldr	r2, [r7, #4]
 8012ad8:	687b      	ldr	r3, [r7, #4]
 8012ada:	3304      	adds	r3, #4
 8012adc:	69b9      	ldr	r1, [r7, #24]
 8012ade:	6878      	ldr	r0, [r7, #4]
 8012ae0:	f7ff fe26 	bl	8012730 <tcp_output_control_segment>
 8012ae4:	4603      	mov	r3, r0
 8012ae6:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8012ae8:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8012aec:	4618      	mov	r0, r3
 8012aee:	372c      	adds	r7, #44	; 0x2c
 8012af0:	46bd      	mov	sp, r7
 8012af2:	bd90      	pop	{r4, r7, pc}
 8012af4:	08019720 	.word	0x08019720
 8012af8:	08019f18 	.word	0x08019f18
 8012afc:	08019774 	.word	0x08019774

08012b00 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8012b00:	b580      	push	{r7, lr}
 8012b02:	b082      	sub	sp, #8
 8012b04:	af00      	add	r7, sp, #0
 8012b06:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8012b08:	f7fa f808 	bl	800cb1c <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8012b0c:	4b0a      	ldr	r3, [pc, #40]	; (8012b38 <tcpip_tcp_timer+0x38>)
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	2b00      	cmp	r3, #0
 8012b12:	d103      	bne.n	8012b1c <tcpip_tcp_timer+0x1c>
 8012b14:	4b09      	ldr	r3, [pc, #36]	; (8012b3c <tcpip_tcp_timer+0x3c>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	2b00      	cmp	r3, #0
 8012b1a:	d005      	beq.n	8012b28 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b1c:	2200      	movs	r2, #0
 8012b1e:	4908      	ldr	r1, [pc, #32]	; (8012b40 <tcpip_tcp_timer+0x40>)
 8012b20:	20fa      	movs	r0, #250	; 0xfa
 8012b22:	f000 f8f3 	bl	8012d0c <sys_timeout>
 8012b26:	e003      	b.n	8012b30 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8012b28:	4b06      	ldr	r3, [pc, #24]	; (8012b44 <tcpip_tcp_timer+0x44>)
 8012b2a:	2200      	movs	r2, #0
 8012b2c:	601a      	str	r2, [r3, #0]
  }
}
 8012b2e:	bf00      	nop
 8012b30:	bf00      	nop
 8012b32:	3708      	adds	r7, #8
 8012b34:	46bd      	mov	sp, r7
 8012b36:	bd80      	pop	{r7, pc}
 8012b38:	2000d144 	.word	0x2000d144
 8012b3c:	2000d148 	.word	0x2000d148
 8012b40:	08012b01 	.word	0x08012b01
 8012b44:	2000d190 	.word	0x2000d190

08012b48 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8012b48:	b580      	push	{r7, lr}
 8012b4a:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8012b4c:	4b0a      	ldr	r3, [pc, #40]	; (8012b78 <tcp_timer_needed+0x30>)
 8012b4e:	681b      	ldr	r3, [r3, #0]
 8012b50:	2b00      	cmp	r3, #0
 8012b52:	d10f      	bne.n	8012b74 <tcp_timer_needed+0x2c>
 8012b54:	4b09      	ldr	r3, [pc, #36]	; (8012b7c <tcp_timer_needed+0x34>)
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	2b00      	cmp	r3, #0
 8012b5a:	d103      	bne.n	8012b64 <tcp_timer_needed+0x1c>
 8012b5c:	4b08      	ldr	r3, [pc, #32]	; (8012b80 <tcp_timer_needed+0x38>)
 8012b5e:	681b      	ldr	r3, [r3, #0]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d007      	beq.n	8012b74 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8012b64:	4b04      	ldr	r3, [pc, #16]	; (8012b78 <tcp_timer_needed+0x30>)
 8012b66:	2201      	movs	r2, #1
 8012b68:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	4905      	ldr	r1, [pc, #20]	; (8012b84 <tcp_timer_needed+0x3c>)
 8012b6e:	20fa      	movs	r0, #250	; 0xfa
 8012b70:	f000 f8cc 	bl	8012d0c <sys_timeout>
  }
}
 8012b74:	bf00      	nop
 8012b76:	bd80      	pop	{r7, pc}
 8012b78:	2000d190 	.word	0x2000d190
 8012b7c:	2000d144 	.word	0x2000d144
 8012b80:	2000d148 	.word	0x2000d148
 8012b84:	08012b01 	.word	0x08012b01

08012b88 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8012b88:	b580      	push	{r7, lr}
 8012b8a:	b086      	sub	sp, #24
 8012b8c:	af00      	add	r7, sp, #0
 8012b8e:	60f8      	str	r0, [r7, #12]
 8012b90:	60b9      	str	r1, [r7, #8]
 8012b92:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8012b94:	200a      	movs	r0, #10
 8012b96:	f7f8 fc29 	bl	800b3ec <memp_malloc>
 8012b9a:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8012b9c:	693b      	ldr	r3, [r7, #16]
 8012b9e:	2b00      	cmp	r3, #0
 8012ba0:	d109      	bne.n	8012bb6 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8012ba2:	693b      	ldr	r3, [r7, #16]
 8012ba4:	2b00      	cmp	r3, #0
 8012ba6:	d151      	bne.n	8012c4c <sys_timeout_abs+0xc4>
 8012ba8:	4b2a      	ldr	r3, [pc, #168]	; (8012c54 <sys_timeout_abs+0xcc>)
 8012baa:	22be      	movs	r2, #190	; 0xbe
 8012bac:	492a      	ldr	r1, [pc, #168]	; (8012c58 <sys_timeout_abs+0xd0>)
 8012bae:	482b      	ldr	r0, [pc, #172]	; (8012c5c <sys_timeout_abs+0xd4>)
 8012bb0:	f003 fcce 	bl	8016550 <iprintf>
    return;
 8012bb4:	e04a      	b.n	8012c4c <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8012bb6:	693b      	ldr	r3, [r7, #16]
 8012bb8:	2200      	movs	r2, #0
 8012bba:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8012bbc:	693b      	ldr	r3, [r7, #16]
 8012bbe:	68ba      	ldr	r2, [r7, #8]
 8012bc0:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8012bc2:	693b      	ldr	r3, [r7, #16]
 8012bc4:	687a      	ldr	r2, [r7, #4]
 8012bc6:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8012bc8:	693b      	ldr	r3, [r7, #16]
 8012bca:	68fa      	ldr	r2, [r7, #12]
 8012bcc:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8012bce:	4b24      	ldr	r3, [pc, #144]	; (8012c60 <sys_timeout_abs+0xd8>)
 8012bd0:	681b      	ldr	r3, [r3, #0]
 8012bd2:	2b00      	cmp	r3, #0
 8012bd4:	d103      	bne.n	8012bde <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8012bd6:	4a22      	ldr	r2, [pc, #136]	; (8012c60 <sys_timeout_abs+0xd8>)
 8012bd8:	693b      	ldr	r3, [r7, #16]
 8012bda:	6013      	str	r3, [r2, #0]
    return;
 8012bdc:	e037      	b.n	8012c4e <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8012bde:	693b      	ldr	r3, [r7, #16]
 8012be0:	685a      	ldr	r2, [r3, #4]
 8012be2:	4b1f      	ldr	r3, [pc, #124]	; (8012c60 <sys_timeout_abs+0xd8>)
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	685b      	ldr	r3, [r3, #4]
 8012be8:	1ad3      	subs	r3, r2, r3
 8012bea:	0fdb      	lsrs	r3, r3, #31
 8012bec:	f003 0301 	and.w	r3, r3, #1
 8012bf0:	b2db      	uxtb	r3, r3
 8012bf2:	2b00      	cmp	r3, #0
 8012bf4:	d007      	beq.n	8012c06 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8012bf6:	4b1a      	ldr	r3, [pc, #104]	; (8012c60 <sys_timeout_abs+0xd8>)
 8012bf8:	681a      	ldr	r2, [r3, #0]
 8012bfa:	693b      	ldr	r3, [r7, #16]
 8012bfc:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8012bfe:	4a18      	ldr	r2, [pc, #96]	; (8012c60 <sys_timeout_abs+0xd8>)
 8012c00:	693b      	ldr	r3, [r7, #16]
 8012c02:	6013      	str	r3, [r2, #0]
 8012c04:	e023      	b.n	8012c4e <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c06:	4b16      	ldr	r3, [pc, #88]	; (8012c60 <sys_timeout_abs+0xd8>)
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	617b      	str	r3, [r7, #20]
 8012c0c:	e01a      	b.n	8012c44 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8012c0e:	697b      	ldr	r3, [r7, #20]
 8012c10:	681b      	ldr	r3, [r3, #0]
 8012c12:	2b00      	cmp	r3, #0
 8012c14:	d00b      	beq.n	8012c2e <sys_timeout_abs+0xa6>
 8012c16:	693b      	ldr	r3, [r7, #16]
 8012c18:	685a      	ldr	r2, [r3, #4]
 8012c1a:	697b      	ldr	r3, [r7, #20]
 8012c1c:	681b      	ldr	r3, [r3, #0]
 8012c1e:	685b      	ldr	r3, [r3, #4]
 8012c20:	1ad3      	subs	r3, r2, r3
 8012c22:	0fdb      	lsrs	r3, r3, #31
 8012c24:	f003 0301 	and.w	r3, r3, #1
 8012c28:	b2db      	uxtb	r3, r3
 8012c2a:	2b00      	cmp	r3, #0
 8012c2c:	d007      	beq.n	8012c3e <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	681a      	ldr	r2, [r3, #0]
 8012c32:	693b      	ldr	r3, [r7, #16]
 8012c34:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8012c36:	697b      	ldr	r3, [r7, #20]
 8012c38:	693a      	ldr	r2, [r7, #16]
 8012c3a:	601a      	str	r2, [r3, #0]
        break;
 8012c3c:	e007      	b.n	8012c4e <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8012c3e:	697b      	ldr	r3, [r7, #20]
 8012c40:	681b      	ldr	r3, [r3, #0]
 8012c42:	617b      	str	r3, [r7, #20]
 8012c44:	697b      	ldr	r3, [r7, #20]
 8012c46:	2b00      	cmp	r3, #0
 8012c48:	d1e1      	bne.n	8012c0e <sys_timeout_abs+0x86>
 8012c4a:	e000      	b.n	8012c4e <sys_timeout_abs+0xc6>
    return;
 8012c4c:	bf00      	nop
      }
    }
  }
}
 8012c4e:	3718      	adds	r7, #24
 8012c50:	46bd      	mov	sp, r7
 8012c52:	bd80      	pop	{r7, pc}
 8012c54:	08019f3c 	.word	0x08019f3c
 8012c58:	08019f70 	.word	0x08019f70
 8012c5c:	08019fb0 	.word	0x08019fb0
 8012c60:	2000d188 	.word	0x2000d188

08012c64 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8012c64:	b580      	push	{r7, lr}
 8012c66:	b086      	sub	sp, #24
 8012c68:	af00      	add	r7, sp, #0
 8012c6a:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8012c70:	697b      	ldr	r3, [r7, #20]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	4798      	blx	r3

  now = sys_now();
 8012c76:	f7f2 fd19 	bl	80056ac <sys_now>
 8012c7a:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8012c7c:	697b      	ldr	r3, [r7, #20]
 8012c7e:	681a      	ldr	r2, [r3, #0]
 8012c80:	4b0f      	ldr	r3, [pc, #60]	; (8012cc0 <lwip_cyclic_timer+0x5c>)
 8012c82:	681b      	ldr	r3, [r3, #0]
 8012c84:	4413      	add	r3, r2
 8012c86:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8012c88:	68fa      	ldr	r2, [r7, #12]
 8012c8a:	693b      	ldr	r3, [r7, #16]
 8012c8c:	1ad3      	subs	r3, r2, r3
 8012c8e:	0fdb      	lsrs	r3, r3, #31
 8012c90:	f003 0301 	and.w	r3, r3, #1
 8012c94:	b2db      	uxtb	r3, r3
 8012c96:	2b00      	cmp	r3, #0
 8012c98:	d009      	beq.n	8012cae <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8012c9a:	697b      	ldr	r3, [r7, #20]
 8012c9c:	681a      	ldr	r2, [r3, #0]
 8012c9e:	693b      	ldr	r3, [r7, #16]
 8012ca0:	4413      	add	r3, r2
 8012ca2:	687a      	ldr	r2, [r7, #4]
 8012ca4:	4907      	ldr	r1, [pc, #28]	; (8012cc4 <lwip_cyclic_timer+0x60>)
 8012ca6:	4618      	mov	r0, r3
 8012ca8:	f7ff ff6e 	bl	8012b88 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8012cac:	e004      	b.n	8012cb8 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8012cae:	687a      	ldr	r2, [r7, #4]
 8012cb0:	4904      	ldr	r1, [pc, #16]	; (8012cc4 <lwip_cyclic_timer+0x60>)
 8012cb2:	68f8      	ldr	r0, [r7, #12]
 8012cb4:	f7ff ff68 	bl	8012b88 <sys_timeout_abs>
}
 8012cb8:	bf00      	nop
 8012cba:	3718      	adds	r7, #24
 8012cbc:	46bd      	mov	sp, r7
 8012cbe:	bd80      	pop	{r7, pc}
 8012cc0:	2000d18c 	.word	0x2000d18c
 8012cc4:	08012c65 	.word	0x08012c65

08012cc8 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8012cc8:	b580      	push	{r7, lr}
 8012cca:	b082      	sub	sp, #8
 8012ccc:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012cce:	2301      	movs	r3, #1
 8012cd0:	607b      	str	r3, [r7, #4]
 8012cd2:	e00e      	b.n	8012cf2 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8012cd4:	4a0b      	ldr	r2, [pc, #44]	; (8012d04 <sys_timeouts_init+0x3c>)
 8012cd6:	687b      	ldr	r3, [r7, #4]
 8012cd8:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	00db      	lsls	r3, r3, #3
 8012ce0:	4a08      	ldr	r2, [pc, #32]	; (8012d04 <sys_timeouts_init+0x3c>)
 8012ce2:	4413      	add	r3, r2
 8012ce4:	461a      	mov	r2, r3
 8012ce6:	4908      	ldr	r1, [pc, #32]	; (8012d08 <sys_timeouts_init+0x40>)
 8012ce8:	f000 f810 	bl	8012d0c <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8012cec:	687b      	ldr	r3, [r7, #4]
 8012cee:	3301      	adds	r3, #1
 8012cf0:	607b      	str	r3, [r7, #4]
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	2b03      	cmp	r3, #3
 8012cf6:	d9ed      	bls.n	8012cd4 <sys_timeouts_init+0xc>
  }
}
 8012cf8:	bf00      	nop
 8012cfa:	bf00      	nop
 8012cfc:	3708      	adds	r7, #8
 8012cfe:	46bd      	mov	sp, r7
 8012d00:	bd80      	pop	{r7, pc}
 8012d02:	bf00      	nop
 8012d04:	0801ac04 	.word	0x0801ac04
 8012d08:	08012c65 	.word	0x08012c65

08012d0c <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b086      	sub	sp, #24
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	60f8      	str	r0, [r7, #12]
 8012d14:	60b9      	str	r1, [r7, #8]
 8012d16:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8012d18:	68fb      	ldr	r3, [r7, #12]
 8012d1a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012d1e:	d306      	bcc.n	8012d2e <sys_timeout+0x22>
 8012d20:	4b0a      	ldr	r3, [pc, #40]	; (8012d4c <sys_timeout+0x40>)
 8012d22:	f240 1229 	movw	r2, #297	; 0x129
 8012d26:	490a      	ldr	r1, [pc, #40]	; (8012d50 <sys_timeout+0x44>)
 8012d28:	480a      	ldr	r0, [pc, #40]	; (8012d54 <sys_timeout+0x48>)
 8012d2a:	f003 fc11 	bl	8016550 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8012d2e:	f7f2 fcbd 	bl	80056ac <sys_now>
 8012d32:	4602      	mov	r2, r0
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	4413      	add	r3, r2
 8012d38:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8012d3a:	687a      	ldr	r2, [r7, #4]
 8012d3c:	68b9      	ldr	r1, [r7, #8]
 8012d3e:	6978      	ldr	r0, [r7, #20]
 8012d40:	f7ff ff22 	bl	8012b88 <sys_timeout_abs>
#endif
}
 8012d44:	bf00      	nop
 8012d46:	3718      	adds	r7, #24
 8012d48:	46bd      	mov	sp, r7
 8012d4a:	bd80      	pop	{r7, pc}
 8012d4c:	08019f3c 	.word	0x08019f3c
 8012d50:	08019fd8 	.word	0x08019fd8
 8012d54:	08019fb0 	.word	0x08019fb0

08012d58 <sys_untimeout>:
 * @param handler callback function that would be called by the timeout
 * @param arg callback argument that would be passed to handler
*/
void
sys_untimeout(sys_timeout_handler handler, void *arg)
{
 8012d58:	b580      	push	{r7, lr}
 8012d5a:	b084      	sub	sp, #16
 8012d5c:	af00      	add	r7, sp, #0
 8012d5e:	6078      	str	r0, [r7, #4]
 8012d60:	6039      	str	r1, [r7, #0]
  struct sys_timeo *prev_t, *t;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012d62:	4b19      	ldr	r3, [pc, #100]	; (8012dc8 <sys_untimeout+0x70>)
 8012d64:	681b      	ldr	r3, [r3, #0]
 8012d66:	2b00      	cmp	r3, #0
 8012d68:	d029      	beq.n	8012dbe <sys_untimeout+0x66>
    return;
  }

  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8012d6a:	4b17      	ldr	r3, [pc, #92]	; (8012dc8 <sys_untimeout+0x70>)
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	60bb      	str	r3, [r7, #8]
 8012d70:	2300      	movs	r3, #0
 8012d72:	60fb      	str	r3, [r7, #12]
 8012d74:	e01f      	b.n	8012db6 <sys_untimeout+0x5e>
    if ((t->h == handler) && (t->arg == arg)) {
 8012d76:	68bb      	ldr	r3, [r7, #8]
 8012d78:	689b      	ldr	r3, [r3, #8]
 8012d7a:	687a      	ldr	r2, [r7, #4]
 8012d7c:	429a      	cmp	r2, r3
 8012d7e:	d115      	bne.n	8012dac <sys_untimeout+0x54>
 8012d80:	68bb      	ldr	r3, [r7, #8]
 8012d82:	68db      	ldr	r3, [r3, #12]
 8012d84:	683a      	ldr	r2, [r7, #0]
 8012d86:	429a      	cmp	r2, r3
 8012d88:	d110      	bne.n	8012dac <sys_untimeout+0x54>
      /* We have a match */
      /* Unlink from previous in list */
      if (prev_t == NULL) {
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	2b00      	cmp	r3, #0
 8012d8e:	d104      	bne.n	8012d9a <sys_untimeout+0x42>
        next_timeout = t->next;
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	4a0c      	ldr	r2, [pc, #48]	; (8012dc8 <sys_untimeout+0x70>)
 8012d96:	6013      	str	r3, [r2, #0]
 8012d98:	e003      	b.n	8012da2 <sys_untimeout+0x4a>
      } else {
        prev_t->next = t->next;
 8012d9a:	68bb      	ldr	r3, [r7, #8]
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	68fb      	ldr	r3, [r7, #12]
 8012da0:	601a      	str	r2, [r3, #0]
      }
      memp_free(MEMP_SYS_TIMEOUT, t);
 8012da2:	68b9      	ldr	r1, [r7, #8]
 8012da4:	200a      	movs	r0, #10
 8012da6:	f7f8 fb97 	bl	800b4d8 <memp_free>
      return;
 8012daa:	e009      	b.n	8012dc0 <sys_untimeout+0x68>
  for (t = next_timeout, prev_t = NULL; t != NULL; prev_t = t, t = t->next) {
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	60fb      	str	r3, [r7, #12]
 8012db0:	68bb      	ldr	r3, [r7, #8]
 8012db2:	681b      	ldr	r3, [r3, #0]
 8012db4:	60bb      	str	r3, [r7, #8]
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d1dc      	bne.n	8012d76 <sys_untimeout+0x1e>
    }
  }
  return;
 8012dbc:	e000      	b.n	8012dc0 <sys_untimeout+0x68>
    return;
 8012dbe:	bf00      	nop
}
 8012dc0:	3710      	adds	r7, #16
 8012dc2:	46bd      	mov	sp, r7
 8012dc4:	bd80      	pop	{r7, pc}
 8012dc6:	bf00      	nop
 8012dc8:	2000d188 	.word	0x2000d188

08012dcc <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8012dcc:	b580      	push	{r7, lr}
 8012dce:	b084      	sub	sp, #16
 8012dd0:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8012dd2:	f7f2 fc6b 	bl	80056ac <sys_now>
 8012dd6:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8012dd8:	4b17      	ldr	r3, [pc, #92]	; (8012e38 <sys_check_timeouts+0x6c>)
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8012dde:	68bb      	ldr	r3, [r7, #8]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d022      	beq.n	8012e2a <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8012de4:	68bb      	ldr	r3, [r7, #8]
 8012de6:	685b      	ldr	r3, [r3, #4]
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	1ad3      	subs	r3, r2, r3
 8012dec:	0fdb      	lsrs	r3, r3, #31
 8012dee:	f003 0301 	and.w	r3, r3, #1
 8012df2:	b2db      	uxtb	r3, r3
 8012df4:	2b00      	cmp	r3, #0
 8012df6:	d11a      	bne.n	8012e2e <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8012df8:	68bb      	ldr	r3, [r7, #8]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4a0e      	ldr	r2, [pc, #56]	; (8012e38 <sys_check_timeouts+0x6c>)
 8012dfe:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8012e00:	68bb      	ldr	r3, [r7, #8]
 8012e02:	689b      	ldr	r3, [r3, #8]
 8012e04:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8012e06:	68bb      	ldr	r3, [r7, #8]
 8012e08:	68db      	ldr	r3, [r3, #12]
 8012e0a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8012e0c:	68bb      	ldr	r3, [r7, #8]
 8012e0e:	685b      	ldr	r3, [r3, #4]
 8012e10:	4a0a      	ldr	r2, [pc, #40]	; (8012e3c <sys_check_timeouts+0x70>)
 8012e12:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8012e14:	68b9      	ldr	r1, [r7, #8]
 8012e16:	200a      	movs	r0, #10
 8012e18:	f7f8 fb5e 	bl	800b4d8 <memp_free>
    if (handler != NULL) {
 8012e1c:	687b      	ldr	r3, [r7, #4]
 8012e1e:	2b00      	cmp	r3, #0
 8012e20:	d0da      	beq.n	8012dd8 <sys_check_timeouts+0xc>
      handler(arg);
 8012e22:	687b      	ldr	r3, [r7, #4]
 8012e24:	6838      	ldr	r0, [r7, #0]
 8012e26:	4798      	blx	r3
  do {
 8012e28:	e7d6      	b.n	8012dd8 <sys_check_timeouts+0xc>
      return;
 8012e2a:	bf00      	nop
 8012e2c:	e000      	b.n	8012e30 <sys_check_timeouts+0x64>
      return;
 8012e2e:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8012e30:	3710      	adds	r7, #16
 8012e32:	46bd      	mov	sp, r7
 8012e34:	bd80      	pop	{r7, pc}
 8012e36:	bf00      	nop
 8012e38:	2000d188 	.word	0x2000d188
 8012e3c:	2000d18c 	.word	0x2000d18c

08012e40 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8012e40:	b580      	push	{r7, lr}
 8012e42:	b082      	sub	sp, #8
 8012e44:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8012e46:	4b16      	ldr	r3, [pc, #88]	; (8012ea0 <sys_timeouts_sleeptime+0x60>)
 8012e48:	681b      	ldr	r3, [r3, #0]
 8012e4a:	2b00      	cmp	r3, #0
 8012e4c:	d102      	bne.n	8012e54 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8012e4e:	f04f 33ff 	mov.w	r3, #4294967295
 8012e52:	e020      	b.n	8012e96 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8012e54:	f7f2 fc2a 	bl	80056ac <sys_now>
 8012e58:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8012e5a:	4b11      	ldr	r3, [pc, #68]	; (8012ea0 <sys_timeouts_sleeptime+0x60>)
 8012e5c:	681b      	ldr	r3, [r3, #0]
 8012e5e:	685a      	ldr	r2, [r3, #4]
 8012e60:	687b      	ldr	r3, [r7, #4]
 8012e62:	1ad3      	subs	r3, r2, r3
 8012e64:	0fdb      	lsrs	r3, r3, #31
 8012e66:	f003 0301 	and.w	r3, r3, #1
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d001      	beq.n	8012e74 <sys_timeouts_sleeptime+0x34>
    return 0;
 8012e70:	2300      	movs	r3, #0
 8012e72:	e010      	b.n	8012e96 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8012e74:	4b0a      	ldr	r3, [pc, #40]	; (8012ea0 <sys_timeouts_sleeptime+0x60>)
 8012e76:	681b      	ldr	r3, [r3, #0]
 8012e78:	685a      	ldr	r2, [r3, #4]
 8012e7a:	687b      	ldr	r3, [r7, #4]
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8012e80:	683b      	ldr	r3, [r7, #0]
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	da06      	bge.n	8012e94 <sys_timeouts_sleeptime+0x54>
 8012e86:	4b07      	ldr	r3, [pc, #28]	; (8012ea4 <sys_timeouts_sleeptime+0x64>)
 8012e88:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8012e8c:	4906      	ldr	r1, [pc, #24]	; (8012ea8 <sys_timeouts_sleeptime+0x68>)
 8012e8e:	4807      	ldr	r0, [pc, #28]	; (8012eac <sys_timeouts_sleeptime+0x6c>)
 8012e90:	f003 fb5e 	bl	8016550 <iprintf>
    return ret;
 8012e94:	683b      	ldr	r3, [r7, #0]
  }
}
 8012e96:	4618      	mov	r0, r3
 8012e98:	3708      	adds	r7, #8
 8012e9a:	46bd      	mov	sp, r7
 8012e9c:	bd80      	pop	{r7, pc}
 8012e9e:	bf00      	nop
 8012ea0:	2000d188 	.word	0x2000d188
 8012ea4:	08019f3c 	.word	0x08019f3c
 8012ea8:	0801a010 	.word	0x0801a010
 8012eac:	08019fb0 	.word	0x08019fb0

08012eb0 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8012eb4:	f003 fbda 	bl	801666c <rand>
 8012eb8:	4603      	mov	r3, r0
 8012eba:	b29b      	uxth	r3, r3
 8012ebc:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8012ec0:	b29b      	uxth	r3, r3
 8012ec2:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8012ec6:	b29a      	uxth	r2, r3
 8012ec8:	4b01      	ldr	r3, [pc, #4]	; (8012ed0 <udp_init+0x20>)
 8012eca:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8012ecc:	bf00      	nop
 8012ece:	bd80      	pop	{r7, pc}
 8012ed0:	2000002c 	.word	0x2000002c

08012ed4 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8012ed4:	b480      	push	{r7}
 8012ed6:	b083      	sub	sp, #12
 8012ed8:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8012eda:	2300      	movs	r3, #0
 8012edc:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8012ede:	4b17      	ldr	r3, [pc, #92]	; (8012f3c <udp_new_port+0x68>)
 8012ee0:	881b      	ldrh	r3, [r3, #0]
 8012ee2:	1c5a      	adds	r2, r3, #1
 8012ee4:	b291      	uxth	r1, r2
 8012ee6:	4a15      	ldr	r2, [pc, #84]	; (8012f3c <udp_new_port+0x68>)
 8012ee8:	8011      	strh	r1, [r2, #0]
 8012eea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8012eee:	4293      	cmp	r3, r2
 8012ef0:	d103      	bne.n	8012efa <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8012ef2:	4b12      	ldr	r3, [pc, #72]	; (8012f3c <udp_new_port+0x68>)
 8012ef4:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8012ef8:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012efa:	4b11      	ldr	r3, [pc, #68]	; (8012f40 <udp_new_port+0x6c>)
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	603b      	str	r3, [r7, #0]
 8012f00:	e011      	b.n	8012f26 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	8a5a      	ldrh	r2, [r3, #18]
 8012f06:	4b0d      	ldr	r3, [pc, #52]	; (8012f3c <udp_new_port+0x68>)
 8012f08:	881b      	ldrh	r3, [r3, #0]
 8012f0a:	429a      	cmp	r2, r3
 8012f0c:	d108      	bne.n	8012f20 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8012f0e:	88fb      	ldrh	r3, [r7, #6]
 8012f10:	3301      	adds	r3, #1
 8012f12:	80fb      	strh	r3, [r7, #6]
 8012f14:	88fb      	ldrh	r3, [r7, #6]
 8012f16:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8012f1a:	d3e0      	bcc.n	8012ede <udp_new_port+0xa>
        return 0;
 8012f1c:	2300      	movs	r3, #0
 8012f1e:	e007      	b.n	8012f30 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	68db      	ldr	r3, [r3, #12]
 8012f24:	603b      	str	r3, [r7, #0]
 8012f26:	683b      	ldr	r3, [r7, #0]
 8012f28:	2b00      	cmp	r3, #0
 8012f2a:	d1ea      	bne.n	8012f02 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8012f2c:	4b03      	ldr	r3, [pc, #12]	; (8012f3c <udp_new_port+0x68>)
 8012f2e:	881b      	ldrh	r3, [r3, #0]
}
 8012f30:	4618      	mov	r0, r3
 8012f32:	370c      	adds	r7, #12
 8012f34:	46bd      	mov	sp, r7
 8012f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3a:	4770      	bx	lr
 8012f3c:	2000002c 	.word	0x2000002c
 8012f40:	2000d194 	.word	0x2000d194

08012f44 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8012f44:	b580      	push	{r7, lr}
 8012f46:	b084      	sub	sp, #16
 8012f48:	af00      	add	r7, sp, #0
 8012f4a:	60f8      	str	r0, [r7, #12]
 8012f4c:	60b9      	str	r1, [r7, #8]
 8012f4e:	4613      	mov	r3, r2
 8012f50:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8012f52:	68fb      	ldr	r3, [r7, #12]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d105      	bne.n	8012f64 <udp_input_local_match+0x20>
 8012f58:	4b27      	ldr	r3, [pc, #156]	; (8012ff8 <udp_input_local_match+0xb4>)
 8012f5a:	2287      	movs	r2, #135	; 0x87
 8012f5c:	4927      	ldr	r1, [pc, #156]	; (8012ffc <udp_input_local_match+0xb8>)
 8012f5e:	4828      	ldr	r0, [pc, #160]	; (8013000 <udp_input_local_match+0xbc>)
 8012f60:	f003 faf6 	bl	8016550 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8012f64:	68bb      	ldr	r3, [r7, #8]
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d105      	bne.n	8012f76 <udp_input_local_match+0x32>
 8012f6a:	4b23      	ldr	r3, [pc, #140]	; (8012ff8 <udp_input_local_match+0xb4>)
 8012f6c:	2288      	movs	r2, #136	; 0x88
 8012f6e:	4925      	ldr	r1, [pc, #148]	; (8013004 <udp_input_local_match+0xc0>)
 8012f70:	4823      	ldr	r0, [pc, #140]	; (8013000 <udp_input_local_match+0xbc>)
 8012f72:	f003 faed 	bl	8016550 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f76:	68fb      	ldr	r3, [r7, #12]
 8012f78:	7a1b      	ldrb	r3, [r3, #8]
 8012f7a:	2b00      	cmp	r3, #0
 8012f7c:	d00b      	beq.n	8012f96 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8012f7e:	68fb      	ldr	r3, [r7, #12]
 8012f80:	7a1a      	ldrb	r2, [r3, #8]
 8012f82:	4b21      	ldr	r3, [pc, #132]	; (8013008 <udp_input_local_match+0xc4>)
 8012f84:	685b      	ldr	r3, [r3, #4]
 8012f86:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012f8a:	3301      	adds	r3, #1
 8012f8c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8012f8e:	429a      	cmp	r2, r3
 8012f90:	d001      	beq.n	8012f96 <udp_input_local_match+0x52>
    return 0;
 8012f92:	2300      	movs	r3, #0
 8012f94:	e02b      	b.n	8012fee <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8012f96:	79fb      	ldrb	r3, [r7, #7]
 8012f98:	2b00      	cmp	r3, #0
 8012f9a:	d018      	beq.n	8012fce <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012f9c:	68fb      	ldr	r3, [r7, #12]
 8012f9e:	2b00      	cmp	r3, #0
 8012fa0:	d013      	beq.n	8012fca <udp_input_local_match+0x86>
 8012fa2:	68fb      	ldr	r3, [r7, #12]
 8012fa4:	681b      	ldr	r3, [r3, #0]
 8012fa6:	2b00      	cmp	r3, #0
 8012fa8:	d00f      	beq.n	8012fca <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012faa:	4b17      	ldr	r3, [pc, #92]	; (8013008 <udp_input_local_match+0xc4>)
 8012fac:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8012fae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012fb2:	d00a      	beq.n	8012fca <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8012fb4:	68fb      	ldr	r3, [r7, #12]
 8012fb6:	681a      	ldr	r2, [r3, #0]
 8012fb8:	4b13      	ldr	r3, [pc, #76]	; (8013008 <udp_input_local_match+0xc4>)
 8012fba:	695b      	ldr	r3, [r3, #20]
 8012fbc:	405a      	eors	r2, r3
 8012fbe:	68bb      	ldr	r3, [r7, #8]
 8012fc0:	3308      	adds	r3, #8
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d110      	bne.n	8012fec <udp_input_local_match+0xa8>
          return 1;
 8012fca:	2301      	movs	r3, #1
 8012fcc:	e00f      	b.n	8012fee <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8012fce:	68fb      	ldr	r3, [r7, #12]
 8012fd0:	2b00      	cmp	r3, #0
 8012fd2:	d009      	beq.n	8012fe8 <udp_input_local_match+0xa4>
 8012fd4:	68fb      	ldr	r3, [r7, #12]
 8012fd6:	681b      	ldr	r3, [r3, #0]
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d005      	beq.n	8012fe8 <udp_input_local_match+0xa4>
 8012fdc:	68fb      	ldr	r3, [r7, #12]
 8012fde:	681a      	ldr	r2, [r3, #0]
 8012fe0:	4b09      	ldr	r3, [pc, #36]	; (8013008 <udp_input_local_match+0xc4>)
 8012fe2:	695b      	ldr	r3, [r3, #20]
 8012fe4:	429a      	cmp	r2, r3
 8012fe6:	d101      	bne.n	8012fec <udp_input_local_match+0xa8>
        return 1;
 8012fe8:	2301      	movs	r3, #1
 8012fea:	e000      	b.n	8012fee <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8012fec:	2300      	movs	r3, #0
}
 8012fee:	4618      	mov	r0, r3
 8012ff0:	3710      	adds	r7, #16
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	bd80      	pop	{r7, pc}
 8012ff6:	bf00      	nop
 8012ff8:	0801a024 	.word	0x0801a024
 8012ffc:	0801a054 	.word	0x0801a054
 8013000:	0801a078 	.word	0x0801a078
 8013004:	0801a0a0 	.word	0x0801a0a0
 8013008:	20009258 	.word	0x20009258

0801300c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 801300c:	b590      	push	{r4, r7, lr}
 801300e:	b08d      	sub	sp, #52	; 0x34
 8013010:	af02      	add	r7, sp, #8
 8013012:	6078      	str	r0, [r7, #4]
 8013014:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013016:	2300      	movs	r3, #0
 8013018:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 801301a:	687b      	ldr	r3, [r7, #4]
 801301c:	2b00      	cmp	r3, #0
 801301e:	d105      	bne.n	801302c <udp_input+0x20>
 8013020:	4b7c      	ldr	r3, [pc, #496]	; (8013214 <udp_input+0x208>)
 8013022:	22cf      	movs	r2, #207	; 0xcf
 8013024:	497c      	ldr	r1, [pc, #496]	; (8013218 <udp_input+0x20c>)
 8013026:	487d      	ldr	r0, [pc, #500]	; (801321c <udp_input+0x210>)
 8013028:	f003 fa92 	bl	8016550 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 801302c:	683b      	ldr	r3, [r7, #0]
 801302e:	2b00      	cmp	r3, #0
 8013030:	d105      	bne.n	801303e <udp_input+0x32>
 8013032:	4b78      	ldr	r3, [pc, #480]	; (8013214 <udp_input+0x208>)
 8013034:	22d0      	movs	r2, #208	; 0xd0
 8013036:	497a      	ldr	r1, [pc, #488]	; (8013220 <udp_input+0x214>)
 8013038:	4878      	ldr	r0, [pc, #480]	; (801321c <udp_input+0x210>)
 801303a:	f003 fa89 	bl	8016550 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	895b      	ldrh	r3, [r3, #10]
 8013042:	2b07      	cmp	r3, #7
 8013044:	d803      	bhi.n	801304e <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013046:	6878      	ldr	r0, [r7, #4]
 8013048:	f7f9 f8e0 	bl	800c20c <pbuf_free>
    goto end;
 801304c:	e0de      	b.n	801320c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	685b      	ldr	r3, [r3, #4]
 8013052:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013054:	4b73      	ldr	r3, [pc, #460]	; (8013224 <udp_input+0x218>)
 8013056:	695b      	ldr	r3, [r3, #20]
 8013058:	4a72      	ldr	r2, [pc, #456]	; (8013224 <udp_input+0x218>)
 801305a:	6812      	ldr	r2, [r2, #0]
 801305c:	4611      	mov	r1, r2
 801305e:	4618      	mov	r0, r3
 8013060:	f001 ff08 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 8013064:	4603      	mov	r3, r0
 8013066:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013068:	697b      	ldr	r3, [r7, #20]
 801306a:	881b      	ldrh	r3, [r3, #0]
 801306c:	b29b      	uxth	r3, r3
 801306e:	4618      	mov	r0, r3
 8013070:	f7f7 f9f2 	bl	800a458 <lwip_htons>
 8013074:	4603      	mov	r3, r0
 8013076:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013078:	697b      	ldr	r3, [r7, #20]
 801307a:	885b      	ldrh	r3, [r3, #2]
 801307c:	b29b      	uxth	r3, r3
 801307e:	4618      	mov	r0, r3
 8013080:	f7f7 f9ea 	bl	800a458 <lwip_htons>
 8013084:	4603      	mov	r3, r0
 8013086:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013088:	2300      	movs	r3, #0
 801308a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 801308c:	2300      	movs	r3, #0
 801308e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013090:	2300      	movs	r3, #0
 8013092:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013094:	4b64      	ldr	r3, [pc, #400]	; (8013228 <udp_input+0x21c>)
 8013096:	681b      	ldr	r3, [r3, #0]
 8013098:	627b      	str	r3, [r7, #36]	; 0x24
 801309a:	e054      	b.n	8013146 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 801309c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309e:	8a5b      	ldrh	r3, [r3, #18]
 80130a0:	89fa      	ldrh	r2, [r7, #14]
 80130a2:	429a      	cmp	r2, r3
 80130a4:	d14a      	bne.n	801313c <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80130a6:	7cfb      	ldrb	r3, [r7, #19]
 80130a8:	461a      	mov	r2, r3
 80130aa:	6839      	ldr	r1, [r7, #0]
 80130ac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80130ae:	f7ff ff49 	bl	8012f44 <udp_input_local_match>
 80130b2:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80130b4:	2b00      	cmp	r3, #0
 80130b6:	d041      	beq.n	801313c <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80130b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130ba:	7c1b      	ldrb	r3, [r3, #16]
 80130bc:	f003 0304 	and.w	r3, r3, #4
 80130c0:	2b00      	cmp	r3, #0
 80130c2:	d11d      	bne.n	8013100 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80130c4:	69fb      	ldr	r3, [r7, #28]
 80130c6:	2b00      	cmp	r3, #0
 80130c8:	d102      	bne.n	80130d0 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80130ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130cc:	61fb      	str	r3, [r7, #28]
 80130ce:	e017      	b.n	8013100 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80130d0:	7cfb      	ldrb	r3, [r7, #19]
 80130d2:	2b00      	cmp	r3, #0
 80130d4:	d014      	beq.n	8013100 <udp_input+0xf4>
 80130d6:	4b53      	ldr	r3, [pc, #332]	; (8013224 <udp_input+0x218>)
 80130d8:	695b      	ldr	r3, [r3, #20]
 80130da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80130de:	d10f      	bne.n	8013100 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80130e0:	69fb      	ldr	r3, [r7, #28]
 80130e2:	681a      	ldr	r2, [r3, #0]
 80130e4:	683b      	ldr	r3, [r7, #0]
 80130e6:	3304      	adds	r3, #4
 80130e8:	681b      	ldr	r3, [r3, #0]
 80130ea:	429a      	cmp	r2, r3
 80130ec:	d008      	beq.n	8013100 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 80130ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130f0:	681a      	ldr	r2, [r3, #0]
 80130f2:	683b      	ldr	r3, [r7, #0]
 80130f4:	3304      	adds	r3, #4
 80130f6:	681b      	ldr	r3, [r3, #0]
 80130f8:	429a      	cmp	r2, r3
 80130fa:	d101      	bne.n	8013100 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 80130fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130fe:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013102:	8a9b      	ldrh	r3, [r3, #20]
 8013104:	8a3a      	ldrh	r2, [r7, #16]
 8013106:	429a      	cmp	r2, r3
 8013108:	d118      	bne.n	801313c <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 801310a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801310c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 801310e:	2b00      	cmp	r3, #0
 8013110:	d005      	beq.n	801311e <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013114:	685a      	ldr	r2, [r3, #4]
 8013116:	4b43      	ldr	r3, [pc, #268]	; (8013224 <udp_input+0x218>)
 8013118:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 801311a:	429a      	cmp	r2, r3
 801311c:	d10e      	bne.n	801313c <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 801311e:	6a3b      	ldr	r3, [r7, #32]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d014      	beq.n	801314e <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013124:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013126:	68da      	ldr	r2, [r3, #12]
 8013128:	6a3b      	ldr	r3, [r7, #32]
 801312a:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 801312c:	4b3e      	ldr	r3, [pc, #248]	; (8013228 <udp_input+0x21c>)
 801312e:	681a      	ldr	r2, [r3, #0]
 8013130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013132:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013134:	4a3c      	ldr	r2, [pc, #240]	; (8013228 <udp_input+0x21c>)
 8013136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013138:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 801313a:	e008      	b.n	801314e <udp_input+0x142>
      }
    }

    prev = pcb;
 801313c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801313e:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013142:	68db      	ldr	r3, [r3, #12]
 8013144:	627b      	str	r3, [r7, #36]	; 0x24
 8013146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013148:	2b00      	cmp	r3, #0
 801314a:	d1a7      	bne.n	801309c <udp_input+0x90>
 801314c:	e000      	b.n	8013150 <udp_input+0x144>
        break;
 801314e:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013152:	2b00      	cmp	r3, #0
 8013154:	d101      	bne.n	801315a <udp_input+0x14e>
    pcb = uncon_pcb;
 8013156:	69fb      	ldr	r3, [r7, #28]
 8013158:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 801315a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801315c:	2b00      	cmp	r3, #0
 801315e:	d002      	beq.n	8013166 <udp_input+0x15a>
    for_us = 1;
 8013160:	2301      	movs	r3, #1
 8013162:	76fb      	strb	r3, [r7, #27]
 8013164:	e00a      	b.n	801317c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013166:	683b      	ldr	r3, [r7, #0]
 8013168:	3304      	adds	r3, #4
 801316a:	681a      	ldr	r2, [r3, #0]
 801316c:	4b2d      	ldr	r3, [pc, #180]	; (8013224 <udp_input+0x218>)
 801316e:	695b      	ldr	r3, [r3, #20]
 8013170:	429a      	cmp	r2, r3
 8013172:	bf0c      	ite	eq
 8013174:	2301      	moveq	r3, #1
 8013176:	2300      	movne	r3, #0
 8013178:	b2db      	uxtb	r3, r3
 801317a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 801317c:	7efb      	ldrb	r3, [r7, #27]
 801317e:	2b00      	cmp	r3, #0
 8013180:	d041      	beq.n	8013206 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013182:	2108      	movs	r1, #8
 8013184:	6878      	ldr	r0, [r7, #4]
 8013186:	f7f8 ffbb 	bl	800c100 <pbuf_remove_header>
 801318a:	4603      	mov	r3, r0
 801318c:	2b00      	cmp	r3, #0
 801318e:	d00a      	beq.n	80131a6 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013190:	4b20      	ldr	r3, [pc, #128]	; (8013214 <udp_input+0x208>)
 8013192:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013196:	4925      	ldr	r1, [pc, #148]	; (801322c <udp_input+0x220>)
 8013198:	4820      	ldr	r0, [pc, #128]	; (801321c <udp_input+0x210>)
 801319a:	f003 f9d9 	bl	8016550 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 801319e:	6878      	ldr	r0, [r7, #4]
 80131a0:	f7f9 f834 	bl	800c20c <pbuf_free>
      goto end;
 80131a4:	e032      	b.n	801320c <udp_input+0x200>
    }

    if (pcb != NULL) {
 80131a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131a8:	2b00      	cmp	r3, #0
 80131aa:	d012      	beq.n	80131d2 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80131ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ae:	699b      	ldr	r3, [r3, #24]
 80131b0:	2b00      	cmp	r3, #0
 80131b2:	d00a      	beq.n	80131ca <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80131b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131b6:	699c      	ldr	r4, [r3, #24]
 80131b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80131ba:	69d8      	ldr	r0, [r3, #28]
 80131bc:	8a3b      	ldrh	r3, [r7, #16]
 80131be:	9300      	str	r3, [sp, #0]
 80131c0:	4b1b      	ldr	r3, [pc, #108]	; (8013230 <udp_input+0x224>)
 80131c2:	687a      	ldr	r2, [r7, #4]
 80131c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80131c6:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80131c8:	e021      	b.n	801320e <udp_input+0x202>
        pbuf_free(p);
 80131ca:	6878      	ldr	r0, [r7, #4]
 80131cc:	f7f9 f81e 	bl	800c20c <pbuf_free>
        goto end;
 80131d0:	e01c      	b.n	801320c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80131d2:	7cfb      	ldrb	r3, [r7, #19]
 80131d4:	2b00      	cmp	r3, #0
 80131d6:	d112      	bne.n	80131fe <udp_input+0x1f2>
 80131d8:	4b12      	ldr	r3, [pc, #72]	; (8013224 <udp_input+0x218>)
 80131da:	695b      	ldr	r3, [r3, #20]
 80131dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80131e0:	2be0      	cmp	r3, #224	; 0xe0
 80131e2:	d00c      	beq.n	80131fe <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80131e4:	4b0f      	ldr	r3, [pc, #60]	; (8013224 <udp_input+0x218>)
 80131e6:	899b      	ldrh	r3, [r3, #12]
 80131e8:	3308      	adds	r3, #8
 80131ea:	b29b      	uxth	r3, r3
 80131ec:	b21b      	sxth	r3, r3
 80131ee:	4619      	mov	r1, r3
 80131f0:	6878      	ldr	r0, [r7, #4]
 80131f2:	f7f8 fff8 	bl	800c1e6 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 80131f6:	2103      	movs	r1, #3
 80131f8:	6878      	ldr	r0, [r7, #4]
 80131fa:	f001 fb1b 	bl	8014834 <icmp_dest_unreach>
      pbuf_free(p);
 80131fe:	6878      	ldr	r0, [r7, #4]
 8013200:	f7f9 f804 	bl	800c20c <pbuf_free>
  return;
 8013204:	e003      	b.n	801320e <udp_input+0x202>
    pbuf_free(p);
 8013206:	6878      	ldr	r0, [r7, #4]
 8013208:	f7f9 f800 	bl	800c20c <pbuf_free>
  return;
 801320c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 801320e:	372c      	adds	r7, #44	; 0x2c
 8013210:	46bd      	mov	sp, r7
 8013212:	bd90      	pop	{r4, r7, pc}
 8013214:	0801a024 	.word	0x0801a024
 8013218:	0801a0c8 	.word	0x0801a0c8
 801321c:	0801a078 	.word	0x0801a078
 8013220:	0801a0e0 	.word	0x0801a0e0
 8013224:	20009258 	.word	0x20009258
 8013228:	2000d194 	.word	0x2000d194
 801322c:	0801a0fc 	.word	0x0801a0fc
 8013230:	20009268 	.word	0x20009268

08013234 <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8013234:	b580      	push	{r7, lr}
 8013236:	b088      	sub	sp, #32
 8013238:	af02      	add	r7, sp, #8
 801323a:	60f8      	str	r0, [r7, #12]
 801323c:	60b9      	str	r1, [r7, #8]
 801323e:	607a      	str	r2, [r7, #4]
 8013240:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	2b00      	cmp	r3, #0
 8013246:	d109      	bne.n	801325c <udp_sendto+0x28>
 8013248:	4b23      	ldr	r3, [pc, #140]	; (80132d8 <udp_sendto+0xa4>)
 801324a:	f44f 7206 	mov.w	r2, #536	; 0x218
 801324e:	4923      	ldr	r1, [pc, #140]	; (80132dc <udp_sendto+0xa8>)
 8013250:	4823      	ldr	r0, [pc, #140]	; (80132e0 <udp_sendto+0xac>)
 8013252:	f003 f97d 	bl	8016550 <iprintf>
 8013256:	f06f 030f 	mvn.w	r3, #15
 801325a:	e038      	b.n	80132ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 801325c:	68bb      	ldr	r3, [r7, #8]
 801325e:	2b00      	cmp	r3, #0
 8013260:	d109      	bne.n	8013276 <udp_sendto+0x42>
 8013262:	4b1d      	ldr	r3, [pc, #116]	; (80132d8 <udp_sendto+0xa4>)
 8013264:	f240 2219 	movw	r2, #537	; 0x219
 8013268:	491e      	ldr	r1, [pc, #120]	; (80132e4 <udp_sendto+0xb0>)
 801326a:	481d      	ldr	r0, [pc, #116]	; (80132e0 <udp_sendto+0xac>)
 801326c:	f003 f970 	bl	8016550 <iprintf>
 8013270:	f06f 030f 	mvn.w	r3, #15
 8013274:	e02b      	b.n	80132ce <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013276:	687b      	ldr	r3, [r7, #4]
 8013278:	2b00      	cmp	r3, #0
 801327a:	d109      	bne.n	8013290 <udp_sendto+0x5c>
 801327c:	4b16      	ldr	r3, [pc, #88]	; (80132d8 <udp_sendto+0xa4>)
 801327e:	f240 221a 	movw	r2, #538	; 0x21a
 8013282:	4919      	ldr	r1, [pc, #100]	; (80132e8 <udp_sendto+0xb4>)
 8013284:	4816      	ldr	r0, [pc, #88]	; (80132e0 <udp_sendto+0xac>)
 8013286:	f003 f963 	bl	8016550 <iprintf>
 801328a:	f06f 030f 	mvn.w	r3, #15
 801328e:	e01e      	b.n	80132ce <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	7a1b      	ldrb	r3, [r3, #8]
 8013294:	2b00      	cmp	r3, #0
 8013296:	d006      	beq.n	80132a6 <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8013298:	68fb      	ldr	r3, [r7, #12]
 801329a:	7a1b      	ldrb	r3, [r3, #8]
 801329c:	4618      	mov	r0, r3
 801329e:	f7f8 fc27 	bl	800baf0 <netif_get_by_index>
 80132a2:	6178      	str	r0, [r7, #20]
 80132a4:	e003      	b.n	80132ae <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80132a6:	6878      	ldr	r0, [r7, #4]
 80132a8:	f001 fb4e 	bl	8014948 <ip4_route>
 80132ac:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80132ae:	697b      	ldr	r3, [r7, #20]
 80132b0:	2b00      	cmp	r3, #0
 80132b2:	d102      	bne.n	80132ba <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80132b4:	f06f 0303 	mvn.w	r3, #3
 80132b8:	e009      	b.n	80132ce <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80132ba:	887a      	ldrh	r2, [r7, #2]
 80132bc:	697b      	ldr	r3, [r7, #20]
 80132be:	9300      	str	r3, [sp, #0]
 80132c0:	4613      	mov	r3, r2
 80132c2:	687a      	ldr	r2, [r7, #4]
 80132c4:	68b9      	ldr	r1, [r7, #8]
 80132c6:	68f8      	ldr	r0, [r7, #12]
 80132c8:	f000 f810 	bl	80132ec <udp_sendto_if>
 80132cc:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80132ce:	4618      	mov	r0, r3
 80132d0:	3718      	adds	r7, #24
 80132d2:	46bd      	mov	sp, r7
 80132d4:	bd80      	pop	{r7, pc}
 80132d6:	bf00      	nop
 80132d8:	0801a024 	.word	0x0801a024
 80132dc:	0801a148 	.word	0x0801a148
 80132e0:	0801a078 	.word	0x0801a078
 80132e4:	0801a160 	.word	0x0801a160
 80132e8:	0801a17c 	.word	0x0801a17c

080132ec <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 80132ec:	b580      	push	{r7, lr}
 80132ee:	b088      	sub	sp, #32
 80132f0:	af02      	add	r7, sp, #8
 80132f2:	60f8      	str	r0, [r7, #12]
 80132f4:	60b9      	str	r1, [r7, #8]
 80132f6:	607a      	str	r2, [r7, #4]
 80132f8:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 80132fa:	68fb      	ldr	r3, [r7, #12]
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d109      	bne.n	8013314 <udp_sendto_if+0x28>
 8013300:	4b2e      	ldr	r3, [pc, #184]	; (80133bc <udp_sendto_if+0xd0>)
 8013302:	f44f 7220 	mov.w	r2, #640	; 0x280
 8013306:	492e      	ldr	r1, [pc, #184]	; (80133c0 <udp_sendto_if+0xd4>)
 8013308:	482e      	ldr	r0, [pc, #184]	; (80133c4 <udp_sendto_if+0xd8>)
 801330a:	f003 f921 	bl	8016550 <iprintf>
 801330e:	f06f 030f 	mvn.w	r3, #15
 8013312:	e04f      	b.n	80133b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8013314:	68bb      	ldr	r3, [r7, #8]
 8013316:	2b00      	cmp	r3, #0
 8013318:	d109      	bne.n	801332e <udp_sendto_if+0x42>
 801331a:	4b28      	ldr	r3, [pc, #160]	; (80133bc <udp_sendto_if+0xd0>)
 801331c:	f240 2281 	movw	r2, #641	; 0x281
 8013320:	4929      	ldr	r1, [pc, #164]	; (80133c8 <udp_sendto_if+0xdc>)
 8013322:	4828      	ldr	r0, [pc, #160]	; (80133c4 <udp_sendto_if+0xd8>)
 8013324:	f003 f914 	bl	8016550 <iprintf>
 8013328:	f06f 030f 	mvn.w	r3, #15
 801332c:	e042      	b.n	80133b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	2b00      	cmp	r3, #0
 8013332:	d109      	bne.n	8013348 <udp_sendto_if+0x5c>
 8013334:	4b21      	ldr	r3, [pc, #132]	; (80133bc <udp_sendto_if+0xd0>)
 8013336:	f240 2282 	movw	r2, #642	; 0x282
 801333a:	4924      	ldr	r1, [pc, #144]	; (80133cc <udp_sendto_if+0xe0>)
 801333c:	4821      	ldr	r0, [pc, #132]	; (80133c4 <udp_sendto_if+0xd8>)
 801333e:	f003 f907 	bl	8016550 <iprintf>
 8013342:	f06f 030f 	mvn.w	r3, #15
 8013346:	e035      	b.n	80133b4 <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8013348:	6a3b      	ldr	r3, [r7, #32]
 801334a:	2b00      	cmp	r3, #0
 801334c:	d109      	bne.n	8013362 <udp_sendto_if+0x76>
 801334e:	4b1b      	ldr	r3, [pc, #108]	; (80133bc <udp_sendto_if+0xd0>)
 8013350:	f240 2283 	movw	r2, #643	; 0x283
 8013354:	491e      	ldr	r1, [pc, #120]	; (80133d0 <udp_sendto_if+0xe4>)
 8013356:	481b      	ldr	r0, [pc, #108]	; (80133c4 <udp_sendto_if+0xd8>)
 8013358:	f003 f8fa 	bl	8016550 <iprintf>
 801335c:	f06f 030f 	mvn.w	r3, #15
 8013360:	e028      	b.n	80133b4 <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013362:	68fb      	ldr	r3, [r7, #12]
 8013364:	2b00      	cmp	r3, #0
 8013366:	d009      	beq.n	801337c <udp_sendto_if+0x90>
 8013368:	68fb      	ldr	r3, [r7, #12]
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	2b00      	cmp	r3, #0
 801336e:	d005      	beq.n	801337c <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	681b      	ldr	r3, [r3, #0]
 8013374:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013378:	2be0      	cmp	r3, #224	; 0xe0
 801337a:	d103      	bne.n	8013384 <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 801337c:	6a3b      	ldr	r3, [r7, #32]
 801337e:	3304      	adds	r3, #4
 8013380:	617b      	str	r3, [r7, #20]
 8013382:	e00b      	b.n	801339c <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8013384:	68fb      	ldr	r3, [r7, #12]
 8013386:	681a      	ldr	r2, [r3, #0]
 8013388:	6a3b      	ldr	r3, [r7, #32]
 801338a:	3304      	adds	r3, #4
 801338c:	681b      	ldr	r3, [r3, #0]
 801338e:	429a      	cmp	r2, r3
 8013390:	d002      	beq.n	8013398 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8013392:	f06f 0303 	mvn.w	r3, #3
 8013396:	e00d      	b.n	80133b4 <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8013398:	68fb      	ldr	r3, [r7, #12]
 801339a:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 801339c:	887a      	ldrh	r2, [r7, #2]
 801339e:	697b      	ldr	r3, [r7, #20]
 80133a0:	9301      	str	r3, [sp, #4]
 80133a2:	6a3b      	ldr	r3, [r7, #32]
 80133a4:	9300      	str	r3, [sp, #0]
 80133a6:	4613      	mov	r3, r2
 80133a8:	687a      	ldr	r2, [r7, #4]
 80133aa:	68b9      	ldr	r1, [r7, #8]
 80133ac:	68f8      	ldr	r0, [r7, #12]
 80133ae:	f000 f811 	bl	80133d4 <udp_sendto_if_src>
 80133b2:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80133b4:	4618      	mov	r0, r3
 80133b6:	3718      	adds	r7, #24
 80133b8:	46bd      	mov	sp, r7
 80133ba:	bd80      	pop	{r7, pc}
 80133bc:	0801a024 	.word	0x0801a024
 80133c0:	0801a198 	.word	0x0801a198
 80133c4:	0801a078 	.word	0x0801a078
 80133c8:	0801a1b4 	.word	0x0801a1b4
 80133cc:	0801a1d0 	.word	0x0801a1d0
 80133d0:	0801a1f0 	.word	0x0801a1f0

080133d4 <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b08c      	sub	sp, #48	; 0x30
 80133d8:	af04      	add	r7, sp, #16
 80133da:	60f8      	str	r0, [r7, #12]
 80133dc:	60b9      	str	r1, [r7, #8]
 80133de:	607a      	str	r2, [r7, #4]
 80133e0:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80133e2:	68fb      	ldr	r3, [r7, #12]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	d109      	bne.n	80133fc <udp_sendto_if_src+0x28>
 80133e8:	4b65      	ldr	r3, [pc, #404]	; (8013580 <udp_sendto_if_src+0x1ac>)
 80133ea:	f240 22d1 	movw	r2, #721	; 0x2d1
 80133ee:	4965      	ldr	r1, [pc, #404]	; (8013584 <udp_sendto_if_src+0x1b0>)
 80133f0:	4865      	ldr	r0, [pc, #404]	; (8013588 <udp_sendto_if_src+0x1b4>)
 80133f2:	f003 f8ad 	bl	8016550 <iprintf>
 80133f6:	f06f 030f 	mvn.w	r3, #15
 80133fa:	e0bc      	b.n	8013576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 80133fc:	68bb      	ldr	r3, [r7, #8]
 80133fe:	2b00      	cmp	r3, #0
 8013400:	d109      	bne.n	8013416 <udp_sendto_if_src+0x42>
 8013402:	4b5f      	ldr	r3, [pc, #380]	; (8013580 <udp_sendto_if_src+0x1ac>)
 8013404:	f240 22d2 	movw	r2, #722	; 0x2d2
 8013408:	4960      	ldr	r1, [pc, #384]	; (801358c <udp_sendto_if_src+0x1b8>)
 801340a:	485f      	ldr	r0, [pc, #380]	; (8013588 <udp_sendto_if_src+0x1b4>)
 801340c:	f003 f8a0 	bl	8016550 <iprintf>
 8013410:	f06f 030f 	mvn.w	r3, #15
 8013414:	e0af      	b.n	8013576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	2b00      	cmp	r3, #0
 801341a:	d109      	bne.n	8013430 <udp_sendto_if_src+0x5c>
 801341c:	4b58      	ldr	r3, [pc, #352]	; (8013580 <udp_sendto_if_src+0x1ac>)
 801341e:	f240 22d3 	movw	r2, #723	; 0x2d3
 8013422:	495b      	ldr	r1, [pc, #364]	; (8013590 <udp_sendto_if_src+0x1bc>)
 8013424:	4858      	ldr	r0, [pc, #352]	; (8013588 <udp_sendto_if_src+0x1b4>)
 8013426:	f003 f893 	bl	8016550 <iprintf>
 801342a:	f06f 030f 	mvn.w	r3, #15
 801342e:	e0a2      	b.n	8013576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8013430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013432:	2b00      	cmp	r3, #0
 8013434:	d109      	bne.n	801344a <udp_sendto_if_src+0x76>
 8013436:	4b52      	ldr	r3, [pc, #328]	; (8013580 <udp_sendto_if_src+0x1ac>)
 8013438:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 801343c:	4955      	ldr	r1, [pc, #340]	; (8013594 <udp_sendto_if_src+0x1c0>)
 801343e:	4852      	ldr	r0, [pc, #328]	; (8013588 <udp_sendto_if_src+0x1b4>)
 8013440:	f003 f886 	bl	8016550 <iprintf>
 8013444:	f06f 030f 	mvn.w	r3, #15
 8013448:	e095      	b.n	8013576 <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 801344a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801344c:	2b00      	cmp	r3, #0
 801344e:	d109      	bne.n	8013464 <udp_sendto_if_src+0x90>
 8013450:	4b4b      	ldr	r3, [pc, #300]	; (8013580 <udp_sendto_if_src+0x1ac>)
 8013452:	f240 22d5 	movw	r2, #725	; 0x2d5
 8013456:	4950      	ldr	r1, [pc, #320]	; (8013598 <udp_sendto_if_src+0x1c4>)
 8013458:	484b      	ldr	r0, [pc, #300]	; (8013588 <udp_sendto_if_src+0x1b4>)
 801345a:	f003 f879 	bl	8016550 <iprintf>
 801345e:	f06f 030f 	mvn.w	r3, #15
 8013462:	e088      	b.n	8013576 <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8013464:	68fb      	ldr	r3, [r7, #12]
 8013466:	8a5b      	ldrh	r3, [r3, #18]
 8013468:	2b00      	cmp	r3, #0
 801346a:	d10f      	bne.n	801348c <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801346c:	68f9      	ldr	r1, [r7, #12]
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	8a5b      	ldrh	r3, [r3, #18]
 8013472:	461a      	mov	r2, r3
 8013474:	68f8      	ldr	r0, [r7, #12]
 8013476:	f000 f893 	bl	80135a0 <udp_bind>
 801347a:	4603      	mov	r3, r0
 801347c:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 801347e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8013482:	2b00      	cmp	r3, #0
 8013484:	d002      	beq.n	801348c <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8013486:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801348a:	e074      	b.n	8013576 <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 801348c:	68bb      	ldr	r3, [r7, #8]
 801348e:	891b      	ldrh	r3, [r3, #8]
 8013490:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8013494:	4293      	cmp	r3, r2
 8013496:	d902      	bls.n	801349e <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8013498:	f04f 33ff 	mov.w	r3, #4294967295
 801349c:	e06b      	b.n	8013576 <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 801349e:	2108      	movs	r1, #8
 80134a0:	68b8      	ldr	r0, [r7, #8]
 80134a2:	f7f8 fe1d 	bl	800c0e0 <pbuf_add_header>
 80134a6:	4603      	mov	r3, r0
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	d015      	beq.n	80134d8 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80134ac:	f44f 7220 	mov.w	r2, #640	; 0x280
 80134b0:	2108      	movs	r1, #8
 80134b2:	2022      	movs	r0, #34	; 0x22
 80134b4:	f7f8 fbc6 	bl	800bc44 <pbuf_alloc>
 80134b8:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80134ba:	69fb      	ldr	r3, [r7, #28]
 80134bc:	2b00      	cmp	r3, #0
 80134be:	d102      	bne.n	80134c6 <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80134c0:	f04f 33ff 	mov.w	r3, #4294967295
 80134c4:	e057      	b.n	8013576 <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80134c6:	68bb      	ldr	r3, [r7, #8]
 80134c8:	891b      	ldrh	r3, [r3, #8]
 80134ca:	2b00      	cmp	r3, #0
 80134cc:	d006      	beq.n	80134dc <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80134ce:	68b9      	ldr	r1, [r7, #8]
 80134d0:	69f8      	ldr	r0, [r7, #28]
 80134d2:	f7f8 ffbf 	bl	800c454 <pbuf_chain>
 80134d6:	e001      	b.n	80134dc <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80134d8:	68bb      	ldr	r3, [r7, #8]
 80134da:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80134dc:	69fb      	ldr	r3, [r7, #28]
 80134de:	895b      	ldrh	r3, [r3, #10]
 80134e0:	2b07      	cmp	r3, #7
 80134e2:	d806      	bhi.n	80134f2 <udp_sendto_if_src+0x11e>
 80134e4:	4b26      	ldr	r3, [pc, #152]	; (8013580 <udp_sendto_if_src+0x1ac>)
 80134e6:	f240 320d 	movw	r2, #781	; 0x30d
 80134ea:	492c      	ldr	r1, [pc, #176]	; (801359c <udp_sendto_if_src+0x1c8>)
 80134ec:	4826      	ldr	r0, [pc, #152]	; (8013588 <udp_sendto_if_src+0x1b4>)
 80134ee:	f003 f82f 	bl	8016550 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 80134f2:	69fb      	ldr	r3, [r7, #28]
 80134f4:	685b      	ldr	r3, [r3, #4]
 80134f6:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 80134f8:	68fb      	ldr	r3, [r7, #12]
 80134fa:	8a5b      	ldrh	r3, [r3, #18]
 80134fc:	4618      	mov	r0, r3
 80134fe:	f7f6 ffab 	bl	800a458 <lwip_htons>
 8013502:	4603      	mov	r3, r0
 8013504:	461a      	mov	r2, r3
 8013506:	697b      	ldr	r3, [r7, #20]
 8013508:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 801350a:	887b      	ldrh	r3, [r7, #2]
 801350c:	4618      	mov	r0, r3
 801350e:	f7f6 ffa3 	bl	800a458 <lwip_htons>
 8013512:	4603      	mov	r3, r0
 8013514:	461a      	mov	r2, r3
 8013516:	697b      	ldr	r3, [r7, #20]
 8013518:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 801351a:	697b      	ldr	r3, [r7, #20]
 801351c:	2200      	movs	r2, #0
 801351e:	719a      	strb	r2, [r3, #6]
 8013520:	2200      	movs	r2, #0
 8013522:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8013524:	69fb      	ldr	r3, [r7, #28]
 8013526:	891b      	ldrh	r3, [r3, #8]
 8013528:	4618      	mov	r0, r3
 801352a:	f7f6 ff95 	bl	800a458 <lwip_htons>
 801352e:	4603      	mov	r3, r0
 8013530:	461a      	mov	r2, r3
 8013532:	697b      	ldr	r3, [r7, #20]
 8013534:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8013536:	2311      	movs	r3, #17
 8013538:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 801353a:	68fb      	ldr	r3, [r7, #12]
 801353c:	7adb      	ldrb	r3, [r3, #11]
 801353e:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8013540:	68fb      	ldr	r3, [r7, #12]
 8013542:	7a9b      	ldrb	r3, [r3, #10]
 8013544:	7cb9      	ldrb	r1, [r7, #18]
 8013546:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013548:	9202      	str	r2, [sp, #8]
 801354a:	7cfa      	ldrb	r2, [r7, #19]
 801354c:	9201      	str	r2, [sp, #4]
 801354e:	9300      	str	r3, [sp, #0]
 8013550:	460b      	mov	r3, r1
 8013552:	687a      	ldr	r2, [r7, #4]
 8013554:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013556:	69f8      	ldr	r0, [r7, #28]
 8013558:	f001 fbde 	bl	8014d18 <ip4_output_if_src>
 801355c:	4603      	mov	r3, r0
 801355e:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8013560:	69fa      	ldr	r2, [r7, #28]
 8013562:	68bb      	ldr	r3, [r7, #8]
 8013564:	429a      	cmp	r2, r3
 8013566:	d004      	beq.n	8013572 <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8013568:	69f8      	ldr	r0, [r7, #28]
 801356a:	f7f8 fe4f 	bl	800c20c <pbuf_free>
    q = NULL;
 801356e:	2300      	movs	r3, #0
 8013570:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8013572:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8013576:	4618      	mov	r0, r3
 8013578:	3720      	adds	r7, #32
 801357a:	46bd      	mov	sp, r7
 801357c:	bd80      	pop	{r7, pc}
 801357e:	bf00      	nop
 8013580:	0801a024 	.word	0x0801a024
 8013584:	0801a210 	.word	0x0801a210
 8013588:	0801a078 	.word	0x0801a078
 801358c:	0801a230 	.word	0x0801a230
 8013590:	0801a250 	.word	0x0801a250
 8013594:	0801a274 	.word	0x0801a274
 8013598:	0801a298 	.word	0x0801a298
 801359c:	0801a2bc 	.word	0x0801a2bc

080135a0 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80135a0:	b580      	push	{r7, lr}
 80135a2:	b086      	sub	sp, #24
 80135a4:	af00      	add	r7, sp, #0
 80135a6:	60f8      	str	r0, [r7, #12]
 80135a8:	60b9      	str	r1, [r7, #8]
 80135aa:	4613      	mov	r3, r2
 80135ac:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80135ae:	68bb      	ldr	r3, [r7, #8]
 80135b0:	2b00      	cmp	r3, #0
 80135b2:	d101      	bne.n	80135b8 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80135b4:	4b39      	ldr	r3, [pc, #228]	; (801369c <udp_bind+0xfc>)
 80135b6:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80135b8:	68fb      	ldr	r3, [r7, #12]
 80135ba:	2b00      	cmp	r3, #0
 80135bc:	d109      	bne.n	80135d2 <udp_bind+0x32>
 80135be:	4b38      	ldr	r3, [pc, #224]	; (80136a0 <udp_bind+0x100>)
 80135c0:	f240 32b7 	movw	r2, #951	; 0x3b7
 80135c4:	4937      	ldr	r1, [pc, #220]	; (80136a4 <udp_bind+0x104>)
 80135c6:	4838      	ldr	r0, [pc, #224]	; (80136a8 <udp_bind+0x108>)
 80135c8:	f002 ffc2 	bl	8016550 <iprintf>
 80135cc:	f06f 030f 	mvn.w	r3, #15
 80135d0:	e060      	b.n	8013694 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80135d2:	2300      	movs	r3, #0
 80135d4:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135d6:	4b35      	ldr	r3, [pc, #212]	; (80136ac <udp_bind+0x10c>)
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	617b      	str	r3, [r7, #20]
 80135dc:	e009      	b.n	80135f2 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80135de:	68fa      	ldr	r2, [r7, #12]
 80135e0:	697b      	ldr	r3, [r7, #20]
 80135e2:	429a      	cmp	r2, r3
 80135e4:	d102      	bne.n	80135ec <udp_bind+0x4c>
      rebind = 1;
 80135e6:	2301      	movs	r3, #1
 80135e8:	74fb      	strb	r3, [r7, #19]
      break;
 80135ea:	e005      	b.n	80135f8 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	68db      	ldr	r3, [r3, #12]
 80135f0:	617b      	str	r3, [r7, #20]
 80135f2:	697b      	ldr	r3, [r7, #20]
 80135f4:	2b00      	cmp	r3, #0
 80135f6:	d1f2      	bne.n	80135de <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 80135f8:	88fb      	ldrh	r3, [r7, #6]
 80135fa:	2b00      	cmp	r3, #0
 80135fc:	d109      	bne.n	8013612 <udp_bind+0x72>
    port = udp_new_port();
 80135fe:	f7ff fc69 	bl	8012ed4 <udp_new_port>
 8013602:	4603      	mov	r3, r0
 8013604:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8013606:	88fb      	ldrh	r3, [r7, #6]
 8013608:	2b00      	cmp	r3, #0
 801360a:	d12c      	bne.n	8013666 <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 801360c:	f06f 0307 	mvn.w	r3, #7
 8013610:	e040      	b.n	8013694 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013612:	4b26      	ldr	r3, [pc, #152]	; (80136ac <udp_bind+0x10c>)
 8013614:	681b      	ldr	r3, [r3, #0]
 8013616:	617b      	str	r3, [r7, #20]
 8013618:	e022      	b.n	8013660 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801361a:	68fa      	ldr	r2, [r7, #12]
 801361c:	697b      	ldr	r3, [r7, #20]
 801361e:	429a      	cmp	r2, r3
 8013620:	d01b      	beq.n	801365a <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8013622:	697b      	ldr	r3, [r7, #20]
 8013624:	8a5b      	ldrh	r3, [r3, #18]
 8013626:	88fa      	ldrh	r2, [r7, #6]
 8013628:	429a      	cmp	r2, r3
 801362a:	d116      	bne.n	801365a <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801362c:	697b      	ldr	r3, [r7, #20]
 801362e:	681a      	ldr	r2, [r3, #0]
 8013630:	68bb      	ldr	r3, [r7, #8]
 8013632:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8013634:	429a      	cmp	r2, r3
 8013636:	d00d      	beq.n	8013654 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013638:	68bb      	ldr	r3, [r7, #8]
 801363a:	2b00      	cmp	r3, #0
 801363c:	d00a      	beq.n	8013654 <udp_bind+0xb4>
 801363e:	68bb      	ldr	r3, [r7, #8]
 8013640:	681b      	ldr	r3, [r3, #0]
 8013642:	2b00      	cmp	r3, #0
 8013644:	d006      	beq.n	8013654 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8013646:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8013648:	2b00      	cmp	r3, #0
 801364a:	d003      	beq.n	8013654 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801364c:	697b      	ldr	r3, [r7, #20]
 801364e:	681b      	ldr	r3, [r3, #0]
 8013650:	2b00      	cmp	r3, #0
 8013652:	d102      	bne.n	801365a <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8013654:	f06f 0307 	mvn.w	r3, #7
 8013658:	e01c      	b.n	8013694 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801365a:	697b      	ldr	r3, [r7, #20]
 801365c:	68db      	ldr	r3, [r3, #12]
 801365e:	617b      	str	r3, [r7, #20]
 8013660:	697b      	ldr	r3, [r7, #20]
 8013662:	2b00      	cmp	r3, #0
 8013664:	d1d9      	bne.n	801361a <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8013666:	68bb      	ldr	r3, [r7, #8]
 8013668:	2b00      	cmp	r3, #0
 801366a:	d002      	beq.n	8013672 <udp_bind+0xd2>
 801366c:	68bb      	ldr	r3, [r7, #8]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	e000      	b.n	8013674 <udp_bind+0xd4>
 8013672:	2300      	movs	r3, #0
 8013674:	68fa      	ldr	r2, [r7, #12]
 8013676:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8013678:	68fb      	ldr	r3, [r7, #12]
 801367a:	88fa      	ldrh	r2, [r7, #6]
 801367c:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 801367e:	7cfb      	ldrb	r3, [r7, #19]
 8013680:	2b00      	cmp	r3, #0
 8013682:	d106      	bne.n	8013692 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8013684:	4b09      	ldr	r3, [pc, #36]	; (80136ac <udp_bind+0x10c>)
 8013686:	681a      	ldr	r2, [r3, #0]
 8013688:	68fb      	ldr	r3, [r7, #12]
 801368a:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 801368c:	4a07      	ldr	r2, [pc, #28]	; (80136ac <udp_bind+0x10c>)
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8013692:	2300      	movs	r3, #0
}
 8013694:	4618      	mov	r0, r3
 8013696:	3718      	adds	r7, #24
 8013698:	46bd      	mov	sp, r7
 801369a:	bd80      	pop	{r7, pc}
 801369c:	0801ac24 	.word	0x0801ac24
 80136a0:	0801a024 	.word	0x0801a024
 80136a4:	0801a2ec 	.word	0x0801a2ec
 80136a8:	0801a078 	.word	0x0801a078
 80136ac:	2000d194 	.word	0x2000d194

080136b0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80136b8:	687b      	ldr	r3, [r7, #4]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d107      	bne.n	80136ce <udp_remove+0x1e>
 80136be:	4b19      	ldr	r3, [pc, #100]	; (8013724 <udp_remove+0x74>)
 80136c0:	f240 42a1 	movw	r2, #1185	; 0x4a1
 80136c4:	4918      	ldr	r1, [pc, #96]	; (8013728 <udp_remove+0x78>)
 80136c6:	4819      	ldr	r0, [pc, #100]	; (801372c <udp_remove+0x7c>)
 80136c8:	f002 ff42 	bl	8016550 <iprintf>
 80136cc:	e026      	b.n	801371c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 80136ce:	4b18      	ldr	r3, [pc, #96]	; (8013730 <udp_remove+0x80>)
 80136d0:	681b      	ldr	r3, [r3, #0]
 80136d2:	687a      	ldr	r2, [r7, #4]
 80136d4:	429a      	cmp	r2, r3
 80136d6:	d105      	bne.n	80136e4 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 80136d8:	4b15      	ldr	r3, [pc, #84]	; (8013730 <udp_remove+0x80>)
 80136da:	681b      	ldr	r3, [r3, #0]
 80136dc:	68db      	ldr	r3, [r3, #12]
 80136de:	4a14      	ldr	r2, [pc, #80]	; (8013730 <udp_remove+0x80>)
 80136e0:	6013      	str	r3, [r2, #0]
 80136e2:	e017      	b.n	8013714 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 80136e4:	4b12      	ldr	r3, [pc, #72]	; (8013730 <udp_remove+0x80>)
 80136e6:	681b      	ldr	r3, [r3, #0]
 80136e8:	60fb      	str	r3, [r7, #12]
 80136ea:	e010      	b.n	801370e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 80136ec:	68fb      	ldr	r3, [r7, #12]
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d009      	beq.n	8013708 <udp_remove+0x58>
 80136f4:	68fb      	ldr	r3, [r7, #12]
 80136f6:	68db      	ldr	r3, [r3, #12]
 80136f8:	687a      	ldr	r2, [r7, #4]
 80136fa:	429a      	cmp	r2, r3
 80136fc:	d104      	bne.n	8013708 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	68da      	ldr	r2, [r3, #12]
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	60da      	str	r2, [r3, #12]
        break;
 8013706:	e005      	b.n	8013714 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8013708:	68fb      	ldr	r3, [r7, #12]
 801370a:	68db      	ldr	r3, [r3, #12]
 801370c:	60fb      	str	r3, [r7, #12]
 801370e:	68fb      	ldr	r3, [r7, #12]
 8013710:	2b00      	cmp	r3, #0
 8013712:	d1eb      	bne.n	80136ec <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8013714:	6879      	ldr	r1, [r7, #4]
 8013716:	2000      	movs	r0, #0
 8013718:	f7f7 fede 	bl	800b4d8 <memp_free>
}
 801371c:	3710      	adds	r7, #16
 801371e:	46bd      	mov	sp, r7
 8013720:	bd80      	pop	{r7, pc}
 8013722:	bf00      	nop
 8013724:	0801a024 	.word	0x0801a024
 8013728:	0801a370 	.word	0x0801a370
 801372c:	0801a078 	.word	0x0801a078
 8013730:	2000d194 	.word	0x2000d194

08013734 <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013734:	b480      	push	{r7}
 8013736:	b085      	sub	sp, #20
 8013738:	af00      	add	r7, sp, #0
 801373a:	6078      	str	r0, [r7, #4]
 801373c:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	2b00      	cmp	r3, #0
 8013742:	d01e      	beq.n	8013782 <udp_netif_ip_addr_changed+0x4e>
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	2b00      	cmp	r3, #0
 801374a:	d01a      	beq.n	8013782 <udp_netif_ip_addr_changed+0x4e>
 801374c:	683b      	ldr	r3, [r7, #0]
 801374e:	2b00      	cmp	r3, #0
 8013750:	d017      	beq.n	8013782 <udp_netif_ip_addr_changed+0x4e>
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	681b      	ldr	r3, [r3, #0]
 8013756:	2b00      	cmp	r3, #0
 8013758:	d013      	beq.n	8013782 <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801375a:	4b0d      	ldr	r3, [pc, #52]	; (8013790 <udp_netif_ip_addr_changed+0x5c>)
 801375c:	681b      	ldr	r3, [r3, #0]
 801375e:	60fb      	str	r3, [r7, #12]
 8013760:	e00c      	b.n	801377c <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 8013762:	68fb      	ldr	r3, [r7, #12]
 8013764:	681a      	ldr	r2, [r3, #0]
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	681b      	ldr	r3, [r3, #0]
 801376a:	429a      	cmp	r2, r3
 801376c:	d103      	bne.n	8013776 <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	681a      	ldr	r2, [r3, #0]
 8013772:	68fb      	ldr	r3, [r7, #12]
 8013774:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 8013776:	68fb      	ldr	r3, [r7, #12]
 8013778:	68db      	ldr	r3, [r3, #12]
 801377a:	60fb      	str	r3, [r7, #12]
 801377c:	68fb      	ldr	r3, [r7, #12]
 801377e:	2b00      	cmp	r3, #0
 8013780:	d1ef      	bne.n	8013762 <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 8013782:	bf00      	nop
 8013784:	3714      	adds	r7, #20
 8013786:	46bd      	mov	sp, r7
 8013788:	f85d 7b04 	ldr.w	r7, [sp], #4
 801378c:	4770      	bx	lr
 801378e:	bf00      	nop
 8013790:	2000d194 	.word	0x2000d194

08013794 <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 8013794:	b580      	push	{r7, lr}
 8013796:	b082      	sub	sp, #8
 8013798:	af00      	add	r7, sp, #0
 801379a:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801379c:	4915      	ldr	r1, [pc, #84]	; (80137f4 <etharp_free_entry+0x60>)
 801379e:	687a      	ldr	r2, [r7, #4]
 80137a0:	4613      	mov	r3, r2
 80137a2:	005b      	lsls	r3, r3, #1
 80137a4:	4413      	add	r3, r2
 80137a6:	00db      	lsls	r3, r3, #3
 80137a8:	440b      	add	r3, r1
 80137aa:	681b      	ldr	r3, [r3, #0]
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d013      	beq.n	80137d8 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 80137b0:	4910      	ldr	r1, [pc, #64]	; (80137f4 <etharp_free_entry+0x60>)
 80137b2:	687a      	ldr	r2, [r7, #4]
 80137b4:	4613      	mov	r3, r2
 80137b6:	005b      	lsls	r3, r3, #1
 80137b8:	4413      	add	r3, r2
 80137ba:	00db      	lsls	r3, r3, #3
 80137bc:	440b      	add	r3, r1
 80137be:	681b      	ldr	r3, [r3, #0]
 80137c0:	4618      	mov	r0, r3
 80137c2:	f7f8 fd23 	bl	800c20c <pbuf_free>
    arp_table[i].q = NULL;
 80137c6:	490b      	ldr	r1, [pc, #44]	; (80137f4 <etharp_free_entry+0x60>)
 80137c8:	687a      	ldr	r2, [r7, #4]
 80137ca:	4613      	mov	r3, r2
 80137cc:	005b      	lsls	r3, r3, #1
 80137ce:	4413      	add	r3, r2
 80137d0:	00db      	lsls	r3, r3, #3
 80137d2:	440b      	add	r3, r1
 80137d4:	2200      	movs	r2, #0
 80137d6:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 80137d8:	4906      	ldr	r1, [pc, #24]	; (80137f4 <etharp_free_entry+0x60>)
 80137da:	687a      	ldr	r2, [r7, #4]
 80137dc:	4613      	mov	r3, r2
 80137de:	005b      	lsls	r3, r3, #1
 80137e0:	4413      	add	r3, r2
 80137e2:	00db      	lsls	r3, r3, #3
 80137e4:	440b      	add	r3, r1
 80137e6:	3314      	adds	r3, #20
 80137e8:	2200      	movs	r2, #0
 80137ea:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 80137ec:	bf00      	nop
 80137ee:	3708      	adds	r7, #8
 80137f0:	46bd      	mov	sp, r7
 80137f2:	bd80      	pop	{r7, pc}
 80137f4:	2000d198 	.word	0x2000d198

080137f8 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 80137f8:	b580      	push	{r7, lr}
 80137fa:	b082      	sub	sp, #8
 80137fc:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80137fe:	2300      	movs	r3, #0
 8013800:	607b      	str	r3, [r7, #4]
 8013802:	e096      	b.n	8013932 <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 8013804:	494f      	ldr	r1, [pc, #316]	; (8013944 <etharp_tmr+0x14c>)
 8013806:	687a      	ldr	r2, [r7, #4]
 8013808:	4613      	mov	r3, r2
 801380a:	005b      	lsls	r3, r3, #1
 801380c:	4413      	add	r3, r2
 801380e:	00db      	lsls	r3, r3, #3
 8013810:	440b      	add	r3, r1
 8013812:	3314      	adds	r3, #20
 8013814:	781b      	ldrb	r3, [r3, #0]
 8013816:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 8013818:	78fb      	ldrb	r3, [r7, #3]
 801381a:	2b00      	cmp	r3, #0
 801381c:	f000 8086 	beq.w	801392c <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 8013820:	4948      	ldr	r1, [pc, #288]	; (8013944 <etharp_tmr+0x14c>)
 8013822:	687a      	ldr	r2, [r7, #4]
 8013824:	4613      	mov	r3, r2
 8013826:	005b      	lsls	r3, r3, #1
 8013828:	4413      	add	r3, r2
 801382a:	00db      	lsls	r3, r3, #3
 801382c:	440b      	add	r3, r1
 801382e:	3312      	adds	r3, #18
 8013830:	881b      	ldrh	r3, [r3, #0]
 8013832:	3301      	adds	r3, #1
 8013834:	b298      	uxth	r0, r3
 8013836:	4943      	ldr	r1, [pc, #268]	; (8013944 <etharp_tmr+0x14c>)
 8013838:	687a      	ldr	r2, [r7, #4]
 801383a:	4613      	mov	r3, r2
 801383c:	005b      	lsls	r3, r3, #1
 801383e:	4413      	add	r3, r2
 8013840:	00db      	lsls	r3, r3, #3
 8013842:	440b      	add	r3, r1
 8013844:	3312      	adds	r3, #18
 8013846:	4602      	mov	r2, r0
 8013848:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801384a:	493e      	ldr	r1, [pc, #248]	; (8013944 <etharp_tmr+0x14c>)
 801384c:	687a      	ldr	r2, [r7, #4]
 801384e:	4613      	mov	r3, r2
 8013850:	005b      	lsls	r3, r3, #1
 8013852:	4413      	add	r3, r2
 8013854:	00db      	lsls	r3, r3, #3
 8013856:	440b      	add	r3, r1
 8013858:	3312      	adds	r3, #18
 801385a:	881b      	ldrh	r3, [r3, #0]
 801385c:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8013860:	d215      	bcs.n	801388e <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8013862:	4938      	ldr	r1, [pc, #224]	; (8013944 <etharp_tmr+0x14c>)
 8013864:	687a      	ldr	r2, [r7, #4]
 8013866:	4613      	mov	r3, r2
 8013868:	005b      	lsls	r3, r3, #1
 801386a:	4413      	add	r3, r2
 801386c:	00db      	lsls	r3, r3, #3
 801386e:	440b      	add	r3, r1
 8013870:	3314      	adds	r3, #20
 8013872:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 8013874:	2b01      	cmp	r3, #1
 8013876:	d10e      	bne.n	8013896 <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8013878:	4932      	ldr	r1, [pc, #200]	; (8013944 <etharp_tmr+0x14c>)
 801387a:	687a      	ldr	r2, [r7, #4]
 801387c:	4613      	mov	r3, r2
 801387e:	005b      	lsls	r3, r3, #1
 8013880:	4413      	add	r3, r2
 8013882:	00db      	lsls	r3, r3, #3
 8013884:	440b      	add	r3, r1
 8013886:	3312      	adds	r3, #18
 8013888:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801388a:	2b04      	cmp	r3, #4
 801388c:	d903      	bls.n	8013896 <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801388e:	6878      	ldr	r0, [r7, #4]
 8013890:	f7ff ff80 	bl	8013794 <etharp_free_entry>
 8013894:	e04a      	b.n	801392c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8013896:	492b      	ldr	r1, [pc, #172]	; (8013944 <etharp_tmr+0x14c>)
 8013898:	687a      	ldr	r2, [r7, #4]
 801389a:	4613      	mov	r3, r2
 801389c:	005b      	lsls	r3, r3, #1
 801389e:	4413      	add	r3, r2
 80138a0:	00db      	lsls	r3, r3, #3
 80138a2:	440b      	add	r3, r1
 80138a4:	3314      	adds	r3, #20
 80138a6:	781b      	ldrb	r3, [r3, #0]
 80138a8:	2b03      	cmp	r3, #3
 80138aa:	d10a      	bne.n	80138c2 <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 80138ac:	4925      	ldr	r1, [pc, #148]	; (8013944 <etharp_tmr+0x14c>)
 80138ae:	687a      	ldr	r2, [r7, #4]
 80138b0:	4613      	mov	r3, r2
 80138b2:	005b      	lsls	r3, r3, #1
 80138b4:	4413      	add	r3, r2
 80138b6:	00db      	lsls	r3, r3, #3
 80138b8:	440b      	add	r3, r1
 80138ba:	3314      	adds	r3, #20
 80138bc:	2204      	movs	r2, #4
 80138be:	701a      	strb	r2, [r3, #0]
 80138c0:	e034      	b.n	801392c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 80138c2:	4920      	ldr	r1, [pc, #128]	; (8013944 <etharp_tmr+0x14c>)
 80138c4:	687a      	ldr	r2, [r7, #4]
 80138c6:	4613      	mov	r3, r2
 80138c8:	005b      	lsls	r3, r3, #1
 80138ca:	4413      	add	r3, r2
 80138cc:	00db      	lsls	r3, r3, #3
 80138ce:	440b      	add	r3, r1
 80138d0:	3314      	adds	r3, #20
 80138d2:	781b      	ldrb	r3, [r3, #0]
 80138d4:	2b04      	cmp	r3, #4
 80138d6:	d10a      	bne.n	80138ee <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 80138d8:	491a      	ldr	r1, [pc, #104]	; (8013944 <etharp_tmr+0x14c>)
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	4613      	mov	r3, r2
 80138de:	005b      	lsls	r3, r3, #1
 80138e0:	4413      	add	r3, r2
 80138e2:	00db      	lsls	r3, r3, #3
 80138e4:	440b      	add	r3, r1
 80138e6:	3314      	adds	r3, #20
 80138e8:	2202      	movs	r2, #2
 80138ea:	701a      	strb	r2, [r3, #0]
 80138ec:	e01e      	b.n	801392c <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80138ee:	4915      	ldr	r1, [pc, #84]	; (8013944 <etharp_tmr+0x14c>)
 80138f0:	687a      	ldr	r2, [r7, #4]
 80138f2:	4613      	mov	r3, r2
 80138f4:	005b      	lsls	r3, r3, #1
 80138f6:	4413      	add	r3, r2
 80138f8:	00db      	lsls	r3, r3, #3
 80138fa:	440b      	add	r3, r1
 80138fc:	3314      	adds	r3, #20
 80138fe:	781b      	ldrb	r3, [r3, #0]
 8013900:	2b01      	cmp	r3, #1
 8013902:	d113      	bne.n	801392c <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8013904:	490f      	ldr	r1, [pc, #60]	; (8013944 <etharp_tmr+0x14c>)
 8013906:	687a      	ldr	r2, [r7, #4]
 8013908:	4613      	mov	r3, r2
 801390a:	005b      	lsls	r3, r3, #1
 801390c:	4413      	add	r3, r2
 801390e:	00db      	lsls	r3, r3, #3
 8013910:	440b      	add	r3, r1
 8013912:	3308      	adds	r3, #8
 8013914:	6818      	ldr	r0, [r3, #0]
 8013916:	687a      	ldr	r2, [r7, #4]
 8013918:	4613      	mov	r3, r2
 801391a:	005b      	lsls	r3, r3, #1
 801391c:	4413      	add	r3, r2
 801391e:	00db      	lsls	r3, r3, #3
 8013920:	4a08      	ldr	r2, [pc, #32]	; (8013944 <etharp_tmr+0x14c>)
 8013922:	4413      	add	r3, r2
 8013924:	3304      	adds	r3, #4
 8013926:	4619      	mov	r1, r3
 8013928:	f000 fe6e 	bl	8014608 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801392c:	687b      	ldr	r3, [r7, #4]
 801392e:	3301      	adds	r3, #1
 8013930:	607b      	str	r3, [r7, #4]
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	2b09      	cmp	r3, #9
 8013936:	f77f af65 	ble.w	8013804 <etharp_tmr+0xc>
      }
    }
  }
}
 801393a:	bf00      	nop
 801393c:	bf00      	nop
 801393e:	3708      	adds	r7, #8
 8013940:	46bd      	mov	sp, r7
 8013942:	bd80      	pop	{r7, pc}
 8013944:	2000d198 	.word	0x2000d198

08013948 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8013948:	b580      	push	{r7, lr}
 801394a:	b08a      	sub	sp, #40	; 0x28
 801394c:	af00      	add	r7, sp, #0
 801394e:	60f8      	str	r0, [r7, #12]
 8013950:	460b      	mov	r3, r1
 8013952:	607a      	str	r2, [r7, #4]
 8013954:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8013956:	230a      	movs	r3, #10
 8013958:	84fb      	strh	r3, [r7, #38]	; 0x26
 801395a:	230a      	movs	r3, #10
 801395c:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801395e:	230a      	movs	r3, #10
 8013960:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8013962:	2300      	movs	r3, #0
 8013964:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8013966:	230a      	movs	r3, #10
 8013968:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801396a:	2300      	movs	r3, #0
 801396c:	83bb      	strh	r3, [r7, #28]
 801396e:	2300      	movs	r3, #0
 8013970:	837b      	strh	r3, [r7, #26]
 8013972:	2300      	movs	r3, #0
 8013974:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013976:	2300      	movs	r3, #0
 8013978:	843b      	strh	r3, [r7, #32]
 801397a:	e0ae      	b.n	8013ada <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801397c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013980:	49a6      	ldr	r1, [pc, #664]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013982:	4613      	mov	r3, r2
 8013984:	005b      	lsls	r3, r3, #1
 8013986:	4413      	add	r3, r2
 8013988:	00db      	lsls	r3, r3, #3
 801398a:	440b      	add	r3, r1
 801398c:	3314      	adds	r3, #20
 801398e:	781b      	ldrb	r3, [r3, #0]
 8013990:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8013992:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013996:	2b0a      	cmp	r3, #10
 8013998:	d105      	bne.n	80139a6 <etharp_find_entry+0x5e>
 801399a:	7dfb      	ldrb	r3, [r7, #23]
 801399c:	2b00      	cmp	r3, #0
 801399e:	d102      	bne.n	80139a6 <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 80139a0:	8c3b      	ldrh	r3, [r7, #32]
 80139a2:	847b      	strh	r3, [r7, #34]	; 0x22
 80139a4:	e095      	b.n	8013ad2 <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 80139a6:	7dfb      	ldrb	r3, [r7, #23]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	f000 8092 	beq.w	8013ad2 <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 80139ae:	7dfb      	ldrb	r3, [r7, #23]
 80139b0:	2b01      	cmp	r3, #1
 80139b2:	d009      	beq.n	80139c8 <etharp_find_entry+0x80>
 80139b4:	7dfb      	ldrb	r3, [r7, #23]
 80139b6:	2b01      	cmp	r3, #1
 80139b8:	d806      	bhi.n	80139c8 <etharp_find_entry+0x80>
 80139ba:	4b99      	ldr	r3, [pc, #612]	; (8013c20 <etharp_find_entry+0x2d8>)
 80139bc:	f240 1223 	movw	r2, #291	; 0x123
 80139c0:	4998      	ldr	r1, [pc, #608]	; (8013c24 <etharp_find_entry+0x2dc>)
 80139c2:	4899      	ldr	r0, [pc, #612]	; (8013c28 <etharp_find_entry+0x2e0>)
 80139c4:	f002 fdc4 	bl	8016550 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 80139c8:	68fb      	ldr	r3, [r7, #12]
 80139ca:	2b00      	cmp	r3, #0
 80139cc:	d020      	beq.n	8013a10 <etharp_find_entry+0xc8>
 80139ce:	68fb      	ldr	r3, [r7, #12]
 80139d0:	6819      	ldr	r1, [r3, #0]
 80139d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139d6:	4891      	ldr	r0, [pc, #580]	; (8013c1c <etharp_find_entry+0x2d4>)
 80139d8:	4613      	mov	r3, r2
 80139da:	005b      	lsls	r3, r3, #1
 80139dc:	4413      	add	r3, r2
 80139de:	00db      	lsls	r3, r3, #3
 80139e0:	4403      	add	r3, r0
 80139e2:	3304      	adds	r3, #4
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	4299      	cmp	r1, r3
 80139e8:	d112      	bne.n	8013a10 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	2b00      	cmp	r3, #0
 80139ee:	d00c      	beq.n	8013a0a <etharp_find_entry+0xc2>
 80139f0:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80139f4:	4989      	ldr	r1, [pc, #548]	; (8013c1c <etharp_find_entry+0x2d4>)
 80139f6:	4613      	mov	r3, r2
 80139f8:	005b      	lsls	r3, r3, #1
 80139fa:	4413      	add	r3, r2
 80139fc:	00db      	lsls	r3, r3, #3
 80139fe:	440b      	add	r3, r1
 8013a00:	3308      	adds	r3, #8
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	687a      	ldr	r2, [r7, #4]
 8013a06:	429a      	cmp	r2, r3
 8013a08:	d102      	bne.n	8013a10 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8013a0a:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013a0e:	e100      	b.n	8013c12 <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8013a10:	7dfb      	ldrb	r3, [r7, #23]
 8013a12:	2b01      	cmp	r3, #1
 8013a14:	d140      	bne.n	8013a98 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8013a16:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a1a:	4980      	ldr	r1, [pc, #512]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013a1c:	4613      	mov	r3, r2
 8013a1e:	005b      	lsls	r3, r3, #1
 8013a20:	4413      	add	r3, r2
 8013a22:	00db      	lsls	r3, r3, #3
 8013a24:	440b      	add	r3, r1
 8013a26:	681b      	ldr	r3, [r3, #0]
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d01a      	beq.n	8013a62 <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8013a2c:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a30:	497a      	ldr	r1, [pc, #488]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013a32:	4613      	mov	r3, r2
 8013a34:	005b      	lsls	r3, r3, #1
 8013a36:	4413      	add	r3, r2
 8013a38:	00db      	lsls	r3, r3, #3
 8013a3a:	440b      	add	r3, r1
 8013a3c:	3312      	adds	r3, #18
 8013a3e:	881b      	ldrh	r3, [r3, #0]
 8013a40:	8bba      	ldrh	r2, [r7, #28]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d845      	bhi.n	8013ad2 <etharp_find_entry+0x18a>
            old_queue = i;
 8013a46:	8c3b      	ldrh	r3, [r7, #32]
 8013a48:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8013a4a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a4e:	4973      	ldr	r1, [pc, #460]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013a50:	4613      	mov	r3, r2
 8013a52:	005b      	lsls	r3, r3, #1
 8013a54:	4413      	add	r3, r2
 8013a56:	00db      	lsls	r3, r3, #3
 8013a58:	440b      	add	r3, r1
 8013a5a:	3312      	adds	r3, #18
 8013a5c:	881b      	ldrh	r3, [r3, #0]
 8013a5e:	83bb      	strh	r3, [r7, #28]
 8013a60:	e037      	b.n	8013ad2 <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8013a62:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a66:	496d      	ldr	r1, [pc, #436]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013a68:	4613      	mov	r3, r2
 8013a6a:	005b      	lsls	r3, r3, #1
 8013a6c:	4413      	add	r3, r2
 8013a6e:	00db      	lsls	r3, r3, #3
 8013a70:	440b      	add	r3, r1
 8013a72:	3312      	adds	r3, #18
 8013a74:	881b      	ldrh	r3, [r3, #0]
 8013a76:	8b7a      	ldrh	r2, [r7, #26]
 8013a78:	429a      	cmp	r2, r3
 8013a7a:	d82a      	bhi.n	8013ad2 <etharp_find_entry+0x18a>
            old_pending = i;
 8013a7c:	8c3b      	ldrh	r3, [r7, #32]
 8013a7e:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8013a80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013a84:	4965      	ldr	r1, [pc, #404]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013a86:	4613      	mov	r3, r2
 8013a88:	005b      	lsls	r3, r3, #1
 8013a8a:	4413      	add	r3, r2
 8013a8c:	00db      	lsls	r3, r3, #3
 8013a8e:	440b      	add	r3, r1
 8013a90:	3312      	adds	r3, #18
 8013a92:	881b      	ldrh	r3, [r3, #0]
 8013a94:	837b      	strh	r3, [r7, #26]
 8013a96:	e01c      	b.n	8013ad2 <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8013a98:	7dfb      	ldrb	r3, [r7, #23]
 8013a9a:	2b01      	cmp	r3, #1
 8013a9c:	d919      	bls.n	8013ad2 <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8013a9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013aa2:	495e      	ldr	r1, [pc, #376]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013aa4:	4613      	mov	r3, r2
 8013aa6:	005b      	lsls	r3, r3, #1
 8013aa8:	4413      	add	r3, r2
 8013aaa:	00db      	lsls	r3, r3, #3
 8013aac:	440b      	add	r3, r1
 8013aae:	3312      	adds	r3, #18
 8013ab0:	881b      	ldrh	r3, [r3, #0]
 8013ab2:	8b3a      	ldrh	r2, [r7, #24]
 8013ab4:	429a      	cmp	r2, r3
 8013ab6:	d80c      	bhi.n	8013ad2 <etharp_find_entry+0x18a>
            old_stable = i;
 8013ab8:	8c3b      	ldrh	r3, [r7, #32]
 8013aba:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8013abc:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ac0:	4956      	ldr	r1, [pc, #344]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013ac2:	4613      	mov	r3, r2
 8013ac4:	005b      	lsls	r3, r3, #1
 8013ac6:	4413      	add	r3, r2
 8013ac8:	00db      	lsls	r3, r3, #3
 8013aca:	440b      	add	r3, r1
 8013acc:	3312      	adds	r3, #18
 8013ace:	881b      	ldrh	r3, [r3, #0]
 8013ad0:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013ad2:	8c3b      	ldrh	r3, [r7, #32]
 8013ad4:	3301      	adds	r3, #1
 8013ad6:	b29b      	uxth	r3, r3
 8013ad8:	843b      	strh	r3, [r7, #32]
 8013ada:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013ade:	2b09      	cmp	r3, #9
 8013ae0:	f77f af4c 	ble.w	801397c <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8013ae4:	7afb      	ldrb	r3, [r7, #11]
 8013ae6:	f003 0302 	and.w	r3, r3, #2
 8013aea:	2b00      	cmp	r3, #0
 8013aec:	d108      	bne.n	8013b00 <etharp_find_entry+0x1b8>
 8013aee:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013af2:	2b0a      	cmp	r3, #10
 8013af4:	d107      	bne.n	8013b06 <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8013af6:	7afb      	ldrb	r3, [r7, #11]
 8013af8:	f003 0301 	and.w	r3, r3, #1
 8013afc:	2b00      	cmp	r3, #0
 8013afe:	d102      	bne.n	8013b06 <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8013b00:	f04f 33ff 	mov.w	r3, #4294967295
 8013b04:	e085      	b.n	8013c12 <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8013b06:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8013b0a:	2b09      	cmp	r3, #9
 8013b0c:	dc02      	bgt.n	8013b14 <etharp_find_entry+0x1cc>
    i = empty;
 8013b0e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013b10:	843b      	strh	r3, [r7, #32]
 8013b12:	e039      	b.n	8013b88 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8013b14:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8013b18:	2b09      	cmp	r3, #9
 8013b1a:	dc14      	bgt.n	8013b46 <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8013b1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8013b1e:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8013b20:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013b24:	493d      	ldr	r1, [pc, #244]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013b26:	4613      	mov	r3, r2
 8013b28:	005b      	lsls	r3, r3, #1
 8013b2a:	4413      	add	r3, r2
 8013b2c:	00db      	lsls	r3, r3, #3
 8013b2e:	440b      	add	r3, r1
 8013b30:	681b      	ldr	r3, [r3, #0]
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d018      	beq.n	8013b68 <etharp_find_entry+0x220>
 8013b36:	4b3a      	ldr	r3, [pc, #232]	; (8013c20 <etharp_find_entry+0x2d8>)
 8013b38:	f240 126d 	movw	r2, #365	; 0x16d
 8013b3c:	493b      	ldr	r1, [pc, #236]	; (8013c2c <etharp_find_entry+0x2e4>)
 8013b3e:	483a      	ldr	r0, [pc, #232]	; (8013c28 <etharp_find_entry+0x2e0>)
 8013b40:	f002 fd06 	bl	8016550 <iprintf>
 8013b44:	e010      	b.n	8013b68 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8013b46:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8013b4a:	2b09      	cmp	r3, #9
 8013b4c:	dc02      	bgt.n	8013b54 <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8013b4e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8013b50:	843b      	strh	r3, [r7, #32]
 8013b52:	e009      	b.n	8013b68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8013b54:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8013b58:	2b09      	cmp	r3, #9
 8013b5a:	dc02      	bgt.n	8013b62 <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8013b5c:	8bfb      	ldrh	r3, [r7, #30]
 8013b5e:	843b      	strh	r3, [r7, #32]
 8013b60:	e002      	b.n	8013b68 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8013b62:	f04f 33ff 	mov.w	r3, #4294967295
 8013b66:	e054      	b.n	8013c12 <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b68:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b6c:	2b09      	cmp	r3, #9
 8013b6e:	dd06      	ble.n	8013b7e <etharp_find_entry+0x236>
 8013b70:	4b2b      	ldr	r3, [pc, #172]	; (8013c20 <etharp_find_entry+0x2d8>)
 8013b72:	f240 127f 	movw	r2, #383	; 0x17f
 8013b76:	492e      	ldr	r1, [pc, #184]	; (8013c30 <etharp_find_entry+0x2e8>)
 8013b78:	482b      	ldr	r0, [pc, #172]	; (8013c28 <etharp_find_entry+0x2e0>)
 8013b7a:	f002 fce9 	bl	8016550 <iprintf>
    etharp_free_entry(i);
 8013b7e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b82:	4618      	mov	r0, r3
 8013b84:	f7ff fe06 	bl	8013794 <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8013b88:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8013b8c:	2b09      	cmp	r3, #9
 8013b8e:	dd06      	ble.n	8013b9e <etharp_find_entry+0x256>
 8013b90:	4b23      	ldr	r3, [pc, #140]	; (8013c20 <etharp_find_entry+0x2d8>)
 8013b92:	f240 1283 	movw	r2, #387	; 0x183
 8013b96:	4926      	ldr	r1, [pc, #152]	; (8013c30 <etharp_find_entry+0x2e8>)
 8013b98:	4823      	ldr	r0, [pc, #140]	; (8013c28 <etharp_find_entry+0x2e0>)
 8013b9a:	f002 fcd9 	bl	8016550 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8013b9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013ba2:	491e      	ldr	r1, [pc, #120]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013ba4:	4613      	mov	r3, r2
 8013ba6:	005b      	lsls	r3, r3, #1
 8013ba8:	4413      	add	r3, r2
 8013baa:	00db      	lsls	r3, r3, #3
 8013bac:	440b      	add	r3, r1
 8013bae:	3314      	adds	r3, #20
 8013bb0:	781b      	ldrb	r3, [r3, #0]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d006      	beq.n	8013bc4 <etharp_find_entry+0x27c>
 8013bb6:	4b1a      	ldr	r3, [pc, #104]	; (8013c20 <etharp_find_entry+0x2d8>)
 8013bb8:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8013bbc:	491d      	ldr	r1, [pc, #116]	; (8013c34 <etharp_find_entry+0x2ec>)
 8013bbe:	481a      	ldr	r0, [pc, #104]	; (8013c28 <etharp_find_entry+0x2e0>)
 8013bc0:	f002 fcc6 	bl	8016550 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8013bc4:	68fb      	ldr	r3, [r7, #12]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d00b      	beq.n	8013be2 <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8013bca:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bce:	68fb      	ldr	r3, [r7, #12]
 8013bd0:	6819      	ldr	r1, [r3, #0]
 8013bd2:	4812      	ldr	r0, [pc, #72]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013bd4:	4613      	mov	r3, r2
 8013bd6:	005b      	lsls	r3, r3, #1
 8013bd8:	4413      	add	r3, r2
 8013bda:	00db      	lsls	r3, r3, #3
 8013bdc:	4403      	add	r3, r0
 8013bde:	3304      	adds	r3, #4
 8013be0:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8013be2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013be6:	490d      	ldr	r1, [pc, #52]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013be8:	4613      	mov	r3, r2
 8013bea:	005b      	lsls	r3, r3, #1
 8013bec:	4413      	add	r3, r2
 8013bee:	00db      	lsls	r3, r3, #3
 8013bf0:	440b      	add	r3, r1
 8013bf2:	3312      	adds	r3, #18
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8013bf8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8013bfc:	4907      	ldr	r1, [pc, #28]	; (8013c1c <etharp_find_entry+0x2d4>)
 8013bfe:	4613      	mov	r3, r2
 8013c00:	005b      	lsls	r3, r3, #1
 8013c02:	4413      	add	r3, r2
 8013c04:	00db      	lsls	r3, r3, #3
 8013c06:	440b      	add	r3, r1
 8013c08:	3308      	adds	r3, #8
 8013c0a:	687a      	ldr	r2, [r7, #4]
 8013c0c:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8013c0e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8013c12:	4618      	mov	r0, r3
 8013c14:	3728      	adds	r7, #40	; 0x28
 8013c16:	46bd      	mov	sp, r7
 8013c18:	bd80      	pop	{r7, pc}
 8013c1a:	bf00      	nop
 8013c1c:	2000d198 	.word	0x2000d198
 8013c20:	0801a388 	.word	0x0801a388
 8013c24:	0801a3c0 	.word	0x0801a3c0
 8013c28:	0801a400 	.word	0x0801a400
 8013c2c:	0801a428 	.word	0x0801a428
 8013c30:	0801a440 	.word	0x0801a440
 8013c34:	0801a454 	.word	0x0801a454

08013c38 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b088      	sub	sp, #32
 8013c3c:	af02      	add	r7, sp, #8
 8013c3e:	60f8      	str	r0, [r7, #12]
 8013c40:	60b9      	str	r1, [r7, #8]
 8013c42:	607a      	str	r2, [r7, #4]
 8013c44:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8013c46:	68fb      	ldr	r3, [r7, #12]
 8013c48:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8013c4c:	2b06      	cmp	r3, #6
 8013c4e:	d006      	beq.n	8013c5e <etharp_update_arp_entry+0x26>
 8013c50:	4b48      	ldr	r3, [pc, #288]	; (8013d74 <etharp_update_arp_entry+0x13c>)
 8013c52:	f240 12a9 	movw	r2, #425	; 0x1a9
 8013c56:	4948      	ldr	r1, [pc, #288]	; (8013d78 <etharp_update_arp_entry+0x140>)
 8013c58:	4848      	ldr	r0, [pc, #288]	; (8013d7c <etharp_update_arp_entry+0x144>)
 8013c5a:	f002 fc79 	bl	8016550 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8013c5e:	68bb      	ldr	r3, [r7, #8]
 8013c60:	2b00      	cmp	r3, #0
 8013c62:	d012      	beq.n	8013c8a <etharp_update_arp_entry+0x52>
 8013c64:	68bb      	ldr	r3, [r7, #8]
 8013c66:	681b      	ldr	r3, [r3, #0]
 8013c68:	2b00      	cmp	r3, #0
 8013c6a:	d00e      	beq.n	8013c8a <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c6c:	68bb      	ldr	r3, [r7, #8]
 8013c6e:	681b      	ldr	r3, [r3, #0]
 8013c70:	68f9      	ldr	r1, [r7, #12]
 8013c72:	4618      	mov	r0, r3
 8013c74:	f001 f8fe 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 8013c78:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d105      	bne.n	8013c8a <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8013c7e:	68bb      	ldr	r3, [r7, #8]
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8013c86:	2be0      	cmp	r3, #224	; 0xe0
 8013c88:	d102      	bne.n	8013c90 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8013c8a:	f06f 030f 	mvn.w	r3, #15
 8013c8e:	e06c      	b.n	8013d6a <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8013c90:	78fb      	ldrb	r3, [r7, #3]
 8013c92:	68fa      	ldr	r2, [r7, #12]
 8013c94:	4619      	mov	r1, r3
 8013c96:	68b8      	ldr	r0, [r7, #8]
 8013c98:	f7ff fe56 	bl	8013948 <etharp_find_entry>
 8013c9c:	4603      	mov	r3, r0
 8013c9e:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8013ca0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	da02      	bge.n	8013cae <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8013ca8:	8afb      	ldrh	r3, [r7, #22]
 8013caa:	b25b      	sxtb	r3, r3
 8013cac:	e05d      	b.n	8013d6a <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8013cae:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cb2:	4933      	ldr	r1, [pc, #204]	; (8013d80 <etharp_update_arp_entry+0x148>)
 8013cb4:	4613      	mov	r3, r2
 8013cb6:	005b      	lsls	r3, r3, #1
 8013cb8:	4413      	add	r3, r2
 8013cba:	00db      	lsls	r3, r3, #3
 8013cbc:	440b      	add	r3, r1
 8013cbe:	3314      	adds	r3, #20
 8013cc0:	2202      	movs	r2, #2
 8013cc2:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8013cc4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cc8:	492d      	ldr	r1, [pc, #180]	; (8013d80 <etharp_update_arp_entry+0x148>)
 8013cca:	4613      	mov	r3, r2
 8013ccc:	005b      	lsls	r3, r3, #1
 8013cce:	4413      	add	r3, r2
 8013cd0:	00db      	lsls	r3, r3, #3
 8013cd2:	440b      	add	r3, r1
 8013cd4:	3308      	adds	r3, #8
 8013cd6:	68fa      	ldr	r2, [r7, #12]
 8013cd8:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8013cda:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cde:	4613      	mov	r3, r2
 8013ce0:	005b      	lsls	r3, r3, #1
 8013ce2:	4413      	add	r3, r2
 8013ce4:	00db      	lsls	r3, r3, #3
 8013ce6:	3308      	adds	r3, #8
 8013ce8:	4a25      	ldr	r2, [pc, #148]	; (8013d80 <etharp_update_arp_entry+0x148>)
 8013cea:	4413      	add	r3, r2
 8013cec:	3304      	adds	r3, #4
 8013cee:	2206      	movs	r2, #6
 8013cf0:	6879      	ldr	r1, [r7, #4]
 8013cf2:	4618      	mov	r0, r3
 8013cf4:	f002 fb81 	bl	80163fa <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8013cf8:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013cfc:	4920      	ldr	r1, [pc, #128]	; (8013d80 <etharp_update_arp_entry+0x148>)
 8013cfe:	4613      	mov	r3, r2
 8013d00:	005b      	lsls	r3, r3, #1
 8013d02:	4413      	add	r3, r2
 8013d04:	00db      	lsls	r3, r3, #3
 8013d06:	440b      	add	r3, r1
 8013d08:	3312      	adds	r3, #18
 8013d0a:	2200      	movs	r2, #0
 8013d0c:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8013d0e:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d12:	491b      	ldr	r1, [pc, #108]	; (8013d80 <etharp_update_arp_entry+0x148>)
 8013d14:	4613      	mov	r3, r2
 8013d16:	005b      	lsls	r3, r3, #1
 8013d18:	4413      	add	r3, r2
 8013d1a:	00db      	lsls	r3, r3, #3
 8013d1c:	440b      	add	r3, r1
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	d021      	beq.n	8013d68 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8013d24:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d28:	4915      	ldr	r1, [pc, #84]	; (8013d80 <etharp_update_arp_entry+0x148>)
 8013d2a:	4613      	mov	r3, r2
 8013d2c:	005b      	lsls	r3, r3, #1
 8013d2e:	4413      	add	r3, r2
 8013d30:	00db      	lsls	r3, r3, #3
 8013d32:	440b      	add	r3, r1
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8013d38:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8013d3c:	4910      	ldr	r1, [pc, #64]	; (8013d80 <etharp_update_arp_entry+0x148>)
 8013d3e:	4613      	mov	r3, r2
 8013d40:	005b      	lsls	r3, r3, #1
 8013d42:	4413      	add	r3, r2
 8013d44:	00db      	lsls	r3, r3, #3
 8013d46:	440b      	add	r3, r1
 8013d48:	2200      	movs	r2, #0
 8013d4a:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8013d52:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8013d56:	9300      	str	r3, [sp, #0]
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6939      	ldr	r1, [r7, #16]
 8013d5c:	68f8      	ldr	r0, [r7, #12]
 8013d5e:	f002 f8c1 	bl	8015ee4 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8013d62:	6938      	ldr	r0, [r7, #16]
 8013d64:	f7f8 fa52 	bl	800c20c <pbuf_free>
  }
  return ERR_OK;
 8013d68:	2300      	movs	r3, #0
}
 8013d6a:	4618      	mov	r0, r3
 8013d6c:	3718      	adds	r7, #24
 8013d6e:	46bd      	mov	sp, r7
 8013d70:	bd80      	pop	{r7, pc}
 8013d72:	bf00      	nop
 8013d74:	0801a388 	.word	0x0801a388
 8013d78:	0801a480 	.word	0x0801a480
 8013d7c:	0801a400 	.word	0x0801a400
 8013d80:	2000d198 	.word	0x2000d198

08013d84 <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8013d84:	b580      	push	{r7, lr}
 8013d86:	b084      	sub	sp, #16
 8013d88:	af00      	add	r7, sp, #0
 8013d8a:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013d8c:	2300      	movs	r3, #0
 8013d8e:	60fb      	str	r3, [r7, #12]
 8013d90:	e01e      	b.n	8013dd0 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8013d92:	4913      	ldr	r1, [pc, #76]	; (8013de0 <etharp_cleanup_netif+0x5c>)
 8013d94:	68fa      	ldr	r2, [r7, #12]
 8013d96:	4613      	mov	r3, r2
 8013d98:	005b      	lsls	r3, r3, #1
 8013d9a:	4413      	add	r3, r2
 8013d9c:	00db      	lsls	r3, r3, #3
 8013d9e:	440b      	add	r3, r1
 8013da0:	3314      	adds	r3, #20
 8013da2:	781b      	ldrb	r3, [r3, #0]
 8013da4:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8013da6:	7afb      	ldrb	r3, [r7, #11]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d00e      	beq.n	8013dca <etharp_cleanup_netif+0x46>
 8013dac:	490c      	ldr	r1, [pc, #48]	; (8013de0 <etharp_cleanup_netif+0x5c>)
 8013dae:	68fa      	ldr	r2, [r7, #12]
 8013db0:	4613      	mov	r3, r2
 8013db2:	005b      	lsls	r3, r3, #1
 8013db4:	4413      	add	r3, r2
 8013db6:	00db      	lsls	r3, r3, #3
 8013db8:	440b      	add	r3, r1
 8013dba:	3308      	adds	r3, #8
 8013dbc:	681b      	ldr	r3, [r3, #0]
 8013dbe:	687a      	ldr	r2, [r7, #4]
 8013dc0:	429a      	cmp	r2, r3
 8013dc2:	d102      	bne.n	8013dca <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8013dc4:	68f8      	ldr	r0, [r7, #12]
 8013dc6:	f7ff fce5 	bl	8013794 <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8013dca:	68fb      	ldr	r3, [r7, #12]
 8013dcc:	3301      	adds	r3, #1
 8013dce:	60fb      	str	r3, [r7, #12]
 8013dd0:	68fb      	ldr	r3, [r7, #12]
 8013dd2:	2b09      	cmp	r3, #9
 8013dd4:	dddd      	ble.n	8013d92 <etharp_cleanup_netif+0xe>
    }
  }
}
 8013dd6:	bf00      	nop
 8013dd8:	bf00      	nop
 8013dda:	3710      	adds	r7, #16
 8013ddc:	46bd      	mov	sp, r7
 8013dde:	bd80      	pop	{r7, pc}
 8013de0:	2000d198 	.word	0x2000d198

08013de4 <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8013de4:	b5b0      	push	{r4, r5, r7, lr}
 8013de6:	b08a      	sub	sp, #40	; 0x28
 8013de8:	af04      	add	r7, sp, #16
 8013dea:	6078      	str	r0, [r7, #4]
 8013dec:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8013dee:	683b      	ldr	r3, [r7, #0]
 8013df0:	2b00      	cmp	r3, #0
 8013df2:	d107      	bne.n	8013e04 <etharp_input+0x20>
 8013df4:	4b3d      	ldr	r3, [pc, #244]	; (8013eec <etharp_input+0x108>)
 8013df6:	f240 228a 	movw	r2, #650	; 0x28a
 8013dfa:	493d      	ldr	r1, [pc, #244]	; (8013ef0 <etharp_input+0x10c>)
 8013dfc:	483d      	ldr	r0, [pc, #244]	; (8013ef4 <etharp_input+0x110>)
 8013dfe:	f002 fba7 	bl	8016550 <iprintf>
 8013e02:	e06f      	b.n	8013ee4 <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	685b      	ldr	r3, [r3, #4]
 8013e08:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013e0a:	693b      	ldr	r3, [r7, #16]
 8013e0c:	881b      	ldrh	r3, [r3, #0]
 8013e0e:	b29b      	uxth	r3, r3
 8013e10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e14:	d10c      	bne.n	8013e30 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013e16:	693b      	ldr	r3, [r7, #16]
 8013e18:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8013e1a:	2b06      	cmp	r3, #6
 8013e1c:	d108      	bne.n	8013e30 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013e1e:	693b      	ldr	r3, [r7, #16]
 8013e20:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8013e22:	2b04      	cmp	r3, #4
 8013e24:	d104      	bne.n	8013e30 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8013e26:	693b      	ldr	r3, [r7, #16]
 8013e28:	885b      	ldrh	r3, [r3, #2]
 8013e2a:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8013e2c:	2b08      	cmp	r3, #8
 8013e2e:	d003      	beq.n	8013e38 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8013e30:	6878      	ldr	r0, [r7, #4]
 8013e32:	f7f8 f9eb 	bl	800c20c <pbuf_free>
    return;
 8013e36:	e055      	b.n	8013ee4 <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8013e38:	693b      	ldr	r3, [r7, #16]
 8013e3a:	330e      	adds	r3, #14
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8013e40:	693b      	ldr	r3, [r7, #16]
 8013e42:	3318      	adds	r3, #24
 8013e44:	681b      	ldr	r3, [r3, #0]
 8013e46:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	3304      	adds	r3, #4
 8013e4c:	681b      	ldr	r3, [r3, #0]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d102      	bne.n	8013e58 <etharp_input+0x74>
    for_us = 0;
 8013e52:	2300      	movs	r3, #0
 8013e54:	75fb      	strb	r3, [r7, #23]
 8013e56:	e009      	b.n	8013e6c <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8013e58:	68ba      	ldr	r2, [r7, #8]
 8013e5a:	683b      	ldr	r3, [r7, #0]
 8013e5c:	3304      	adds	r3, #4
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	429a      	cmp	r2, r3
 8013e62:	bf0c      	ite	eq
 8013e64:	2301      	moveq	r3, #1
 8013e66:	2300      	movne	r3, #0
 8013e68:	b2db      	uxtb	r3, r3
 8013e6a:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8013e6c:	693b      	ldr	r3, [r7, #16]
 8013e6e:	f103 0208 	add.w	r2, r3, #8
 8013e72:	7dfb      	ldrb	r3, [r7, #23]
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d001      	beq.n	8013e7c <etharp_input+0x98>
 8013e78:	2301      	movs	r3, #1
 8013e7a:	e000      	b.n	8013e7e <etharp_input+0x9a>
 8013e7c:	2302      	movs	r3, #2
 8013e7e:	f107 010c 	add.w	r1, r7, #12
 8013e82:	6838      	ldr	r0, [r7, #0]
 8013e84:	f7ff fed8 	bl	8013c38 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8013e88:	693b      	ldr	r3, [r7, #16]
 8013e8a:	88db      	ldrh	r3, [r3, #6]
 8013e8c:	b29b      	uxth	r3, r3
 8013e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8013e92:	d003      	beq.n	8013e9c <etharp_input+0xb8>
 8013e94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8013e98:	d01e      	beq.n	8013ed8 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8013e9a:	e020      	b.n	8013ede <etharp_input+0xfa>
      if (for_us) {
 8013e9c:	7dfb      	ldrb	r3, [r7, #23]
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d01c      	beq.n	8013edc <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8013ea2:	683b      	ldr	r3, [r7, #0]
 8013ea4:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8013ea8:	693b      	ldr	r3, [r7, #16]
 8013eaa:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8013eb4:	683b      	ldr	r3, [r7, #0]
 8013eb6:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8013eb8:	693a      	ldr	r2, [r7, #16]
 8013eba:	3208      	adds	r2, #8
        etharp_raw(netif,
 8013ebc:	2102      	movs	r1, #2
 8013ebe:	9103      	str	r1, [sp, #12]
 8013ec0:	f107 010c 	add.w	r1, r7, #12
 8013ec4:	9102      	str	r1, [sp, #8]
 8013ec6:	9201      	str	r2, [sp, #4]
 8013ec8:	9300      	str	r3, [sp, #0]
 8013eca:	462b      	mov	r3, r5
 8013ecc:	4622      	mov	r2, r4
 8013ece:	4601      	mov	r1, r0
 8013ed0:	6838      	ldr	r0, [r7, #0]
 8013ed2:	f000 faeb 	bl	80144ac <etharp_raw>
      break;
 8013ed6:	e001      	b.n	8013edc <etharp_input+0xf8>
      break;
 8013ed8:	bf00      	nop
 8013eda:	e000      	b.n	8013ede <etharp_input+0xfa>
      break;
 8013edc:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8013ede:	6878      	ldr	r0, [r7, #4]
 8013ee0:	f7f8 f994 	bl	800c20c <pbuf_free>
}
 8013ee4:	3718      	adds	r7, #24
 8013ee6:	46bd      	mov	sp, r7
 8013ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8013eea:	bf00      	nop
 8013eec:	0801a388 	.word	0x0801a388
 8013ef0:	0801a4d8 	.word	0x0801a4d8
 8013ef4:	0801a400 	.word	0x0801a400

08013ef8 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8013ef8:	b580      	push	{r7, lr}
 8013efa:	b086      	sub	sp, #24
 8013efc:	af02      	add	r7, sp, #8
 8013efe:	60f8      	str	r0, [r7, #12]
 8013f00:	60b9      	str	r1, [r7, #8]
 8013f02:	4613      	mov	r3, r2
 8013f04:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8013f06:	79fa      	ldrb	r2, [r7, #7]
 8013f08:	4944      	ldr	r1, [pc, #272]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013f0a:	4613      	mov	r3, r2
 8013f0c:	005b      	lsls	r3, r3, #1
 8013f0e:	4413      	add	r3, r2
 8013f10:	00db      	lsls	r3, r3, #3
 8013f12:	440b      	add	r3, r1
 8013f14:	3314      	adds	r3, #20
 8013f16:	781b      	ldrb	r3, [r3, #0]
 8013f18:	2b01      	cmp	r3, #1
 8013f1a:	d806      	bhi.n	8013f2a <etharp_output_to_arp_index+0x32>
 8013f1c:	4b40      	ldr	r3, [pc, #256]	; (8014020 <etharp_output_to_arp_index+0x128>)
 8013f1e:	f240 22ee 	movw	r2, #750	; 0x2ee
 8013f22:	4940      	ldr	r1, [pc, #256]	; (8014024 <etharp_output_to_arp_index+0x12c>)
 8013f24:	4840      	ldr	r0, [pc, #256]	; (8014028 <etharp_output_to_arp_index+0x130>)
 8013f26:	f002 fb13 	bl	8016550 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8013f2a:	79fa      	ldrb	r2, [r7, #7]
 8013f2c:	493b      	ldr	r1, [pc, #236]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013f2e:	4613      	mov	r3, r2
 8013f30:	005b      	lsls	r3, r3, #1
 8013f32:	4413      	add	r3, r2
 8013f34:	00db      	lsls	r3, r3, #3
 8013f36:	440b      	add	r3, r1
 8013f38:	3314      	adds	r3, #20
 8013f3a:	781b      	ldrb	r3, [r3, #0]
 8013f3c:	2b02      	cmp	r3, #2
 8013f3e:	d153      	bne.n	8013fe8 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8013f40:	79fa      	ldrb	r2, [r7, #7]
 8013f42:	4936      	ldr	r1, [pc, #216]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013f44:	4613      	mov	r3, r2
 8013f46:	005b      	lsls	r3, r3, #1
 8013f48:	4413      	add	r3, r2
 8013f4a:	00db      	lsls	r3, r3, #3
 8013f4c:	440b      	add	r3, r1
 8013f4e:	3312      	adds	r3, #18
 8013f50:	881b      	ldrh	r3, [r3, #0]
 8013f52:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8013f56:	d919      	bls.n	8013f8c <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8013f58:	79fa      	ldrb	r2, [r7, #7]
 8013f5a:	4613      	mov	r3, r2
 8013f5c:	005b      	lsls	r3, r3, #1
 8013f5e:	4413      	add	r3, r2
 8013f60:	00db      	lsls	r3, r3, #3
 8013f62:	4a2e      	ldr	r2, [pc, #184]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013f64:	4413      	add	r3, r2
 8013f66:	3304      	adds	r3, #4
 8013f68:	4619      	mov	r1, r3
 8013f6a:	68f8      	ldr	r0, [r7, #12]
 8013f6c:	f000 fb4c 	bl	8014608 <etharp_request>
 8013f70:	4603      	mov	r3, r0
 8013f72:	2b00      	cmp	r3, #0
 8013f74:	d138      	bne.n	8013fe8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013f76:	79fa      	ldrb	r2, [r7, #7]
 8013f78:	4928      	ldr	r1, [pc, #160]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013f7a:	4613      	mov	r3, r2
 8013f7c:	005b      	lsls	r3, r3, #1
 8013f7e:	4413      	add	r3, r2
 8013f80:	00db      	lsls	r3, r3, #3
 8013f82:	440b      	add	r3, r1
 8013f84:	3314      	adds	r3, #20
 8013f86:	2203      	movs	r2, #3
 8013f88:	701a      	strb	r2, [r3, #0]
 8013f8a:	e02d      	b.n	8013fe8 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8013f8c:	79fa      	ldrb	r2, [r7, #7]
 8013f8e:	4923      	ldr	r1, [pc, #140]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013f90:	4613      	mov	r3, r2
 8013f92:	005b      	lsls	r3, r3, #1
 8013f94:	4413      	add	r3, r2
 8013f96:	00db      	lsls	r3, r3, #3
 8013f98:	440b      	add	r3, r1
 8013f9a:	3312      	adds	r3, #18
 8013f9c:	881b      	ldrh	r3, [r3, #0]
 8013f9e:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8013fa2:	d321      	bcc.n	8013fe8 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8013fa4:	79fa      	ldrb	r2, [r7, #7]
 8013fa6:	4613      	mov	r3, r2
 8013fa8:	005b      	lsls	r3, r3, #1
 8013faa:	4413      	add	r3, r2
 8013fac:	00db      	lsls	r3, r3, #3
 8013fae:	4a1b      	ldr	r2, [pc, #108]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013fb0:	4413      	add	r3, r2
 8013fb2:	1d19      	adds	r1, r3, #4
 8013fb4:	79fa      	ldrb	r2, [r7, #7]
 8013fb6:	4613      	mov	r3, r2
 8013fb8:	005b      	lsls	r3, r3, #1
 8013fba:	4413      	add	r3, r2
 8013fbc:	00db      	lsls	r3, r3, #3
 8013fbe:	3308      	adds	r3, #8
 8013fc0:	4a16      	ldr	r2, [pc, #88]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013fc2:	4413      	add	r3, r2
 8013fc4:	3304      	adds	r3, #4
 8013fc6:	461a      	mov	r2, r3
 8013fc8:	68f8      	ldr	r0, [r7, #12]
 8013fca:	f000 fafb 	bl	80145c4 <etharp_request_dst>
 8013fce:	4603      	mov	r3, r0
 8013fd0:	2b00      	cmp	r3, #0
 8013fd2:	d109      	bne.n	8013fe8 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8013fd4:	79fa      	ldrb	r2, [r7, #7]
 8013fd6:	4911      	ldr	r1, [pc, #68]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013fd8:	4613      	mov	r3, r2
 8013fda:	005b      	lsls	r3, r3, #1
 8013fdc:	4413      	add	r3, r2
 8013fde:	00db      	lsls	r3, r3, #3
 8013fe0:	440b      	add	r3, r1
 8013fe2:	3314      	adds	r3, #20
 8013fe4:	2203      	movs	r2, #3
 8013fe6:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8013fe8:	68fb      	ldr	r3, [r7, #12]
 8013fea:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8013fee:	79fa      	ldrb	r2, [r7, #7]
 8013ff0:	4613      	mov	r3, r2
 8013ff2:	005b      	lsls	r3, r3, #1
 8013ff4:	4413      	add	r3, r2
 8013ff6:	00db      	lsls	r3, r3, #3
 8013ff8:	3308      	adds	r3, #8
 8013ffa:	4a08      	ldr	r2, [pc, #32]	; (801401c <etharp_output_to_arp_index+0x124>)
 8013ffc:	4413      	add	r3, r2
 8013ffe:	3304      	adds	r3, #4
 8014000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014004:	9200      	str	r2, [sp, #0]
 8014006:	460a      	mov	r2, r1
 8014008:	68b9      	ldr	r1, [r7, #8]
 801400a:	68f8      	ldr	r0, [r7, #12]
 801400c:	f001 ff6a 	bl	8015ee4 <ethernet_output>
 8014010:	4603      	mov	r3, r0
}
 8014012:	4618      	mov	r0, r3
 8014014:	3710      	adds	r7, #16
 8014016:	46bd      	mov	sp, r7
 8014018:	bd80      	pop	{r7, pc}
 801401a:	bf00      	nop
 801401c:	2000d198 	.word	0x2000d198
 8014020:	0801a388 	.word	0x0801a388
 8014024:	0801a4f8 	.word	0x0801a4f8
 8014028:	0801a400 	.word	0x0801a400

0801402c <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801402c:	b580      	push	{r7, lr}
 801402e:	b08a      	sub	sp, #40	; 0x28
 8014030:	af02      	add	r7, sp, #8
 8014032:	60f8      	str	r0, [r7, #12]
 8014034:	60b9      	str	r1, [r7, #8]
 8014036:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801403c:	68fb      	ldr	r3, [r7, #12]
 801403e:	2b00      	cmp	r3, #0
 8014040:	d106      	bne.n	8014050 <etharp_output+0x24>
 8014042:	4b73      	ldr	r3, [pc, #460]	; (8014210 <etharp_output+0x1e4>)
 8014044:	f240 321e 	movw	r2, #798	; 0x31e
 8014048:	4972      	ldr	r1, [pc, #456]	; (8014214 <etharp_output+0x1e8>)
 801404a:	4873      	ldr	r0, [pc, #460]	; (8014218 <etharp_output+0x1ec>)
 801404c:	f002 fa80 	bl	8016550 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014050:	68bb      	ldr	r3, [r7, #8]
 8014052:	2b00      	cmp	r3, #0
 8014054:	d106      	bne.n	8014064 <etharp_output+0x38>
 8014056:	4b6e      	ldr	r3, [pc, #440]	; (8014210 <etharp_output+0x1e4>)
 8014058:	f240 321f 	movw	r2, #799	; 0x31f
 801405c:	496f      	ldr	r1, [pc, #444]	; (801421c <etharp_output+0x1f0>)
 801405e:	486e      	ldr	r0, [pc, #440]	; (8014218 <etharp_output+0x1ec>)
 8014060:	f002 fa76 	bl	8016550 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d106      	bne.n	8014078 <etharp_output+0x4c>
 801406a:	4b69      	ldr	r3, [pc, #420]	; (8014210 <etharp_output+0x1e4>)
 801406c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014070:	496b      	ldr	r1, [pc, #428]	; (8014220 <etharp_output+0x1f4>)
 8014072:	4869      	ldr	r0, [pc, #420]	; (8014218 <etharp_output+0x1ec>)
 8014074:	f002 fa6c 	bl	8016550 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	68f9      	ldr	r1, [r7, #12]
 801407e:	4618      	mov	r0, r3
 8014080:	f000 fef8 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 8014084:	4603      	mov	r3, r0
 8014086:	2b00      	cmp	r3, #0
 8014088:	d002      	beq.n	8014090 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801408a:	4b66      	ldr	r3, [pc, #408]	; (8014224 <etharp_output+0x1f8>)
 801408c:	61fb      	str	r3, [r7, #28]
 801408e:	e0af      	b.n	80141f0 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014098:	2be0      	cmp	r3, #224	; 0xe0
 801409a:	d118      	bne.n	80140ce <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801409c:	2301      	movs	r3, #1
 801409e:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 80140a0:	2300      	movs	r3, #0
 80140a2:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 80140a4:	235e      	movs	r3, #94	; 0x5e
 80140a6:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	3301      	adds	r3, #1
 80140ac:	781b      	ldrb	r3, [r3, #0]
 80140ae:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80140b2:	b2db      	uxtb	r3, r3
 80140b4:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 80140b6:	687b      	ldr	r3, [r7, #4]
 80140b8:	3302      	adds	r3, #2
 80140ba:	781b      	ldrb	r3, [r3, #0]
 80140bc:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	3303      	adds	r3, #3
 80140c2:	781b      	ldrb	r3, [r3, #0]
 80140c4:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 80140c6:	f107 0310 	add.w	r3, r7, #16
 80140ca:	61fb      	str	r3, [r7, #28]
 80140cc:	e090      	b.n	80141f0 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80140ce:	687b      	ldr	r3, [r7, #4]
 80140d0:	681a      	ldr	r2, [r3, #0]
 80140d2:	68fb      	ldr	r3, [r7, #12]
 80140d4:	3304      	adds	r3, #4
 80140d6:	681b      	ldr	r3, [r3, #0]
 80140d8:	405a      	eors	r2, r3
 80140da:	68fb      	ldr	r3, [r7, #12]
 80140dc:	3308      	adds	r3, #8
 80140de:	681b      	ldr	r3, [r3, #0]
 80140e0:	4013      	ands	r3, r2
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	d012      	beq.n	801410c <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 80140e6:	687b      	ldr	r3, [r7, #4]
 80140e8:	681b      	ldr	r3, [r3, #0]
 80140ea:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 80140ec:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 80140f0:	4293      	cmp	r3, r2
 80140f2:	d00b      	beq.n	801410c <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 80140f4:	68fb      	ldr	r3, [r7, #12]
 80140f6:	330c      	adds	r3, #12
 80140f8:	681b      	ldr	r3, [r3, #0]
 80140fa:	2b00      	cmp	r3, #0
 80140fc:	d003      	beq.n	8014106 <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 80140fe:	68fb      	ldr	r3, [r7, #12]
 8014100:	330c      	adds	r3, #12
 8014102:	61bb      	str	r3, [r7, #24]
 8014104:	e002      	b.n	801410c <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014106:	f06f 0303 	mvn.w	r3, #3
 801410a:	e07d      	b.n	8014208 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801410c:	4b46      	ldr	r3, [pc, #280]	; (8014228 <etharp_output+0x1fc>)
 801410e:	781b      	ldrb	r3, [r3, #0]
 8014110:	4619      	mov	r1, r3
 8014112:	4a46      	ldr	r2, [pc, #280]	; (801422c <etharp_output+0x200>)
 8014114:	460b      	mov	r3, r1
 8014116:	005b      	lsls	r3, r3, #1
 8014118:	440b      	add	r3, r1
 801411a:	00db      	lsls	r3, r3, #3
 801411c:	4413      	add	r3, r2
 801411e:	3314      	adds	r3, #20
 8014120:	781b      	ldrb	r3, [r3, #0]
 8014122:	2b01      	cmp	r3, #1
 8014124:	d925      	bls.n	8014172 <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014126:	4b40      	ldr	r3, [pc, #256]	; (8014228 <etharp_output+0x1fc>)
 8014128:	781b      	ldrb	r3, [r3, #0]
 801412a:	4619      	mov	r1, r3
 801412c:	4a3f      	ldr	r2, [pc, #252]	; (801422c <etharp_output+0x200>)
 801412e:	460b      	mov	r3, r1
 8014130:	005b      	lsls	r3, r3, #1
 8014132:	440b      	add	r3, r1
 8014134:	00db      	lsls	r3, r3, #3
 8014136:	4413      	add	r3, r2
 8014138:	3308      	adds	r3, #8
 801413a:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801413c:	68fa      	ldr	r2, [r7, #12]
 801413e:	429a      	cmp	r2, r3
 8014140:	d117      	bne.n	8014172 <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	681a      	ldr	r2, [r3, #0]
 8014146:	4b38      	ldr	r3, [pc, #224]	; (8014228 <etharp_output+0x1fc>)
 8014148:	781b      	ldrb	r3, [r3, #0]
 801414a:	4618      	mov	r0, r3
 801414c:	4937      	ldr	r1, [pc, #220]	; (801422c <etharp_output+0x200>)
 801414e:	4603      	mov	r3, r0
 8014150:	005b      	lsls	r3, r3, #1
 8014152:	4403      	add	r3, r0
 8014154:	00db      	lsls	r3, r3, #3
 8014156:	440b      	add	r3, r1
 8014158:	3304      	adds	r3, #4
 801415a:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801415c:	429a      	cmp	r2, r3
 801415e:	d108      	bne.n	8014172 <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014160:	4b31      	ldr	r3, [pc, #196]	; (8014228 <etharp_output+0x1fc>)
 8014162:	781b      	ldrb	r3, [r3, #0]
 8014164:	461a      	mov	r2, r3
 8014166:	68b9      	ldr	r1, [r7, #8]
 8014168:	68f8      	ldr	r0, [r7, #12]
 801416a:	f7ff fec5 	bl	8013ef8 <etharp_output_to_arp_index>
 801416e:	4603      	mov	r3, r0
 8014170:	e04a      	b.n	8014208 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014172:	2300      	movs	r3, #0
 8014174:	75fb      	strb	r3, [r7, #23]
 8014176:	e031      	b.n	80141dc <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014178:	7dfa      	ldrb	r2, [r7, #23]
 801417a:	492c      	ldr	r1, [pc, #176]	; (801422c <etharp_output+0x200>)
 801417c:	4613      	mov	r3, r2
 801417e:	005b      	lsls	r3, r3, #1
 8014180:	4413      	add	r3, r2
 8014182:	00db      	lsls	r3, r3, #3
 8014184:	440b      	add	r3, r1
 8014186:	3314      	adds	r3, #20
 8014188:	781b      	ldrb	r3, [r3, #0]
 801418a:	2b01      	cmp	r3, #1
 801418c:	d923      	bls.n	80141d6 <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801418e:	7dfa      	ldrb	r2, [r7, #23]
 8014190:	4926      	ldr	r1, [pc, #152]	; (801422c <etharp_output+0x200>)
 8014192:	4613      	mov	r3, r2
 8014194:	005b      	lsls	r3, r3, #1
 8014196:	4413      	add	r3, r2
 8014198:	00db      	lsls	r3, r3, #3
 801419a:	440b      	add	r3, r1
 801419c:	3308      	adds	r3, #8
 801419e:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 80141a0:	68fa      	ldr	r2, [r7, #12]
 80141a2:	429a      	cmp	r2, r3
 80141a4:	d117      	bne.n	80141d6 <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 80141a6:	69bb      	ldr	r3, [r7, #24]
 80141a8:	6819      	ldr	r1, [r3, #0]
 80141aa:	7dfa      	ldrb	r2, [r7, #23]
 80141ac:	481f      	ldr	r0, [pc, #124]	; (801422c <etharp_output+0x200>)
 80141ae:	4613      	mov	r3, r2
 80141b0:	005b      	lsls	r3, r3, #1
 80141b2:	4413      	add	r3, r2
 80141b4:	00db      	lsls	r3, r3, #3
 80141b6:	4403      	add	r3, r0
 80141b8:	3304      	adds	r3, #4
 80141ba:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 80141bc:	4299      	cmp	r1, r3
 80141be:	d10a      	bne.n	80141d6 <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 80141c0:	4a19      	ldr	r2, [pc, #100]	; (8014228 <etharp_output+0x1fc>)
 80141c2:	7dfb      	ldrb	r3, [r7, #23]
 80141c4:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 80141c6:	7dfb      	ldrb	r3, [r7, #23]
 80141c8:	461a      	mov	r2, r3
 80141ca:	68b9      	ldr	r1, [r7, #8]
 80141cc:	68f8      	ldr	r0, [r7, #12]
 80141ce:	f7ff fe93 	bl	8013ef8 <etharp_output_to_arp_index>
 80141d2:	4603      	mov	r3, r0
 80141d4:	e018      	b.n	8014208 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 80141d6:	7dfb      	ldrb	r3, [r7, #23]
 80141d8:	3301      	adds	r3, #1
 80141da:	75fb      	strb	r3, [r7, #23]
 80141dc:	7dfb      	ldrb	r3, [r7, #23]
 80141de:	2b09      	cmp	r3, #9
 80141e0:	d9ca      	bls.n	8014178 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 80141e2:	68ba      	ldr	r2, [r7, #8]
 80141e4:	69b9      	ldr	r1, [r7, #24]
 80141e6:	68f8      	ldr	r0, [r7, #12]
 80141e8:	f000 f822 	bl	8014230 <etharp_query>
 80141ec:	4603      	mov	r3, r0
 80141ee:	e00b      	b.n	8014208 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 80141f0:	68fb      	ldr	r3, [r7, #12]
 80141f2:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80141f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80141fa:	9300      	str	r3, [sp, #0]
 80141fc:	69fb      	ldr	r3, [r7, #28]
 80141fe:	68b9      	ldr	r1, [r7, #8]
 8014200:	68f8      	ldr	r0, [r7, #12]
 8014202:	f001 fe6f 	bl	8015ee4 <ethernet_output>
 8014206:	4603      	mov	r3, r0
}
 8014208:	4618      	mov	r0, r3
 801420a:	3720      	adds	r7, #32
 801420c:	46bd      	mov	sp, r7
 801420e:	bd80      	pop	{r7, pc}
 8014210:	0801a388 	.word	0x0801a388
 8014214:	0801a4d8 	.word	0x0801a4d8
 8014218:	0801a400 	.word	0x0801a400
 801421c:	0801a528 	.word	0x0801a528
 8014220:	0801a4c8 	.word	0x0801a4c8
 8014224:	0801ac28 	.word	0x0801ac28
 8014228:	2000d288 	.word	0x2000d288
 801422c:	2000d198 	.word	0x2000d198

08014230 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014230:	b580      	push	{r7, lr}
 8014232:	b08c      	sub	sp, #48	; 0x30
 8014234:	af02      	add	r7, sp, #8
 8014236:	60f8      	str	r0, [r7, #12]
 8014238:	60b9      	str	r1, [r7, #8]
 801423a:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801423c:	68fb      	ldr	r3, [r7, #12]
 801423e:	3326      	adds	r3, #38	; 0x26
 8014240:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014242:	23ff      	movs	r3, #255	; 0xff
 8014244:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014248:	2300      	movs	r3, #0
 801424a:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801424c:	68bb      	ldr	r3, [r7, #8]
 801424e:	681b      	ldr	r3, [r3, #0]
 8014250:	68f9      	ldr	r1, [r7, #12]
 8014252:	4618      	mov	r0, r3
 8014254:	f000 fe0e 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 8014258:	4603      	mov	r3, r0
 801425a:	2b00      	cmp	r3, #0
 801425c:	d10c      	bne.n	8014278 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801425e:	68bb      	ldr	r3, [r7, #8]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014266:	2be0      	cmp	r3, #224	; 0xe0
 8014268:	d006      	beq.n	8014278 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801426a:	68bb      	ldr	r3, [r7, #8]
 801426c:	2b00      	cmp	r3, #0
 801426e:	d003      	beq.n	8014278 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014270:	68bb      	ldr	r3, [r7, #8]
 8014272:	681b      	ldr	r3, [r3, #0]
 8014274:	2b00      	cmp	r3, #0
 8014276:	d102      	bne.n	801427e <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014278:	f06f 030f 	mvn.w	r3, #15
 801427c:	e101      	b.n	8014482 <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801427e:	68fa      	ldr	r2, [r7, #12]
 8014280:	2101      	movs	r1, #1
 8014282:	68b8      	ldr	r0, [r7, #8]
 8014284:	f7ff fb60 	bl	8013948 <etharp_find_entry>
 8014288:	4603      	mov	r3, r0
 801428a:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801428c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014290:	2b00      	cmp	r3, #0
 8014292:	da02      	bge.n	801429a <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014294:	8a7b      	ldrh	r3, [r7, #18]
 8014296:	b25b      	sxtb	r3, r3
 8014298:	e0f3      	b.n	8014482 <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801429a:	8a7b      	ldrh	r3, [r7, #18]
 801429c:	2b7e      	cmp	r3, #126	; 0x7e
 801429e:	d906      	bls.n	80142ae <etharp_query+0x7e>
 80142a0:	4b7a      	ldr	r3, [pc, #488]	; (801448c <etharp_query+0x25c>)
 80142a2:	f240 32c1 	movw	r2, #961	; 0x3c1
 80142a6:	497a      	ldr	r1, [pc, #488]	; (8014490 <etharp_query+0x260>)
 80142a8:	487a      	ldr	r0, [pc, #488]	; (8014494 <etharp_query+0x264>)
 80142aa:	f002 f951 	bl	8016550 <iprintf>
  i = (netif_addr_idx_t)i_err;
 80142ae:	8a7b      	ldrh	r3, [r7, #18]
 80142b0:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 80142b2:	7c7a      	ldrb	r2, [r7, #17]
 80142b4:	4978      	ldr	r1, [pc, #480]	; (8014498 <etharp_query+0x268>)
 80142b6:	4613      	mov	r3, r2
 80142b8:	005b      	lsls	r3, r3, #1
 80142ba:	4413      	add	r3, r2
 80142bc:	00db      	lsls	r3, r3, #3
 80142be:	440b      	add	r3, r1
 80142c0:	3314      	adds	r3, #20
 80142c2:	781b      	ldrb	r3, [r3, #0]
 80142c4:	2b00      	cmp	r3, #0
 80142c6:	d115      	bne.n	80142f4 <etharp_query+0xc4>
    is_new_entry = 1;
 80142c8:	2301      	movs	r3, #1
 80142ca:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 80142cc:	7c7a      	ldrb	r2, [r7, #17]
 80142ce:	4972      	ldr	r1, [pc, #456]	; (8014498 <etharp_query+0x268>)
 80142d0:	4613      	mov	r3, r2
 80142d2:	005b      	lsls	r3, r3, #1
 80142d4:	4413      	add	r3, r2
 80142d6:	00db      	lsls	r3, r3, #3
 80142d8:	440b      	add	r3, r1
 80142da:	3314      	adds	r3, #20
 80142dc:	2201      	movs	r2, #1
 80142de:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 80142e0:	7c7a      	ldrb	r2, [r7, #17]
 80142e2:	496d      	ldr	r1, [pc, #436]	; (8014498 <etharp_query+0x268>)
 80142e4:	4613      	mov	r3, r2
 80142e6:	005b      	lsls	r3, r3, #1
 80142e8:	4413      	add	r3, r2
 80142ea:	00db      	lsls	r3, r3, #3
 80142ec:	440b      	add	r3, r1
 80142ee:	3308      	adds	r3, #8
 80142f0:	68fa      	ldr	r2, [r7, #12]
 80142f2:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 80142f4:	7c7a      	ldrb	r2, [r7, #17]
 80142f6:	4968      	ldr	r1, [pc, #416]	; (8014498 <etharp_query+0x268>)
 80142f8:	4613      	mov	r3, r2
 80142fa:	005b      	lsls	r3, r3, #1
 80142fc:	4413      	add	r3, r2
 80142fe:	00db      	lsls	r3, r3, #3
 8014300:	440b      	add	r3, r1
 8014302:	3314      	adds	r3, #20
 8014304:	781b      	ldrb	r3, [r3, #0]
 8014306:	2b01      	cmp	r3, #1
 8014308:	d011      	beq.n	801432e <etharp_query+0xfe>
 801430a:	7c7a      	ldrb	r2, [r7, #17]
 801430c:	4962      	ldr	r1, [pc, #392]	; (8014498 <etharp_query+0x268>)
 801430e:	4613      	mov	r3, r2
 8014310:	005b      	lsls	r3, r3, #1
 8014312:	4413      	add	r3, r2
 8014314:	00db      	lsls	r3, r3, #3
 8014316:	440b      	add	r3, r1
 8014318:	3314      	adds	r3, #20
 801431a:	781b      	ldrb	r3, [r3, #0]
 801431c:	2b01      	cmp	r3, #1
 801431e:	d806      	bhi.n	801432e <etharp_query+0xfe>
 8014320:	4b5a      	ldr	r3, [pc, #360]	; (801448c <etharp_query+0x25c>)
 8014322:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014326:	495d      	ldr	r1, [pc, #372]	; (801449c <etharp_query+0x26c>)
 8014328:	485a      	ldr	r0, [pc, #360]	; (8014494 <etharp_query+0x264>)
 801432a:	f002 f911 	bl	8016550 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801432e:	6a3b      	ldr	r3, [r7, #32]
 8014330:	2b00      	cmp	r3, #0
 8014332:	d102      	bne.n	801433a <etharp_query+0x10a>
 8014334:	687b      	ldr	r3, [r7, #4]
 8014336:	2b00      	cmp	r3, #0
 8014338:	d10c      	bne.n	8014354 <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801433a:	68b9      	ldr	r1, [r7, #8]
 801433c:	68f8      	ldr	r0, [r7, #12]
 801433e:	f000 f963 	bl	8014608 <etharp_request>
 8014342:	4603      	mov	r3, r0
 8014344:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d102      	bne.n	8014354 <etharp_query+0x124>
      return result;
 801434e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014352:	e096      	b.n	8014482 <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	2b00      	cmp	r3, #0
 8014358:	d106      	bne.n	8014368 <etharp_query+0x138>
 801435a:	4b4c      	ldr	r3, [pc, #304]	; (801448c <etharp_query+0x25c>)
 801435c:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014360:	494f      	ldr	r1, [pc, #316]	; (80144a0 <etharp_query+0x270>)
 8014362:	484c      	ldr	r0, [pc, #304]	; (8014494 <etharp_query+0x264>)
 8014364:	f002 f8f4 	bl	8016550 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014368:	7c7a      	ldrb	r2, [r7, #17]
 801436a:	494b      	ldr	r1, [pc, #300]	; (8014498 <etharp_query+0x268>)
 801436c:	4613      	mov	r3, r2
 801436e:	005b      	lsls	r3, r3, #1
 8014370:	4413      	add	r3, r2
 8014372:	00db      	lsls	r3, r3, #3
 8014374:	440b      	add	r3, r1
 8014376:	3314      	adds	r3, #20
 8014378:	781b      	ldrb	r3, [r3, #0]
 801437a:	2b01      	cmp	r3, #1
 801437c:	d917      	bls.n	80143ae <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801437e:	4a49      	ldr	r2, [pc, #292]	; (80144a4 <etharp_query+0x274>)
 8014380:	7c7b      	ldrb	r3, [r7, #17]
 8014382:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014384:	7c7a      	ldrb	r2, [r7, #17]
 8014386:	4613      	mov	r3, r2
 8014388:	005b      	lsls	r3, r3, #1
 801438a:	4413      	add	r3, r2
 801438c:	00db      	lsls	r3, r3, #3
 801438e:	3308      	adds	r3, #8
 8014390:	4a41      	ldr	r2, [pc, #260]	; (8014498 <etharp_query+0x268>)
 8014392:	4413      	add	r3, r2
 8014394:	3304      	adds	r3, #4
 8014396:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801439a:	9200      	str	r2, [sp, #0]
 801439c:	697a      	ldr	r2, [r7, #20]
 801439e:	6879      	ldr	r1, [r7, #4]
 80143a0:	68f8      	ldr	r0, [r7, #12]
 80143a2:	f001 fd9f 	bl	8015ee4 <ethernet_output>
 80143a6:	4603      	mov	r3, r0
 80143a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80143ac:	e067      	b.n	801447e <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 80143ae:	7c7a      	ldrb	r2, [r7, #17]
 80143b0:	4939      	ldr	r1, [pc, #228]	; (8014498 <etharp_query+0x268>)
 80143b2:	4613      	mov	r3, r2
 80143b4:	005b      	lsls	r3, r3, #1
 80143b6:	4413      	add	r3, r2
 80143b8:	00db      	lsls	r3, r3, #3
 80143ba:	440b      	add	r3, r1
 80143bc:	3314      	adds	r3, #20
 80143be:	781b      	ldrb	r3, [r3, #0]
 80143c0:	2b01      	cmp	r3, #1
 80143c2:	d15c      	bne.n	801447e <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 80143c4:	2300      	movs	r3, #0
 80143c6:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	61fb      	str	r3, [r7, #28]
    while (p) {
 80143cc:	e01c      	b.n	8014408 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 80143ce:	69fb      	ldr	r3, [r7, #28]
 80143d0:	895a      	ldrh	r2, [r3, #10]
 80143d2:	69fb      	ldr	r3, [r7, #28]
 80143d4:	891b      	ldrh	r3, [r3, #8]
 80143d6:	429a      	cmp	r2, r3
 80143d8:	d10a      	bne.n	80143f0 <etharp_query+0x1c0>
 80143da:	69fb      	ldr	r3, [r7, #28]
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	2b00      	cmp	r3, #0
 80143e0:	d006      	beq.n	80143f0 <etharp_query+0x1c0>
 80143e2:	4b2a      	ldr	r3, [pc, #168]	; (801448c <etharp_query+0x25c>)
 80143e4:	f240 32f1 	movw	r2, #1009	; 0x3f1
 80143e8:	492f      	ldr	r1, [pc, #188]	; (80144a8 <etharp_query+0x278>)
 80143ea:	482a      	ldr	r0, [pc, #168]	; (8014494 <etharp_query+0x264>)
 80143ec:	f002 f8b0 	bl	8016550 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 80143f0:	69fb      	ldr	r3, [r7, #28]
 80143f2:	7b1b      	ldrb	r3, [r3, #12]
 80143f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	d002      	beq.n	8014402 <etharp_query+0x1d2>
        copy_needed = 1;
 80143fc:	2301      	movs	r3, #1
 80143fe:	61bb      	str	r3, [r7, #24]
        break;
 8014400:	e005      	b.n	801440e <etharp_query+0x1de>
      }
      p = p->next;
 8014402:	69fb      	ldr	r3, [r7, #28]
 8014404:	681b      	ldr	r3, [r3, #0]
 8014406:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014408:	69fb      	ldr	r3, [r7, #28]
 801440a:	2b00      	cmp	r3, #0
 801440c:	d1df      	bne.n	80143ce <etharp_query+0x19e>
    }
    if (copy_needed) {
 801440e:	69bb      	ldr	r3, [r7, #24]
 8014410:	2b00      	cmp	r3, #0
 8014412:	d007      	beq.n	8014424 <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	f44f 7120 	mov.w	r1, #640	; 0x280
 801441a:	200e      	movs	r0, #14
 801441c:	f7f8 faa6 	bl	800c96c <pbuf_clone>
 8014420:	61f8      	str	r0, [r7, #28]
 8014422:	e004      	b.n	801442e <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014428:	69f8      	ldr	r0, [r7, #28]
 801442a:	f7f7 ff95 	bl	800c358 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801442e:	69fb      	ldr	r3, [r7, #28]
 8014430:	2b00      	cmp	r3, #0
 8014432:	d021      	beq.n	8014478 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014434:	7c7a      	ldrb	r2, [r7, #17]
 8014436:	4918      	ldr	r1, [pc, #96]	; (8014498 <etharp_query+0x268>)
 8014438:	4613      	mov	r3, r2
 801443a:	005b      	lsls	r3, r3, #1
 801443c:	4413      	add	r3, r2
 801443e:	00db      	lsls	r3, r3, #3
 8014440:	440b      	add	r3, r1
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	2b00      	cmp	r3, #0
 8014446:	d00a      	beq.n	801445e <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014448:	7c7a      	ldrb	r2, [r7, #17]
 801444a:	4913      	ldr	r1, [pc, #76]	; (8014498 <etharp_query+0x268>)
 801444c:	4613      	mov	r3, r2
 801444e:	005b      	lsls	r3, r3, #1
 8014450:	4413      	add	r3, r2
 8014452:	00db      	lsls	r3, r3, #3
 8014454:	440b      	add	r3, r1
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	4618      	mov	r0, r3
 801445a:	f7f7 fed7 	bl	800c20c <pbuf_free>
      }
      arp_table[i].q = p;
 801445e:	7c7a      	ldrb	r2, [r7, #17]
 8014460:	490d      	ldr	r1, [pc, #52]	; (8014498 <etharp_query+0x268>)
 8014462:	4613      	mov	r3, r2
 8014464:	005b      	lsls	r3, r3, #1
 8014466:	4413      	add	r3, r2
 8014468:	00db      	lsls	r3, r3, #3
 801446a:	440b      	add	r3, r1
 801446c:	69fa      	ldr	r2, [r7, #28]
 801446e:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014470:	2300      	movs	r3, #0
 8014472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014476:	e002      	b.n	801447e <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8014478:	23ff      	movs	r3, #255	; 0xff
 801447a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801447e:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 8014482:	4618      	mov	r0, r3
 8014484:	3728      	adds	r7, #40	; 0x28
 8014486:	46bd      	mov	sp, r7
 8014488:	bd80      	pop	{r7, pc}
 801448a:	bf00      	nop
 801448c:	0801a388 	.word	0x0801a388
 8014490:	0801a534 	.word	0x0801a534
 8014494:	0801a400 	.word	0x0801a400
 8014498:	2000d198 	.word	0x2000d198
 801449c:	0801a544 	.word	0x0801a544
 80144a0:	0801a528 	.word	0x0801a528
 80144a4:	2000d288 	.word	0x2000d288
 80144a8:	0801a56c 	.word	0x0801a56c

080144ac <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 80144ac:	b580      	push	{r7, lr}
 80144ae:	b08a      	sub	sp, #40	; 0x28
 80144b0:	af02      	add	r7, sp, #8
 80144b2:	60f8      	str	r0, [r7, #12]
 80144b4:	60b9      	str	r1, [r7, #8]
 80144b6:	607a      	str	r2, [r7, #4]
 80144b8:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 80144ba:	2300      	movs	r3, #0
 80144bc:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 80144be:	68fb      	ldr	r3, [r7, #12]
 80144c0:	2b00      	cmp	r3, #0
 80144c2:	d106      	bne.n	80144d2 <etharp_raw+0x26>
 80144c4:	4b3a      	ldr	r3, [pc, #232]	; (80145b0 <etharp_raw+0x104>)
 80144c6:	f240 4257 	movw	r2, #1111	; 0x457
 80144ca:	493a      	ldr	r1, [pc, #232]	; (80145b4 <etharp_raw+0x108>)
 80144cc:	483a      	ldr	r0, [pc, #232]	; (80145b8 <etharp_raw+0x10c>)
 80144ce:	f002 f83f 	bl	8016550 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 80144d2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80144d6:	211c      	movs	r1, #28
 80144d8:	200e      	movs	r0, #14
 80144da:	f7f7 fbb3 	bl	800bc44 <pbuf_alloc>
 80144de:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 80144e0:	69bb      	ldr	r3, [r7, #24]
 80144e2:	2b00      	cmp	r3, #0
 80144e4:	d102      	bne.n	80144ec <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 80144e6:	f04f 33ff 	mov.w	r3, #4294967295
 80144ea:	e05d      	b.n	80145a8 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 80144ec:	69bb      	ldr	r3, [r7, #24]
 80144ee:	895b      	ldrh	r3, [r3, #10]
 80144f0:	2b1b      	cmp	r3, #27
 80144f2:	d806      	bhi.n	8014502 <etharp_raw+0x56>
 80144f4:	4b2e      	ldr	r3, [pc, #184]	; (80145b0 <etharp_raw+0x104>)
 80144f6:	f240 4262 	movw	r2, #1122	; 0x462
 80144fa:	4930      	ldr	r1, [pc, #192]	; (80145bc <etharp_raw+0x110>)
 80144fc:	482e      	ldr	r0, [pc, #184]	; (80145b8 <etharp_raw+0x10c>)
 80144fe:	f002 f827 	bl	8016550 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 8014502:	69bb      	ldr	r3, [r7, #24]
 8014504:	685b      	ldr	r3, [r3, #4]
 8014506:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8014508:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801450a:	4618      	mov	r0, r3
 801450c:	f7f5 ffa4 	bl	800a458 <lwip_htons>
 8014510:	4603      	mov	r3, r0
 8014512:	461a      	mov	r2, r3
 8014514:	697b      	ldr	r3, [r7, #20]
 8014516:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 8014518:	68fb      	ldr	r3, [r7, #12]
 801451a:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801451e:	2b06      	cmp	r3, #6
 8014520:	d006      	beq.n	8014530 <etharp_raw+0x84>
 8014522:	4b23      	ldr	r3, [pc, #140]	; (80145b0 <etharp_raw+0x104>)
 8014524:	f240 4269 	movw	r2, #1129	; 0x469
 8014528:	4925      	ldr	r1, [pc, #148]	; (80145c0 <etharp_raw+0x114>)
 801452a:	4823      	ldr	r0, [pc, #140]	; (80145b8 <etharp_raw+0x10c>)
 801452c:	f002 f810 	bl	8016550 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 8014530:	697b      	ldr	r3, [r7, #20]
 8014532:	3308      	adds	r3, #8
 8014534:	2206      	movs	r2, #6
 8014536:	6839      	ldr	r1, [r7, #0]
 8014538:	4618      	mov	r0, r3
 801453a:	f001 ff5e 	bl	80163fa <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801453e:	697b      	ldr	r3, [r7, #20]
 8014540:	3312      	adds	r3, #18
 8014542:	2206      	movs	r2, #6
 8014544:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014546:	4618      	mov	r0, r3
 8014548:	f001 ff57 	bl	80163fa <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801454c:	697b      	ldr	r3, [r7, #20]
 801454e:	330e      	adds	r3, #14
 8014550:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014552:	6812      	ldr	r2, [r2, #0]
 8014554:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 8014556:	697b      	ldr	r3, [r7, #20]
 8014558:	3318      	adds	r3, #24
 801455a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801455c:	6812      	ldr	r2, [r2, #0]
 801455e:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 8014560:	697b      	ldr	r3, [r7, #20]
 8014562:	2200      	movs	r2, #0
 8014564:	701a      	strb	r2, [r3, #0]
 8014566:	2200      	movs	r2, #0
 8014568:	f042 0201 	orr.w	r2, r2, #1
 801456c:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801456e:	697b      	ldr	r3, [r7, #20]
 8014570:	2200      	movs	r2, #0
 8014572:	f042 0208 	orr.w	r2, r2, #8
 8014576:	709a      	strb	r2, [r3, #2]
 8014578:	2200      	movs	r2, #0
 801457a:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801457c:	697b      	ldr	r3, [r7, #20]
 801457e:	2206      	movs	r2, #6
 8014580:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	2204      	movs	r2, #4
 8014586:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8014588:	f640 0306 	movw	r3, #2054	; 0x806
 801458c:	9300      	str	r3, [sp, #0]
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	68ba      	ldr	r2, [r7, #8]
 8014592:	69b9      	ldr	r1, [r7, #24]
 8014594:	68f8      	ldr	r0, [r7, #12]
 8014596:	f001 fca5 	bl	8015ee4 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801459a:	69b8      	ldr	r0, [r7, #24]
 801459c:	f7f7 fe36 	bl	800c20c <pbuf_free>
  p = NULL;
 80145a0:	2300      	movs	r3, #0
 80145a2:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 80145a4:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 80145a8:	4618      	mov	r0, r3
 80145aa:	3720      	adds	r7, #32
 80145ac:	46bd      	mov	sp, r7
 80145ae:	bd80      	pop	{r7, pc}
 80145b0:	0801a388 	.word	0x0801a388
 80145b4:	0801a4d8 	.word	0x0801a4d8
 80145b8:	0801a400 	.word	0x0801a400
 80145bc:	0801a588 	.word	0x0801a588
 80145c0:	0801a5bc 	.word	0x0801a5bc

080145c4 <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 80145c4:	b580      	push	{r7, lr}
 80145c6:	b088      	sub	sp, #32
 80145c8:	af04      	add	r7, sp, #16
 80145ca:	60f8      	str	r0, [r7, #12]
 80145cc:	60b9      	str	r1, [r7, #8]
 80145ce:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80145d0:	68fb      	ldr	r3, [r7, #12]
 80145d2:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 80145d6:	68fb      	ldr	r3, [r7, #12]
 80145d8:	f103 0026 	add.w	r0, r3, #38	; 0x26
 80145dc:	68fb      	ldr	r3, [r7, #12]
 80145de:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 80145e0:	2201      	movs	r2, #1
 80145e2:	9203      	str	r2, [sp, #12]
 80145e4:	68ba      	ldr	r2, [r7, #8]
 80145e6:	9202      	str	r2, [sp, #8]
 80145e8:	4a06      	ldr	r2, [pc, #24]	; (8014604 <etharp_request_dst+0x40>)
 80145ea:	9201      	str	r2, [sp, #4]
 80145ec:	9300      	str	r3, [sp, #0]
 80145ee:	4603      	mov	r3, r0
 80145f0:	687a      	ldr	r2, [r7, #4]
 80145f2:	68f8      	ldr	r0, [r7, #12]
 80145f4:	f7ff ff5a 	bl	80144ac <etharp_raw>
 80145f8:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 80145fa:	4618      	mov	r0, r3
 80145fc:	3710      	adds	r7, #16
 80145fe:	46bd      	mov	sp, r7
 8014600:	bd80      	pop	{r7, pc}
 8014602:	bf00      	nop
 8014604:	0801ac30 	.word	0x0801ac30

08014608 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8014608:	b580      	push	{r7, lr}
 801460a:	b082      	sub	sp, #8
 801460c:	af00      	add	r7, sp, #0
 801460e:	6078      	str	r0, [r7, #4]
 8014610:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 8014612:	4a05      	ldr	r2, [pc, #20]	; (8014628 <etharp_request+0x20>)
 8014614:	6839      	ldr	r1, [r7, #0]
 8014616:	6878      	ldr	r0, [r7, #4]
 8014618:	f7ff ffd4 	bl	80145c4 <etharp_request_dst>
 801461c:	4603      	mov	r3, r0
}
 801461e:	4618      	mov	r0, r3
 8014620:	3708      	adds	r7, #8
 8014622:	46bd      	mov	sp, r7
 8014624:	bd80      	pop	{r7, pc}
 8014626:	bf00      	nop
 8014628:	0801ac28 	.word	0x0801ac28

0801462c <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801462c:	b580      	push	{r7, lr}
 801462e:	b08e      	sub	sp, #56	; 0x38
 8014630:	af04      	add	r7, sp, #16
 8014632:	6078      	str	r0, [r7, #4]
 8014634:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 8014636:	4b79      	ldr	r3, [pc, #484]	; (801481c <icmp_input+0x1f0>)
 8014638:	689b      	ldr	r3, [r3, #8]
 801463a:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801463c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801463e:	781b      	ldrb	r3, [r3, #0]
 8014640:	f003 030f 	and.w	r3, r3, #15
 8014644:	b2db      	uxtb	r3, r3
 8014646:	009b      	lsls	r3, r3, #2
 8014648:	b2db      	uxtb	r3, r3
 801464a:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801464c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801464e:	2b13      	cmp	r3, #19
 8014650:	f240 80cd 	bls.w	80147ee <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	895b      	ldrh	r3, [r3, #10]
 8014658:	2b03      	cmp	r3, #3
 801465a:	f240 80ca 	bls.w	80147f2 <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	685b      	ldr	r3, [r3, #4]
 8014662:	781b      	ldrb	r3, [r3, #0]
 8014664:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 8014668:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801466c:	2b00      	cmp	r3, #0
 801466e:	f000 80b7 	beq.w	80147e0 <icmp_input+0x1b4>
 8014672:	2b08      	cmp	r3, #8
 8014674:	f040 80b7 	bne.w	80147e6 <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8014678:	4b69      	ldr	r3, [pc, #420]	; (8014820 <icmp_input+0x1f4>)
 801467a:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801467c:	4b67      	ldr	r3, [pc, #412]	; (801481c <icmp_input+0x1f0>)
 801467e:	695b      	ldr	r3, [r3, #20]
 8014680:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014684:	2be0      	cmp	r3, #224	; 0xe0
 8014686:	f000 80bb 	beq.w	8014800 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801468a:	4b64      	ldr	r3, [pc, #400]	; (801481c <icmp_input+0x1f0>)
 801468c:	695b      	ldr	r3, [r3, #20]
 801468e:	4a63      	ldr	r2, [pc, #396]	; (801481c <icmp_input+0x1f0>)
 8014690:	6812      	ldr	r2, [r2, #0]
 8014692:	4611      	mov	r1, r2
 8014694:	4618      	mov	r0, r3
 8014696:	f000 fbed 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 801469a:	4603      	mov	r3, r0
 801469c:	2b00      	cmp	r3, #0
 801469e:	f040 80b1 	bne.w	8014804 <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	891b      	ldrh	r3, [r3, #8]
 80146a6:	2b07      	cmp	r3, #7
 80146a8:	f240 80a5 	bls.w	80147f6 <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80146ac:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146ae:	330e      	adds	r3, #14
 80146b0:	4619      	mov	r1, r3
 80146b2:	6878      	ldr	r0, [r7, #4]
 80146b4:	f7f7 fd14 	bl	800c0e0 <pbuf_add_header>
 80146b8:	4603      	mov	r3, r0
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d04b      	beq.n	8014756 <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	891a      	ldrh	r2, [r3, #8]
 80146c2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146c4:	4413      	add	r3, r2
 80146c6:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 80146c8:	687b      	ldr	r3, [r7, #4]
 80146ca:	891b      	ldrh	r3, [r3, #8]
 80146cc:	8b7a      	ldrh	r2, [r7, #26]
 80146ce:	429a      	cmp	r2, r3
 80146d0:	f0c0 809a 	bcc.w	8014808 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 80146d4:	8b7b      	ldrh	r3, [r7, #26]
 80146d6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80146da:	4619      	mov	r1, r3
 80146dc:	200e      	movs	r0, #14
 80146de:	f7f7 fab1 	bl	800bc44 <pbuf_alloc>
 80146e2:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 80146e4:	697b      	ldr	r3, [r7, #20]
 80146e6:	2b00      	cmp	r3, #0
 80146e8:	f000 8090 	beq.w	801480c <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 80146ec:	697b      	ldr	r3, [r7, #20]
 80146ee:	895b      	ldrh	r3, [r3, #10]
 80146f0:	461a      	mov	r2, r3
 80146f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80146f4:	3308      	adds	r3, #8
 80146f6:	429a      	cmp	r2, r3
 80146f8:	d203      	bcs.n	8014702 <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 80146fa:	6978      	ldr	r0, [r7, #20]
 80146fc:	f7f7 fd86 	bl	800c20c <pbuf_free>
          goto icmperr;
 8014700:	e085      	b.n	801480e <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 8014702:	697b      	ldr	r3, [r7, #20]
 8014704:	685b      	ldr	r3, [r3, #4]
 8014706:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8014708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801470a:	4618      	mov	r0, r3
 801470c:	f001 fe75 	bl	80163fa <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8014710:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014712:	4619      	mov	r1, r3
 8014714:	6978      	ldr	r0, [r7, #20]
 8014716:	f7f7 fcf3 	bl	800c100 <pbuf_remove_header>
 801471a:	4603      	mov	r3, r0
 801471c:	2b00      	cmp	r3, #0
 801471e:	d009      	beq.n	8014734 <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 8014720:	4b40      	ldr	r3, [pc, #256]	; (8014824 <icmp_input+0x1f8>)
 8014722:	22b6      	movs	r2, #182	; 0xb6
 8014724:	4940      	ldr	r1, [pc, #256]	; (8014828 <icmp_input+0x1fc>)
 8014726:	4841      	ldr	r0, [pc, #260]	; (801482c <icmp_input+0x200>)
 8014728:	f001 ff12 	bl	8016550 <iprintf>
          pbuf_free(r);
 801472c:	6978      	ldr	r0, [r7, #20]
 801472e:	f7f7 fd6d 	bl	800c20c <pbuf_free>
          goto icmperr;
 8014732:	e06c      	b.n	801480e <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 8014734:	6879      	ldr	r1, [r7, #4]
 8014736:	6978      	ldr	r0, [r7, #20]
 8014738:	f7f7 fe9c 	bl	800c474 <pbuf_copy>
 801473c:	4603      	mov	r3, r0
 801473e:	2b00      	cmp	r3, #0
 8014740:	d003      	beq.n	801474a <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 8014742:	6978      	ldr	r0, [r7, #20]
 8014744:	f7f7 fd62 	bl	800c20c <pbuf_free>
          goto icmperr;
 8014748:	e061      	b.n	801480e <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801474a:	6878      	ldr	r0, [r7, #4]
 801474c:	f7f7 fd5e 	bl	800c20c <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 8014750:	697b      	ldr	r3, [r7, #20]
 8014752:	607b      	str	r3, [r7, #4]
 8014754:	e00f      	b.n	8014776 <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8014756:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014758:	330e      	adds	r3, #14
 801475a:	4619      	mov	r1, r3
 801475c:	6878      	ldr	r0, [r7, #4]
 801475e:	f7f7 fccf 	bl	800c100 <pbuf_remove_header>
 8014762:	4603      	mov	r3, r0
 8014764:	2b00      	cmp	r3, #0
 8014766:	d006      	beq.n	8014776 <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 8014768:	4b2e      	ldr	r3, [pc, #184]	; (8014824 <icmp_input+0x1f8>)
 801476a:	22c7      	movs	r2, #199	; 0xc7
 801476c:	4930      	ldr	r1, [pc, #192]	; (8014830 <icmp_input+0x204>)
 801476e:	482f      	ldr	r0, [pc, #188]	; (801482c <icmp_input+0x200>)
 8014770:	f001 feee 	bl	8016550 <iprintf>
          goto icmperr;
 8014774:	e04b      	b.n	801480e <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 8014776:	687b      	ldr	r3, [r7, #4]
 8014778:	685b      	ldr	r3, [r3, #4]
 801477a:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801477c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801477e:	4619      	mov	r1, r3
 8014780:	6878      	ldr	r0, [r7, #4]
 8014782:	f7f7 fcad 	bl	800c0e0 <pbuf_add_header>
 8014786:	4603      	mov	r3, r0
 8014788:	2b00      	cmp	r3, #0
 801478a:	d12b      	bne.n	80147e4 <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	685b      	ldr	r3, [r3, #4]
 8014790:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 8014792:	69fb      	ldr	r3, [r7, #28]
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	68fb      	ldr	r3, [r7, #12]
 8014798:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801479a:	4b20      	ldr	r3, [pc, #128]	; (801481c <icmp_input+0x1f0>)
 801479c:	691a      	ldr	r2, [r3, #16]
 801479e:	68fb      	ldr	r3, [r7, #12]
 80147a0:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 80147a2:	693b      	ldr	r3, [r7, #16]
 80147a4:	2200      	movs	r2, #0
 80147a6:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 80147a8:	693b      	ldr	r3, [r7, #16]
 80147aa:	2200      	movs	r2, #0
 80147ac:	709a      	strb	r2, [r3, #2]
 80147ae:	2200      	movs	r2, #0
 80147b0:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 80147b2:	68fb      	ldr	r3, [r7, #12]
 80147b4:	22ff      	movs	r2, #255	; 0xff
 80147b6:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 80147b8:	68fb      	ldr	r3, [r7, #12]
 80147ba:	2200      	movs	r2, #0
 80147bc:	729a      	strb	r2, [r3, #10]
 80147be:	2200      	movs	r2, #0
 80147c0:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 80147c2:	683b      	ldr	r3, [r7, #0]
 80147c4:	9302      	str	r3, [sp, #8]
 80147c6:	2301      	movs	r3, #1
 80147c8:	9301      	str	r3, [sp, #4]
 80147ca:	2300      	movs	r3, #0
 80147cc:	9300      	str	r3, [sp, #0]
 80147ce:	23ff      	movs	r3, #255	; 0xff
 80147d0:	2200      	movs	r2, #0
 80147d2:	69f9      	ldr	r1, [r7, #28]
 80147d4:	6878      	ldr	r0, [r7, #4]
 80147d6:	f000 fa75 	bl	8014cc4 <ip4_output_if>
 80147da:	4603      	mov	r3, r0
 80147dc:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 80147de:	e001      	b.n	80147e4 <icmp_input+0x1b8>
      break;
 80147e0:	bf00      	nop
 80147e2:	e000      	b.n	80147e6 <icmp_input+0x1ba>
      break;
 80147e4:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 80147e6:	6878      	ldr	r0, [r7, #4]
 80147e8:	f7f7 fd10 	bl	800c20c <pbuf_free>
  return;
 80147ec:	e013      	b.n	8014816 <icmp_input+0x1ea>
    goto lenerr;
 80147ee:	bf00      	nop
 80147f0:	e002      	b.n	80147f8 <icmp_input+0x1cc>
    goto lenerr;
 80147f2:	bf00      	nop
 80147f4:	e000      	b.n	80147f8 <icmp_input+0x1cc>
        goto lenerr;
 80147f6:	bf00      	nop
lenerr:
  pbuf_free(p);
 80147f8:	6878      	ldr	r0, [r7, #4]
 80147fa:	f7f7 fd07 	bl	800c20c <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 80147fe:	e00a      	b.n	8014816 <icmp_input+0x1ea>
        goto icmperr;
 8014800:	bf00      	nop
 8014802:	e004      	b.n	801480e <icmp_input+0x1e2>
        goto icmperr;
 8014804:	bf00      	nop
 8014806:	e002      	b.n	801480e <icmp_input+0x1e2>
          goto icmperr;
 8014808:	bf00      	nop
 801480a:	e000      	b.n	801480e <icmp_input+0x1e2>
          goto icmperr;
 801480c:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801480e:	6878      	ldr	r0, [r7, #4]
 8014810:	f7f7 fcfc 	bl	800c20c <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8014814:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 8014816:	3728      	adds	r7, #40	; 0x28
 8014818:	46bd      	mov	sp, r7
 801481a:	bd80      	pop	{r7, pc}
 801481c:	20009258 	.word	0x20009258
 8014820:	2000926c 	.word	0x2000926c
 8014824:	0801a600 	.word	0x0801a600
 8014828:	0801a638 	.word	0x0801a638
 801482c:	0801a670 	.word	0x0801a670
 8014830:	0801a698 	.word	0x0801a698

08014834 <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 8014834:	b580      	push	{r7, lr}
 8014836:	b082      	sub	sp, #8
 8014838:	af00      	add	r7, sp, #0
 801483a:	6078      	str	r0, [r7, #4]
 801483c:	460b      	mov	r3, r1
 801483e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 8014840:	78fb      	ldrb	r3, [r7, #3]
 8014842:	461a      	mov	r2, r3
 8014844:	2103      	movs	r1, #3
 8014846:	6878      	ldr	r0, [r7, #4]
 8014848:	f000 f814 	bl	8014874 <icmp_send_response>
}
 801484c:	bf00      	nop
 801484e:	3708      	adds	r7, #8
 8014850:	46bd      	mov	sp, r7
 8014852:	bd80      	pop	{r7, pc}

08014854 <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 8014854:	b580      	push	{r7, lr}
 8014856:	b082      	sub	sp, #8
 8014858:	af00      	add	r7, sp, #0
 801485a:	6078      	str	r0, [r7, #4]
 801485c:	460b      	mov	r3, r1
 801485e:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 8014860:	78fb      	ldrb	r3, [r7, #3]
 8014862:	461a      	mov	r2, r3
 8014864:	210b      	movs	r1, #11
 8014866:	6878      	ldr	r0, [r7, #4]
 8014868:	f000 f804 	bl	8014874 <icmp_send_response>
}
 801486c:	bf00      	nop
 801486e:	3708      	adds	r7, #8
 8014870:	46bd      	mov	sp, r7
 8014872:	bd80      	pop	{r7, pc}

08014874 <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 8014874:	b580      	push	{r7, lr}
 8014876:	b08c      	sub	sp, #48	; 0x30
 8014878:	af04      	add	r7, sp, #16
 801487a:	6078      	str	r0, [r7, #4]
 801487c:	460b      	mov	r3, r1
 801487e:	70fb      	strb	r3, [r7, #3]
 8014880:	4613      	mov	r3, r2
 8014882:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 8014884:	f44f 7220 	mov.w	r2, #640	; 0x280
 8014888:	2124      	movs	r1, #36	; 0x24
 801488a:	2022      	movs	r0, #34	; 0x22
 801488c:	f7f7 f9da 	bl	800bc44 <pbuf_alloc>
 8014890:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 8014892:	69fb      	ldr	r3, [r7, #28]
 8014894:	2b00      	cmp	r3, #0
 8014896:	d04c      	beq.n	8014932 <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	895b      	ldrh	r3, [r3, #10]
 801489c:	2b23      	cmp	r3, #35	; 0x23
 801489e:	d806      	bhi.n	80148ae <icmp_send_response+0x3a>
 80148a0:	4b26      	ldr	r3, [pc, #152]	; (801493c <icmp_send_response+0xc8>)
 80148a2:	f44f 72b4 	mov.w	r2, #360	; 0x168
 80148a6:	4926      	ldr	r1, [pc, #152]	; (8014940 <icmp_send_response+0xcc>)
 80148a8:	4826      	ldr	r0, [pc, #152]	; (8014944 <icmp_send_response+0xd0>)
 80148aa:	f001 fe51 	bl	8016550 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	685b      	ldr	r3, [r3, #4]
 80148b2:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 80148b4:	69fb      	ldr	r3, [r7, #28]
 80148b6:	685b      	ldr	r3, [r3, #4]
 80148b8:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 80148ba:	697b      	ldr	r3, [r7, #20]
 80148bc:	78fa      	ldrb	r2, [r7, #3]
 80148be:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 80148c0:	697b      	ldr	r3, [r7, #20]
 80148c2:	78ba      	ldrb	r2, [r7, #2]
 80148c4:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 80148c6:	697b      	ldr	r3, [r7, #20]
 80148c8:	2200      	movs	r2, #0
 80148ca:	711a      	strb	r2, [r3, #4]
 80148cc:	2200      	movs	r2, #0
 80148ce:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 80148d0:	697b      	ldr	r3, [r7, #20]
 80148d2:	2200      	movs	r2, #0
 80148d4:	719a      	strb	r2, [r3, #6]
 80148d6:	2200      	movs	r2, #0
 80148d8:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 80148da:	69fb      	ldr	r3, [r7, #28]
 80148dc:	685b      	ldr	r3, [r3, #4]
 80148de:	f103 0008 	add.w	r0, r3, #8
 80148e2:	687b      	ldr	r3, [r7, #4]
 80148e4:	685b      	ldr	r3, [r3, #4]
 80148e6:	221c      	movs	r2, #28
 80148e8:	4619      	mov	r1, r3
 80148ea:	f001 fd86 	bl	80163fa <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 80148ee:	69bb      	ldr	r3, [r7, #24]
 80148f0:	68db      	ldr	r3, [r3, #12]
 80148f2:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 80148f4:	f107 030c 	add.w	r3, r7, #12
 80148f8:	4618      	mov	r0, r3
 80148fa:	f000 f825 	bl	8014948 <ip4_route>
 80148fe:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8014900:	693b      	ldr	r3, [r7, #16]
 8014902:	2b00      	cmp	r3, #0
 8014904:	d011      	beq.n	801492a <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 8014906:	697b      	ldr	r3, [r7, #20]
 8014908:	2200      	movs	r2, #0
 801490a:	709a      	strb	r2, [r3, #2]
 801490c:	2200      	movs	r2, #0
 801490e:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8014910:	f107 020c 	add.w	r2, r7, #12
 8014914:	693b      	ldr	r3, [r7, #16]
 8014916:	9302      	str	r3, [sp, #8]
 8014918:	2301      	movs	r3, #1
 801491a:	9301      	str	r3, [sp, #4]
 801491c:	2300      	movs	r3, #0
 801491e:	9300      	str	r3, [sp, #0]
 8014920:	23ff      	movs	r3, #255	; 0xff
 8014922:	2100      	movs	r1, #0
 8014924:	69f8      	ldr	r0, [r7, #28]
 8014926:	f000 f9cd 	bl	8014cc4 <ip4_output_if>
  }
  pbuf_free(q);
 801492a:	69f8      	ldr	r0, [r7, #28]
 801492c:	f7f7 fc6e 	bl	800c20c <pbuf_free>
 8014930:	e000      	b.n	8014934 <icmp_send_response+0xc0>
    return;
 8014932:	bf00      	nop
}
 8014934:	3720      	adds	r7, #32
 8014936:	46bd      	mov	sp, r7
 8014938:	bd80      	pop	{r7, pc}
 801493a:	bf00      	nop
 801493c:	0801a600 	.word	0x0801a600
 8014940:	0801a6cc 	.word	0x0801a6cc
 8014944:	0801a670 	.word	0x0801a670

08014948 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 8014948:	b480      	push	{r7}
 801494a:	b085      	sub	sp, #20
 801494c:	af00      	add	r7, sp, #0
 801494e:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 8014950:	4b33      	ldr	r3, [pc, #204]	; (8014a20 <ip4_route+0xd8>)
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	60fb      	str	r3, [r7, #12]
 8014956:	e036      	b.n	80149c6 <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801495e:	f003 0301 	and.w	r3, r3, #1
 8014962:	b2db      	uxtb	r3, r3
 8014964:	2b00      	cmp	r3, #0
 8014966:	d02b      	beq.n	80149c0 <ip4_route+0x78>
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801496e:	089b      	lsrs	r3, r3, #2
 8014970:	f003 0301 	and.w	r3, r3, #1
 8014974:	b2db      	uxtb	r3, r3
 8014976:	2b00      	cmp	r3, #0
 8014978:	d022      	beq.n	80149c0 <ip4_route+0x78>
 801497a:	68fb      	ldr	r3, [r7, #12]
 801497c:	3304      	adds	r3, #4
 801497e:	681b      	ldr	r3, [r3, #0]
 8014980:	2b00      	cmp	r3, #0
 8014982:	d01d      	beq.n	80149c0 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681a      	ldr	r2, [r3, #0]
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	3304      	adds	r3, #4
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	405a      	eors	r2, r3
 8014990:	68fb      	ldr	r3, [r7, #12]
 8014992:	3308      	adds	r3, #8
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	4013      	ands	r3, r2
 8014998:	2b00      	cmp	r3, #0
 801499a:	d101      	bne.n	80149a0 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	e038      	b.n	8014a12 <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 80149a0:	68fb      	ldr	r3, [r7, #12]
 80149a2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149a6:	f003 0302 	and.w	r3, r3, #2
 80149aa:	2b00      	cmp	r3, #0
 80149ac:	d108      	bne.n	80149c0 <ip4_route+0x78>
 80149ae:	687b      	ldr	r3, [r7, #4]
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	68fb      	ldr	r3, [r7, #12]
 80149b4:	330c      	adds	r3, #12
 80149b6:	681b      	ldr	r3, [r3, #0]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d101      	bne.n	80149c0 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 80149bc:	68fb      	ldr	r3, [r7, #12]
 80149be:	e028      	b.n	8014a12 <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	681b      	ldr	r3, [r3, #0]
 80149c4:	60fb      	str	r3, [r7, #12]
 80149c6:	68fb      	ldr	r3, [r7, #12]
 80149c8:	2b00      	cmp	r3, #0
 80149ca:	d1c5      	bne.n	8014958 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80149cc:	4b15      	ldr	r3, [pc, #84]	; (8014a24 <ip4_route+0xdc>)
 80149ce:	681b      	ldr	r3, [r3, #0]
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d01a      	beq.n	8014a0a <ip4_route+0xc2>
 80149d4:	4b13      	ldr	r3, [pc, #76]	; (8014a24 <ip4_route+0xdc>)
 80149d6:	681b      	ldr	r3, [r3, #0]
 80149d8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149dc:	f003 0301 	and.w	r3, r3, #1
 80149e0:	2b00      	cmp	r3, #0
 80149e2:	d012      	beq.n	8014a0a <ip4_route+0xc2>
 80149e4:	4b0f      	ldr	r3, [pc, #60]	; (8014a24 <ip4_route+0xdc>)
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80149ec:	f003 0304 	and.w	r3, r3, #4
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d00a      	beq.n	8014a0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 80149f4:	4b0b      	ldr	r3, [pc, #44]	; (8014a24 <ip4_route+0xdc>)
 80149f6:	681b      	ldr	r3, [r3, #0]
 80149f8:	3304      	adds	r3, #4
 80149fa:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d004      	beq.n	8014a0a <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8014a00:	687b      	ldr	r3, [r7, #4]
 8014a02:	681b      	ldr	r3, [r3, #0]
 8014a04:	b2db      	uxtb	r3, r3
 8014a06:	2b7f      	cmp	r3, #127	; 0x7f
 8014a08:	d101      	bne.n	8014a0e <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	e001      	b.n	8014a12 <ip4_route+0xca>
  }

  return netif_default;
 8014a0e:	4b05      	ldr	r3, [pc, #20]	; (8014a24 <ip4_route+0xdc>)
 8014a10:	681b      	ldr	r3, [r3, #0]
}
 8014a12:	4618      	mov	r0, r3
 8014a14:	3714      	adds	r7, #20
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr
 8014a1e:	bf00      	nop
 8014a20:	2000d12c 	.word	0x2000d12c
 8014a24:	2000d130 	.word	0x2000d130

08014a28 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 8014a28:	b580      	push	{r7, lr}
 8014a2a:	b082      	sub	sp, #8
 8014a2c:	af00      	add	r7, sp, #0
 8014a2e:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 8014a30:	687b      	ldr	r3, [r7, #4]
 8014a32:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014a36:	f003 0301 	and.w	r3, r3, #1
 8014a3a:	b2db      	uxtb	r3, r3
 8014a3c:	2b00      	cmp	r3, #0
 8014a3e:	d016      	beq.n	8014a6e <ip4_input_accept+0x46>
 8014a40:	687b      	ldr	r3, [r7, #4]
 8014a42:	3304      	adds	r3, #4
 8014a44:	681b      	ldr	r3, [r3, #0]
 8014a46:	2b00      	cmp	r3, #0
 8014a48:	d011      	beq.n	8014a6e <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a4a:	4b0b      	ldr	r3, [pc, #44]	; (8014a78 <ip4_input_accept+0x50>)
 8014a4c:	695a      	ldr	r2, [r3, #20]
 8014a4e:	687b      	ldr	r3, [r7, #4]
 8014a50:	3304      	adds	r3, #4
 8014a52:	681b      	ldr	r3, [r3, #0]
 8014a54:	429a      	cmp	r2, r3
 8014a56:	d008      	beq.n	8014a6a <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 8014a58:	4b07      	ldr	r3, [pc, #28]	; (8014a78 <ip4_input_accept+0x50>)
 8014a5a:	695b      	ldr	r3, [r3, #20]
 8014a5c:	6879      	ldr	r1, [r7, #4]
 8014a5e:	4618      	mov	r0, r3
 8014a60:	f000 fa08 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 8014a64:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 8014a66:	2b00      	cmp	r3, #0
 8014a68:	d001      	beq.n	8014a6e <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 8014a6a:	2301      	movs	r3, #1
 8014a6c:	e000      	b.n	8014a70 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 8014a6e:	2300      	movs	r3, #0
}
 8014a70:	4618      	mov	r0, r3
 8014a72:	3708      	adds	r7, #8
 8014a74:	46bd      	mov	sp, r7
 8014a76:	bd80      	pop	{r7, pc}
 8014a78:	20009258 	.word	0x20009258

08014a7c <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8014a7c:	b580      	push	{r7, lr}
 8014a7e:	b086      	sub	sp, #24
 8014a80:	af00      	add	r7, sp, #0
 8014a82:	6078      	str	r0, [r7, #4]
 8014a84:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	685b      	ldr	r3, [r3, #4]
 8014a8a:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8014a8c:	697b      	ldr	r3, [r7, #20]
 8014a8e:	781b      	ldrb	r3, [r3, #0]
 8014a90:	091b      	lsrs	r3, r3, #4
 8014a92:	b2db      	uxtb	r3, r3
 8014a94:	2b04      	cmp	r3, #4
 8014a96:	d004      	beq.n	8014aa2 <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8014a98:	6878      	ldr	r0, [r7, #4]
 8014a9a:	f7f7 fbb7 	bl	800c20c <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8014a9e:	2300      	movs	r3, #0
 8014aa0:	e107      	b.n	8014cb2 <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 8014aa2:	697b      	ldr	r3, [r7, #20]
 8014aa4:	781b      	ldrb	r3, [r3, #0]
 8014aa6:	f003 030f 	and.w	r3, r3, #15
 8014aaa:	b2db      	uxtb	r3, r3
 8014aac:	009b      	lsls	r3, r3, #2
 8014aae:	b2db      	uxtb	r3, r3
 8014ab0:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 8014ab2:	697b      	ldr	r3, [r7, #20]
 8014ab4:	885b      	ldrh	r3, [r3, #2]
 8014ab6:	b29b      	uxth	r3, r3
 8014ab8:	4618      	mov	r0, r3
 8014aba:	f7f5 fccd 	bl	800a458 <lwip_htons>
 8014abe:	4603      	mov	r3, r0
 8014ac0:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 8014ac2:	687b      	ldr	r3, [r7, #4]
 8014ac4:	891b      	ldrh	r3, [r3, #8]
 8014ac6:	89ba      	ldrh	r2, [r7, #12]
 8014ac8:	429a      	cmp	r2, r3
 8014aca:	d204      	bcs.n	8014ad6 <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8014acc:	89bb      	ldrh	r3, [r7, #12]
 8014ace:	4619      	mov	r1, r3
 8014ad0:	6878      	ldr	r0, [r7, #4]
 8014ad2:	f7f7 fa15 	bl	800bf00 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 8014ad6:	687b      	ldr	r3, [r7, #4]
 8014ad8:	895b      	ldrh	r3, [r3, #10]
 8014ada:	89fa      	ldrh	r2, [r7, #14]
 8014adc:	429a      	cmp	r2, r3
 8014ade:	d807      	bhi.n	8014af0 <ip4_input+0x74>
 8014ae0:	687b      	ldr	r3, [r7, #4]
 8014ae2:	891b      	ldrh	r3, [r3, #8]
 8014ae4:	89ba      	ldrh	r2, [r7, #12]
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d802      	bhi.n	8014af0 <ip4_input+0x74>
 8014aea:	89fb      	ldrh	r3, [r7, #14]
 8014aec:	2b13      	cmp	r3, #19
 8014aee:	d804      	bhi.n	8014afa <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8014af0:	6878      	ldr	r0, [r7, #4]
 8014af2:	f7f7 fb8b 	bl	800c20c <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 8014af6:	2300      	movs	r3, #0
 8014af8:	e0db      	b.n	8014cb2 <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8014afa:	697b      	ldr	r3, [r7, #20]
 8014afc:	691b      	ldr	r3, [r3, #16]
 8014afe:	4a6f      	ldr	r2, [pc, #444]	; (8014cbc <ip4_input+0x240>)
 8014b00:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 8014b02:	697b      	ldr	r3, [r7, #20]
 8014b04:	68db      	ldr	r3, [r3, #12]
 8014b06:	4a6d      	ldr	r2, [pc, #436]	; (8014cbc <ip4_input+0x240>)
 8014b08:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014b0a:	4b6c      	ldr	r3, [pc, #432]	; (8014cbc <ip4_input+0x240>)
 8014b0c:	695b      	ldr	r3, [r3, #20]
 8014b0e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014b12:	2be0      	cmp	r3, #224	; 0xe0
 8014b14:	d112      	bne.n	8014b3c <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 8014b16:	683b      	ldr	r3, [r7, #0]
 8014b18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014b1c:	f003 0301 	and.w	r3, r3, #1
 8014b20:	b2db      	uxtb	r3, r3
 8014b22:	2b00      	cmp	r3, #0
 8014b24:	d007      	beq.n	8014b36 <ip4_input+0xba>
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	3304      	adds	r3, #4
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	2b00      	cmp	r3, #0
 8014b2e:	d002      	beq.n	8014b36 <ip4_input+0xba>
      netif = inp;
 8014b30:	683b      	ldr	r3, [r7, #0]
 8014b32:	613b      	str	r3, [r7, #16]
 8014b34:	e02a      	b.n	8014b8c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014b36:	2300      	movs	r3, #0
 8014b38:	613b      	str	r3, [r7, #16]
 8014b3a:	e027      	b.n	8014b8c <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 8014b3c:	6838      	ldr	r0, [r7, #0]
 8014b3e:	f7ff ff73 	bl	8014a28 <ip4_input_accept>
 8014b42:	4603      	mov	r3, r0
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	d002      	beq.n	8014b4e <ip4_input+0xd2>
      netif = inp;
 8014b48:	683b      	ldr	r3, [r7, #0]
 8014b4a:	613b      	str	r3, [r7, #16]
 8014b4c:	e01e      	b.n	8014b8c <ip4_input+0x110>
    } else {
      netif = NULL;
 8014b4e:	2300      	movs	r3, #0
 8014b50:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 8014b52:	4b5a      	ldr	r3, [pc, #360]	; (8014cbc <ip4_input+0x240>)
 8014b54:	695b      	ldr	r3, [r3, #20]
 8014b56:	b2db      	uxtb	r3, r3
 8014b58:	2b7f      	cmp	r3, #127	; 0x7f
 8014b5a:	d017      	beq.n	8014b8c <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 8014b5c:	4b58      	ldr	r3, [pc, #352]	; (8014cc0 <ip4_input+0x244>)
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	613b      	str	r3, [r7, #16]
 8014b62:	e00e      	b.n	8014b82 <ip4_input+0x106>
          if (netif == inp) {
 8014b64:	693a      	ldr	r2, [r7, #16]
 8014b66:	683b      	ldr	r3, [r7, #0]
 8014b68:	429a      	cmp	r2, r3
 8014b6a:	d006      	beq.n	8014b7a <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 8014b6c:	6938      	ldr	r0, [r7, #16]
 8014b6e:	f7ff ff5b 	bl	8014a28 <ip4_input_accept>
 8014b72:	4603      	mov	r3, r0
 8014b74:	2b00      	cmp	r3, #0
 8014b76:	d108      	bne.n	8014b8a <ip4_input+0x10e>
 8014b78:	e000      	b.n	8014b7c <ip4_input+0x100>
            continue;
 8014b7a:	bf00      	nop
        NETIF_FOREACH(netif) {
 8014b7c:	693b      	ldr	r3, [r7, #16]
 8014b7e:	681b      	ldr	r3, [r3, #0]
 8014b80:	613b      	str	r3, [r7, #16]
 8014b82:	693b      	ldr	r3, [r7, #16]
 8014b84:	2b00      	cmp	r3, #0
 8014b86:	d1ed      	bne.n	8014b64 <ip4_input+0xe8>
 8014b88:	e000      	b.n	8014b8c <ip4_input+0x110>
            break;
 8014b8a:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014b8c:	4b4b      	ldr	r3, [pc, #300]	; (8014cbc <ip4_input+0x240>)
 8014b8e:	691b      	ldr	r3, [r3, #16]
 8014b90:	6839      	ldr	r1, [r7, #0]
 8014b92:	4618      	mov	r0, r3
 8014b94:	f000 f96e 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	2b00      	cmp	r3, #0
 8014b9c:	d105      	bne.n	8014baa <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8014b9e:	4b47      	ldr	r3, [pc, #284]	; (8014cbc <ip4_input+0x240>)
 8014ba0:	691b      	ldr	r3, [r3, #16]
 8014ba2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8014ba6:	2be0      	cmp	r3, #224	; 0xe0
 8014ba8:	d104      	bne.n	8014bb4 <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8014baa:	6878      	ldr	r0, [r7, #4]
 8014bac:	f7f7 fb2e 	bl	800c20c <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8014bb0:	2300      	movs	r3, #0
 8014bb2:	e07e      	b.n	8014cb2 <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 8014bb4:	693b      	ldr	r3, [r7, #16]
 8014bb6:	2b00      	cmp	r3, #0
 8014bb8:	d104      	bne.n	8014bc4 <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8014bba:	6878      	ldr	r0, [r7, #4]
 8014bbc:	f7f7 fb26 	bl	800c20c <pbuf_free>
    return ERR_OK;
 8014bc0:	2300      	movs	r3, #0
 8014bc2:	e076      	b.n	8014cb2 <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 8014bc4:	697b      	ldr	r3, [r7, #20]
 8014bc6:	88db      	ldrh	r3, [r3, #6]
 8014bc8:	b29b      	uxth	r3, r3
 8014bca:	461a      	mov	r2, r3
 8014bcc:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8014bd0:	4013      	ands	r3, r2
 8014bd2:	2b00      	cmp	r3, #0
 8014bd4:	d00b      	beq.n	8014bee <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	f000 fdbc 	bl	8015754 <ip4_reass>
 8014bdc:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8014bde:	687b      	ldr	r3, [r7, #4]
 8014be0:	2b00      	cmp	r3, #0
 8014be2:	d101      	bne.n	8014be8 <ip4_input+0x16c>
      return ERR_OK;
 8014be4:	2300      	movs	r3, #0
 8014be6:	e064      	b.n	8014cb2 <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8014be8:	687b      	ldr	r3, [r7, #4]
 8014bea:	685b      	ldr	r3, [r3, #4]
 8014bec:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8014bee:	4a33      	ldr	r2, [pc, #204]	; (8014cbc <ip4_input+0x240>)
 8014bf0:	693b      	ldr	r3, [r7, #16]
 8014bf2:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 8014bf4:	4a31      	ldr	r2, [pc, #196]	; (8014cbc <ip4_input+0x240>)
 8014bf6:	683b      	ldr	r3, [r7, #0]
 8014bf8:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8014bfa:	4a30      	ldr	r2, [pc, #192]	; (8014cbc <ip4_input+0x240>)
 8014bfc:	697b      	ldr	r3, [r7, #20]
 8014bfe:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	781b      	ldrb	r3, [r3, #0]
 8014c04:	f003 030f 	and.w	r3, r3, #15
 8014c08:	b2db      	uxtb	r3, r3
 8014c0a:	009b      	lsls	r3, r3, #2
 8014c0c:	b2db      	uxtb	r3, r3
 8014c0e:	b29a      	uxth	r2, r3
 8014c10:	4b2a      	ldr	r3, [pc, #168]	; (8014cbc <ip4_input+0x240>)
 8014c12:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 8014c14:	89fb      	ldrh	r3, [r7, #14]
 8014c16:	4619      	mov	r1, r3
 8014c18:	6878      	ldr	r0, [r7, #4]
 8014c1a:	f7f7 fa71 	bl	800c100 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 8014c1e:	697b      	ldr	r3, [r7, #20]
 8014c20:	7a5b      	ldrb	r3, [r3, #9]
 8014c22:	2b11      	cmp	r3, #17
 8014c24:	d006      	beq.n	8014c34 <ip4_input+0x1b8>
 8014c26:	2b11      	cmp	r3, #17
 8014c28:	dc13      	bgt.n	8014c52 <ip4_input+0x1d6>
 8014c2a:	2b01      	cmp	r3, #1
 8014c2c:	d00c      	beq.n	8014c48 <ip4_input+0x1cc>
 8014c2e:	2b06      	cmp	r3, #6
 8014c30:	d005      	beq.n	8014c3e <ip4_input+0x1c2>
 8014c32:	e00e      	b.n	8014c52 <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 8014c34:	6839      	ldr	r1, [r7, #0]
 8014c36:	6878      	ldr	r0, [r7, #4]
 8014c38:	f7fe f9e8 	bl	801300c <udp_input>
        break;
 8014c3c:	e026      	b.n	8014c8c <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 8014c3e:	6839      	ldr	r1, [r7, #0]
 8014c40:	6878      	ldr	r0, [r7, #4]
 8014c42:	f7f9 fd67 	bl	800e714 <tcp_input>
        break;
 8014c46:	e021      	b.n	8014c8c <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 8014c48:	6839      	ldr	r1, [r7, #0]
 8014c4a:	6878      	ldr	r0, [r7, #4]
 8014c4c:	f7ff fcee 	bl	801462c <icmp_input>
        break;
 8014c50:	e01c      	b.n	8014c8c <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c52:	4b1a      	ldr	r3, [pc, #104]	; (8014cbc <ip4_input+0x240>)
 8014c54:	695b      	ldr	r3, [r3, #20]
 8014c56:	6939      	ldr	r1, [r7, #16]
 8014c58:	4618      	mov	r0, r3
 8014c5a:	f000 f90b 	bl	8014e74 <ip4_addr_isbroadcast_u32>
 8014c5e:	4603      	mov	r3, r0
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d10f      	bne.n	8014c84 <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8014c64:	4b15      	ldr	r3, [pc, #84]	; (8014cbc <ip4_input+0x240>)
 8014c66:	695b      	ldr	r3, [r3, #20]
 8014c68:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 8014c6c:	2be0      	cmp	r3, #224	; 0xe0
 8014c6e:	d009      	beq.n	8014c84 <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 8014c70:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8014c74:	4619      	mov	r1, r3
 8014c76:	6878      	ldr	r0, [r7, #4]
 8014c78:	f7f7 fab5 	bl	800c1e6 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8014c7c:	2102      	movs	r1, #2
 8014c7e:	6878      	ldr	r0, [r7, #4]
 8014c80:	f7ff fdd8 	bl	8014834 <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	f7f7 fac1 	bl	800c20c <pbuf_free>
        break;
 8014c8a:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8014c8c:	4b0b      	ldr	r3, [pc, #44]	; (8014cbc <ip4_input+0x240>)
 8014c8e:	2200      	movs	r2, #0
 8014c90:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 8014c92:	4b0a      	ldr	r3, [pc, #40]	; (8014cbc <ip4_input+0x240>)
 8014c94:	2200      	movs	r2, #0
 8014c96:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8014c98:	4b08      	ldr	r3, [pc, #32]	; (8014cbc <ip4_input+0x240>)
 8014c9a:	2200      	movs	r2, #0
 8014c9c:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8014c9e:	4b07      	ldr	r3, [pc, #28]	; (8014cbc <ip4_input+0x240>)
 8014ca0:	2200      	movs	r2, #0
 8014ca2:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 8014ca4:	4b05      	ldr	r3, [pc, #20]	; (8014cbc <ip4_input+0x240>)
 8014ca6:	2200      	movs	r2, #0
 8014ca8:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8014caa:	4b04      	ldr	r3, [pc, #16]	; (8014cbc <ip4_input+0x240>)
 8014cac:	2200      	movs	r2, #0
 8014cae:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8014cb0:	2300      	movs	r3, #0
}
 8014cb2:	4618      	mov	r0, r3
 8014cb4:	3718      	adds	r7, #24
 8014cb6:	46bd      	mov	sp, r7
 8014cb8:	bd80      	pop	{r7, pc}
 8014cba:	bf00      	nop
 8014cbc:	20009258 	.word	0x20009258
 8014cc0:	2000d12c 	.word	0x2000d12c

08014cc4 <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b08a      	sub	sp, #40	; 0x28
 8014cc8:	af04      	add	r7, sp, #16
 8014cca:	60f8      	str	r0, [r7, #12]
 8014ccc:	60b9      	str	r1, [r7, #8]
 8014cce:	607a      	str	r2, [r7, #4]
 8014cd0:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 8014cd2:	68bb      	ldr	r3, [r7, #8]
 8014cd4:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d009      	beq.n	8014cf0 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8014cdc:	68bb      	ldr	r3, [r7, #8]
 8014cde:	2b00      	cmp	r3, #0
 8014ce0:	d003      	beq.n	8014cea <ip4_output_if+0x26>
 8014ce2:	68bb      	ldr	r3, [r7, #8]
 8014ce4:	681b      	ldr	r3, [r3, #0]
 8014ce6:	2b00      	cmp	r3, #0
 8014ce8:	d102      	bne.n	8014cf0 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8014cea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cec:	3304      	adds	r3, #4
 8014cee:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8014cf0:	78fa      	ldrb	r2, [r7, #3]
 8014cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014cf4:	9302      	str	r3, [sp, #8]
 8014cf6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8014cfa:	9301      	str	r3, [sp, #4]
 8014cfc:	f897 3020 	ldrb.w	r3, [r7, #32]
 8014d00:	9300      	str	r3, [sp, #0]
 8014d02:	4613      	mov	r3, r2
 8014d04:	687a      	ldr	r2, [r7, #4]
 8014d06:	6979      	ldr	r1, [r7, #20]
 8014d08:	68f8      	ldr	r0, [r7, #12]
 8014d0a:	f000 f805 	bl	8014d18 <ip4_output_if_src>
 8014d0e:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8014d10:	4618      	mov	r0, r3
 8014d12:	3718      	adds	r7, #24
 8014d14:	46bd      	mov	sp, r7
 8014d16:	bd80      	pop	{r7, pc}

08014d18 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 8014d18:	b580      	push	{r7, lr}
 8014d1a:	b088      	sub	sp, #32
 8014d1c:	af00      	add	r7, sp, #0
 8014d1e:	60f8      	str	r0, [r7, #12]
 8014d20:	60b9      	str	r1, [r7, #8]
 8014d22:	607a      	str	r2, [r7, #4]
 8014d24:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 8014d26:	68fb      	ldr	r3, [r7, #12]
 8014d28:	7b9b      	ldrb	r3, [r3, #14]
 8014d2a:	2b01      	cmp	r3, #1
 8014d2c:	d006      	beq.n	8014d3c <ip4_output_if_src+0x24>
 8014d2e:	4b4b      	ldr	r3, [pc, #300]	; (8014e5c <ip4_output_if_src+0x144>)
 8014d30:	f44f 7255 	mov.w	r2, #852	; 0x354
 8014d34:	494a      	ldr	r1, [pc, #296]	; (8014e60 <ip4_output_if_src+0x148>)
 8014d36:	484b      	ldr	r0, [pc, #300]	; (8014e64 <ip4_output_if_src+0x14c>)
 8014d38:	f001 fc0a 	bl	8016550 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d060      	beq.n	8014e04 <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 8014d42:	2314      	movs	r3, #20
 8014d44:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 8014d46:	2114      	movs	r1, #20
 8014d48:	68f8      	ldr	r0, [r7, #12]
 8014d4a:	f7f7 f9c9 	bl	800c0e0 <pbuf_add_header>
 8014d4e:	4603      	mov	r3, r0
 8014d50:	2b00      	cmp	r3, #0
 8014d52:	d002      	beq.n	8014d5a <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014d54:	f06f 0301 	mvn.w	r3, #1
 8014d58:	e07c      	b.n	8014e54 <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 8014d5a:	68fb      	ldr	r3, [r7, #12]
 8014d5c:	685b      	ldr	r3, [r3, #4]
 8014d5e:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 8014d60:	68fb      	ldr	r3, [r7, #12]
 8014d62:	895b      	ldrh	r3, [r3, #10]
 8014d64:	2b13      	cmp	r3, #19
 8014d66:	d806      	bhi.n	8014d76 <ip4_output_if_src+0x5e>
 8014d68:	4b3c      	ldr	r3, [pc, #240]	; (8014e5c <ip4_output_if_src+0x144>)
 8014d6a:	f44f 7262 	mov.w	r2, #904	; 0x388
 8014d6e:	493e      	ldr	r1, [pc, #248]	; (8014e68 <ip4_output_if_src+0x150>)
 8014d70:	483c      	ldr	r0, [pc, #240]	; (8014e64 <ip4_output_if_src+0x14c>)
 8014d72:	f001 fbed 	bl	8016550 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 8014d76:	69fb      	ldr	r3, [r7, #28]
 8014d78:	78fa      	ldrb	r2, [r7, #3]
 8014d7a:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8014d7c:	69fb      	ldr	r3, [r7, #28]
 8014d7e:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8014d82:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681a      	ldr	r2, [r3, #0]
 8014d88:	69fb      	ldr	r3, [r7, #28]
 8014d8a:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8014d8c:	8b7b      	ldrh	r3, [r7, #26]
 8014d8e:	089b      	lsrs	r3, r3, #2
 8014d90:	b29b      	uxth	r3, r3
 8014d92:	b2db      	uxtb	r3, r3
 8014d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8014d98:	b2da      	uxtb	r2, r3
 8014d9a:	69fb      	ldr	r3, [r7, #28]
 8014d9c:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8014d9e:	69fb      	ldr	r3, [r7, #28]
 8014da0:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8014da4:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	891b      	ldrh	r3, [r3, #8]
 8014daa:	4618      	mov	r0, r3
 8014dac:	f7f5 fb54 	bl	800a458 <lwip_htons>
 8014db0:	4603      	mov	r3, r0
 8014db2:	461a      	mov	r2, r3
 8014db4:	69fb      	ldr	r3, [r7, #28]
 8014db6:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8014db8:	69fb      	ldr	r3, [r7, #28]
 8014dba:	2200      	movs	r2, #0
 8014dbc:	719a      	strb	r2, [r3, #6]
 8014dbe:	2200      	movs	r2, #0
 8014dc0:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 8014dc2:	4b2a      	ldr	r3, [pc, #168]	; (8014e6c <ip4_output_if_src+0x154>)
 8014dc4:	881b      	ldrh	r3, [r3, #0]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7f5 fb46 	bl	800a458 <lwip_htons>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	461a      	mov	r2, r3
 8014dd0:	69fb      	ldr	r3, [r7, #28]
 8014dd2:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 8014dd4:	4b25      	ldr	r3, [pc, #148]	; (8014e6c <ip4_output_if_src+0x154>)
 8014dd6:	881b      	ldrh	r3, [r3, #0]
 8014dd8:	3301      	adds	r3, #1
 8014dda:	b29a      	uxth	r2, r3
 8014ddc:	4b23      	ldr	r3, [pc, #140]	; (8014e6c <ip4_output_if_src+0x154>)
 8014dde:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8014de0:	68bb      	ldr	r3, [r7, #8]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d104      	bne.n	8014df0 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 8014de6:	4b22      	ldr	r3, [pc, #136]	; (8014e70 <ip4_output_if_src+0x158>)
 8014de8:	681a      	ldr	r2, [r3, #0]
 8014dea:	69fb      	ldr	r3, [r7, #28]
 8014dec:	60da      	str	r2, [r3, #12]
 8014dee:	e003      	b.n	8014df8 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8014df0:	68bb      	ldr	r3, [r7, #8]
 8014df2:	681a      	ldr	r2, [r3, #0]
 8014df4:	69fb      	ldr	r3, [r7, #28]
 8014df6:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8014df8:	69fb      	ldr	r3, [r7, #28]
 8014dfa:	2200      	movs	r2, #0
 8014dfc:	729a      	strb	r2, [r3, #10]
 8014dfe:	2200      	movs	r2, #0
 8014e00:	72da      	strb	r2, [r3, #11]
 8014e02:	e00f      	b.n	8014e24 <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 8014e04:	68fb      	ldr	r3, [r7, #12]
 8014e06:	895b      	ldrh	r3, [r3, #10]
 8014e08:	2b13      	cmp	r3, #19
 8014e0a:	d802      	bhi.n	8014e12 <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8014e0c:	f06f 0301 	mvn.w	r3, #1
 8014e10:	e020      	b.n	8014e54 <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 8014e12:	68fb      	ldr	r3, [r7, #12]
 8014e14:	685b      	ldr	r3, [r3, #4]
 8014e16:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 8014e18:	69fb      	ldr	r3, [r7, #28]
 8014e1a:	691b      	ldr	r3, [r3, #16]
 8014e1c:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 8014e1e:	f107 0314 	add.w	r3, r7, #20
 8014e22:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 8014e24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e26:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d00c      	beq.n	8014e46 <ip4_output_if_src+0x12e>
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	891a      	ldrh	r2, [r3, #8]
 8014e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e32:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8014e34:	429a      	cmp	r2, r3
 8014e36:	d906      	bls.n	8014e46 <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 8014e38:	687a      	ldr	r2, [r7, #4]
 8014e3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8014e3c:	68f8      	ldr	r0, [r7, #12]
 8014e3e:	f000 fe7d 	bl	8015b3c <ip4_frag>
 8014e42:	4603      	mov	r3, r0
 8014e44:	e006      	b.n	8014e54 <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 8014e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e48:	695b      	ldr	r3, [r3, #20]
 8014e4a:	687a      	ldr	r2, [r7, #4]
 8014e4c:	68f9      	ldr	r1, [r7, #12]
 8014e4e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8014e50:	4798      	blx	r3
 8014e52:	4603      	mov	r3, r0
}
 8014e54:	4618      	mov	r0, r3
 8014e56:	3720      	adds	r7, #32
 8014e58:	46bd      	mov	sp, r7
 8014e5a:	bd80      	pop	{r7, pc}
 8014e5c:	0801a6f8 	.word	0x0801a6f8
 8014e60:	0801a72c 	.word	0x0801a72c
 8014e64:	0801a738 	.word	0x0801a738
 8014e68:	0801a760 	.word	0x0801a760
 8014e6c:	2000d28a 	.word	0x2000d28a
 8014e70:	0801ac24 	.word	0x0801ac24

08014e74 <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 8014e74:	b480      	push	{r7}
 8014e76:	b085      	sub	sp, #20
 8014e78:	af00      	add	r7, sp, #0
 8014e7a:	6078      	str	r0, [r7, #4]
 8014e7c:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8014e82:	687b      	ldr	r3, [r7, #4]
 8014e84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014e88:	d002      	beq.n	8014e90 <ip4_addr_isbroadcast_u32+0x1c>
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	2b00      	cmp	r3, #0
 8014e8e:	d101      	bne.n	8014e94 <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8014e90:	2301      	movs	r3, #1
 8014e92:	e02a      	b.n	8014eea <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8014e94:	683b      	ldr	r3, [r7, #0]
 8014e96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8014e9a:	f003 0302 	and.w	r3, r3, #2
 8014e9e:	2b00      	cmp	r3, #0
 8014ea0:	d101      	bne.n	8014ea6 <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8014ea2:	2300      	movs	r3, #0
 8014ea4:	e021      	b.n	8014eea <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8014ea6:	683b      	ldr	r3, [r7, #0]
 8014ea8:	3304      	adds	r3, #4
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	429a      	cmp	r2, r3
 8014eb0:	d101      	bne.n	8014eb6 <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8014eb2:	2300      	movs	r3, #0
 8014eb4:	e019      	b.n	8014eea <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8014eb6:	68fa      	ldr	r2, [r7, #12]
 8014eb8:	683b      	ldr	r3, [r7, #0]
 8014eba:	3304      	adds	r3, #4
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	405a      	eors	r2, r3
 8014ec0:	683b      	ldr	r3, [r7, #0]
 8014ec2:	3308      	adds	r3, #8
 8014ec4:	681b      	ldr	r3, [r3, #0]
 8014ec6:	4013      	ands	r3, r2
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d10d      	bne.n	8014ee8 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014ecc:	683b      	ldr	r3, [r7, #0]
 8014ece:	3308      	adds	r3, #8
 8014ed0:	681b      	ldr	r3, [r3, #0]
 8014ed2:	43da      	mvns	r2, r3
 8014ed4:	687b      	ldr	r3, [r7, #4]
 8014ed6:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8014ed8:	683b      	ldr	r3, [r7, #0]
 8014eda:	3308      	adds	r3, #8
 8014edc:	681b      	ldr	r3, [r3, #0]
 8014ede:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8014ee0:	429a      	cmp	r2, r3
 8014ee2:	d101      	bne.n	8014ee8 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8014ee4:	2301      	movs	r3, #1
 8014ee6:	e000      	b.n	8014eea <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8014ee8:	2300      	movs	r3, #0
  }
}
 8014eea:	4618      	mov	r0, r3
 8014eec:	3714      	adds	r7, #20
 8014eee:	46bd      	mov	sp, r7
 8014ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ef4:	4770      	bx	lr
	...

08014ef8 <ip4addr_aton>:
 * @param addr pointer to which to save the ip address in network order
 * @return 1 if cp could be converted to addr, 0 on failure
 */
int
ip4addr_aton(const char *cp, ip4_addr_t *addr)
{
 8014ef8:	b580      	push	{r7, lr}
 8014efa:	b08a      	sub	sp, #40	; 0x28
 8014efc:	af00      	add	r7, sp, #0
 8014efe:	6078      	str	r0, [r7, #4]
 8014f00:	6039      	str	r1, [r7, #0]
  u32_t val;
  u8_t base;
  char c;
  u32_t parts[4];
  u32_t *pp = parts;
 8014f02:	f107 030c 	add.w	r3, r7, #12
 8014f06:	61fb      	str	r3, [r7, #28]

  c = *cp;
 8014f08:	687b      	ldr	r3, [r7, #4]
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    /*
     * Collect number up to ``.''.
     * Values are specified as for C:
     * 0x=hex, 0=octal, 1-9=decimal.
     */
    if (!lwip_isdigit(c)) {
 8014f10:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f14:	3301      	adds	r3, #1
 8014f16:	4a89      	ldr	r2, [pc, #548]	; (801513c <ip4addr_aton+0x244>)
 8014f18:	4413      	add	r3, r2
 8014f1a:	781b      	ldrb	r3, [r3, #0]
 8014f1c:	f003 0304 	and.w	r3, r3, #4
 8014f20:	2b00      	cmp	r3, #0
 8014f22:	d101      	bne.n	8014f28 <ip4addr_aton+0x30>
      return 0;
 8014f24:	2300      	movs	r3, #0
 8014f26:	e105      	b.n	8015134 <ip4addr_aton+0x23c>
    }
    val = 0;
 8014f28:	2300      	movs	r3, #0
 8014f2a:	627b      	str	r3, [r7, #36]	; 0x24
    base = 10;
 8014f2c:	230a      	movs	r3, #10
 8014f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    if (c == '0') {
 8014f32:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f36:	2b30      	cmp	r3, #48	; 0x30
 8014f38:	d11c      	bne.n	8014f74 <ip4addr_aton+0x7c>
      c = *++cp;
 8014f3a:	687b      	ldr	r3, [r7, #4]
 8014f3c:	3301      	adds	r3, #1
 8014f3e:	607b      	str	r3, [r7, #4]
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	781b      	ldrb	r3, [r3, #0]
 8014f44:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (c == 'x' || c == 'X') {
 8014f48:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f4c:	2b78      	cmp	r3, #120	; 0x78
 8014f4e:	d003      	beq.n	8014f58 <ip4addr_aton+0x60>
 8014f50:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f54:	2b58      	cmp	r3, #88	; 0x58
 8014f56:	d10a      	bne.n	8014f6e <ip4addr_aton+0x76>
        base = 16;
 8014f58:	2310      	movs	r3, #16
 8014f5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        c = *++cp;
 8014f5e:	687b      	ldr	r3, [r7, #4]
 8014f60:	3301      	adds	r3, #1
 8014f62:	607b      	str	r3, [r7, #4]
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	781b      	ldrb	r3, [r3, #0]
 8014f68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014f6c:	e002      	b.n	8014f74 <ip4addr_aton+0x7c>
      } else {
        base = 8;
 8014f6e:	2308      	movs	r3, #8
 8014f70:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
      }
    }
    for (;;) {
      if (lwip_isdigit(c)) {
 8014f74:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f78:	3301      	adds	r3, #1
 8014f7a:	4a70      	ldr	r2, [pc, #448]	; (801513c <ip4addr_aton+0x244>)
 8014f7c:	4413      	add	r3, r2
 8014f7e:	781b      	ldrb	r3, [r3, #0]
 8014f80:	f003 0304 	and.w	r3, r3, #4
 8014f84:	2b00      	cmp	r3, #0
 8014f86:	d011      	beq.n	8014fac <ip4addr_aton+0xb4>
        val = (val * base) + (u32_t)(c - '0');
 8014f88:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014f8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014f8e:	fb03 f202 	mul.w	r2, r3, r2
 8014f92:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014f96:	4413      	add	r3, r2
 8014f98:	3b30      	subs	r3, #48	; 0x30
 8014f9a:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	3301      	adds	r3, #1
 8014fa0:	607b      	str	r3, [r7, #4]
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8014faa:	e7e3      	b.n	8014f74 <ip4addr_aton+0x7c>
      } else if (base == 16 && lwip_isxdigit(c)) {
 8014fac:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8014fb0:	2b10      	cmp	r3, #16
 8014fb2:	d127      	bne.n	8015004 <ip4addr_aton+0x10c>
 8014fb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8014fb8:	3301      	adds	r3, #1
 8014fba:	4a60      	ldr	r2, [pc, #384]	; (801513c <ip4addr_aton+0x244>)
 8014fbc:	4413      	add	r3, r2
 8014fbe:	781b      	ldrb	r3, [r3, #0]
 8014fc0:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8014fc4:	2b00      	cmp	r3, #0
 8014fc6:	d01d      	beq.n	8015004 <ip4addr_aton+0x10c>
        val = (val << 4) | (u32_t)(c + 10 - (lwip_islower(c) ? 'a' : 'A'));
 8014fc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014fca:	011b      	lsls	r3, r3, #4
 8014fcc:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014fd0:	f102 010a 	add.w	r1, r2, #10
 8014fd4:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 8014fd8:	3201      	adds	r2, #1
 8014fda:	4858      	ldr	r0, [pc, #352]	; (801513c <ip4addr_aton+0x244>)
 8014fdc:	4402      	add	r2, r0
 8014fde:	7812      	ldrb	r2, [r2, #0]
 8014fe0:	f002 0203 	and.w	r2, r2, #3
 8014fe4:	2a02      	cmp	r2, #2
 8014fe6:	d101      	bne.n	8014fec <ip4addr_aton+0xf4>
 8014fe8:	2261      	movs	r2, #97	; 0x61
 8014fea:	e000      	b.n	8014fee <ip4addr_aton+0xf6>
 8014fec:	2241      	movs	r2, #65	; 0x41
 8014fee:	1a8a      	subs	r2, r1, r2
 8014ff0:	4313      	orrs	r3, r2
 8014ff2:	627b      	str	r3, [r7, #36]	; 0x24
        c = *++cp;
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	3301      	adds	r3, #1
 8014ff8:	607b      	str	r3, [r7, #4]
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	781b      	ldrb	r3, [r3, #0]
 8014ffe:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
      if (lwip_isdigit(c)) {
 8015002:	e7b7      	b.n	8014f74 <ip4addr_aton+0x7c>
      } else {
        break;
      }
    }
    if (c == '.') {
 8015004:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015008:	2b2e      	cmp	r3, #46	; 0x2e
 801500a:	d114      	bne.n	8015036 <ip4addr_aton+0x13e>
       * Internet format:
       *  a.b.c.d
       *  a.b.c   (with c treated as 16 bits)
       *  a.b (with b treated as 24 bits)
       */
      if (pp >= parts + 3) {
 801500c:	f107 030c 	add.w	r3, r7, #12
 8015010:	330c      	adds	r3, #12
 8015012:	69fa      	ldr	r2, [r7, #28]
 8015014:	429a      	cmp	r2, r3
 8015016:	d301      	bcc.n	801501c <ip4addr_aton+0x124>
        return 0;
 8015018:	2300      	movs	r3, #0
 801501a:	e08b      	b.n	8015134 <ip4addr_aton+0x23c>
      }
      *pp++ = val;
 801501c:	69fb      	ldr	r3, [r7, #28]
 801501e:	1d1a      	adds	r2, r3, #4
 8015020:	61fa      	str	r2, [r7, #28]
 8015022:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015024:	601a      	str	r2, [r3, #0]
      c = *++cp;
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	3301      	adds	r3, #1
 801502a:	607b      	str	r3, [r7, #4]
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    if (!lwip_isdigit(c)) {
 8015034:	e76c      	b.n	8014f10 <ip4addr_aton+0x18>
    } else {
      break;
 8015036:	bf00      	nop
    }
  }
  /*
   * Check for trailing characters.
   */
  if (c != '\0' && !lwip_isspace(c)) {
 8015038:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00b      	beq.n	8015058 <ip4addr_aton+0x160>
 8015040:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8015044:	3301      	adds	r3, #1
 8015046:	4a3d      	ldr	r2, [pc, #244]	; (801513c <ip4addr_aton+0x244>)
 8015048:	4413      	add	r3, r2
 801504a:	781b      	ldrb	r3, [r3, #0]
 801504c:	f003 0308 	and.w	r3, r3, #8
 8015050:	2b00      	cmp	r3, #0
 8015052:	d101      	bne.n	8015058 <ip4addr_aton+0x160>
    return 0;
 8015054:	2300      	movs	r3, #0
 8015056:	e06d      	b.n	8015134 <ip4addr_aton+0x23c>
  }
  /*
   * Concoct the address according to
   * the number of parts specified.
   */
  switch (pp - parts + 1) {
 8015058:	f107 030c 	add.w	r3, r7, #12
 801505c:	69fa      	ldr	r2, [r7, #28]
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	109b      	asrs	r3, r3, #2
 8015062:	3301      	adds	r3, #1
 8015064:	2b04      	cmp	r3, #4
 8015066:	d853      	bhi.n	8015110 <ip4addr_aton+0x218>
 8015068:	a201      	add	r2, pc, #4	; (adr r2, 8015070 <ip4addr_aton+0x178>)
 801506a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801506e:	bf00      	nop
 8015070:	08015085 	.word	0x08015085
 8015074:	0801511f 	.word	0x0801511f
 8015078:	08015089 	.word	0x08015089
 801507c:	080150ab 	.word	0x080150ab
 8015080:	080150d9 	.word	0x080150d9

    case 0:
      return 0;       /* initial nondigit */
 8015084:	2300      	movs	r3, #0
 8015086:	e055      	b.n	8015134 <ip4addr_aton+0x23c>

    case 1:             /* a -- 32 bits */
      break;

    case 2:             /* a.b -- 8.24 bits */
      if (val > 0xffffffUL) {
 8015088:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801508a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 801508e:	d301      	bcc.n	8015094 <ip4addr_aton+0x19c>
        return 0;
 8015090:	2300      	movs	r3, #0
 8015092:	e04f      	b.n	8015134 <ip4addr_aton+0x23c>
      }
      if (parts[0] > 0xff) {
 8015094:	68fb      	ldr	r3, [r7, #12]
 8015096:	2bff      	cmp	r3, #255	; 0xff
 8015098:	d901      	bls.n	801509e <ip4addr_aton+0x1a6>
        return 0;
 801509a:	2300      	movs	r3, #0
 801509c:	e04a      	b.n	8015134 <ip4addr_aton+0x23c>
      }
      val |= parts[0] << 24;
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	061b      	lsls	r3, r3, #24
 80150a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150a4:	4313      	orrs	r3, r2
 80150a6:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80150a8:	e03a      	b.n	8015120 <ip4addr_aton+0x228>

    case 3:             /* a.b.c -- 8.8.16 bits */
      if (val > 0xffff) {
 80150aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80150b0:	d301      	bcc.n	80150b6 <ip4addr_aton+0x1be>
        return 0;
 80150b2:	2300      	movs	r3, #0
 80150b4:	e03e      	b.n	8015134 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff)) {
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	2bff      	cmp	r3, #255	; 0xff
 80150ba:	d802      	bhi.n	80150c2 <ip4addr_aton+0x1ca>
 80150bc:	693b      	ldr	r3, [r7, #16]
 80150be:	2bff      	cmp	r3, #255	; 0xff
 80150c0:	d901      	bls.n	80150c6 <ip4addr_aton+0x1ce>
        return 0;
 80150c2:	2300      	movs	r3, #0
 80150c4:	e036      	b.n	8015134 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16);
 80150c6:	68fb      	ldr	r3, [r7, #12]
 80150c8:	061a      	lsls	r2, r3, #24
 80150ca:	693b      	ldr	r3, [r7, #16]
 80150cc:	041b      	lsls	r3, r3, #16
 80150ce:	4313      	orrs	r3, r2
 80150d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80150d2:	4313      	orrs	r3, r2
 80150d4:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 80150d6:	e023      	b.n	8015120 <ip4addr_aton+0x228>

    case 4:             /* a.b.c.d -- 8.8.8.8 bits */
      if (val > 0xff) {
 80150d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80150da:	2bff      	cmp	r3, #255	; 0xff
 80150dc:	d901      	bls.n	80150e2 <ip4addr_aton+0x1ea>
        return 0;
 80150de:	2300      	movs	r3, #0
 80150e0:	e028      	b.n	8015134 <ip4addr_aton+0x23c>
      }
      if ((parts[0] > 0xff) || (parts[1] > 0xff) || (parts[2] > 0xff)) {
 80150e2:	68fb      	ldr	r3, [r7, #12]
 80150e4:	2bff      	cmp	r3, #255	; 0xff
 80150e6:	d805      	bhi.n	80150f4 <ip4addr_aton+0x1fc>
 80150e8:	693b      	ldr	r3, [r7, #16]
 80150ea:	2bff      	cmp	r3, #255	; 0xff
 80150ec:	d802      	bhi.n	80150f4 <ip4addr_aton+0x1fc>
 80150ee:	697b      	ldr	r3, [r7, #20]
 80150f0:	2bff      	cmp	r3, #255	; 0xff
 80150f2:	d901      	bls.n	80150f8 <ip4addr_aton+0x200>
        return 0;
 80150f4:	2300      	movs	r3, #0
 80150f6:	e01d      	b.n	8015134 <ip4addr_aton+0x23c>
      }
      val |= (parts[0] << 24) | (parts[1] << 16) | (parts[2] << 8);
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	061a      	lsls	r2, r3, #24
 80150fc:	693b      	ldr	r3, [r7, #16]
 80150fe:	041b      	lsls	r3, r3, #16
 8015100:	431a      	orrs	r2, r3
 8015102:	697b      	ldr	r3, [r7, #20]
 8015104:	021b      	lsls	r3, r3, #8
 8015106:	4313      	orrs	r3, r2
 8015108:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801510a:	4313      	orrs	r3, r2
 801510c:	627b      	str	r3, [r7, #36]	; 0x24
      break;
 801510e:	e007      	b.n	8015120 <ip4addr_aton+0x228>
    default:
      LWIP_ASSERT("unhandled", 0);
 8015110:	4b0b      	ldr	r3, [pc, #44]	; (8015140 <ip4addr_aton+0x248>)
 8015112:	22f9      	movs	r2, #249	; 0xf9
 8015114:	490b      	ldr	r1, [pc, #44]	; (8015144 <ip4addr_aton+0x24c>)
 8015116:	480c      	ldr	r0, [pc, #48]	; (8015148 <ip4addr_aton+0x250>)
 8015118:	f001 fa1a 	bl	8016550 <iprintf>
      break;
 801511c:	e000      	b.n	8015120 <ip4addr_aton+0x228>
      break;
 801511e:	bf00      	nop
  }
  if (addr) {
 8015120:	683b      	ldr	r3, [r7, #0]
 8015122:	2b00      	cmp	r3, #0
 8015124:	d005      	beq.n	8015132 <ip4addr_aton+0x23a>
    ip4_addr_set_u32(addr, lwip_htonl(val));
 8015126:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015128:	f7f5 f9ab 	bl	800a482 <lwip_htonl>
 801512c:	4602      	mov	r2, r0
 801512e:	683b      	ldr	r3, [r7, #0]
 8015130:	601a      	str	r2, [r3, #0]
  }
  return 1;
 8015132:	2301      	movs	r3, #1
}
 8015134:	4618      	mov	r0, r3
 8015136:	3728      	adds	r7, #40	; 0x28
 8015138:	46bd      	mov	sp, r7
 801513a:	bd80      	pop	{r7, pc}
 801513c:	0801ac40 	.word	0x0801ac40
 8015140:	0801a790 	.word	0x0801a790
 8015144:	0801a7cc 	.word	0x0801a7cc
 8015148:	0801a7d8 	.word	0x0801a7d8

0801514c <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b084      	sub	sp, #16
 8015150:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015152:	2300      	movs	r3, #0
 8015154:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015156:	4b12      	ldr	r3, [pc, #72]	; (80151a0 <ip_reass_tmr+0x54>)
 8015158:	681b      	ldr	r3, [r3, #0]
 801515a:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801515c:	e018      	b.n	8015190 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	7fdb      	ldrb	r3, [r3, #31]
 8015162:	2b00      	cmp	r3, #0
 8015164:	d00b      	beq.n	801517e <ip_reass_tmr+0x32>
      r->timer--;
 8015166:	68fb      	ldr	r3, [r7, #12]
 8015168:	7fdb      	ldrb	r3, [r3, #31]
 801516a:	3b01      	subs	r3, #1
 801516c:	b2da      	uxtb	r2, r3
 801516e:	68fb      	ldr	r3, [r7, #12]
 8015170:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015172:	68fb      	ldr	r3, [r7, #12]
 8015174:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015176:	68fb      	ldr	r3, [r7, #12]
 8015178:	681b      	ldr	r3, [r3, #0]
 801517a:	60fb      	str	r3, [r7, #12]
 801517c:	e008      	b.n	8015190 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015182:	68fb      	ldr	r3, [r7, #12]
 8015184:	681b      	ldr	r3, [r3, #0]
 8015186:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015188:	68b9      	ldr	r1, [r7, #8]
 801518a:	6878      	ldr	r0, [r7, #4]
 801518c:	f000 f80a 	bl	80151a4 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015190:	68fb      	ldr	r3, [r7, #12]
 8015192:	2b00      	cmp	r3, #0
 8015194:	d1e3      	bne.n	801515e <ip_reass_tmr+0x12>
    }
  }
}
 8015196:	bf00      	nop
 8015198:	bf00      	nop
 801519a:	3710      	adds	r7, #16
 801519c:	46bd      	mov	sp, r7
 801519e:	bd80      	pop	{r7, pc}
 80151a0:	2000d28c 	.word	0x2000d28c

080151a4 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 80151a4:	b580      	push	{r7, lr}
 80151a6:	b088      	sub	sp, #32
 80151a8:	af00      	add	r7, sp, #0
 80151aa:	6078      	str	r0, [r7, #4]
 80151ac:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 80151ae:	2300      	movs	r3, #0
 80151b0:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 80151b2:	683a      	ldr	r2, [r7, #0]
 80151b4:	687b      	ldr	r3, [r7, #4]
 80151b6:	429a      	cmp	r2, r3
 80151b8:	d105      	bne.n	80151c6 <ip_reass_free_complete_datagram+0x22>
 80151ba:	4b45      	ldr	r3, [pc, #276]	; (80152d0 <ip_reass_free_complete_datagram+0x12c>)
 80151bc:	22ab      	movs	r2, #171	; 0xab
 80151be:	4945      	ldr	r1, [pc, #276]	; (80152d4 <ip_reass_free_complete_datagram+0x130>)
 80151c0:	4845      	ldr	r0, [pc, #276]	; (80152d8 <ip_reass_free_complete_datagram+0x134>)
 80151c2:	f001 f9c5 	bl	8016550 <iprintf>
  if (prev != NULL) {
 80151c6:	683b      	ldr	r3, [r7, #0]
 80151c8:	2b00      	cmp	r3, #0
 80151ca:	d00a      	beq.n	80151e2 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 80151cc:	683b      	ldr	r3, [r7, #0]
 80151ce:	681b      	ldr	r3, [r3, #0]
 80151d0:	687a      	ldr	r2, [r7, #4]
 80151d2:	429a      	cmp	r2, r3
 80151d4:	d005      	beq.n	80151e2 <ip_reass_free_complete_datagram+0x3e>
 80151d6:	4b3e      	ldr	r3, [pc, #248]	; (80152d0 <ip_reass_free_complete_datagram+0x12c>)
 80151d8:	22ad      	movs	r2, #173	; 0xad
 80151da:	4940      	ldr	r1, [pc, #256]	; (80152dc <ip_reass_free_complete_datagram+0x138>)
 80151dc:	483e      	ldr	r0, [pc, #248]	; (80152d8 <ip_reass_free_complete_datagram+0x134>)
 80151de:	f001 f9b7 	bl	8016550 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 80151e2:	687b      	ldr	r3, [r7, #4]
 80151e4:	685b      	ldr	r3, [r3, #4]
 80151e6:	685b      	ldr	r3, [r3, #4]
 80151e8:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 80151ea:	697b      	ldr	r3, [r7, #20]
 80151ec:	889b      	ldrh	r3, [r3, #4]
 80151ee:	b29b      	uxth	r3, r3
 80151f0:	2b00      	cmp	r3, #0
 80151f2:	d12a      	bne.n	801524a <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	685b      	ldr	r3, [r3, #4]
 80151f8:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 80151fa:	697b      	ldr	r3, [r7, #20]
 80151fc:	681a      	ldr	r2, [r3, #0]
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015202:	69bb      	ldr	r3, [r7, #24]
 8015204:	6858      	ldr	r0, [r3, #4]
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	3308      	adds	r3, #8
 801520a:	2214      	movs	r2, #20
 801520c:	4619      	mov	r1, r3
 801520e:	f001 f8f4 	bl	80163fa <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015212:	2101      	movs	r1, #1
 8015214:	69b8      	ldr	r0, [r7, #24]
 8015216:	f7ff fb1d 	bl	8014854 <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801521a:	69b8      	ldr	r0, [r7, #24]
 801521c:	f7f7 f884 	bl	800c328 <pbuf_clen>
 8015220:	4603      	mov	r3, r0
 8015222:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015224:	8bfa      	ldrh	r2, [r7, #30]
 8015226:	8a7b      	ldrh	r3, [r7, #18]
 8015228:	4413      	add	r3, r2
 801522a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801522e:	db05      	blt.n	801523c <ip_reass_free_complete_datagram+0x98>
 8015230:	4b27      	ldr	r3, [pc, #156]	; (80152d0 <ip_reass_free_complete_datagram+0x12c>)
 8015232:	22bc      	movs	r2, #188	; 0xbc
 8015234:	492a      	ldr	r1, [pc, #168]	; (80152e0 <ip_reass_free_complete_datagram+0x13c>)
 8015236:	4828      	ldr	r0, [pc, #160]	; (80152d8 <ip_reass_free_complete_datagram+0x134>)
 8015238:	f001 f98a 	bl	8016550 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801523c:	8bfa      	ldrh	r2, [r7, #30]
 801523e:	8a7b      	ldrh	r3, [r7, #18]
 8015240:	4413      	add	r3, r2
 8015242:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015244:	69b8      	ldr	r0, [r7, #24]
 8015246:	f7f6 ffe1 	bl	800c20c <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801524a:	687b      	ldr	r3, [r7, #4]
 801524c:	685b      	ldr	r3, [r3, #4]
 801524e:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015250:	e01f      	b.n	8015292 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015252:	69bb      	ldr	r3, [r7, #24]
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015258:	69bb      	ldr	r3, [r7, #24]
 801525a:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801525c:	697b      	ldr	r3, [r7, #20]
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015262:	68f8      	ldr	r0, [r7, #12]
 8015264:	f7f7 f860 	bl	800c328 <pbuf_clen>
 8015268:	4603      	mov	r3, r0
 801526a:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801526c:	8bfa      	ldrh	r2, [r7, #30]
 801526e:	8a7b      	ldrh	r3, [r7, #18]
 8015270:	4413      	add	r3, r2
 8015272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015276:	db05      	blt.n	8015284 <ip_reass_free_complete_datagram+0xe0>
 8015278:	4b15      	ldr	r3, [pc, #84]	; (80152d0 <ip_reass_free_complete_datagram+0x12c>)
 801527a:	22cc      	movs	r2, #204	; 0xcc
 801527c:	4918      	ldr	r1, [pc, #96]	; (80152e0 <ip_reass_free_complete_datagram+0x13c>)
 801527e:	4816      	ldr	r0, [pc, #88]	; (80152d8 <ip_reass_free_complete_datagram+0x134>)
 8015280:	f001 f966 	bl	8016550 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015284:	8bfa      	ldrh	r2, [r7, #30]
 8015286:	8a7b      	ldrh	r3, [r7, #18]
 8015288:	4413      	add	r3, r2
 801528a:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801528c:	68f8      	ldr	r0, [r7, #12]
 801528e:	f7f6 ffbd 	bl	800c20c <pbuf_free>
  while (p != NULL) {
 8015292:	69bb      	ldr	r3, [r7, #24]
 8015294:	2b00      	cmp	r3, #0
 8015296:	d1dc      	bne.n	8015252 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015298:	6839      	ldr	r1, [r7, #0]
 801529a:	6878      	ldr	r0, [r7, #4]
 801529c:	f000 f8c2 	bl	8015424 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 80152a0:	4b10      	ldr	r3, [pc, #64]	; (80152e4 <ip_reass_free_complete_datagram+0x140>)
 80152a2:	881b      	ldrh	r3, [r3, #0]
 80152a4:	8bfa      	ldrh	r2, [r7, #30]
 80152a6:	429a      	cmp	r2, r3
 80152a8:	d905      	bls.n	80152b6 <ip_reass_free_complete_datagram+0x112>
 80152aa:	4b09      	ldr	r3, [pc, #36]	; (80152d0 <ip_reass_free_complete_datagram+0x12c>)
 80152ac:	22d2      	movs	r2, #210	; 0xd2
 80152ae:	490e      	ldr	r1, [pc, #56]	; (80152e8 <ip_reass_free_complete_datagram+0x144>)
 80152b0:	4809      	ldr	r0, [pc, #36]	; (80152d8 <ip_reass_free_complete_datagram+0x134>)
 80152b2:	f001 f94d 	bl	8016550 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 80152b6:	4b0b      	ldr	r3, [pc, #44]	; (80152e4 <ip_reass_free_complete_datagram+0x140>)
 80152b8:	881a      	ldrh	r2, [r3, #0]
 80152ba:	8bfb      	ldrh	r3, [r7, #30]
 80152bc:	1ad3      	subs	r3, r2, r3
 80152be:	b29a      	uxth	r2, r3
 80152c0:	4b08      	ldr	r3, [pc, #32]	; (80152e4 <ip_reass_free_complete_datagram+0x140>)
 80152c2:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 80152c4:	8bfb      	ldrh	r3, [r7, #30]
}
 80152c6:	4618      	mov	r0, r3
 80152c8:	3720      	adds	r7, #32
 80152ca:	46bd      	mov	sp, r7
 80152cc:	bd80      	pop	{r7, pc}
 80152ce:	bf00      	nop
 80152d0:	0801a800 	.word	0x0801a800
 80152d4:	0801a83c 	.word	0x0801a83c
 80152d8:	0801a848 	.word	0x0801a848
 80152dc:	0801a870 	.word	0x0801a870
 80152e0:	0801a884 	.word	0x0801a884
 80152e4:	2000d290 	.word	0x2000d290
 80152e8:	0801a8a4 	.word	0x0801a8a4

080152ec <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b08a      	sub	sp, #40	; 0x28
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	6078      	str	r0, [r7, #4]
 80152f4:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 80152f6:	2300      	movs	r3, #0
 80152f8:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 80152fa:	2300      	movs	r3, #0
 80152fc:	623b      	str	r3, [r7, #32]
    prev = NULL;
 80152fe:	2300      	movs	r3, #0
 8015300:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015302:	2300      	movs	r3, #0
 8015304:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015306:	2300      	movs	r3, #0
 8015308:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801530a:	4b28      	ldr	r3, [pc, #160]	; (80153ac <ip_reass_remove_oldest_datagram+0xc0>)
 801530c:	681b      	ldr	r3, [r3, #0]
 801530e:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015310:	e030      	b.n	8015374 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015314:	695a      	ldr	r2, [r3, #20]
 8015316:	687b      	ldr	r3, [r7, #4]
 8015318:	68db      	ldr	r3, [r3, #12]
 801531a:	429a      	cmp	r2, r3
 801531c:	d10c      	bne.n	8015338 <ip_reass_remove_oldest_datagram+0x4c>
 801531e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015320:	699a      	ldr	r2, [r3, #24]
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	691b      	ldr	r3, [r3, #16]
 8015326:	429a      	cmp	r2, r3
 8015328:	d106      	bne.n	8015338 <ip_reass_remove_oldest_datagram+0x4c>
 801532a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801532c:	899a      	ldrh	r2, [r3, #12]
 801532e:	687b      	ldr	r3, [r7, #4]
 8015330:	889b      	ldrh	r3, [r3, #4]
 8015332:	b29b      	uxth	r3, r3
 8015334:	429a      	cmp	r2, r3
 8015336:	d014      	beq.n	8015362 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015338:	693b      	ldr	r3, [r7, #16]
 801533a:	3301      	adds	r3, #1
 801533c:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801533e:	6a3b      	ldr	r3, [r7, #32]
 8015340:	2b00      	cmp	r3, #0
 8015342:	d104      	bne.n	801534e <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015346:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015348:	69fb      	ldr	r3, [r7, #28]
 801534a:	61bb      	str	r3, [r7, #24]
 801534c:	e009      	b.n	8015362 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801534e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015350:	7fda      	ldrb	r2, [r3, #31]
 8015352:	6a3b      	ldr	r3, [r7, #32]
 8015354:	7fdb      	ldrb	r3, [r3, #31]
 8015356:	429a      	cmp	r2, r3
 8015358:	d803      	bhi.n	8015362 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801535a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801535c:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801535e:	69fb      	ldr	r3, [r7, #28]
 8015360:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015362:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	2b00      	cmp	r3, #0
 8015368:	d001      	beq.n	801536e <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801536a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801536c:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801536e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015370:	681b      	ldr	r3, [r3, #0]
 8015372:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015376:	2b00      	cmp	r3, #0
 8015378:	d1cb      	bne.n	8015312 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801537a:	6a3b      	ldr	r3, [r7, #32]
 801537c:	2b00      	cmp	r3, #0
 801537e:	d008      	beq.n	8015392 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015380:	69b9      	ldr	r1, [r7, #24]
 8015382:	6a38      	ldr	r0, [r7, #32]
 8015384:	f7ff ff0e 	bl	80151a4 <ip_reass_free_complete_datagram>
 8015388:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801538a:	697a      	ldr	r2, [r7, #20]
 801538c:	68fb      	ldr	r3, [r7, #12]
 801538e:	4413      	add	r3, r2
 8015390:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015392:	697a      	ldr	r2, [r7, #20]
 8015394:	683b      	ldr	r3, [r7, #0]
 8015396:	429a      	cmp	r2, r3
 8015398:	da02      	bge.n	80153a0 <ip_reass_remove_oldest_datagram+0xb4>
 801539a:	693b      	ldr	r3, [r7, #16]
 801539c:	2b01      	cmp	r3, #1
 801539e:	dcac      	bgt.n	80152fa <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 80153a0:	697b      	ldr	r3, [r7, #20]
}
 80153a2:	4618      	mov	r0, r3
 80153a4:	3728      	adds	r7, #40	; 0x28
 80153a6:	46bd      	mov	sp, r7
 80153a8:	bd80      	pop	{r7, pc}
 80153aa:	bf00      	nop
 80153ac:	2000d28c 	.word	0x2000d28c

080153b0 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 80153b0:	b580      	push	{r7, lr}
 80153b2:	b084      	sub	sp, #16
 80153b4:	af00      	add	r7, sp, #0
 80153b6:	6078      	str	r0, [r7, #4]
 80153b8:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80153ba:	2004      	movs	r0, #4
 80153bc:	f7f6 f816 	bl	800b3ec <memp_malloc>
 80153c0:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 80153c2:	68fb      	ldr	r3, [r7, #12]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d110      	bne.n	80153ea <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 80153c8:	6839      	ldr	r1, [r7, #0]
 80153ca:	6878      	ldr	r0, [r7, #4]
 80153cc:	f7ff ff8e 	bl	80152ec <ip_reass_remove_oldest_datagram>
 80153d0:	4602      	mov	r2, r0
 80153d2:	683b      	ldr	r3, [r7, #0]
 80153d4:	4293      	cmp	r3, r2
 80153d6:	dc03      	bgt.n	80153e0 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 80153d8:	2004      	movs	r0, #4
 80153da:	f7f6 f807 	bl	800b3ec <memp_malloc>
 80153de:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 80153e0:	68fb      	ldr	r3, [r7, #12]
 80153e2:	2b00      	cmp	r3, #0
 80153e4:	d101      	bne.n	80153ea <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 80153e6:	2300      	movs	r3, #0
 80153e8:	e016      	b.n	8015418 <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 80153ea:	2220      	movs	r2, #32
 80153ec:	2100      	movs	r1, #0
 80153ee:	68f8      	ldr	r0, [r7, #12]
 80153f0:	f001 f811 	bl	8016416 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 80153f4:	68fb      	ldr	r3, [r7, #12]
 80153f6:	220f      	movs	r2, #15
 80153f8:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 80153fa:	4b09      	ldr	r3, [pc, #36]	; (8015420 <ip_reass_enqueue_new_datagram+0x70>)
 80153fc:	681a      	ldr	r2, [r3, #0]
 80153fe:	68fb      	ldr	r3, [r7, #12]
 8015400:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015402:	4a07      	ldr	r2, [pc, #28]	; (8015420 <ip_reass_enqueue_new_datagram+0x70>)
 8015404:	68fb      	ldr	r3, [r7, #12]
 8015406:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015408:	68fb      	ldr	r3, [r7, #12]
 801540a:	3308      	adds	r3, #8
 801540c:	2214      	movs	r2, #20
 801540e:	6879      	ldr	r1, [r7, #4]
 8015410:	4618      	mov	r0, r3
 8015412:	f000 fff2 	bl	80163fa <memcpy>
  return ipr;
 8015416:	68fb      	ldr	r3, [r7, #12]
}
 8015418:	4618      	mov	r0, r3
 801541a:	3710      	adds	r7, #16
 801541c:	46bd      	mov	sp, r7
 801541e:	bd80      	pop	{r7, pc}
 8015420:	2000d28c 	.word	0x2000d28c

08015424 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015424:	b580      	push	{r7, lr}
 8015426:	b082      	sub	sp, #8
 8015428:	af00      	add	r7, sp, #0
 801542a:	6078      	str	r0, [r7, #4]
 801542c:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801542e:	4b10      	ldr	r3, [pc, #64]	; (8015470 <ip_reass_dequeue_datagram+0x4c>)
 8015430:	681b      	ldr	r3, [r3, #0]
 8015432:	687a      	ldr	r2, [r7, #4]
 8015434:	429a      	cmp	r2, r3
 8015436:	d104      	bne.n	8015442 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015438:	687b      	ldr	r3, [r7, #4]
 801543a:	681b      	ldr	r3, [r3, #0]
 801543c:	4a0c      	ldr	r2, [pc, #48]	; (8015470 <ip_reass_dequeue_datagram+0x4c>)
 801543e:	6013      	str	r3, [r2, #0]
 8015440:	e00d      	b.n	801545e <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015442:	683b      	ldr	r3, [r7, #0]
 8015444:	2b00      	cmp	r3, #0
 8015446:	d106      	bne.n	8015456 <ip_reass_dequeue_datagram+0x32>
 8015448:	4b0a      	ldr	r3, [pc, #40]	; (8015474 <ip_reass_dequeue_datagram+0x50>)
 801544a:	f240 1245 	movw	r2, #325	; 0x145
 801544e:	490a      	ldr	r1, [pc, #40]	; (8015478 <ip_reass_dequeue_datagram+0x54>)
 8015450:	480a      	ldr	r0, [pc, #40]	; (801547c <ip_reass_dequeue_datagram+0x58>)
 8015452:	f001 f87d 	bl	8016550 <iprintf>
    prev->next = ipr->next;
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	681a      	ldr	r2, [r3, #0]
 801545a:	683b      	ldr	r3, [r7, #0]
 801545c:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801545e:	6879      	ldr	r1, [r7, #4]
 8015460:	2004      	movs	r0, #4
 8015462:	f7f6 f839 	bl	800b4d8 <memp_free>
}
 8015466:	bf00      	nop
 8015468:	3708      	adds	r7, #8
 801546a:	46bd      	mov	sp, r7
 801546c:	bd80      	pop	{r7, pc}
 801546e:	bf00      	nop
 8015470:	2000d28c 	.word	0x2000d28c
 8015474:	0801a800 	.word	0x0801a800
 8015478:	0801a8c8 	.word	0x0801a8c8
 801547c:	0801a848 	.word	0x0801a848

08015480 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015480:	b580      	push	{r7, lr}
 8015482:	b08c      	sub	sp, #48	; 0x30
 8015484:	af00      	add	r7, sp, #0
 8015486:	60f8      	str	r0, [r7, #12]
 8015488:	60b9      	str	r1, [r7, #8]
 801548a:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801548c:	2300      	movs	r3, #0
 801548e:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015490:	2301      	movs	r3, #1
 8015492:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015494:	68bb      	ldr	r3, [r7, #8]
 8015496:	685b      	ldr	r3, [r3, #4]
 8015498:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801549a:	69fb      	ldr	r3, [r7, #28]
 801549c:	885b      	ldrh	r3, [r3, #2]
 801549e:	b29b      	uxth	r3, r3
 80154a0:	4618      	mov	r0, r3
 80154a2:	f7f4 ffd9 	bl	800a458 <lwip_htons>
 80154a6:	4603      	mov	r3, r0
 80154a8:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 80154aa:	69fb      	ldr	r3, [r7, #28]
 80154ac:	781b      	ldrb	r3, [r3, #0]
 80154ae:	f003 030f 	and.w	r3, r3, #15
 80154b2:	b2db      	uxtb	r3, r3
 80154b4:	009b      	lsls	r3, r3, #2
 80154b6:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 80154b8:	7e7b      	ldrb	r3, [r7, #25]
 80154ba:	b29b      	uxth	r3, r3
 80154bc:	8b7a      	ldrh	r2, [r7, #26]
 80154be:	429a      	cmp	r2, r3
 80154c0:	d202      	bcs.n	80154c8 <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 80154c2:	f04f 33ff 	mov.w	r3, #4294967295
 80154c6:	e135      	b.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 80154c8:	7e7b      	ldrb	r3, [r7, #25]
 80154ca:	b29b      	uxth	r3, r3
 80154cc:	8b7a      	ldrh	r2, [r7, #26]
 80154ce:	1ad3      	subs	r3, r2, r3
 80154d0:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 80154d2:	69fb      	ldr	r3, [r7, #28]
 80154d4:	88db      	ldrh	r3, [r3, #6]
 80154d6:	b29b      	uxth	r3, r3
 80154d8:	4618      	mov	r0, r3
 80154da:	f7f4 ffbd 	bl	800a458 <lwip_htons>
 80154de:	4603      	mov	r3, r0
 80154e0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80154e4:	b29b      	uxth	r3, r3
 80154e6:	00db      	lsls	r3, r3, #3
 80154e8:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 80154ea:	68bb      	ldr	r3, [r7, #8]
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 80154f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80154f2:	2200      	movs	r2, #0
 80154f4:	701a      	strb	r2, [r3, #0]
 80154f6:	2200      	movs	r2, #0
 80154f8:	705a      	strb	r2, [r3, #1]
 80154fa:	2200      	movs	r2, #0
 80154fc:	709a      	strb	r2, [r3, #2]
 80154fe:	2200      	movs	r2, #0
 8015500:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015504:	8afa      	ldrh	r2, [r7, #22]
 8015506:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015508:	8afa      	ldrh	r2, [r7, #22]
 801550a:	8b7b      	ldrh	r3, [r7, #26]
 801550c:	4413      	add	r3, r2
 801550e:	b29a      	uxth	r2, r3
 8015510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015512:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015514:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015516:	88db      	ldrh	r3, [r3, #6]
 8015518:	b29b      	uxth	r3, r3
 801551a:	8afa      	ldrh	r2, [r7, #22]
 801551c:	429a      	cmp	r2, r3
 801551e:	d902      	bls.n	8015526 <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015520:	f04f 33ff 	mov.w	r3, #4294967295
 8015524:	e106      	b.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015526:	68fb      	ldr	r3, [r7, #12]
 8015528:	685b      	ldr	r3, [r3, #4]
 801552a:	627b      	str	r3, [r7, #36]	; 0x24
 801552c:	e068      	b.n	8015600 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801552e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015530:	685b      	ldr	r3, [r3, #4]
 8015532:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015536:	889b      	ldrh	r3, [r3, #4]
 8015538:	b29a      	uxth	r2, r3
 801553a:	693b      	ldr	r3, [r7, #16]
 801553c:	889b      	ldrh	r3, [r3, #4]
 801553e:	b29b      	uxth	r3, r3
 8015540:	429a      	cmp	r2, r3
 8015542:	d235      	bcs.n	80155b0 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015546:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015548:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801554a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801554c:	2b00      	cmp	r3, #0
 801554e:	d020      	beq.n	8015592 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015552:	889b      	ldrh	r3, [r3, #4]
 8015554:	b29a      	uxth	r2, r3
 8015556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015558:	88db      	ldrh	r3, [r3, #6]
 801555a:	b29b      	uxth	r3, r3
 801555c:	429a      	cmp	r2, r3
 801555e:	d307      	bcc.n	8015570 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015560:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015562:	88db      	ldrh	r3, [r3, #6]
 8015564:	b29a      	uxth	r2, r3
 8015566:	693b      	ldr	r3, [r7, #16]
 8015568:	889b      	ldrh	r3, [r3, #4]
 801556a:	b29b      	uxth	r3, r3
 801556c:	429a      	cmp	r2, r3
 801556e:	d902      	bls.n	8015576 <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015570:	f04f 33ff 	mov.w	r3, #4294967295
 8015574:	e0de      	b.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015576:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015578:	68ba      	ldr	r2, [r7, #8]
 801557a:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801557c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801557e:	88db      	ldrh	r3, [r3, #6]
 8015580:	b29a      	uxth	r2, r3
 8015582:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015584:	889b      	ldrh	r3, [r3, #4]
 8015586:	b29b      	uxth	r3, r3
 8015588:	429a      	cmp	r2, r3
 801558a:	d03d      	beq.n	8015608 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801558c:	2300      	movs	r3, #0
 801558e:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015590:	e03a      	b.n	8015608 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015594:	88db      	ldrh	r3, [r3, #6]
 8015596:	b29a      	uxth	r2, r3
 8015598:	693b      	ldr	r3, [r7, #16]
 801559a:	889b      	ldrh	r3, [r3, #4]
 801559c:	b29b      	uxth	r3, r3
 801559e:	429a      	cmp	r2, r3
 80155a0:	d902      	bls.n	80155a8 <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155a2:	f04f 33ff 	mov.w	r3, #4294967295
 80155a6:	e0c5      	b.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 80155a8:	68fb      	ldr	r3, [r7, #12]
 80155aa:	68ba      	ldr	r2, [r7, #8]
 80155ac:	605a      	str	r2, [r3, #4]
      break;
 80155ae:	e02b      	b.n	8015608 <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 80155b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155b2:	889b      	ldrh	r3, [r3, #4]
 80155b4:	b29a      	uxth	r2, r3
 80155b6:	693b      	ldr	r3, [r7, #16]
 80155b8:	889b      	ldrh	r3, [r3, #4]
 80155ba:	b29b      	uxth	r3, r3
 80155bc:	429a      	cmp	r2, r3
 80155be:	d102      	bne.n	80155c6 <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155c0:	f04f 33ff 	mov.w	r3, #4294967295
 80155c4:	e0b6      	b.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 80155c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80155c8:	889b      	ldrh	r3, [r3, #4]
 80155ca:	b29a      	uxth	r2, r3
 80155cc:	693b      	ldr	r3, [r7, #16]
 80155ce:	88db      	ldrh	r3, [r3, #6]
 80155d0:	b29b      	uxth	r3, r3
 80155d2:	429a      	cmp	r2, r3
 80155d4:	d202      	bcs.n	80155dc <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 80155d6:	f04f 33ff 	mov.w	r3, #4294967295
 80155da:	e0ab      	b.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 80155dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155de:	2b00      	cmp	r3, #0
 80155e0:	d009      	beq.n	80155f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 80155e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80155e4:	88db      	ldrh	r3, [r3, #6]
 80155e6:	b29a      	uxth	r2, r3
 80155e8:	693b      	ldr	r3, [r7, #16]
 80155ea:	889b      	ldrh	r3, [r3, #4]
 80155ec:	b29b      	uxth	r3, r3
 80155ee:	429a      	cmp	r2, r3
 80155f0:	d001      	beq.n	80155f6 <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 80155f2:	2300      	movs	r3, #0
 80155f4:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 80155f6:	693b      	ldr	r3, [r7, #16]
 80155f8:	681b      	ldr	r3, [r3, #0]
 80155fa:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 80155fc:	693b      	ldr	r3, [r7, #16]
 80155fe:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015602:	2b00      	cmp	r3, #0
 8015604:	d193      	bne.n	801552e <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015606:	e000      	b.n	801560a <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015608:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801560a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801560c:	2b00      	cmp	r3, #0
 801560e:	d12d      	bne.n	801566c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015612:	2b00      	cmp	r3, #0
 8015614:	d01c      	beq.n	8015650 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015618:	88db      	ldrh	r3, [r3, #6]
 801561a:	b29a      	uxth	r2, r3
 801561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801561e:	889b      	ldrh	r3, [r3, #4]
 8015620:	b29b      	uxth	r3, r3
 8015622:	429a      	cmp	r2, r3
 8015624:	d906      	bls.n	8015634 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015626:	4b45      	ldr	r3, [pc, #276]	; (801573c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015628:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801562c:	4944      	ldr	r1, [pc, #272]	; (8015740 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801562e:	4845      	ldr	r0, [pc, #276]	; (8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015630:	f000 ff8e 	bl	8016550 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015634:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015636:	68ba      	ldr	r2, [r7, #8]
 8015638:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801563a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801563c:	88db      	ldrh	r3, [r3, #6]
 801563e:	b29a      	uxth	r2, r3
 8015640:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015642:	889b      	ldrh	r3, [r3, #4]
 8015644:	b29b      	uxth	r3, r3
 8015646:	429a      	cmp	r2, r3
 8015648:	d010      	beq.n	801566c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801564a:	2300      	movs	r3, #0
 801564c:	623b      	str	r3, [r7, #32]
 801564e:	e00d      	b.n	801566c <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015650:	68fb      	ldr	r3, [r7, #12]
 8015652:	685b      	ldr	r3, [r3, #4]
 8015654:	2b00      	cmp	r3, #0
 8015656:	d006      	beq.n	8015666 <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015658:	4b38      	ldr	r3, [pc, #224]	; (801573c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801565a:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801565e:	493a      	ldr	r1, [pc, #232]	; (8015748 <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015660:	4838      	ldr	r0, [pc, #224]	; (8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015662:	f000 ff75 	bl	8016550 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	68ba      	ldr	r2, [r7, #8]
 801566a:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801566c:	687b      	ldr	r3, [r7, #4]
 801566e:	2b00      	cmp	r3, #0
 8015670:	d105      	bne.n	801567e <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	7f9b      	ldrb	r3, [r3, #30]
 8015676:	f003 0301 	and.w	r3, r3, #1
 801567a:	2b00      	cmp	r3, #0
 801567c:	d059      	beq.n	8015732 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801567e:	6a3b      	ldr	r3, [r7, #32]
 8015680:	2b00      	cmp	r3, #0
 8015682:	d04f      	beq.n	8015724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015684:	68fb      	ldr	r3, [r7, #12]
 8015686:	685b      	ldr	r3, [r3, #4]
 8015688:	2b00      	cmp	r3, #0
 801568a:	d006      	beq.n	801569a <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	685b      	ldr	r3, [r3, #4]
 8015690:	685b      	ldr	r3, [r3, #4]
 8015692:	889b      	ldrh	r3, [r3, #4]
 8015694:	b29b      	uxth	r3, r3
 8015696:	2b00      	cmp	r3, #0
 8015698:	d002      	beq.n	80156a0 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801569a:	2300      	movs	r3, #0
 801569c:	623b      	str	r3, [r7, #32]
 801569e:	e041      	b.n	8015724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 80156a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a2:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 80156a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156a6:	681b      	ldr	r3, [r3, #0]
 80156a8:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80156aa:	e012      	b.n	80156d2 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 80156ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156ae:	685b      	ldr	r3, [r3, #4]
 80156b0:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 80156b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80156b4:	88db      	ldrh	r3, [r3, #6]
 80156b6:	b29a      	uxth	r2, r3
 80156b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ba:	889b      	ldrh	r3, [r3, #4]
 80156bc:	b29b      	uxth	r3, r3
 80156be:	429a      	cmp	r2, r3
 80156c0:	d002      	beq.n	80156c8 <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 80156c2:	2300      	movs	r3, #0
 80156c4:	623b      	str	r3, [r7, #32]
            break;
 80156c6:	e007      	b.n	80156d8 <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 80156c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ca:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 80156cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 80156d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80156d4:	2b00      	cmp	r3, #0
 80156d6:	d1e9      	bne.n	80156ac <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 80156d8:	6a3b      	ldr	r3, [r7, #32]
 80156da:	2b00      	cmp	r3, #0
 80156dc:	d022      	beq.n	8015724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 80156de:	68fb      	ldr	r3, [r7, #12]
 80156e0:	685b      	ldr	r3, [r3, #4]
 80156e2:	2b00      	cmp	r3, #0
 80156e4:	d106      	bne.n	80156f4 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 80156e6:	4b15      	ldr	r3, [pc, #84]	; (801573c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 80156e8:	f240 12df 	movw	r2, #479	; 0x1df
 80156ec:	4917      	ldr	r1, [pc, #92]	; (801574c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 80156ee:	4815      	ldr	r0, [pc, #84]	; (8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 80156f0:	f000 ff2e 	bl	8016550 <iprintf>
          LWIP_ASSERT("sanity check",
 80156f4:	68fb      	ldr	r3, [r7, #12]
 80156f6:	685b      	ldr	r3, [r3, #4]
 80156f8:	685b      	ldr	r3, [r3, #4]
 80156fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80156fc:	429a      	cmp	r2, r3
 80156fe:	d106      	bne.n	801570e <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8015700:	4b0e      	ldr	r3, [pc, #56]	; (801573c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015702:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8015706:	4911      	ldr	r1, [pc, #68]	; (801574c <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8015708:	480e      	ldr	r0, [pc, #56]	; (8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801570a:	f000 ff21 	bl	8016550 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801570e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015710:	681b      	ldr	r3, [r3, #0]
 8015712:	2b00      	cmp	r3, #0
 8015714:	d006      	beq.n	8015724 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 8015716:	4b09      	ldr	r3, [pc, #36]	; (801573c <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015718:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801571c:	490c      	ldr	r1, [pc, #48]	; (8015750 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801571e:	4809      	ldr	r0, [pc, #36]	; (8015744 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015720:	f000 ff16 	bl	8016550 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8015724:	6a3b      	ldr	r3, [r7, #32]
 8015726:	2b00      	cmp	r3, #0
 8015728:	bf14      	ite	ne
 801572a:	2301      	movne	r3, #1
 801572c:	2300      	moveq	r3, #0
 801572e:	b2db      	uxtb	r3, r3
 8015730:	e000      	b.n	8015734 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8015732:	2300      	movs	r3, #0
}
 8015734:	4618      	mov	r0, r3
 8015736:	3730      	adds	r7, #48	; 0x30
 8015738:	46bd      	mov	sp, r7
 801573a:	bd80      	pop	{r7, pc}
 801573c:	0801a800 	.word	0x0801a800
 8015740:	0801a8e4 	.word	0x0801a8e4
 8015744:	0801a848 	.word	0x0801a848
 8015748:	0801a904 	.word	0x0801a904
 801574c:	0801a93c 	.word	0x0801a93c
 8015750:	0801a94c 	.word	0x0801a94c

08015754 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8015754:	b580      	push	{r7, lr}
 8015756:	b08e      	sub	sp, #56	; 0x38
 8015758:	af00      	add	r7, sp, #0
 801575a:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801575c:	687b      	ldr	r3, [r7, #4]
 801575e:	685b      	ldr	r3, [r3, #4]
 8015760:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8015762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015764:	781b      	ldrb	r3, [r3, #0]
 8015766:	f003 030f 	and.w	r3, r3, #15
 801576a:	b2db      	uxtb	r3, r3
 801576c:	009b      	lsls	r3, r3, #2
 801576e:	b2db      	uxtb	r3, r3
 8015770:	2b14      	cmp	r3, #20
 8015772:	f040 8171 	bne.w	8015a58 <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 8015776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015778:	88db      	ldrh	r3, [r3, #6]
 801577a:	b29b      	uxth	r3, r3
 801577c:	4618      	mov	r0, r3
 801577e:	f7f4 fe6b 	bl	800a458 <lwip_htons>
 8015782:	4603      	mov	r3, r0
 8015784:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015788:	b29b      	uxth	r3, r3
 801578a:	00db      	lsls	r3, r3, #3
 801578c:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801578e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015790:	885b      	ldrh	r3, [r3, #2]
 8015792:	b29b      	uxth	r3, r3
 8015794:	4618      	mov	r0, r3
 8015796:	f7f4 fe5f 	bl	800a458 <lwip_htons>
 801579a:	4603      	mov	r3, r0
 801579c:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801579e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80157a0:	781b      	ldrb	r3, [r3, #0]
 80157a2:	f003 030f 	and.w	r3, r3, #15
 80157a6:	b2db      	uxtb	r3, r3
 80157a8:	009b      	lsls	r3, r3, #2
 80157aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80157ae:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157b6:	429a      	cmp	r2, r3
 80157b8:	f0c0 8150 	bcc.w	8015a5c <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80157bc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80157c0:	b29b      	uxth	r3, r3
 80157c2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80157c4:	1ad3      	subs	r3, r2, r3
 80157c6:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f7f6 fdad 	bl	800c328 <pbuf_clen>
 80157ce:	4603      	mov	r3, r0
 80157d0:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 80157d2:	4b8c      	ldr	r3, [pc, #560]	; (8015a04 <ip4_reass+0x2b0>)
 80157d4:	881b      	ldrh	r3, [r3, #0]
 80157d6:	461a      	mov	r2, r3
 80157d8:	8c3b      	ldrh	r3, [r7, #32]
 80157da:	4413      	add	r3, r2
 80157dc:	2b0a      	cmp	r3, #10
 80157de:	dd10      	ble.n	8015802 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80157e0:	8c3b      	ldrh	r3, [r7, #32]
 80157e2:	4619      	mov	r1, r3
 80157e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80157e6:	f7ff fd81 	bl	80152ec <ip_reass_remove_oldest_datagram>
 80157ea:	4603      	mov	r3, r0
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	f000 8137 	beq.w	8015a60 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 80157f2:	4b84      	ldr	r3, [pc, #528]	; (8015a04 <ip4_reass+0x2b0>)
 80157f4:	881b      	ldrh	r3, [r3, #0]
 80157f6:	461a      	mov	r2, r3
 80157f8:	8c3b      	ldrh	r3, [r7, #32]
 80157fa:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 80157fc:	2b0a      	cmp	r3, #10
 80157fe:	f300 812f 	bgt.w	8015a60 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015802:	4b81      	ldr	r3, [pc, #516]	; (8015a08 <ip4_reass+0x2b4>)
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	633b      	str	r3, [r7, #48]	; 0x30
 8015808:	e015      	b.n	8015836 <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801580c:	695a      	ldr	r2, [r3, #20]
 801580e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015810:	68db      	ldr	r3, [r3, #12]
 8015812:	429a      	cmp	r2, r3
 8015814:	d10c      	bne.n	8015830 <ip4_reass+0xdc>
 8015816:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015818:	699a      	ldr	r2, [r3, #24]
 801581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801581c:	691b      	ldr	r3, [r3, #16]
 801581e:	429a      	cmp	r2, r3
 8015820:	d106      	bne.n	8015830 <ip4_reass+0xdc>
 8015822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015824:	899a      	ldrh	r2, [r3, #12]
 8015826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015828:	889b      	ldrh	r3, [r3, #4]
 801582a:	b29b      	uxth	r3, r3
 801582c:	429a      	cmp	r2, r3
 801582e:	d006      	beq.n	801583e <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8015830:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015832:	681b      	ldr	r3, [r3, #0]
 8015834:	633b      	str	r3, [r7, #48]	; 0x30
 8015836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015838:	2b00      	cmp	r3, #0
 801583a:	d1e6      	bne.n	801580a <ip4_reass+0xb6>
 801583c:	e000      	b.n	8015840 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801583e:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8015840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015842:	2b00      	cmp	r3, #0
 8015844:	d109      	bne.n	801585a <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 8015846:	8c3b      	ldrh	r3, [r7, #32]
 8015848:	4619      	mov	r1, r3
 801584a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801584c:	f7ff fdb0 	bl	80153b0 <ip_reass_enqueue_new_datagram>
 8015850:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8015852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015854:	2b00      	cmp	r3, #0
 8015856:	d11c      	bne.n	8015892 <ip4_reass+0x13e>
      goto nullreturn;
 8015858:	e105      	b.n	8015a66 <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801585a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801585c:	88db      	ldrh	r3, [r3, #6]
 801585e:	b29b      	uxth	r3, r3
 8015860:	4618      	mov	r0, r3
 8015862:	f7f4 fdf9 	bl	800a458 <lwip_htons>
 8015866:	4603      	mov	r3, r0
 8015868:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801586c:	2b00      	cmp	r3, #0
 801586e:	d110      	bne.n	8015892 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 8015870:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015872:	89db      	ldrh	r3, [r3, #14]
 8015874:	4618      	mov	r0, r3
 8015876:	f7f4 fdef 	bl	800a458 <lwip_htons>
 801587a:	4603      	mov	r3, r0
 801587c:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 8015880:	2b00      	cmp	r3, #0
 8015882:	d006      	beq.n	8015892 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 8015884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015886:	3308      	adds	r3, #8
 8015888:	2214      	movs	r2, #20
 801588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801588c:	4618      	mov	r0, r3
 801588e:	f000 fdb4 	bl	80163fa <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 8015892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015894:	88db      	ldrh	r3, [r3, #6]
 8015896:	b29b      	uxth	r3, r3
 8015898:	f003 0320 	and.w	r3, r3, #32
 801589c:	2b00      	cmp	r3, #0
 801589e:	bf0c      	ite	eq
 80158a0:	2301      	moveq	r3, #1
 80158a2:	2300      	movne	r3, #0
 80158a4:	b2db      	uxtb	r3, r3
 80158a6:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80158a8:	69fb      	ldr	r3, [r7, #28]
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d00e      	beq.n	80158cc <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80158ae:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80158b0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158b2:	4413      	add	r3, r2
 80158b4:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80158b6:	8b7a      	ldrh	r2, [r7, #26]
 80158b8:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80158ba:	429a      	cmp	r2, r3
 80158bc:	f0c0 80a0 	bcc.w	8015a00 <ip4_reass+0x2ac>
 80158c0:	8b7b      	ldrh	r3, [r7, #26]
 80158c2:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80158c6:	4293      	cmp	r3, r2
 80158c8:	f200 809a 	bhi.w	8015a00 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 80158cc:	69fa      	ldr	r2, [r7, #28]
 80158ce:	6879      	ldr	r1, [r7, #4]
 80158d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80158d2:	f7ff fdd5 	bl	8015480 <ip_reass_chain_frag_into_datagram_and_validate>
 80158d6:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 80158d8:	697b      	ldr	r3, [r7, #20]
 80158da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80158de:	f000 809b 	beq.w	8015a18 <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 80158e2:	4b48      	ldr	r3, [pc, #288]	; (8015a04 <ip4_reass+0x2b0>)
 80158e4:	881a      	ldrh	r2, [r3, #0]
 80158e6:	8c3b      	ldrh	r3, [r7, #32]
 80158e8:	4413      	add	r3, r2
 80158ea:	b29a      	uxth	r2, r3
 80158ec:	4b45      	ldr	r3, [pc, #276]	; (8015a04 <ip4_reass+0x2b0>)
 80158ee:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 80158f0:	69fb      	ldr	r3, [r7, #28]
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d00d      	beq.n	8015912 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 80158f6:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80158f8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80158fa:	4413      	add	r3, r2
 80158fc:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 80158fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015900:	8a7a      	ldrh	r2, [r7, #18]
 8015902:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8015904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015906:	7f9b      	ldrb	r3, [r3, #30]
 8015908:	f043 0301 	orr.w	r3, r3, #1
 801590c:	b2da      	uxtb	r2, r3
 801590e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015910:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8015912:	697b      	ldr	r3, [r7, #20]
 8015914:	2b01      	cmp	r3, #1
 8015916:	d171      	bne.n	80159fc <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 8015918:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801591a:	8b9b      	ldrh	r3, [r3, #28]
 801591c:	3314      	adds	r3, #20
 801591e:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8015920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015922:	685b      	ldr	r3, [r3, #4]
 8015924:	685b      	ldr	r3, [r3, #4]
 8015926:	681b      	ldr	r3, [r3, #0]
 8015928:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801592c:	685b      	ldr	r3, [r3, #4]
 801592e:	685b      	ldr	r3, [r3, #4]
 8015930:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8015932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015934:	3308      	adds	r3, #8
 8015936:	2214      	movs	r2, #20
 8015938:	4619      	mov	r1, r3
 801593a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801593c:	f000 fd5d 	bl	80163fa <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8015940:	8a3b      	ldrh	r3, [r7, #16]
 8015942:	4618      	mov	r0, r3
 8015944:	f7f4 fd88 	bl	800a458 <lwip_htons>
 8015948:	4603      	mov	r3, r0
 801594a:	461a      	mov	r2, r3
 801594c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801594e:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8015950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015952:	2200      	movs	r2, #0
 8015954:	719a      	strb	r2, [r3, #6]
 8015956:	2200      	movs	r2, #0
 8015958:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801595a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801595c:	2200      	movs	r2, #0
 801595e:	729a      	strb	r2, [r3, #10]
 8015960:	2200      	movs	r2, #0
 8015962:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8015964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015966:	685b      	ldr	r3, [r3, #4]
 8015968:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801596a:	e00d      	b.n	8015988 <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801596c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801596e:	685b      	ldr	r3, [r3, #4]
 8015970:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 8015972:	2114      	movs	r1, #20
 8015974:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015976:	f7f6 fbc3 	bl	800c100 <pbuf_remove_header>
      pbuf_cat(p, r);
 801597a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801597c:	6878      	ldr	r0, [r7, #4]
 801597e:	f7f6 fd13 	bl	800c3a8 <pbuf_cat>
      r = iprh->next_pbuf;
 8015982:	68fb      	ldr	r3, [r7, #12]
 8015984:	681b      	ldr	r3, [r3, #0]
 8015986:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 8015988:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801598a:	2b00      	cmp	r3, #0
 801598c:	d1ee      	bne.n	801596c <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801598e:	4b1e      	ldr	r3, [pc, #120]	; (8015a08 <ip4_reass+0x2b4>)
 8015990:	681b      	ldr	r3, [r3, #0]
 8015992:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015994:	429a      	cmp	r2, r3
 8015996:	d102      	bne.n	801599e <ip4_reass+0x24a>
      ipr_prev = NULL;
 8015998:	2300      	movs	r3, #0
 801599a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801599c:	e010      	b.n	80159c0 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801599e:	4b1a      	ldr	r3, [pc, #104]	; (8015a08 <ip4_reass+0x2b4>)
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159a4:	e007      	b.n	80159b6 <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80159a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159a8:	681b      	ldr	r3, [r3, #0]
 80159aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80159ac:	429a      	cmp	r2, r3
 80159ae:	d006      	beq.n	80159be <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80159b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b2:	681b      	ldr	r3, [r3, #0]
 80159b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80159b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80159b8:	2b00      	cmp	r3, #0
 80159ba:	d1f4      	bne.n	80159a6 <ip4_reass+0x252>
 80159bc:	e000      	b.n	80159c0 <ip4_reass+0x26c>
          break;
 80159be:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80159c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80159c2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159c4:	f7ff fd2e 	bl	8015424 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80159c8:	6878      	ldr	r0, [r7, #4]
 80159ca:	f7f6 fcad 	bl	800c328 <pbuf_clen>
 80159ce:	4603      	mov	r3, r0
 80159d0:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 80159d2:	4b0c      	ldr	r3, [pc, #48]	; (8015a04 <ip4_reass+0x2b0>)
 80159d4:	881b      	ldrh	r3, [r3, #0]
 80159d6:	8c3a      	ldrh	r2, [r7, #32]
 80159d8:	429a      	cmp	r2, r3
 80159da:	d906      	bls.n	80159ea <ip4_reass+0x296>
 80159dc:	4b0b      	ldr	r3, [pc, #44]	; (8015a0c <ip4_reass+0x2b8>)
 80159de:	f240 229b 	movw	r2, #667	; 0x29b
 80159e2:	490b      	ldr	r1, [pc, #44]	; (8015a10 <ip4_reass+0x2bc>)
 80159e4:	480b      	ldr	r0, [pc, #44]	; (8015a14 <ip4_reass+0x2c0>)
 80159e6:	f000 fdb3 	bl	8016550 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 80159ea:	4b06      	ldr	r3, [pc, #24]	; (8015a04 <ip4_reass+0x2b0>)
 80159ec:	881a      	ldrh	r2, [r3, #0]
 80159ee:	8c3b      	ldrh	r3, [r7, #32]
 80159f0:	1ad3      	subs	r3, r2, r3
 80159f2:	b29a      	uxth	r2, r3
 80159f4:	4b03      	ldr	r3, [pc, #12]	; (8015a04 <ip4_reass+0x2b0>)
 80159f6:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 80159f8:	687b      	ldr	r3, [r7, #4]
 80159fa:	e038      	b.n	8015a6e <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 80159fc:	2300      	movs	r3, #0
 80159fe:	e036      	b.n	8015a6e <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8015a00:	bf00      	nop
 8015a02:	e00a      	b.n	8015a1a <ip4_reass+0x2c6>
 8015a04:	2000d290 	.word	0x2000d290
 8015a08:	2000d28c 	.word	0x2000d28c
 8015a0c:	0801a800 	.word	0x0801a800
 8015a10:	0801a970 	.word	0x0801a970
 8015a14:	0801a848 	.word	0x0801a848
    goto nullreturn_ipr;
 8015a18:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 8015a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d106      	bne.n	8015a2e <ip4_reass+0x2da>
 8015a20:	4b15      	ldr	r3, [pc, #84]	; (8015a78 <ip4_reass+0x324>)
 8015a22:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 8015a26:	4915      	ldr	r1, [pc, #84]	; (8015a7c <ip4_reass+0x328>)
 8015a28:	4815      	ldr	r0, [pc, #84]	; (8015a80 <ip4_reass+0x32c>)
 8015a2a:	f000 fd91 	bl	8016550 <iprintf>
  if (ipr->p == NULL) {
 8015a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015a30:	685b      	ldr	r3, [r3, #4]
 8015a32:	2b00      	cmp	r3, #0
 8015a34:	d116      	bne.n	8015a64 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 8015a36:	4b13      	ldr	r3, [pc, #76]	; (8015a84 <ip4_reass+0x330>)
 8015a38:	681b      	ldr	r3, [r3, #0]
 8015a3a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	d006      	beq.n	8015a4e <ip4_reass+0x2fa>
 8015a40:	4b0d      	ldr	r3, [pc, #52]	; (8015a78 <ip4_reass+0x324>)
 8015a42:	f240 22ab 	movw	r2, #683	; 0x2ab
 8015a46:	4910      	ldr	r1, [pc, #64]	; (8015a88 <ip4_reass+0x334>)
 8015a48:	480d      	ldr	r0, [pc, #52]	; (8015a80 <ip4_reass+0x32c>)
 8015a4a:	f000 fd81 	bl	8016550 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8015a4e:	2100      	movs	r1, #0
 8015a50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8015a52:	f7ff fce7 	bl	8015424 <ip_reass_dequeue_datagram>
 8015a56:	e006      	b.n	8015a66 <ip4_reass+0x312>
    goto nullreturn;
 8015a58:	bf00      	nop
 8015a5a:	e004      	b.n	8015a66 <ip4_reass+0x312>
    goto nullreturn;
 8015a5c:	bf00      	nop
 8015a5e:	e002      	b.n	8015a66 <ip4_reass+0x312>
      goto nullreturn;
 8015a60:	bf00      	nop
 8015a62:	e000      	b.n	8015a66 <ip4_reass+0x312>
  }

nullreturn:
 8015a64:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 8015a66:	6878      	ldr	r0, [r7, #4]
 8015a68:	f7f6 fbd0 	bl	800c20c <pbuf_free>
  return NULL;
 8015a6c:	2300      	movs	r3, #0
}
 8015a6e:	4618      	mov	r0, r3
 8015a70:	3738      	adds	r7, #56	; 0x38
 8015a72:	46bd      	mov	sp, r7
 8015a74:	bd80      	pop	{r7, pc}
 8015a76:	bf00      	nop
 8015a78:	0801a800 	.word	0x0801a800
 8015a7c:	0801a98c 	.word	0x0801a98c
 8015a80:	0801a848 	.word	0x0801a848
 8015a84:	2000d28c 	.word	0x2000d28c
 8015a88:	0801a998 	.word	0x0801a998

08015a8c <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 8015a8c:	b580      	push	{r7, lr}
 8015a8e:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 8015a90:	2005      	movs	r0, #5
 8015a92:	f7f5 fcab 	bl	800b3ec <memp_malloc>
 8015a96:	4603      	mov	r3, r0
}
 8015a98:	4618      	mov	r0, r3
 8015a9a:	bd80      	pop	{r7, pc}

08015a9c <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 8015a9c:	b580      	push	{r7, lr}
 8015a9e:	b082      	sub	sp, #8
 8015aa0:	af00      	add	r7, sp, #0
 8015aa2:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d106      	bne.n	8015ab8 <ip_frag_free_pbuf_custom_ref+0x1c>
 8015aaa:	4b07      	ldr	r3, [pc, #28]	; (8015ac8 <ip_frag_free_pbuf_custom_ref+0x2c>)
 8015aac:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 8015ab0:	4906      	ldr	r1, [pc, #24]	; (8015acc <ip_frag_free_pbuf_custom_ref+0x30>)
 8015ab2:	4807      	ldr	r0, [pc, #28]	; (8015ad0 <ip_frag_free_pbuf_custom_ref+0x34>)
 8015ab4:	f000 fd4c 	bl	8016550 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 8015ab8:	6879      	ldr	r1, [r7, #4]
 8015aba:	2005      	movs	r0, #5
 8015abc:	f7f5 fd0c 	bl	800b4d8 <memp_free>
}
 8015ac0:	bf00      	nop
 8015ac2:	3708      	adds	r7, #8
 8015ac4:	46bd      	mov	sp, r7
 8015ac6:	bd80      	pop	{r7, pc}
 8015ac8:	0801a800 	.word	0x0801a800
 8015acc:	0801a9b8 	.word	0x0801a9b8
 8015ad0:	0801a848 	.word	0x0801a848

08015ad4 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8015ad4:	b580      	push	{r7, lr}
 8015ad6:	b084      	sub	sp, #16
 8015ad8:	af00      	add	r7, sp, #0
 8015ada:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8015adc:	687b      	ldr	r3, [r7, #4]
 8015ade:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8015ae0:	68fb      	ldr	r3, [r7, #12]
 8015ae2:	2b00      	cmp	r3, #0
 8015ae4:	d106      	bne.n	8015af4 <ipfrag_free_pbuf_custom+0x20>
 8015ae6:	4b11      	ldr	r3, [pc, #68]	; (8015b2c <ipfrag_free_pbuf_custom+0x58>)
 8015ae8:	f240 22ce 	movw	r2, #718	; 0x2ce
 8015aec:	4910      	ldr	r1, [pc, #64]	; (8015b30 <ipfrag_free_pbuf_custom+0x5c>)
 8015aee:	4811      	ldr	r0, [pc, #68]	; (8015b34 <ipfrag_free_pbuf_custom+0x60>)
 8015af0:	f000 fd2e 	bl	8016550 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8015af4:	68fa      	ldr	r2, [r7, #12]
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	429a      	cmp	r2, r3
 8015afa:	d006      	beq.n	8015b0a <ipfrag_free_pbuf_custom+0x36>
 8015afc:	4b0b      	ldr	r3, [pc, #44]	; (8015b2c <ipfrag_free_pbuf_custom+0x58>)
 8015afe:	f240 22cf 	movw	r2, #719	; 0x2cf
 8015b02:	490d      	ldr	r1, [pc, #52]	; (8015b38 <ipfrag_free_pbuf_custom+0x64>)
 8015b04:	480b      	ldr	r0, [pc, #44]	; (8015b34 <ipfrag_free_pbuf_custom+0x60>)
 8015b06:	f000 fd23 	bl	8016550 <iprintf>
  if (pcr->original != NULL) {
 8015b0a:	68fb      	ldr	r3, [r7, #12]
 8015b0c:	695b      	ldr	r3, [r3, #20]
 8015b0e:	2b00      	cmp	r3, #0
 8015b10:	d004      	beq.n	8015b1c <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8015b12:	68fb      	ldr	r3, [r7, #12]
 8015b14:	695b      	ldr	r3, [r3, #20]
 8015b16:	4618      	mov	r0, r3
 8015b18:	f7f6 fb78 	bl	800c20c <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8015b1c:	68f8      	ldr	r0, [r7, #12]
 8015b1e:	f7ff ffbd 	bl	8015a9c <ip_frag_free_pbuf_custom_ref>
}
 8015b22:	bf00      	nop
 8015b24:	3710      	adds	r7, #16
 8015b26:	46bd      	mov	sp, r7
 8015b28:	bd80      	pop	{r7, pc}
 8015b2a:	bf00      	nop
 8015b2c:	0801a800 	.word	0x0801a800
 8015b30:	0801a9c4 	.word	0x0801a9c4
 8015b34:	0801a848 	.word	0x0801a848
 8015b38:	0801a9d0 	.word	0x0801a9d0

08015b3c <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8015b3c:	b580      	push	{r7, lr}
 8015b3e:	b094      	sub	sp, #80	; 0x50
 8015b40:	af02      	add	r7, sp, #8
 8015b42:	60f8      	str	r0, [r7, #12]
 8015b44:	60b9      	str	r1, [r7, #8]
 8015b46:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 8015b48:	2300      	movs	r3, #0
 8015b4a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8015b4e:	68bb      	ldr	r3, [r7, #8]
 8015b50:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015b52:	3b14      	subs	r3, #20
 8015b54:	2b00      	cmp	r3, #0
 8015b56:	da00      	bge.n	8015b5a <ip4_frag+0x1e>
 8015b58:	3307      	adds	r3, #7
 8015b5a:	10db      	asrs	r3, r3, #3
 8015b5c:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8015b5e:	2314      	movs	r3, #20
 8015b60:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8015b62:	68fb      	ldr	r3, [r7, #12]
 8015b64:	685b      	ldr	r3, [r3, #4]
 8015b66:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 8015b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8015b6a:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 8015b6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015b6e:	781b      	ldrb	r3, [r3, #0]
 8015b70:	f003 030f 	and.w	r3, r3, #15
 8015b74:	b2db      	uxtb	r3, r3
 8015b76:	009b      	lsls	r3, r3, #2
 8015b78:	b2db      	uxtb	r3, r3
 8015b7a:	2b14      	cmp	r3, #20
 8015b7c:	d002      	beq.n	8015b84 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 8015b7e:	f06f 0305 	mvn.w	r3, #5
 8015b82:	e110      	b.n	8015da6 <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 8015b84:	68fb      	ldr	r3, [r7, #12]
 8015b86:	895b      	ldrh	r3, [r3, #10]
 8015b88:	2b13      	cmp	r3, #19
 8015b8a:	d809      	bhi.n	8015ba0 <ip4_frag+0x64>
 8015b8c:	4b88      	ldr	r3, [pc, #544]	; (8015db0 <ip4_frag+0x274>)
 8015b8e:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 8015b92:	4988      	ldr	r1, [pc, #544]	; (8015db4 <ip4_frag+0x278>)
 8015b94:	4888      	ldr	r0, [pc, #544]	; (8015db8 <ip4_frag+0x27c>)
 8015b96:	f000 fcdb 	bl	8016550 <iprintf>
 8015b9a:	f06f 0305 	mvn.w	r3, #5
 8015b9e:	e102      	b.n	8015da6 <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 8015ba0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015ba2:	88db      	ldrh	r3, [r3, #6]
 8015ba4:	b29b      	uxth	r3, r3
 8015ba6:	4618      	mov	r0, r3
 8015ba8:	f7f4 fc56 	bl	800a458 <lwip_htons>
 8015bac:	4603      	mov	r3, r0
 8015bae:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 8015bb0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015bb2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015bb6:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 8015bba:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015bbc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8015bc0:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 8015bc2:	68fb      	ldr	r3, [r7, #12]
 8015bc4:	891b      	ldrh	r3, [r3, #8]
 8015bc6:	3b14      	subs	r3, #20
 8015bc8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8015bcc:	e0e1      	b.n	8015d92 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8015bce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015bd0:	00db      	lsls	r3, r3, #3
 8015bd2:	b29b      	uxth	r3, r3
 8015bd4:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015bd8:	4293      	cmp	r3, r2
 8015bda:	bf28      	it	cs
 8015bdc:	4613      	movcs	r3, r2
 8015bde:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8015be0:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015be4:	2114      	movs	r1, #20
 8015be6:	200e      	movs	r0, #14
 8015be8:	f7f6 f82c 	bl	800bc44 <pbuf_alloc>
 8015bec:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8015bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf0:	2b00      	cmp	r3, #0
 8015bf2:	f000 80d5 	beq.w	8015da0 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 8015bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015bf8:	895b      	ldrh	r3, [r3, #10]
 8015bfa:	2b13      	cmp	r3, #19
 8015bfc:	d806      	bhi.n	8015c0c <ip4_frag+0xd0>
 8015bfe:	4b6c      	ldr	r3, [pc, #432]	; (8015db0 <ip4_frag+0x274>)
 8015c00:	f44f 7249 	mov.w	r2, #804	; 0x324
 8015c04:	496d      	ldr	r1, [pc, #436]	; (8015dbc <ip4_frag+0x280>)
 8015c06:	486c      	ldr	r0, [pc, #432]	; (8015db8 <ip4_frag+0x27c>)
 8015c08:	f000 fca2 	bl	8016550 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8015c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c0e:	685b      	ldr	r3, [r3, #4]
 8015c10:	2214      	movs	r2, #20
 8015c12:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c14:	4618      	mov	r0, r3
 8015c16:	f000 fbf0 	bl	80163fa <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 8015c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c1c:	685b      	ldr	r3, [r3, #4]
 8015c1e:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8015c20:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015c22:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 8015c26:	e064      	b.n	8015cf2 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 8015c28:	68fb      	ldr	r3, [r7, #12]
 8015c2a:	895a      	ldrh	r2, [r3, #10]
 8015c2c:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c2e:	1ad3      	subs	r3, r2, r3
 8015c30:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8015c32:	68fb      	ldr	r3, [r7, #12]
 8015c34:	895b      	ldrh	r3, [r3, #10]
 8015c36:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d906      	bls.n	8015c4a <ip4_frag+0x10e>
 8015c3c:	4b5c      	ldr	r3, [pc, #368]	; (8015db0 <ip4_frag+0x274>)
 8015c3e:	f240 322d 	movw	r2, #813	; 0x32d
 8015c42:	495f      	ldr	r1, [pc, #380]	; (8015dc0 <ip4_frag+0x284>)
 8015c44:	485c      	ldr	r0, [pc, #368]	; (8015db8 <ip4_frag+0x27c>)
 8015c46:	f000 fc83 	bl	8016550 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 8015c4a:	8bfa      	ldrh	r2, [r7, #30]
 8015c4c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015c50:	4293      	cmp	r3, r2
 8015c52:	bf28      	it	cs
 8015c54:	4613      	movcs	r3, r2
 8015c56:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 8015c5a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015c5e:	2b00      	cmp	r3, #0
 8015c60:	d105      	bne.n	8015c6e <ip4_frag+0x132>
        poff = 0;
 8015c62:	2300      	movs	r3, #0
 8015c64:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	60fb      	str	r3, [r7, #12]
        continue;
 8015c6c:	e041      	b.n	8015cf2 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 8015c6e:	f7ff ff0d 	bl	8015a8c <ip_frag_alloc_pbuf_custom_ref>
 8015c72:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 8015c74:	69bb      	ldr	r3, [r7, #24]
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d103      	bne.n	8015c82 <ip4_frag+0x146>
        pbuf_free(rambuf);
 8015c7a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015c7c:	f7f6 fac6 	bl	800c20c <pbuf_free>
        goto memerr;
 8015c80:	e08f      	b.n	8015da2 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015c82:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 8015c84:	68fb      	ldr	r3, [r7, #12]
 8015c86:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 8015c88:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8015c8a:	4413      	add	r3, r2
 8015c8c:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 8015c90:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8015c94:	9201      	str	r2, [sp, #4]
 8015c96:	9300      	str	r3, [sp, #0]
 8015c98:	4603      	mov	r3, r0
 8015c9a:	2241      	movs	r2, #65	; 0x41
 8015c9c:	2000      	movs	r0, #0
 8015c9e:	f7f6 f8fb 	bl	800be98 <pbuf_alloced_custom>
 8015ca2:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 8015ca4:	697b      	ldr	r3, [r7, #20]
 8015ca6:	2b00      	cmp	r3, #0
 8015ca8:	d106      	bne.n	8015cb8 <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 8015caa:	69b8      	ldr	r0, [r7, #24]
 8015cac:	f7ff fef6 	bl	8015a9c <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 8015cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cb2:	f7f6 faab 	bl	800c20c <pbuf_free>
        goto memerr;
 8015cb6:	e074      	b.n	8015da2 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 8015cb8:	68f8      	ldr	r0, [r7, #12]
 8015cba:	f7f6 fb4d 	bl	800c358 <pbuf_ref>
      pcr->original = p;
 8015cbe:	69bb      	ldr	r3, [r7, #24]
 8015cc0:	68fa      	ldr	r2, [r7, #12]
 8015cc2:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 8015cc4:	69bb      	ldr	r3, [r7, #24]
 8015cc6:	4a3f      	ldr	r2, [pc, #252]	; (8015dc4 <ip4_frag+0x288>)
 8015cc8:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 8015cca:	6979      	ldr	r1, [r7, #20]
 8015ccc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015cce:	f7f6 fb6b 	bl	800c3a8 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8015cd2:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 8015cd6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015cda:	1ad3      	subs	r3, r2, r3
 8015cdc:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8015ce0:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015ce4:	2b00      	cmp	r3, #0
 8015ce6:	d004      	beq.n	8015cf2 <ip4_frag+0x1b6>
        poff = 0;
 8015ce8:	2300      	movs	r3, #0
 8015cea:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8015cec:	68fb      	ldr	r3, [r7, #12]
 8015cee:	681b      	ldr	r3, [r3, #0]
 8015cf0:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8015cf2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8015cf6:	2b00      	cmp	r3, #0
 8015cf8:	d196      	bne.n	8015c28 <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 8015cfa:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8015cfc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8015d00:	4413      	add	r3, r2
 8015d02:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8015d04:	68bb      	ldr	r3, [r7, #8]
 8015d06:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015d08:	f1a3 0213 	sub.w	r2, r3, #19
 8015d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d10:	429a      	cmp	r2, r3
 8015d12:	bfcc      	ite	gt
 8015d14:	2301      	movgt	r3, #1
 8015d16:	2300      	movle	r3, #0
 8015d18:	b2db      	uxtb	r3, r3
 8015d1a:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8015d1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8015d20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015d24:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 8015d26:	6a3b      	ldr	r3, [r7, #32]
 8015d28:	2b00      	cmp	r3, #0
 8015d2a:	d002      	beq.n	8015d32 <ip4_frag+0x1f6>
 8015d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d003      	beq.n	8015d3a <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8015d32:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d34:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8015d38:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 8015d3a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8015d3c:	4618      	mov	r0, r3
 8015d3e:	f7f4 fb8b 	bl	800a458 <lwip_htons>
 8015d42:	4603      	mov	r3, r0
 8015d44:	461a      	mov	r2, r3
 8015d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d48:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 8015d4a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015d4c:	3314      	adds	r3, #20
 8015d4e:	b29b      	uxth	r3, r3
 8015d50:	4618      	mov	r0, r3
 8015d52:	f7f4 fb81 	bl	800a458 <lwip_htons>
 8015d56:	4603      	mov	r3, r0
 8015d58:	461a      	mov	r2, r3
 8015d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d5c:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8015d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8015d60:	2200      	movs	r2, #0
 8015d62:	729a      	strb	r2, [r3, #10]
 8015d64:	2200      	movs	r2, #0
 8015d66:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 8015d68:	68bb      	ldr	r3, [r7, #8]
 8015d6a:	695b      	ldr	r3, [r3, #20]
 8015d6c:	687a      	ldr	r2, [r7, #4]
 8015d6e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d70:	68b8      	ldr	r0, [r7, #8]
 8015d72:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 8015d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8015d76:	f7f6 fa49 	bl	800c20c <pbuf_free>
    left = (u16_t)(left - fragsize);
 8015d7a:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8015d7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8015d80:	1ad3      	subs	r3, r2, r3
 8015d82:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 8015d86:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8015d8a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8015d8c:	4413      	add	r3, r2
 8015d8e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 8015d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8015d96:	2b00      	cmp	r3, #0
 8015d98:	f47f af19 	bne.w	8015bce <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	e002      	b.n	8015da6 <ip4_frag+0x26a>
      goto memerr;
 8015da0:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 8015da2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	3748      	adds	r7, #72	; 0x48
 8015daa:	46bd      	mov	sp, r7
 8015dac:	bd80      	pop	{r7, pc}
 8015dae:	bf00      	nop
 8015db0:	0801a800 	.word	0x0801a800
 8015db4:	0801a9dc 	.word	0x0801a9dc
 8015db8:	0801a848 	.word	0x0801a848
 8015dbc:	0801a9f8 	.word	0x0801a9f8
 8015dc0:	0801aa18 	.word	0x0801aa18
 8015dc4:	08015ad5 	.word	0x08015ad5

08015dc8 <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 8015dc8:	b580      	push	{r7, lr}
 8015dca:	b086      	sub	sp, #24
 8015dcc:	af00      	add	r7, sp, #0
 8015dce:	6078      	str	r0, [r7, #4]
 8015dd0:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8015dd2:	230e      	movs	r3, #14
 8015dd4:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	895b      	ldrh	r3, [r3, #10]
 8015dda:	2b0e      	cmp	r3, #14
 8015ddc:	d96e      	bls.n	8015ebc <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	7bdb      	ldrb	r3, [r3, #15]
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d106      	bne.n	8015df4 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 8015de6:	683b      	ldr	r3, [r7, #0]
 8015de8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015dec:	3301      	adds	r3, #1
 8015dee:	b2da      	uxtb	r2, r3
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8015df4:	687b      	ldr	r3, [r7, #4]
 8015df6:	685b      	ldr	r3, [r3, #4]
 8015df8:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 8015dfa:	693b      	ldr	r3, [r7, #16]
 8015dfc:	7b1a      	ldrb	r2, [r3, #12]
 8015dfe:	7b5b      	ldrb	r3, [r3, #13]
 8015e00:	021b      	lsls	r3, r3, #8
 8015e02:	4313      	orrs	r3, r2
 8015e04:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 8015e06:	693b      	ldr	r3, [r7, #16]
 8015e08:	781b      	ldrb	r3, [r3, #0]
 8015e0a:	f003 0301 	and.w	r3, r3, #1
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d023      	beq.n	8015e5a <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8015e12:	693b      	ldr	r3, [r7, #16]
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	2b01      	cmp	r3, #1
 8015e18:	d10f      	bne.n	8015e3a <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e1a:	693b      	ldr	r3, [r7, #16]
 8015e1c:	785b      	ldrb	r3, [r3, #1]
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d11b      	bne.n	8015e5a <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 8015e26:	2b5e      	cmp	r3, #94	; 0x5e
 8015e28:	d117      	bne.n	8015e5a <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	7b5b      	ldrb	r3, [r3, #13]
 8015e2e:	f043 0310 	orr.w	r3, r3, #16
 8015e32:	b2da      	uxtb	r2, r3
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	735a      	strb	r2, [r3, #13]
 8015e38:	e00f      	b.n	8015e5a <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 8015e3a:	693b      	ldr	r3, [r7, #16]
 8015e3c:	2206      	movs	r2, #6
 8015e3e:	4928      	ldr	r1, [pc, #160]	; (8015ee0 <ethernet_input+0x118>)
 8015e40:	4618      	mov	r0, r3
 8015e42:	f000 faca 	bl	80163da <memcmp>
 8015e46:	4603      	mov	r3, r0
 8015e48:	2b00      	cmp	r3, #0
 8015e4a:	d106      	bne.n	8015e5a <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	7b5b      	ldrb	r3, [r3, #13]
 8015e50:	f043 0308 	orr.w	r3, r3, #8
 8015e54:	b2da      	uxtb	r2, r3
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 8015e5a:	89fb      	ldrh	r3, [r7, #14]
 8015e5c:	2b08      	cmp	r3, #8
 8015e5e:	d003      	beq.n	8015e68 <ethernet_input+0xa0>
 8015e60:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8015e64:	d014      	beq.n	8015e90 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 8015e66:	e032      	b.n	8015ece <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015e68:	683b      	ldr	r3, [r7, #0]
 8015e6a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e6e:	f003 0308 	and.w	r3, r3, #8
 8015e72:	2b00      	cmp	r3, #0
 8015e74:	d024      	beq.n	8015ec0 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015e76:	8afb      	ldrh	r3, [r7, #22]
 8015e78:	4619      	mov	r1, r3
 8015e7a:	6878      	ldr	r0, [r7, #4]
 8015e7c:	f7f6 f940 	bl	800c100 <pbuf_remove_header>
 8015e80:	4603      	mov	r3, r0
 8015e82:	2b00      	cmp	r3, #0
 8015e84:	d11e      	bne.n	8015ec4 <ethernet_input+0xfc>
        ip4_input(p, netif);
 8015e86:	6839      	ldr	r1, [r7, #0]
 8015e88:	6878      	ldr	r0, [r7, #4]
 8015e8a:	f7fe fdf7 	bl	8014a7c <ip4_input>
      break;
 8015e8e:	e013      	b.n	8015eb8 <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 8015e90:	683b      	ldr	r3, [r7, #0]
 8015e92:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015e96:	f003 0308 	and.w	r3, r3, #8
 8015e9a:	2b00      	cmp	r3, #0
 8015e9c:	d014      	beq.n	8015ec8 <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 8015e9e:	8afb      	ldrh	r3, [r7, #22]
 8015ea0:	4619      	mov	r1, r3
 8015ea2:	6878      	ldr	r0, [r7, #4]
 8015ea4:	f7f6 f92c 	bl	800c100 <pbuf_remove_header>
 8015ea8:	4603      	mov	r3, r0
 8015eaa:	2b00      	cmp	r3, #0
 8015eac:	d10e      	bne.n	8015ecc <ethernet_input+0x104>
        etharp_input(p, netif);
 8015eae:	6839      	ldr	r1, [r7, #0]
 8015eb0:	6878      	ldr	r0, [r7, #4]
 8015eb2:	f7fd ff97 	bl	8013de4 <etharp_input>
      break;
 8015eb6:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 8015eb8:	2300      	movs	r3, #0
 8015eba:	e00c      	b.n	8015ed6 <ethernet_input+0x10e>
    goto free_and_return;
 8015ebc:	bf00      	nop
 8015ebe:	e006      	b.n	8015ece <ethernet_input+0x106>
        goto free_and_return;
 8015ec0:	bf00      	nop
 8015ec2:	e004      	b.n	8015ece <ethernet_input+0x106>
        goto free_and_return;
 8015ec4:	bf00      	nop
 8015ec6:	e002      	b.n	8015ece <ethernet_input+0x106>
        goto free_and_return;
 8015ec8:	bf00      	nop
 8015eca:	e000      	b.n	8015ece <ethernet_input+0x106>
        goto free_and_return;
 8015ecc:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8015ece:	6878      	ldr	r0, [r7, #4]
 8015ed0:	f7f6 f99c 	bl	800c20c <pbuf_free>
  return ERR_OK;
 8015ed4:	2300      	movs	r3, #0
}
 8015ed6:	4618      	mov	r0, r3
 8015ed8:	3718      	adds	r7, #24
 8015eda:	46bd      	mov	sp, r7
 8015edc:	bd80      	pop	{r7, pc}
 8015ede:	bf00      	nop
 8015ee0:	0801ac28 	.word	0x0801ac28

08015ee4 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8015ee4:	b580      	push	{r7, lr}
 8015ee6:	b086      	sub	sp, #24
 8015ee8:	af00      	add	r7, sp, #0
 8015eea:	60f8      	str	r0, [r7, #12]
 8015eec:	60b9      	str	r1, [r7, #8]
 8015eee:	607a      	str	r2, [r7, #4]
 8015ef0:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8015ef2:	8c3b      	ldrh	r3, [r7, #32]
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	f7f4 faaf 	bl	800a458 <lwip_htons>
 8015efa:	4603      	mov	r3, r0
 8015efc:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8015efe:	210e      	movs	r1, #14
 8015f00:	68b8      	ldr	r0, [r7, #8]
 8015f02:	f7f6 f8ed 	bl	800c0e0 <pbuf_add_header>
 8015f06:	4603      	mov	r3, r0
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d125      	bne.n	8015f58 <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8015f0c:	68bb      	ldr	r3, [r7, #8]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8015f12:	693b      	ldr	r3, [r7, #16]
 8015f14:	8afa      	ldrh	r2, [r7, #22]
 8015f16:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 8015f18:	693b      	ldr	r3, [r7, #16]
 8015f1a:	2206      	movs	r2, #6
 8015f1c:	6839      	ldr	r1, [r7, #0]
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f000 fa6b 	bl	80163fa <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8015f24:	693b      	ldr	r3, [r7, #16]
 8015f26:	3306      	adds	r3, #6
 8015f28:	2206      	movs	r2, #6
 8015f2a:	6879      	ldr	r1, [r7, #4]
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f000 fa64 	bl	80163fa <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8015f38:	2b06      	cmp	r3, #6
 8015f3a:	d006      	beq.n	8015f4a <ethernet_output+0x66>
 8015f3c:	4b0a      	ldr	r3, [pc, #40]	; (8015f68 <ethernet_output+0x84>)
 8015f3e:	f44f 7299 	mov.w	r2, #306	; 0x132
 8015f42:	490a      	ldr	r1, [pc, #40]	; (8015f6c <ethernet_output+0x88>)
 8015f44:	480a      	ldr	r0, [pc, #40]	; (8015f70 <ethernet_output+0x8c>)
 8015f46:	f000 fb03 	bl	8016550 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 8015f4a:	68fb      	ldr	r3, [r7, #12]
 8015f4c:	699b      	ldr	r3, [r3, #24]
 8015f4e:	68b9      	ldr	r1, [r7, #8]
 8015f50:	68f8      	ldr	r0, [r7, #12]
 8015f52:	4798      	blx	r3
 8015f54:	4603      	mov	r3, r0
 8015f56:	e002      	b.n	8015f5e <ethernet_output+0x7a>
      goto pbuf_header_failed;
 8015f58:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 8015f5a:	f06f 0301 	mvn.w	r3, #1
}
 8015f5e:	4618      	mov	r0, r3
 8015f60:	3718      	adds	r7, #24
 8015f62:	46bd      	mov	sp, r7
 8015f64:	bd80      	pop	{r7, pc}
 8015f66:	bf00      	nop
 8015f68:	0801aa28 	.word	0x0801aa28
 8015f6c:	0801aa60 	.word	0x0801aa60
 8015f70:	0801aa94 	.word	0x0801aa94

08015f74 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 8015f74:	b580      	push	{r7, lr}
 8015f76:	b086      	sub	sp, #24
 8015f78:	af00      	add	r7, sp, #0
 8015f7a:	6078      	str	r0, [r7, #4]
 8015f7c:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	60bb      	str	r3, [r7, #8]
 8015f82:	2304      	movs	r3, #4
 8015f84:	60fb      	str	r3, [r7, #12]
 8015f86:	2300      	movs	r3, #0
 8015f88:	613b      	str	r3, [r7, #16]
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 8015f8e:	f107 0308 	add.w	r3, r7, #8
 8015f92:	2100      	movs	r1, #0
 8015f94:	4618      	mov	r0, r3
 8015f96:	f7ef fedd 	bl	8005d54 <osMessageCreate>
 8015f9a:	4602      	mov	r2, r0
 8015f9c:	687b      	ldr	r3, [r7, #4]
 8015f9e:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	681b      	ldr	r3, [r3, #0]
 8015fa4:	2b00      	cmp	r3, #0
 8015fa6:	d102      	bne.n	8015fae <sys_mbox_new+0x3a>
    return ERR_MEM;
 8015fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8015fac:	e000      	b.n	8015fb0 <sys_mbox_new+0x3c>

  return ERR_OK;
 8015fae:	2300      	movs	r3, #0
}
 8015fb0:	4618      	mov	r0, r3
 8015fb2:	3718      	adds	r7, #24
 8015fb4:	46bd      	mov	sp, r7
 8015fb6:	bd80      	pop	{r7, pc}

08015fb8 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8015fb8:	b580      	push	{r7, lr}
 8015fba:	b084      	sub	sp, #16
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
 8015fc0:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	681b      	ldr	r3, [r3, #0]
 8015fc6:	6839      	ldr	r1, [r7, #0]
 8015fc8:	2200      	movs	r2, #0
 8015fca:	4618      	mov	r0, r3
 8015fcc:	f7ef feea 	bl	8005da4 <osMessagePut>
 8015fd0:	4603      	mov	r3, r0
 8015fd2:	2b00      	cmp	r3, #0
 8015fd4:	d102      	bne.n	8015fdc <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	73fb      	strb	r3, [r7, #15]
 8015fda:	e001      	b.n	8015fe0 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8015fdc:	23ff      	movs	r3, #255	; 0xff
 8015fde:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8015fe0:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8015fe4:	4618      	mov	r0, r3
 8015fe6:	3710      	adds	r7, #16
 8015fe8:	46bd      	mov	sp, r7
 8015fea:	bd80      	pop	{r7, pc}

08015fec <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8015fec:	b580      	push	{r7, lr}
 8015fee:	b08c      	sub	sp, #48	; 0x30
 8015ff0:	af00      	add	r7, sp, #0
 8015ff2:	61f8      	str	r0, [r7, #28]
 8015ff4:	61b9      	str	r1, [r7, #24]
 8015ff6:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 8015ff8:	f7ef fd1c 	bl	8005a34 <osKernelSysTick>
 8015ffc:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 8015ffe:	697b      	ldr	r3, [r7, #20]
 8016000:	2b00      	cmp	r3, #0
 8016002:	d017      	beq.n	8016034 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 8016004:	69fb      	ldr	r3, [r7, #28]
 8016006:	6819      	ldr	r1, [r3, #0]
 8016008:	f107 0320 	add.w	r3, r7, #32
 801600c:	697a      	ldr	r2, [r7, #20]
 801600e:	4618      	mov	r0, r3
 8016010:	f7ef ff08 	bl	8005e24 <osMessageGet>

    if(event.status == osEventMessage)
 8016014:	6a3b      	ldr	r3, [r7, #32]
 8016016:	2b10      	cmp	r3, #16
 8016018:	d109      	bne.n	801602e <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801601a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801601c:	461a      	mov	r2, r3
 801601e:	69bb      	ldr	r3, [r7, #24]
 8016020:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 8016022:	f7ef fd07 	bl	8005a34 <osKernelSysTick>
 8016026:	4602      	mov	r2, r0
 8016028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801602a:	1ad3      	subs	r3, r2, r3
 801602c:	e019      	b.n	8016062 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801602e:	f04f 33ff 	mov.w	r3, #4294967295
 8016032:	e016      	b.n	8016062 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 8016034:	69fb      	ldr	r3, [r7, #28]
 8016036:	6819      	ldr	r1, [r3, #0]
 8016038:	463b      	mov	r3, r7
 801603a:	f04f 32ff 	mov.w	r2, #4294967295
 801603e:	4618      	mov	r0, r3
 8016040:	f7ef fef0 	bl	8005e24 <osMessageGet>
 8016044:	f107 0320 	add.w	r3, r7, #32
 8016048:	463a      	mov	r2, r7
 801604a:	ca07      	ldmia	r2, {r0, r1, r2}
 801604c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 8016050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016052:	461a      	mov	r2, r3
 8016054:	69bb      	ldr	r3, [r7, #24]
 8016056:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 8016058:	f7ef fcec 	bl	8005a34 <osKernelSysTick>
 801605c:	4602      	mov	r2, r0
 801605e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016060:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 8016062:	4618      	mov	r0, r3
 8016064:	3730      	adds	r7, #48	; 0x30
 8016066:	46bd      	mov	sp, r7
 8016068:	bd80      	pop	{r7, pc}

0801606a <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801606a:	b480      	push	{r7}
 801606c:	b083      	sub	sp, #12
 801606e:	af00      	add	r7, sp, #0
 8016070:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	2b00      	cmp	r3, #0
 8016078:	d101      	bne.n	801607e <sys_mbox_valid+0x14>
    return 0;
 801607a:	2300      	movs	r3, #0
 801607c:	e000      	b.n	8016080 <sys_mbox_valid+0x16>
  else
    return 1;
 801607e:	2301      	movs	r3, #1
}
 8016080:	4618      	mov	r0, r3
 8016082:	370c      	adds	r7, #12
 8016084:	46bd      	mov	sp, r7
 8016086:	f85d 7b04 	ldr.w	r7, [sp], #4
 801608a:	4770      	bx	lr

0801608c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801608c:	b580      	push	{r7, lr}
 801608e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 8016090:	4803      	ldr	r0, [pc, #12]	; (80160a0 <sys_init+0x14>)
 8016092:	f7ef fd3f 	bl	8005b14 <osMutexCreate>
 8016096:	4603      	mov	r3, r0
 8016098:	4a02      	ldr	r2, [pc, #8]	; (80160a4 <sys_init+0x18>)
 801609a:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801609c:	bf00      	nop
 801609e:	bd80      	pop	{r7, pc}
 80160a0:	0801ac38 	.word	0x0801ac38
 80160a4:	2000d294 	.word	0x2000d294

080160a8 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 80160a8:	b580      	push	{r7, lr}
 80160aa:	b084      	sub	sp, #16
 80160ac:	af00      	add	r7, sp, #0
 80160ae:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 80160b0:	2300      	movs	r3, #0
 80160b2:	60bb      	str	r3, [r7, #8]
 80160b4:	2300      	movs	r3, #0
 80160b6:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 80160b8:	f107 0308 	add.w	r3, r7, #8
 80160bc:	4618      	mov	r0, r3
 80160be:	f7ef fd29 	bl	8005b14 <osMutexCreate>
 80160c2:	4602      	mov	r2, r0
 80160c4:	687b      	ldr	r3, [r7, #4]
 80160c6:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 80160c8:	687b      	ldr	r3, [r7, #4]
 80160ca:	681b      	ldr	r3, [r3, #0]
 80160cc:	2b00      	cmp	r3, #0
 80160ce:	d102      	bne.n	80160d6 <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 80160d0:	f04f 33ff 	mov.w	r3, #4294967295
 80160d4:	e000      	b.n	80160d8 <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 80160d6:	2300      	movs	r3, #0
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3710      	adds	r7, #16
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 80160e8:	687b      	ldr	r3, [r7, #4]
 80160ea:	681b      	ldr	r3, [r3, #0]
 80160ec:	f04f 31ff 	mov.w	r1, #4294967295
 80160f0:	4618      	mov	r0, r3
 80160f2:	f7ef fd27 	bl	8005b44 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 80160f6:	bf00      	nop
 80160f8:	3708      	adds	r7, #8
 80160fa:	46bd      	mov	sp, r7
 80160fc:	bd80      	pop	{r7, pc}

080160fe <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 80160fe:	b580      	push	{r7, lr}
 8016100:	b082      	sub	sp, #8
 8016102:	af00      	add	r7, sp, #0
 8016104:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016106:	687b      	ldr	r3, [r7, #4]
 8016108:	681b      	ldr	r3, [r3, #0]
 801610a:	4618      	mov	r0, r3
 801610c:	f7ef fd68 	bl	8005be0 <osMutexRelease>
}
 8016110:	bf00      	nop
 8016112:	3708      	adds	r7, #8
 8016114:	46bd      	mov	sp, r7
 8016116:	bd80      	pop	{r7, pc}

08016118 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016118:	b580      	push	{r7, lr}
 801611a:	b08c      	sub	sp, #48	; 0x30
 801611c:	af00      	add	r7, sp, #0
 801611e:	60f8      	str	r0, [r7, #12]
 8016120:	60b9      	str	r1, [r7, #8]
 8016122:	607a      	str	r2, [r7, #4]
 8016124:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 8016126:	f107 0314 	add.w	r3, r7, #20
 801612a:	2200      	movs	r2, #0
 801612c:	601a      	str	r2, [r3, #0]
 801612e:	605a      	str	r2, [r3, #4]
 8016130:	609a      	str	r2, [r3, #8]
 8016132:	60da      	str	r2, [r3, #12]
 8016134:	611a      	str	r2, [r3, #16]
 8016136:	615a      	str	r2, [r3, #20]
 8016138:	619a      	str	r2, [r3, #24]
 801613a:	68fb      	ldr	r3, [r7, #12]
 801613c:	617b      	str	r3, [r7, #20]
 801613e:	68bb      	ldr	r3, [r7, #8]
 8016140:	61bb      	str	r3, [r7, #24]
 8016142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8016144:	b21b      	sxth	r3, r3
 8016146:	83bb      	strh	r3, [r7, #28]
 8016148:	683b      	ldr	r3, [r7, #0]
 801614a:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801614c:	f107 0314 	add.w	r3, r7, #20
 8016150:	6879      	ldr	r1, [r7, #4]
 8016152:	4618      	mov	r0, r3
 8016154:	f7ef fc7e 	bl	8005a54 <osThreadCreate>
 8016158:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801615a:	4618      	mov	r0, r3
 801615c:	3730      	adds	r7, #48	; 0x30
 801615e:	46bd      	mov	sp, r7
 8016160:	bd80      	pop	{r7, pc}
	...

08016164 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016164:	b580      	push	{r7, lr}
 8016166:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 8016168:	4b04      	ldr	r3, [pc, #16]	; (801617c <sys_arch_protect+0x18>)
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	f04f 31ff 	mov.w	r1, #4294967295
 8016170:	4618      	mov	r0, r3
 8016172:	f7ef fce7 	bl	8005b44 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 8016176:	2301      	movs	r3, #1
}
 8016178:	4618      	mov	r0, r3
 801617a:	bd80      	pop	{r7, pc}
 801617c:	2000d294 	.word	0x2000d294

08016180 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016188:	4b04      	ldr	r3, [pc, #16]	; (801619c <sys_arch_unprotect+0x1c>)
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	4618      	mov	r0, r3
 801618e:	f7ef fd27 	bl	8005be0 <osMutexRelease>
}
 8016192:	bf00      	nop
 8016194:	3708      	adds	r7, #8
 8016196:	46bd      	mov	sp, r7
 8016198:	bd80      	pop	{r7, pc}
 801619a:	bf00      	nop
 801619c:	2000d294 	.word	0x2000d294

080161a0 <std>:
 80161a0:	2300      	movs	r3, #0
 80161a2:	b510      	push	{r4, lr}
 80161a4:	4604      	mov	r4, r0
 80161a6:	e9c0 3300 	strd	r3, r3, [r0]
 80161aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80161ae:	6083      	str	r3, [r0, #8]
 80161b0:	8181      	strh	r1, [r0, #12]
 80161b2:	6643      	str	r3, [r0, #100]	; 0x64
 80161b4:	81c2      	strh	r2, [r0, #14]
 80161b6:	6183      	str	r3, [r0, #24]
 80161b8:	4619      	mov	r1, r3
 80161ba:	2208      	movs	r2, #8
 80161bc:	305c      	adds	r0, #92	; 0x5c
 80161be:	f000 f92a 	bl	8016416 <memset>
 80161c2:	4b05      	ldr	r3, [pc, #20]	; (80161d8 <std+0x38>)
 80161c4:	6263      	str	r3, [r4, #36]	; 0x24
 80161c6:	4b05      	ldr	r3, [pc, #20]	; (80161dc <std+0x3c>)
 80161c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80161ca:	4b05      	ldr	r3, [pc, #20]	; (80161e0 <std+0x40>)
 80161cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80161ce:	4b05      	ldr	r3, [pc, #20]	; (80161e4 <std+0x44>)
 80161d0:	6224      	str	r4, [r4, #32]
 80161d2:	6323      	str	r3, [r4, #48]	; 0x30
 80161d4:	bd10      	pop	{r4, pc}
 80161d6:	bf00      	nop
 80161d8:	080167dd 	.word	0x080167dd
 80161dc:	080167ff 	.word	0x080167ff
 80161e0:	08016837 	.word	0x08016837
 80161e4:	0801685b 	.word	0x0801685b

080161e8 <_cleanup_r>:
 80161e8:	4901      	ldr	r1, [pc, #4]	; (80161f0 <_cleanup_r+0x8>)
 80161ea:	f000 b8af 	b.w	801634c <_fwalk_reent>
 80161ee:	bf00      	nop
 80161f0:	08016b71 	.word	0x08016b71

080161f4 <__sfmoreglue>:
 80161f4:	b570      	push	{r4, r5, r6, lr}
 80161f6:	2268      	movs	r2, #104	; 0x68
 80161f8:	1e4d      	subs	r5, r1, #1
 80161fa:	4355      	muls	r5, r2
 80161fc:	460e      	mov	r6, r1
 80161fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8016202:	f000 f931 	bl	8016468 <_malloc_r>
 8016206:	4604      	mov	r4, r0
 8016208:	b140      	cbz	r0, 801621c <__sfmoreglue+0x28>
 801620a:	2100      	movs	r1, #0
 801620c:	e9c0 1600 	strd	r1, r6, [r0]
 8016210:	300c      	adds	r0, #12
 8016212:	60a0      	str	r0, [r4, #8]
 8016214:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8016218:	f000 f8fd 	bl	8016416 <memset>
 801621c:	4620      	mov	r0, r4
 801621e:	bd70      	pop	{r4, r5, r6, pc}

08016220 <__sfp_lock_acquire>:
 8016220:	4801      	ldr	r0, [pc, #4]	; (8016228 <__sfp_lock_acquire+0x8>)
 8016222:	f000 b8d8 	b.w	80163d6 <__retarget_lock_acquire_recursive>
 8016226:	bf00      	nop
 8016228:	2000d299 	.word	0x2000d299

0801622c <__sfp_lock_release>:
 801622c:	4801      	ldr	r0, [pc, #4]	; (8016234 <__sfp_lock_release+0x8>)
 801622e:	f000 b8d3 	b.w	80163d8 <__retarget_lock_release_recursive>
 8016232:	bf00      	nop
 8016234:	2000d299 	.word	0x2000d299

08016238 <__sinit_lock_acquire>:
 8016238:	4801      	ldr	r0, [pc, #4]	; (8016240 <__sinit_lock_acquire+0x8>)
 801623a:	f000 b8cc 	b.w	80163d6 <__retarget_lock_acquire_recursive>
 801623e:	bf00      	nop
 8016240:	2000d29a 	.word	0x2000d29a

08016244 <__sinit_lock_release>:
 8016244:	4801      	ldr	r0, [pc, #4]	; (801624c <__sinit_lock_release+0x8>)
 8016246:	f000 b8c7 	b.w	80163d8 <__retarget_lock_release_recursive>
 801624a:	bf00      	nop
 801624c:	2000d29a 	.word	0x2000d29a

08016250 <__sinit>:
 8016250:	b510      	push	{r4, lr}
 8016252:	4604      	mov	r4, r0
 8016254:	f7ff fff0 	bl	8016238 <__sinit_lock_acquire>
 8016258:	69a3      	ldr	r3, [r4, #24]
 801625a:	b11b      	cbz	r3, 8016264 <__sinit+0x14>
 801625c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016260:	f7ff bff0 	b.w	8016244 <__sinit_lock_release>
 8016264:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8016268:	6523      	str	r3, [r4, #80]	; 0x50
 801626a:	4b13      	ldr	r3, [pc, #76]	; (80162b8 <__sinit+0x68>)
 801626c:	4a13      	ldr	r2, [pc, #76]	; (80162bc <__sinit+0x6c>)
 801626e:	681b      	ldr	r3, [r3, #0]
 8016270:	62a2      	str	r2, [r4, #40]	; 0x28
 8016272:	42a3      	cmp	r3, r4
 8016274:	bf04      	itt	eq
 8016276:	2301      	moveq	r3, #1
 8016278:	61a3      	streq	r3, [r4, #24]
 801627a:	4620      	mov	r0, r4
 801627c:	f000 f820 	bl	80162c0 <__sfp>
 8016280:	6060      	str	r0, [r4, #4]
 8016282:	4620      	mov	r0, r4
 8016284:	f000 f81c 	bl	80162c0 <__sfp>
 8016288:	60a0      	str	r0, [r4, #8]
 801628a:	4620      	mov	r0, r4
 801628c:	f000 f818 	bl	80162c0 <__sfp>
 8016290:	2200      	movs	r2, #0
 8016292:	60e0      	str	r0, [r4, #12]
 8016294:	2104      	movs	r1, #4
 8016296:	6860      	ldr	r0, [r4, #4]
 8016298:	f7ff ff82 	bl	80161a0 <std>
 801629c:	68a0      	ldr	r0, [r4, #8]
 801629e:	2201      	movs	r2, #1
 80162a0:	2109      	movs	r1, #9
 80162a2:	f7ff ff7d 	bl	80161a0 <std>
 80162a6:	68e0      	ldr	r0, [r4, #12]
 80162a8:	2202      	movs	r2, #2
 80162aa:	2112      	movs	r1, #18
 80162ac:	f7ff ff78 	bl	80161a0 <std>
 80162b0:	2301      	movs	r3, #1
 80162b2:	61a3      	str	r3, [r4, #24]
 80162b4:	e7d2      	b.n	801625c <__sinit+0xc>
 80162b6:	bf00      	nop
 80162b8:	0801ada4 	.word	0x0801ada4
 80162bc:	080161e9 	.word	0x080161e9

080162c0 <__sfp>:
 80162c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80162c2:	4607      	mov	r7, r0
 80162c4:	f7ff ffac 	bl	8016220 <__sfp_lock_acquire>
 80162c8:	4b1e      	ldr	r3, [pc, #120]	; (8016344 <__sfp+0x84>)
 80162ca:	681e      	ldr	r6, [r3, #0]
 80162cc:	69b3      	ldr	r3, [r6, #24]
 80162ce:	b913      	cbnz	r3, 80162d6 <__sfp+0x16>
 80162d0:	4630      	mov	r0, r6
 80162d2:	f7ff ffbd 	bl	8016250 <__sinit>
 80162d6:	3648      	adds	r6, #72	; 0x48
 80162d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80162dc:	3b01      	subs	r3, #1
 80162de:	d503      	bpl.n	80162e8 <__sfp+0x28>
 80162e0:	6833      	ldr	r3, [r6, #0]
 80162e2:	b30b      	cbz	r3, 8016328 <__sfp+0x68>
 80162e4:	6836      	ldr	r6, [r6, #0]
 80162e6:	e7f7      	b.n	80162d8 <__sfp+0x18>
 80162e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80162ec:	b9d5      	cbnz	r5, 8016324 <__sfp+0x64>
 80162ee:	4b16      	ldr	r3, [pc, #88]	; (8016348 <__sfp+0x88>)
 80162f0:	60e3      	str	r3, [r4, #12]
 80162f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80162f6:	6665      	str	r5, [r4, #100]	; 0x64
 80162f8:	f000 f86c 	bl	80163d4 <__retarget_lock_init_recursive>
 80162fc:	f7ff ff96 	bl	801622c <__sfp_lock_release>
 8016300:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8016304:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8016308:	6025      	str	r5, [r4, #0]
 801630a:	61a5      	str	r5, [r4, #24]
 801630c:	2208      	movs	r2, #8
 801630e:	4629      	mov	r1, r5
 8016310:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8016314:	f000 f87f 	bl	8016416 <memset>
 8016318:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801631c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8016320:	4620      	mov	r0, r4
 8016322:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016324:	3468      	adds	r4, #104	; 0x68
 8016326:	e7d9      	b.n	80162dc <__sfp+0x1c>
 8016328:	2104      	movs	r1, #4
 801632a:	4638      	mov	r0, r7
 801632c:	f7ff ff62 	bl	80161f4 <__sfmoreglue>
 8016330:	4604      	mov	r4, r0
 8016332:	6030      	str	r0, [r6, #0]
 8016334:	2800      	cmp	r0, #0
 8016336:	d1d5      	bne.n	80162e4 <__sfp+0x24>
 8016338:	f7ff ff78 	bl	801622c <__sfp_lock_release>
 801633c:	230c      	movs	r3, #12
 801633e:	603b      	str	r3, [r7, #0]
 8016340:	e7ee      	b.n	8016320 <__sfp+0x60>
 8016342:	bf00      	nop
 8016344:	0801ada4 	.word	0x0801ada4
 8016348:	ffff0001 	.word	0xffff0001

0801634c <_fwalk_reent>:
 801634c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016350:	4606      	mov	r6, r0
 8016352:	4688      	mov	r8, r1
 8016354:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8016358:	2700      	movs	r7, #0
 801635a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801635e:	f1b9 0901 	subs.w	r9, r9, #1
 8016362:	d505      	bpl.n	8016370 <_fwalk_reent+0x24>
 8016364:	6824      	ldr	r4, [r4, #0]
 8016366:	2c00      	cmp	r4, #0
 8016368:	d1f7      	bne.n	801635a <_fwalk_reent+0xe>
 801636a:	4638      	mov	r0, r7
 801636c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016370:	89ab      	ldrh	r3, [r5, #12]
 8016372:	2b01      	cmp	r3, #1
 8016374:	d907      	bls.n	8016386 <_fwalk_reent+0x3a>
 8016376:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801637a:	3301      	adds	r3, #1
 801637c:	d003      	beq.n	8016386 <_fwalk_reent+0x3a>
 801637e:	4629      	mov	r1, r5
 8016380:	4630      	mov	r0, r6
 8016382:	47c0      	blx	r8
 8016384:	4307      	orrs	r7, r0
 8016386:	3568      	adds	r5, #104	; 0x68
 8016388:	e7e9      	b.n	801635e <_fwalk_reent+0x12>
	...

0801638c <__libc_init_array>:
 801638c:	b570      	push	{r4, r5, r6, lr}
 801638e:	4d0d      	ldr	r5, [pc, #52]	; (80163c4 <__libc_init_array+0x38>)
 8016390:	4c0d      	ldr	r4, [pc, #52]	; (80163c8 <__libc_init_array+0x3c>)
 8016392:	1b64      	subs	r4, r4, r5
 8016394:	10a4      	asrs	r4, r4, #2
 8016396:	2600      	movs	r6, #0
 8016398:	42a6      	cmp	r6, r4
 801639a:	d109      	bne.n	80163b0 <__libc_init_array+0x24>
 801639c:	4d0b      	ldr	r5, [pc, #44]	; (80163cc <__libc_init_array+0x40>)
 801639e:	4c0c      	ldr	r4, [pc, #48]	; (80163d0 <__libc_init_array+0x44>)
 80163a0:	f001 f87a 	bl	8017498 <_init>
 80163a4:	1b64      	subs	r4, r4, r5
 80163a6:	10a4      	asrs	r4, r4, #2
 80163a8:	2600      	movs	r6, #0
 80163aa:	42a6      	cmp	r6, r4
 80163ac:	d105      	bne.n	80163ba <__libc_init_array+0x2e>
 80163ae:	bd70      	pop	{r4, r5, r6, pc}
 80163b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80163b4:	4798      	blx	r3
 80163b6:	3601      	adds	r6, #1
 80163b8:	e7ee      	b.n	8016398 <__libc_init_array+0xc>
 80163ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80163be:	4798      	blx	r3
 80163c0:	3601      	adds	r6, #1
 80163c2:	e7f2      	b.n	80163aa <__libc_init_array+0x1e>
 80163c4:	0801ae94 	.word	0x0801ae94
 80163c8:	0801ae94 	.word	0x0801ae94
 80163cc:	0801ae94 	.word	0x0801ae94
 80163d0:	0801ae98 	.word	0x0801ae98

080163d4 <__retarget_lock_init_recursive>:
 80163d4:	4770      	bx	lr

080163d6 <__retarget_lock_acquire_recursive>:
 80163d6:	4770      	bx	lr

080163d8 <__retarget_lock_release_recursive>:
 80163d8:	4770      	bx	lr

080163da <memcmp>:
 80163da:	b510      	push	{r4, lr}
 80163dc:	3901      	subs	r1, #1
 80163de:	4402      	add	r2, r0
 80163e0:	4290      	cmp	r0, r2
 80163e2:	d101      	bne.n	80163e8 <memcmp+0xe>
 80163e4:	2000      	movs	r0, #0
 80163e6:	e005      	b.n	80163f4 <memcmp+0x1a>
 80163e8:	7803      	ldrb	r3, [r0, #0]
 80163ea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80163ee:	42a3      	cmp	r3, r4
 80163f0:	d001      	beq.n	80163f6 <memcmp+0x1c>
 80163f2:	1b18      	subs	r0, r3, r4
 80163f4:	bd10      	pop	{r4, pc}
 80163f6:	3001      	adds	r0, #1
 80163f8:	e7f2      	b.n	80163e0 <memcmp+0x6>

080163fa <memcpy>:
 80163fa:	440a      	add	r2, r1
 80163fc:	4291      	cmp	r1, r2
 80163fe:	f100 33ff 	add.w	r3, r0, #4294967295
 8016402:	d100      	bne.n	8016406 <memcpy+0xc>
 8016404:	4770      	bx	lr
 8016406:	b510      	push	{r4, lr}
 8016408:	f811 4b01 	ldrb.w	r4, [r1], #1
 801640c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8016410:	4291      	cmp	r1, r2
 8016412:	d1f9      	bne.n	8016408 <memcpy+0xe>
 8016414:	bd10      	pop	{r4, pc}

08016416 <memset>:
 8016416:	4402      	add	r2, r0
 8016418:	4603      	mov	r3, r0
 801641a:	4293      	cmp	r3, r2
 801641c:	d100      	bne.n	8016420 <memset+0xa>
 801641e:	4770      	bx	lr
 8016420:	f803 1b01 	strb.w	r1, [r3], #1
 8016424:	e7f9      	b.n	801641a <memset+0x4>
	...

08016428 <sbrk_aligned>:
 8016428:	b570      	push	{r4, r5, r6, lr}
 801642a:	4e0e      	ldr	r6, [pc, #56]	; (8016464 <sbrk_aligned+0x3c>)
 801642c:	460c      	mov	r4, r1
 801642e:	6831      	ldr	r1, [r6, #0]
 8016430:	4605      	mov	r5, r0
 8016432:	b911      	cbnz	r1, 801643a <sbrk_aligned+0x12>
 8016434:	f000 f9c2 	bl	80167bc <_sbrk_r>
 8016438:	6030      	str	r0, [r6, #0]
 801643a:	4621      	mov	r1, r4
 801643c:	4628      	mov	r0, r5
 801643e:	f000 f9bd 	bl	80167bc <_sbrk_r>
 8016442:	1c43      	adds	r3, r0, #1
 8016444:	d00a      	beq.n	801645c <sbrk_aligned+0x34>
 8016446:	1cc4      	adds	r4, r0, #3
 8016448:	f024 0403 	bic.w	r4, r4, #3
 801644c:	42a0      	cmp	r0, r4
 801644e:	d007      	beq.n	8016460 <sbrk_aligned+0x38>
 8016450:	1a21      	subs	r1, r4, r0
 8016452:	4628      	mov	r0, r5
 8016454:	f000 f9b2 	bl	80167bc <_sbrk_r>
 8016458:	3001      	adds	r0, #1
 801645a:	d101      	bne.n	8016460 <sbrk_aligned+0x38>
 801645c:	f04f 34ff 	mov.w	r4, #4294967295
 8016460:	4620      	mov	r0, r4
 8016462:	bd70      	pop	{r4, r5, r6, pc}
 8016464:	2000d2a0 	.word	0x2000d2a0

08016468 <_malloc_r>:
 8016468:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801646c:	1ccd      	adds	r5, r1, #3
 801646e:	f025 0503 	bic.w	r5, r5, #3
 8016472:	3508      	adds	r5, #8
 8016474:	2d0c      	cmp	r5, #12
 8016476:	bf38      	it	cc
 8016478:	250c      	movcc	r5, #12
 801647a:	2d00      	cmp	r5, #0
 801647c:	4607      	mov	r7, r0
 801647e:	db01      	blt.n	8016484 <_malloc_r+0x1c>
 8016480:	42a9      	cmp	r1, r5
 8016482:	d905      	bls.n	8016490 <_malloc_r+0x28>
 8016484:	230c      	movs	r3, #12
 8016486:	603b      	str	r3, [r7, #0]
 8016488:	2600      	movs	r6, #0
 801648a:	4630      	mov	r0, r6
 801648c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016490:	4e2e      	ldr	r6, [pc, #184]	; (801654c <_malloc_r+0xe4>)
 8016492:	f000 fc3b 	bl	8016d0c <__malloc_lock>
 8016496:	6833      	ldr	r3, [r6, #0]
 8016498:	461c      	mov	r4, r3
 801649a:	bb34      	cbnz	r4, 80164ea <_malloc_r+0x82>
 801649c:	4629      	mov	r1, r5
 801649e:	4638      	mov	r0, r7
 80164a0:	f7ff ffc2 	bl	8016428 <sbrk_aligned>
 80164a4:	1c43      	adds	r3, r0, #1
 80164a6:	4604      	mov	r4, r0
 80164a8:	d14d      	bne.n	8016546 <_malloc_r+0xde>
 80164aa:	6834      	ldr	r4, [r6, #0]
 80164ac:	4626      	mov	r6, r4
 80164ae:	2e00      	cmp	r6, #0
 80164b0:	d140      	bne.n	8016534 <_malloc_r+0xcc>
 80164b2:	6823      	ldr	r3, [r4, #0]
 80164b4:	4631      	mov	r1, r6
 80164b6:	4638      	mov	r0, r7
 80164b8:	eb04 0803 	add.w	r8, r4, r3
 80164bc:	f000 f97e 	bl	80167bc <_sbrk_r>
 80164c0:	4580      	cmp	r8, r0
 80164c2:	d13a      	bne.n	801653a <_malloc_r+0xd2>
 80164c4:	6821      	ldr	r1, [r4, #0]
 80164c6:	3503      	adds	r5, #3
 80164c8:	1a6d      	subs	r5, r5, r1
 80164ca:	f025 0503 	bic.w	r5, r5, #3
 80164ce:	3508      	adds	r5, #8
 80164d0:	2d0c      	cmp	r5, #12
 80164d2:	bf38      	it	cc
 80164d4:	250c      	movcc	r5, #12
 80164d6:	4629      	mov	r1, r5
 80164d8:	4638      	mov	r0, r7
 80164da:	f7ff ffa5 	bl	8016428 <sbrk_aligned>
 80164de:	3001      	adds	r0, #1
 80164e0:	d02b      	beq.n	801653a <_malloc_r+0xd2>
 80164e2:	6823      	ldr	r3, [r4, #0]
 80164e4:	442b      	add	r3, r5
 80164e6:	6023      	str	r3, [r4, #0]
 80164e8:	e00e      	b.n	8016508 <_malloc_r+0xa0>
 80164ea:	6822      	ldr	r2, [r4, #0]
 80164ec:	1b52      	subs	r2, r2, r5
 80164ee:	d41e      	bmi.n	801652e <_malloc_r+0xc6>
 80164f0:	2a0b      	cmp	r2, #11
 80164f2:	d916      	bls.n	8016522 <_malloc_r+0xba>
 80164f4:	1961      	adds	r1, r4, r5
 80164f6:	42a3      	cmp	r3, r4
 80164f8:	6025      	str	r5, [r4, #0]
 80164fa:	bf18      	it	ne
 80164fc:	6059      	strne	r1, [r3, #4]
 80164fe:	6863      	ldr	r3, [r4, #4]
 8016500:	bf08      	it	eq
 8016502:	6031      	streq	r1, [r6, #0]
 8016504:	5162      	str	r2, [r4, r5]
 8016506:	604b      	str	r3, [r1, #4]
 8016508:	4638      	mov	r0, r7
 801650a:	f104 060b 	add.w	r6, r4, #11
 801650e:	f000 fc03 	bl	8016d18 <__malloc_unlock>
 8016512:	f026 0607 	bic.w	r6, r6, #7
 8016516:	1d23      	adds	r3, r4, #4
 8016518:	1af2      	subs	r2, r6, r3
 801651a:	d0b6      	beq.n	801648a <_malloc_r+0x22>
 801651c:	1b9b      	subs	r3, r3, r6
 801651e:	50a3      	str	r3, [r4, r2]
 8016520:	e7b3      	b.n	801648a <_malloc_r+0x22>
 8016522:	6862      	ldr	r2, [r4, #4]
 8016524:	42a3      	cmp	r3, r4
 8016526:	bf0c      	ite	eq
 8016528:	6032      	streq	r2, [r6, #0]
 801652a:	605a      	strne	r2, [r3, #4]
 801652c:	e7ec      	b.n	8016508 <_malloc_r+0xa0>
 801652e:	4623      	mov	r3, r4
 8016530:	6864      	ldr	r4, [r4, #4]
 8016532:	e7b2      	b.n	801649a <_malloc_r+0x32>
 8016534:	4634      	mov	r4, r6
 8016536:	6876      	ldr	r6, [r6, #4]
 8016538:	e7b9      	b.n	80164ae <_malloc_r+0x46>
 801653a:	230c      	movs	r3, #12
 801653c:	603b      	str	r3, [r7, #0]
 801653e:	4638      	mov	r0, r7
 8016540:	f000 fbea 	bl	8016d18 <__malloc_unlock>
 8016544:	e7a1      	b.n	801648a <_malloc_r+0x22>
 8016546:	6025      	str	r5, [r4, #0]
 8016548:	e7de      	b.n	8016508 <_malloc_r+0xa0>
 801654a:	bf00      	nop
 801654c:	2000d29c 	.word	0x2000d29c

08016550 <iprintf>:
 8016550:	b40f      	push	{r0, r1, r2, r3}
 8016552:	4b0a      	ldr	r3, [pc, #40]	; (801657c <iprintf+0x2c>)
 8016554:	b513      	push	{r0, r1, r4, lr}
 8016556:	681c      	ldr	r4, [r3, #0]
 8016558:	b124      	cbz	r4, 8016564 <iprintf+0x14>
 801655a:	69a3      	ldr	r3, [r4, #24]
 801655c:	b913      	cbnz	r3, 8016564 <iprintf+0x14>
 801655e:	4620      	mov	r0, r4
 8016560:	f7ff fe76 	bl	8016250 <__sinit>
 8016564:	ab05      	add	r3, sp, #20
 8016566:	9a04      	ldr	r2, [sp, #16]
 8016568:	68a1      	ldr	r1, [r4, #8]
 801656a:	9301      	str	r3, [sp, #4]
 801656c:	4620      	mov	r0, r4
 801656e:	f000 fc4f 	bl	8016e10 <_vfiprintf_r>
 8016572:	b002      	add	sp, #8
 8016574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016578:	b004      	add	sp, #16
 801657a:	4770      	bx	lr
 801657c:	20000030 	.word	0x20000030

08016580 <_puts_r>:
 8016580:	b570      	push	{r4, r5, r6, lr}
 8016582:	460e      	mov	r6, r1
 8016584:	4605      	mov	r5, r0
 8016586:	b118      	cbz	r0, 8016590 <_puts_r+0x10>
 8016588:	6983      	ldr	r3, [r0, #24]
 801658a:	b90b      	cbnz	r3, 8016590 <_puts_r+0x10>
 801658c:	f7ff fe60 	bl	8016250 <__sinit>
 8016590:	69ab      	ldr	r3, [r5, #24]
 8016592:	68ac      	ldr	r4, [r5, #8]
 8016594:	b913      	cbnz	r3, 801659c <_puts_r+0x1c>
 8016596:	4628      	mov	r0, r5
 8016598:	f7ff fe5a 	bl	8016250 <__sinit>
 801659c:	4b2c      	ldr	r3, [pc, #176]	; (8016650 <_puts_r+0xd0>)
 801659e:	429c      	cmp	r4, r3
 80165a0:	d120      	bne.n	80165e4 <_puts_r+0x64>
 80165a2:	686c      	ldr	r4, [r5, #4]
 80165a4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80165a6:	07db      	lsls	r3, r3, #31
 80165a8:	d405      	bmi.n	80165b6 <_puts_r+0x36>
 80165aa:	89a3      	ldrh	r3, [r4, #12]
 80165ac:	0598      	lsls	r0, r3, #22
 80165ae:	d402      	bmi.n	80165b6 <_puts_r+0x36>
 80165b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80165b2:	f7ff ff10 	bl	80163d6 <__retarget_lock_acquire_recursive>
 80165b6:	89a3      	ldrh	r3, [r4, #12]
 80165b8:	0719      	lsls	r1, r3, #28
 80165ba:	d51d      	bpl.n	80165f8 <_puts_r+0x78>
 80165bc:	6923      	ldr	r3, [r4, #16]
 80165be:	b1db      	cbz	r3, 80165f8 <_puts_r+0x78>
 80165c0:	3e01      	subs	r6, #1
 80165c2:	68a3      	ldr	r3, [r4, #8]
 80165c4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80165c8:	3b01      	subs	r3, #1
 80165ca:	60a3      	str	r3, [r4, #8]
 80165cc:	bb39      	cbnz	r1, 801661e <_puts_r+0x9e>
 80165ce:	2b00      	cmp	r3, #0
 80165d0:	da38      	bge.n	8016644 <_puts_r+0xc4>
 80165d2:	4622      	mov	r2, r4
 80165d4:	210a      	movs	r1, #10
 80165d6:	4628      	mov	r0, r5
 80165d8:	f000 f944 	bl	8016864 <__swbuf_r>
 80165dc:	3001      	adds	r0, #1
 80165de:	d011      	beq.n	8016604 <_puts_r+0x84>
 80165e0:	250a      	movs	r5, #10
 80165e2:	e011      	b.n	8016608 <_puts_r+0x88>
 80165e4:	4b1b      	ldr	r3, [pc, #108]	; (8016654 <_puts_r+0xd4>)
 80165e6:	429c      	cmp	r4, r3
 80165e8:	d101      	bne.n	80165ee <_puts_r+0x6e>
 80165ea:	68ac      	ldr	r4, [r5, #8]
 80165ec:	e7da      	b.n	80165a4 <_puts_r+0x24>
 80165ee:	4b1a      	ldr	r3, [pc, #104]	; (8016658 <_puts_r+0xd8>)
 80165f0:	429c      	cmp	r4, r3
 80165f2:	bf08      	it	eq
 80165f4:	68ec      	ldreq	r4, [r5, #12]
 80165f6:	e7d5      	b.n	80165a4 <_puts_r+0x24>
 80165f8:	4621      	mov	r1, r4
 80165fa:	4628      	mov	r0, r5
 80165fc:	f000 f996 	bl	801692c <__swsetup_r>
 8016600:	2800      	cmp	r0, #0
 8016602:	d0dd      	beq.n	80165c0 <_puts_r+0x40>
 8016604:	f04f 35ff 	mov.w	r5, #4294967295
 8016608:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801660a:	07da      	lsls	r2, r3, #31
 801660c:	d405      	bmi.n	801661a <_puts_r+0x9a>
 801660e:	89a3      	ldrh	r3, [r4, #12]
 8016610:	059b      	lsls	r3, r3, #22
 8016612:	d402      	bmi.n	801661a <_puts_r+0x9a>
 8016614:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016616:	f7ff fedf 	bl	80163d8 <__retarget_lock_release_recursive>
 801661a:	4628      	mov	r0, r5
 801661c:	bd70      	pop	{r4, r5, r6, pc}
 801661e:	2b00      	cmp	r3, #0
 8016620:	da04      	bge.n	801662c <_puts_r+0xac>
 8016622:	69a2      	ldr	r2, [r4, #24]
 8016624:	429a      	cmp	r2, r3
 8016626:	dc06      	bgt.n	8016636 <_puts_r+0xb6>
 8016628:	290a      	cmp	r1, #10
 801662a:	d004      	beq.n	8016636 <_puts_r+0xb6>
 801662c:	6823      	ldr	r3, [r4, #0]
 801662e:	1c5a      	adds	r2, r3, #1
 8016630:	6022      	str	r2, [r4, #0]
 8016632:	7019      	strb	r1, [r3, #0]
 8016634:	e7c5      	b.n	80165c2 <_puts_r+0x42>
 8016636:	4622      	mov	r2, r4
 8016638:	4628      	mov	r0, r5
 801663a:	f000 f913 	bl	8016864 <__swbuf_r>
 801663e:	3001      	adds	r0, #1
 8016640:	d1bf      	bne.n	80165c2 <_puts_r+0x42>
 8016642:	e7df      	b.n	8016604 <_puts_r+0x84>
 8016644:	6823      	ldr	r3, [r4, #0]
 8016646:	250a      	movs	r5, #10
 8016648:	1c5a      	adds	r2, r3, #1
 801664a:	6022      	str	r2, [r4, #0]
 801664c:	701d      	strb	r5, [r3, #0]
 801664e:	e7db      	b.n	8016608 <_puts_r+0x88>
 8016650:	0801ad64 	.word	0x0801ad64
 8016654:	0801ad84 	.word	0x0801ad84
 8016658:	0801ad44 	.word	0x0801ad44

0801665c <puts>:
 801665c:	4b02      	ldr	r3, [pc, #8]	; (8016668 <puts+0xc>)
 801665e:	4601      	mov	r1, r0
 8016660:	6818      	ldr	r0, [r3, #0]
 8016662:	f7ff bf8d 	b.w	8016580 <_puts_r>
 8016666:	bf00      	nop
 8016668:	20000030 	.word	0x20000030

0801666c <rand>:
 801666c:	4b16      	ldr	r3, [pc, #88]	; (80166c8 <rand+0x5c>)
 801666e:	b510      	push	{r4, lr}
 8016670:	681c      	ldr	r4, [r3, #0]
 8016672:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8016674:	b9b3      	cbnz	r3, 80166a4 <rand+0x38>
 8016676:	2018      	movs	r0, #24
 8016678:	f000 fb40 	bl	8016cfc <malloc>
 801667c:	63a0      	str	r0, [r4, #56]	; 0x38
 801667e:	b928      	cbnz	r0, 801668c <rand+0x20>
 8016680:	4602      	mov	r2, r0
 8016682:	4b12      	ldr	r3, [pc, #72]	; (80166cc <rand+0x60>)
 8016684:	4812      	ldr	r0, [pc, #72]	; (80166d0 <rand+0x64>)
 8016686:	214e      	movs	r1, #78	; 0x4e
 8016688:	f000 f9be 	bl	8016a08 <__assert_func>
 801668c:	4a11      	ldr	r2, [pc, #68]	; (80166d4 <rand+0x68>)
 801668e:	4b12      	ldr	r3, [pc, #72]	; (80166d8 <rand+0x6c>)
 8016690:	e9c0 2300 	strd	r2, r3, [r0]
 8016694:	4b11      	ldr	r3, [pc, #68]	; (80166dc <rand+0x70>)
 8016696:	6083      	str	r3, [r0, #8]
 8016698:	230b      	movs	r3, #11
 801669a:	8183      	strh	r3, [r0, #12]
 801669c:	2201      	movs	r2, #1
 801669e:	2300      	movs	r3, #0
 80166a0:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80166a4:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80166a6:	4a0e      	ldr	r2, [pc, #56]	; (80166e0 <rand+0x74>)
 80166a8:	6920      	ldr	r0, [r4, #16]
 80166aa:	6963      	ldr	r3, [r4, #20]
 80166ac:	490d      	ldr	r1, [pc, #52]	; (80166e4 <rand+0x78>)
 80166ae:	4342      	muls	r2, r0
 80166b0:	fb01 2203 	mla	r2, r1, r3, r2
 80166b4:	fba0 0101 	umull	r0, r1, r0, r1
 80166b8:	1c43      	adds	r3, r0, #1
 80166ba:	eb42 0001 	adc.w	r0, r2, r1
 80166be:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80166c2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80166c6:	bd10      	pop	{r4, pc}
 80166c8:	20000030 	.word	0x20000030
 80166cc:	0801ada8 	.word	0x0801ada8
 80166d0:	0801adbf 	.word	0x0801adbf
 80166d4:	abcd330e 	.word	0xabcd330e
 80166d8:	e66d1234 	.word	0xe66d1234
 80166dc:	0005deec 	.word	0x0005deec
 80166e0:	5851f42d 	.word	0x5851f42d
 80166e4:	4c957f2d 	.word	0x4c957f2d

080166e8 <cleanup_glue>:
 80166e8:	b538      	push	{r3, r4, r5, lr}
 80166ea:	460c      	mov	r4, r1
 80166ec:	6809      	ldr	r1, [r1, #0]
 80166ee:	4605      	mov	r5, r0
 80166f0:	b109      	cbz	r1, 80166f6 <cleanup_glue+0xe>
 80166f2:	f7ff fff9 	bl	80166e8 <cleanup_glue>
 80166f6:	4621      	mov	r1, r4
 80166f8:	4628      	mov	r0, r5
 80166fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80166fe:	f000 bb11 	b.w	8016d24 <_free_r>
	...

08016704 <_reclaim_reent>:
 8016704:	4b2c      	ldr	r3, [pc, #176]	; (80167b8 <_reclaim_reent+0xb4>)
 8016706:	681b      	ldr	r3, [r3, #0]
 8016708:	4283      	cmp	r3, r0
 801670a:	b570      	push	{r4, r5, r6, lr}
 801670c:	4604      	mov	r4, r0
 801670e:	d051      	beq.n	80167b4 <_reclaim_reent+0xb0>
 8016710:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8016712:	b143      	cbz	r3, 8016726 <_reclaim_reent+0x22>
 8016714:	68db      	ldr	r3, [r3, #12]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d14a      	bne.n	80167b0 <_reclaim_reent+0xac>
 801671a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 801671c:	6819      	ldr	r1, [r3, #0]
 801671e:	b111      	cbz	r1, 8016726 <_reclaim_reent+0x22>
 8016720:	4620      	mov	r0, r4
 8016722:	f000 faff 	bl	8016d24 <_free_r>
 8016726:	6961      	ldr	r1, [r4, #20]
 8016728:	b111      	cbz	r1, 8016730 <_reclaim_reent+0x2c>
 801672a:	4620      	mov	r0, r4
 801672c:	f000 fafa 	bl	8016d24 <_free_r>
 8016730:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8016732:	b111      	cbz	r1, 801673a <_reclaim_reent+0x36>
 8016734:	4620      	mov	r0, r4
 8016736:	f000 faf5 	bl	8016d24 <_free_r>
 801673a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801673c:	b111      	cbz	r1, 8016744 <_reclaim_reent+0x40>
 801673e:	4620      	mov	r0, r4
 8016740:	f000 faf0 	bl	8016d24 <_free_r>
 8016744:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8016746:	b111      	cbz	r1, 801674e <_reclaim_reent+0x4a>
 8016748:	4620      	mov	r0, r4
 801674a:	f000 faeb 	bl	8016d24 <_free_r>
 801674e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8016750:	b111      	cbz	r1, 8016758 <_reclaim_reent+0x54>
 8016752:	4620      	mov	r0, r4
 8016754:	f000 fae6 	bl	8016d24 <_free_r>
 8016758:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801675a:	b111      	cbz	r1, 8016762 <_reclaim_reent+0x5e>
 801675c:	4620      	mov	r0, r4
 801675e:	f000 fae1 	bl	8016d24 <_free_r>
 8016762:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8016764:	b111      	cbz	r1, 801676c <_reclaim_reent+0x68>
 8016766:	4620      	mov	r0, r4
 8016768:	f000 fadc 	bl	8016d24 <_free_r>
 801676c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801676e:	b111      	cbz	r1, 8016776 <_reclaim_reent+0x72>
 8016770:	4620      	mov	r0, r4
 8016772:	f000 fad7 	bl	8016d24 <_free_r>
 8016776:	69a3      	ldr	r3, [r4, #24]
 8016778:	b1e3      	cbz	r3, 80167b4 <_reclaim_reent+0xb0>
 801677a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801677c:	4620      	mov	r0, r4
 801677e:	4798      	blx	r3
 8016780:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016782:	b1b9      	cbz	r1, 80167b4 <_reclaim_reent+0xb0>
 8016784:	4620      	mov	r0, r4
 8016786:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801678a:	f7ff bfad 	b.w	80166e8 <cleanup_glue>
 801678e:	5949      	ldr	r1, [r1, r5]
 8016790:	b941      	cbnz	r1, 80167a4 <_reclaim_reent+0xa0>
 8016792:	3504      	adds	r5, #4
 8016794:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8016796:	2d80      	cmp	r5, #128	; 0x80
 8016798:	68d9      	ldr	r1, [r3, #12]
 801679a:	d1f8      	bne.n	801678e <_reclaim_reent+0x8a>
 801679c:	4620      	mov	r0, r4
 801679e:	f000 fac1 	bl	8016d24 <_free_r>
 80167a2:	e7ba      	b.n	801671a <_reclaim_reent+0x16>
 80167a4:	680e      	ldr	r6, [r1, #0]
 80167a6:	4620      	mov	r0, r4
 80167a8:	f000 fabc 	bl	8016d24 <_free_r>
 80167ac:	4631      	mov	r1, r6
 80167ae:	e7ef      	b.n	8016790 <_reclaim_reent+0x8c>
 80167b0:	2500      	movs	r5, #0
 80167b2:	e7ef      	b.n	8016794 <_reclaim_reent+0x90>
 80167b4:	bd70      	pop	{r4, r5, r6, pc}
 80167b6:	bf00      	nop
 80167b8:	20000030 	.word	0x20000030

080167bc <_sbrk_r>:
 80167bc:	b538      	push	{r3, r4, r5, lr}
 80167be:	4d06      	ldr	r5, [pc, #24]	; (80167d8 <_sbrk_r+0x1c>)
 80167c0:	2300      	movs	r3, #0
 80167c2:	4604      	mov	r4, r0
 80167c4:	4608      	mov	r0, r1
 80167c6:	602b      	str	r3, [r5, #0]
 80167c8:	f7ea fb72 	bl	8000eb0 <_sbrk>
 80167cc:	1c43      	adds	r3, r0, #1
 80167ce:	d102      	bne.n	80167d6 <_sbrk_r+0x1a>
 80167d0:	682b      	ldr	r3, [r5, #0]
 80167d2:	b103      	cbz	r3, 80167d6 <_sbrk_r+0x1a>
 80167d4:	6023      	str	r3, [r4, #0]
 80167d6:	bd38      	pop	{r3, r4, r5, pc}
 80167d8:	2000d2a4 	.word	0x2000d2a4

080167dc <__sread>:
 80167dc:	b510      	push	{r4, lr}
 80167de:	460c      	mov	r4, r1
 80167e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80167e4:	f000 fdd8 	bl	8017398 <_read_r>
 80167e8:	2800      	cmp	r0, #0
 80167ea:	bfab      	itete	ge
 80167ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80167ee:	89a3      	ldrhlt	r3, [r4, #12]
 80167f0:	181b      	addge	r3, r3, r0
 80167f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80167f6:	bfac      	ite	ge
 80167f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80167fa:	81a3      	strhlt	r3, [r4, #12]
 80167fc:	bd10      	pop	{r4, pc}

080167fe <__swrite>:
 80167fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016802:	461f      	mov	r7, r3
 8016804:	898b      	ldrh	r3, [r1, #12]
 8016806:	05db      	lsls	r3, r3, #23
 8016808:	4605      	mov	r5, r0
 801680a:	460c      	mov	r4, r1
 801680c:	4616      	mov	r6, r2
 801680e:	d505      	bpl.n	801681c <__swrite+0x1e>
 8016810:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016814:	2302      	movs	r3, #2
 8016816:	2200      	movs	r2, #0
 8016818:	f000 f9f8 	bl	8016c0c <_lseek_r>
 801681c:	89a3      	ldrh	r3, [r4, #12]
 801681e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016822:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016826:	81a3      	strh	r3, [r4, #12]
 8016828:	4632      	mov	r2, r6
 801682a:	463b      	mov	r3, r7
 801682c:	4628      	mov	r0, r5
 801682e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016832:	f000 b869 	b.w	8016908 <_write_r>

08016836 <__sseek>:
 8016836:	b510      	push	{r4, lr}
 8016838:	460c      	mov	r4, r1
 801683a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801683e:	f000 f9e5 	bl	8016c0c <_lseek_r>
 8016842:	1c43      	adds	r3, r0, #1
 8016844:	89a3      	ldrh	r3, [r4, #12]
 8016846:	bf15      	itete	ne
 8016848:	6560      	strne	r0, [r4, #84]	; 0x54
 801684a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801684e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016852:	81a3      	strheq	r3, [r4, #12]
 8016854:	bf18      	it	ne
 8016856:	81a3      	strhne	r3, [r4, #12]
 8016858:	bd10      	pop	{r4, pc}

0801685a <__sclose>:
 801685a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801685e:	f000 b8f1 	b.w	8016a44 <_close_r>
	...

08016864 <__swbuf_r>:
 8016864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016866:	460e      	mov	r6, r1
 8016868:	4614      	mov	r4, r2
 801686a:	4605      	mov	r5, r0
 801686c:	b118      	cbz	r0, 8016876 <__swbuf_r+0x12>
 801686e:	6983      	ldr	r3, [r0, #24]
 8016870:	b90b      	cbnz	r3, 8016876 <__swbuf_r+0x12>
 8016872:	f7ff fced 	bl	8016250 <__sinit>
 8016876:	4b21      	ldr	r3, [pc, #132]	; (80168fc <__swbuf_r+0x98>)
 8016878:	429c      	cmp	r4, r3
 801687a:	d12b      	bne.n	80168d4 <__swbuf_r+0x70>
 801687c:	686c      	ldr	r4, [r5, #4]
 801687e:	69a3      	ldr	r3, [r4, #24]
 8016880:	60a3      	str	r3, [r4, #8]
 8016882:	89a3      	ldrh	r3, [r4, #12]
 8016884:	071a      	lsls	r2, r3, #28
 8016886:	d52f      	bpl.n	80168e8 <__swbuf_r+0x84>
 8016888:	6923      	ldr	r3, [r4, #16]
 801688a:	b36b      	cbz	r3, 80168e8 <__swbuf_r+0x84>
 801688c:	6923      	ldr	r3, [r4, #16]
 801688e:	6820      	ldr	r0, [r4, #0]
 8016890:	1ac0      	subs	r0, r0, r3
 8016892:	6963      	ldr	r3, [r4, #20]
 8016894:	b2f6      	uxtb	r6, r6
 8016896:	4283      	cmp	r3, r0
 8016898:	4637      	mov	r7, r6
 801689a:	dc04      	bgt.n	80168a6 <__swbuf_r+0x42>
 801689c:	4621      	mov	r1, r4
 801689e:	4628      	mov	r0, r5
 80168a0:	f000 f966 	bl	8016b70 <_fflush_r>
 80168a4:	bb30      	cbnz	r0, 80168f4 <__swbuf_r+0x90>
 80168a6:	68a3      	ldr	r3, [r4, #8]
 80168a8:	3b01      	subs	r3, #1
 80168aa:	60a3      	str	r3, [r4, #8]
 80168ac:	6823      	ldr	r3, [r4, #0]
 80168ae:	1c5a      	adds	r2, r3, #1
 80168b0:	6022      	str	r2, [r4, #0]
 80168b2:	701e      	strb	r6, [r3, #0]
 80168b4:	6963      	ldr	r3, [r4, #20]
 80168b6:	3001      	adds	r0, #1
 80168b8:	4283      	cmp	r3, r0
 80168ba:	d004      	beq.n	80168c6 <__swbuf_r+0x62>
 80168bc:	89a3      	ldrh	r3, [r4, #12]
 80168be:	07db      	lsls	r3, r3, #31
 80168c0:	d506      	bpl.n	80168d0 <__swbuf_r+0x6c>
 80168c2:	2e0a      	cmp	r6, #10
 80168c4:	d104      	bne.n	80168d0 <__swbuf_r+0x6c>
 80168c6:	4621      	mov	r1, r4
 80168c8:	4628      	mov	r0, r5
 80168ca:	f000 f951 	bl	8016b70 <_fflush_r>
 80168ce:	b988      	cbnz	r0, 80168f4 <__swbuf_r+0x90>
 80168d0:	4638      	mov	r0, r7
 80168d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80168d4:	4b0a      	ldr	r3, [pc, #40]	; (8016900 <__swbuf_r+0x9c>)
 80168d6:	429c      	cmp	r4, r3
 80168d8:	d101      	bne.n	80168de <__swbuf_r+0x7a>
 80168da:	68ac      	ldr	r4, [r5, #8]
 80168dc:	e7cf      	b.n	801687e <__swbuf_r+0x1a>
 80168de:	4b09      	ldr	r3, [pc, #36]	; (8016904 <__swbuf_r+0xa0>)
 80168e0:	429c      	cmp	r4, r3
 80168e2:	bf08      	it	eq
 80168e4:	68ec      	ldreq	r4, [r5, #12]
 80168e6:	e7ca      	b.n	801687e <__swbuf_r+0x1a>
 80168e8:	4621      	mov	r1, r4
 80168ea:	4628      	mov	r0, r5
 80168ec:	f000 f81e 	bl	801692c <__swsetup_r>
 80168f0:	2800      	cmp	r0, #0
 80168f2:	d0cb      	beq.n	801688c <__swbuf_r+0x28>
 80168f4:	f04f 37ff 	mov.w	r7, #4294967295
 80168f8:	e7ea      	b.n	80168d0 <__swbuf_r+0x6c>
 80168fa:	bf00      	nop
 80168fc:	0801ad64 	.word	0x0801ad64
 8016900:	0801ad84 	.word	0x0801ad84
 8016904:	0801ad44 	.word	0x0801ad44

08016908 <_write_r>:
 8016908:	b538      	push	{r3, r4, r5, lr}
 801690a:	4d07      	ldr	r5, [pc, #28]	; (8016928 <_write_r+0x20>)
 801690c:	4604      	mov	r4, r0
 801690e:	4608      	mov	r0, r1
 8016910:	4611      	mov	r1, r2
 8016912:	2200      	movs	r2, #0
 8016914:	602a      	str	r2, [r5, #0]
 8016916:	461a      	mov	r2, r3
 8016918:	f7ea fa79 	bl	8000e0e <_write>
 801691c:	1c43      	adds	r3, r0, #1
 801691e:	d102      	bne.n	8016926 <_write_r+0x1e>
 8016920:	682b      	ldr	r3, [r5, #0]
 8016922:	b103      	cbz	r3, 8016926 <_write_r+0x1e>
 8016924:	6023      	str	r3, [r4, #0]
 8016926:	bd38      	pop	{r3, r4, r5, pc}
 8016928:	2000d2a4 	.word	0x2000d2a4

0801692c <__swsetup_r>:
 801692c:	4b32      	ldr	r3, [pc, #200]	; (80169f8 <__swsetup_r+0xcc>)
 801692e:	b570      	push	{r4, r5, r6, lr}
 8016930:	681d      	ldr	r5, [r3, #0]
 8016932:	4606      	mov	r6, r0
 8016934:	460c      	mov	r4, r1
 8016936:	b125      	cbz	r5, 8016942 <__swsetup_r+0x16>
 8016938:	69ab      	ldr	r3, [r5, #24]
 801693a:	b913      	cbnz	r3, 8016942 <__swsetup_r+0x16>
 801693c:	4628      	mov	r0, r5
 801693e:	f7ff fc87 	bl	8016250 <__sinit>
 8016942:	4b2e      	ldr	r3, [pc, #184]	; (80169fc <__swsetup_r+0xd0>)
 8016944:	429c      	cmp	r4, r3
 8016946:	d10f      	bne.n	8016968 <__swsetup_r+0x3c>
 8016948:	686c      	ldr	r4, [r5, #4]
 801694a:	89a3      	ldrh	r3, [r4, #12]
 801694c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8016950:	0719      	lsls	r1, r3, #28
 8016952:	d42c      	bmi.n	80169ae <__swsetup_r+0x82>
 8016954:	06dd      	lsls	r5, r3, #27
 8016956:	d411      	bmi.n	801697c <__swsetup_r+0x50>
 8016958:	2309      	movs	r3, #9
 801695a:	6033      	str	r3, [r6, #0]
 801695c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8016960:	81a3      	strh	r3, [r4, #12]
 8016962:	f04f 30ff 	mov.w	r0, #4294967295
 8016966:	e03e      	b.n	80169e6 <__swsetup_r+0xba>
 8016968:	4b25      	ldr	r3, [pc, #148]	; (8016a00 <__swsetup_r+0xd4>)
 801696a:	429c      	cmp	r4, r3
 801696c:	d101      	bne.n	8016972 <__swsetup_r+0x46>
 801696e:	68ac      	ldr	r4, [r5, #8]
 8016970:	e7eb      	b.n	801694a <__swsetup_r+0x1e>
 8016972:	4b24      	ldr	r3, [pc, #144]	; (8016a04 <__swsetup_r+0xd8>)
 8016974:	429c      	cmp	r4, r3
 8016976:	bf08      	it	eq
 8016978:	68ec      	ldreq	r4, [r5, #12]
 801697a:	e7e6      	b.n	801694a <__swsetup_r+0x1e>
 801697c:	0758      	lsls	r0, r3, #29
 801697e:	d512      	bpl.n	80169a6 <__swsetup_r+0x7a>
 8016980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016982:	b141      	cbz	r1, 8016996 <__swsetup_r+0x6a>
 8016984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016988:	4299      	cmp	r1, r3
 801698a:	d002      	beq.n	8016992 <__swsetup_r+0x66>
 801698c:	4630      	mov	r0, r6
 801698e:	f000 f9c9 	bl	8016d24 <_free_r>
 8016992:	2300      	movs	r3, #0
 8016994:	6363      	str	r3, [r4, #52]	; 0x34
 8016996:	89a3      	ldrh	r3, [r4, #12]
 8016998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801699c:	81a3      	strh	r3, [r4, #12]
 801699e:	2300      	movs	r3, #0
 80169a0:	6063      	str	r3, [r4, #4]
 80169a2:	6923      	ldr	r3, [r4, #16]
 80169a4:	6023      	str	r3, [r4, #0]
 80169a6:	89a3      	ldrh	r3, [r4, #12]
 80169a8:	f043 0308 	orr.w	r3, r3, #8
 80169ac:	81a3      	strh	r3, [r4, #12]
 80169ae:	6923      	ldr	r3, [r4, #16]
 80169b0:	b94b      	cbnz	r3, 80169c6 <__swsetup_r+0x9a>
 80169b2:	89a3      	ldrh	r3, [r4, #12]
 80169b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80169b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80169bc:	d003      	beq.n	80169c6 <__swsetup_r+0x9a>
 80169be:	4621      	mov	r1, r4
 80169c0:	4630      	mov	r0, r6
 80169c2:	f000 f95b 	bl	8016c7c <__smakebuf_r>
 80169c6:	89a0      	ldrh	r0, [r4, #12]
 80169c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80169cc:	f010 0301 	ands.w	r3, r0, #1
 80169d0:	d00a      	beq.n	80169e8 <__swsetup_r+0xbc>
 80169d2:	2300      	movs	r3, #0
 80169d4:	60a3      	str	r3, [r4, #8]
 80169d6:	6963      	ldr	r3, [r4, #20]
 80169d8:	425b      	negs	r3, r3
 80169da:	61a3      	str	r3, [r4, #24]
 80169dc:	6923      	ldr	r3, [r4, #16]
 80169de:	b943      	cbnz	r3, 80169f2 <__swsetup_r+0xc6>
 80169e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80169e4:	d1ba      	bne.n	801695c <__swsetup_r+0x30>
 80169e6:	bd70      	pop	{r4, r5, r6, pc}
 80169e8:	0781      	lsls	r1, r0, #30
 80169ea:	bf58      	it	pl
 80169ec:	6963      	ldrpl	r3, [r4, #20]
 80169ee:	60a3      	str	r3, [r4, #8]
 80169f0:	e7f4      	b.n	80169dc <__swsetup_r+0xb0>
 80169f2:	2000      	movs	r0, #0
 80169f4:	e7f7      	b.n	80169e6 <__swsetup_r+0xba>
 80169f6:	bf00      	nop
 80169f8:	20000030 	.word	0x20000030
 80169fc:	0801ad64 	.word	0x0801ad64
 8016a00:	0801ad84 	.word	0x0801ad84
 8016a04:	0801ad44 	.word	0x0801ad44

08016a08 <__assert_func>:
 8016a08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8016a0a:	4614      	mov	r4, r2
 8016a0c:	461a      	mov	r2, r3
 8016a0e:	4b09      	ldr	r3, [pc, #36]	; (8016a34 <__assert_func+0x2c>)
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	4605      	mov	r5, r0
 8016a14:	68d8      	ldr	r0, [r3, #12]
 8016a16:	b14c      	cbz	r4, 8016a2c <__assert_func+0x24>
 8016a18:	4b07      	ldr	r3, [pc, #28]	; (8016a38 <__assert_func+0x30>)
 8016a1a:	9100      	str	r1, [sp, #0]
 8016a1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8016a20:	4906      	ldr	r1, [pc, #24]	; (8016a3c <__assert_func+0x34>)
 8016a22:	462b      	mov	r3, r5
 8016a24:	f000 f8e0 	bl	8016be8 <fiprintf>
 8016a28:	f000 fcc8 	bl	80173bc <abort>
 8016a2c:	4b04      	ldr	r3, [pc, #16]	; (8016a40 <__assert_func+0x38>)
 8016a2e:	461c      	mov	r4, r3
 8016a30:	e7f3      	b.n	8016a1a <__assert_func+0x12>
 8016a32:	bf00      	nop
 8016a34:	20000030 	.word	0x20000030
 8016a38:	0801ae1a 	.word	0x0801ae1a
 8016a3c:	0801ae27 	.word	0x0801ae27
 8016a40:	0801ae55 	.word	0x0801ae55

08016a44 <_close_r>:
 8016a44:	b538      	push	{r3, r4, r5, lr}
 8016a46:	4d06      	ldr	r5, [pc, #24]	; (8016a60 <_close_r+0x1c>)
 8016a48:	2300      	movs	r3, #0
 8016a4a:	4604      	mov	r4, r0
 8016a4c:	4608      	mov	r0, r1
 8016a4e:	602b      	str	r3, [r5, #0]
 8016a50:	f7ea f9f9 	bl	8000e46 <_close>
 8016a54:	1c43      	adds	r3, r0, #1
 8016a56:	d102      	bne.n	8016a5e <_close_r+0x1a>
 8016a58:	682b      	ldr	r3, [r5, #0]
 8016a5a:	b103      	cbz	r3, 8016a5e <_close_r+0x1a>
 8016a5c:	6023      	str	r3, [r4, #0]
 8016a5e:	bd38      	pop	{r3, r4, r5, pc}
 8016a60:	2000d2a4 	.word	0x2000d2a4

08016a64 <__sflush_r>:
 8016a64:	898a      	ldrh	r2, [r1, #12]
 8016a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016a6a:	4605      	mov	r5, r0
 8016a6c:	0710      	lsls	r0, r2, #28
 8016a6e:	460c      	mov	r4, r1
 8016a70:	d458      	bmi.n	8016b24 <__sflush_r+0xc0>
 8016a72:	684b      	ldr	r3, [r1, #4]
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	dc05      	bgt.n	8016a84 <__sflush_r+0x20>
 8016a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8016a7a:	2b00      	cmp	r3, #0
 8016a7c:	dc02      	bgt.n	8016a84 <__sflush_r+0x20>
 8016a7e:	2000      	movs	r0, #0
 8016a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016a86:	2e00      	cmp	r6, #0
 8016a88:	d0f9      	beq.n	8016a7e <__sflush_r+0x1a>
 8016a8a:	2300      	movs	r3, #0
 8016a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8016a90:	682f      	ldr	r7, [r5, #0]
 8016a92:	602b      	str	r3, [r5, #0]
 8016a94:	d032      	beq.n	8016afc <__sflush_r+0x98>
 8016a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8016a98:	89a3      	ldrh	r3, [r4, #12]
 8016a9a:	075a      	lsls	r2, r3, #29
 8016a9c:	d505      	bpl.n	8016aaa <__sflush_r+0x46>
 8016a9e:	6863      	ldr	r3, [r4, #4]
 8016aa0:	1ac0      	subs	r0, r0, r3
 8016aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8016aa4:	b10b      	cbz	r3, 8016aaa <__sflush_r+0x46>
 8016aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8016aa8:	1ac0      	subs	r0, r0, r3
 8016aaa:	2300      	movs	r3, #0
 8016aac:	4602      	mov	r2, r0
 8016aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8016ab0:	6a21      	ldr	r1, [r4, #32]
 8016ab2:	4628      	mov	r0, r5
 8016ab4:	47b0      	blx	r6
 8016ab6:	1c43      	adds	r3, r0, #1
 8016ab8:	89a3      	ldrh	r3, [r4, #12]
 8016aba:	d106      	bne.n	8016aca <__sflush_r+0x66>
 8016abc:	6829      	ldr	r1, [r5, #0]
 8016abe:	291d      	cmp	r1, #29
 8016ac0:	d82c      	bhi.n	8016b1c <__sflush_r+0xb8>
 8016ac2:	4a2a      	ldr	r2, [pc, #168]	; (8016b6c <__sflush_r+0x108>)
 8016ac4:	40ca      	lsrs	r2, r1
 8016ac6:	07d6      	lsls	r6, r2, #31
 8016ac8:	d528      	bpl.n	8016b1c <__sflush_r+0xb8>
 8016aca:	2200      	movs	r2, #0
 8016acc:	6062      	str	r2, [r4, #4]
 8016ace:	04d9      	lsls	r1, r3, #19
 8016ad0:	6922      	ldr	r2, [r4, #16]
 8016ad2:	6022      	str	r2, [r4, #0]
 8016ad4:	d504      	bpl.n	8016ae0 <__sflush_r+0x7c>
 8016ad6:	1c42      	adds	r2, r0, #1
 8016ad8:	d101      	bne.n	8016ade <__sflush_r+0x7a>
 8016ada:	682b      	ldr	r3, [r5, #0]
 8016adc:	b903      	cbnz	r3, 8016ae0 <__sflush_r+0x7c>
 8016ade:	6560      	str	r0, [r4, #84]	; 0x54
 8016ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016ae2:	602f      	str	r7, [r5, #0]
 8016ae4:	2900      	cmp	r1, #0
 8016ae6:	d0ca      	beq.n	8016a7e <__sflush_r+0x1a>
 8016ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8016aec:	4299      	cmp	r1, r3
 8016aee:	d002      	beq.n	8016af6 <__sflush_r+0x92>
 8016af0:	4628      	mov	r0, r5
 8016af2:	f000 f917 	bl	8016d24 <_free_r>
 8016af6:	2000      	movs	r0, #0
 8016af8:	6360      	str	r0, [r4, #52]	; 0x34
 8016afa:	e7c1      	b.n	8016a80 <__sflush_r+0x1c>
 8016afc:	6a21      	ldr	r1, [r4, #32]
 8016afe:	2301      	movs	r3, #1
 8016b00:	4628      	mov	r0, r5
 8016b02:	47b0      	blx	r6
 8016b04:	1c41      	adds	r1, r0, #1
 8016b06:	d1c7      	bne.n	8016a98 <__sflush_r+0x34>
 8016b08:	682b      	ldr	r3, [r5, #0]
 8016b0a:	2b00      	cmp	r3, #0
 8016b0c:	d0c4      	beq.n	8016a98 <__sflush_r+0x34>
 8016b0e:	2b1d      	cmp	r3, #29
 8016b10:	d001      	beq.n	8016b16 <__sflush_r+0xb2>
 8016b12:	2b16      	cmp	r3, #22
 8016b14:	d101      	bne.n	8016b1a <__sflush_r+0xb6>
 8016b16:	602f      	str	r7, [r5, #0]
 8016b18:	e7b1      	b.n	8016a7e <__sflush_r+0x1a>
 8016b1a:	89a3      	ldrh	r3, [r4, #12]
 8016b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b20:	81a3      	strh	r3, [r4, #12]
 8016b22:	e7ad      	b.n	8016a80 <__sflush_r+0x1c>
 8016b24:	690f      	ldr	r7, [r1, #16]
 8016b26:	2f00      	cmp	r7, #0
 8016b28:	d0a9      	beq.n	8016a7e <__sflush_r+0x1a>
 8016b2a:	0793      	lsls	r3, r2, #30
 8016b2c:	680e      	ldr	r6, [r1, #0]
 8016b2e:	bf08      	it	eq
 8016b30:	694b      	ldreq	r3, [r1, #20]
 8016b32:	600f      	str	r7, [r1, #0]
 8016b34:	bf18      	it	ne
 8016b36:	2300      	movne	r3, #0
 8016b38:	eba6 0807 	sub.w	r8, r6, r7
 8016b3c:	608b      	str	r3, [r1, #8]
 8016b3e:	f1b8 0f00 	cmp.w	r8, #0
 8016b42:	dd9c      	ble.n	8016a7e <__sflush_r+0x1a>
 8016b44:	6a21      	ldr	r1, [r4, #32]
 8016b46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8016b48:	4643      	mov	r3, r8
 8016b4a:	463a      	mov	r2, r7
 8016b4c:	4628      	mov	r0, r5
 8016b4e:	47b0      	blx	r6
 8016b50:	2800      	cmp	r0, #0
 8016b52:	dc06      	bgt.n	8016b62 <__sflush_r+0xfe>
 8016b54:	89a3      	ldrh	r3, [r4, #12]
 8016b56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8016b5a:	81a3      	strh	r3, [r4, #12]
 8016b5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016b60:	e78e      	b.n	8016a80 <__sflush_r+0x1c>
 8016b62:	4407      	add	r7, r0
 8016b64:	eba8 0800 	sub.w	r8, r8, r0
 8016b68:	e7e9      	b.n	8016b3e <__sflush_r+0xda>
 8016b6a:	bf00      	nop
 8016b6c:	20400001 	.word	0x20400001

08016b70 <_fflush_r>:
 8016b70:	b538      	push	{r3, r4, r5, lr}
 8016b72:	690b      	ldr	r3, [r1, #16]
 8016b74:	4605      	mov	r5, r0
 8016b76:	460c      	mov	r4, r1
 8016b78:	b913      	cbnz	r3, 8016b80 <_fflush_r+0x10>
 8016b7a:	2500      	movs	r5, #0
 8016b7c:	4628      	mov	r0, r5
 8016b7e:	bd38      	pop	{r3, r4, r5, pc}
 8016b80:	b118      	cbz	r0, 8016b8a <_fflush_r+0x1a>
 8016b82:	6983      	ldr	r3, [r0, #24]
 8016b84:	b90b      	cbnz	r3, 8016b8a <_fflush_r+0x1a>
 8016b86:	f7ff fb63 	bl	8016250 <__sinit>
 8016b8a:	4b14      	ldr	r3, [pc, #80]	; (8016bdc <_fflush_r+0x6c>)
 8016b8c:	429c      	cmp	r4, r3
 8016b8e:	d11b      	bne.n	8016bc8 <_fflush_r+0x58>
 8016b90:	686c      	ldr	r4, [r5, #4]
 8016b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016b96:	2b00      	cmp	r3, #0
 8016b98:	d0ef      	beq.n	8016b7a <_fflush_r+0xa>
 8016b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8016b9c:	07d0      	lsls	r0, r2, #31
 8016b9e:	d404      	bmi.n	8016baa <_fflush_r+0x3a>
 8016ba0:	0599      	lsls	r1, r3, #22
 8016ba2:	d402      	bmi.n	8016baa <_fflush_r+0x3a>
 8016ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016ba6:	f7ff fc16 	bl	80163d6 <__retarget_lock_acquire_recursive>
 8016baa:	4628      	mov	r0, r5
 8016bac:	4621      	mov	r1, r4
 8016bae:	f7ff ff59 	bl	8016a64 <__sflush_r>
 8016bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8016bb4:	07da      	lsls	r2, r3, #31
 8016bb6:	4605      	mov	r5, r0
 8016bb8:	d4e0      	bmi.n	8016b7c <_fflush_r+0xc>
 8016bba:	89a3      	ldrh	r3, [r4, #12]
 8016bbc:	059b      	lsls	r3, r3, #22
 8016bbe:	d4dd      	bmi.n	8016b7c <_fflush_r+0xc>
 8016bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8016bc2:	f7ff fc09 	bl	80163d8 <__retarget_lock_release_recursive>
 8016bc6:	e7d9      	b.n	8016b7c <_fflush_r+0xc>
 8016bc8:	4b05      	ldr	r3, [pc, #20]	; (8016be0 <_fflush_r+0x70>)
 8016bca:	429c      	cmp	r4, r3
 8016bcc:	d101      	bne.n	8016bd2 <_fflush_r+0x62>
 8016bce:	68ac      	ldr	r4, [r5, #8]
 8016bd0:	e7df      	b.n	8016b92 <_fflush_r+0x22>
 8016bd2:	4b04      	ldr	r3, [pc, #16]	; (8016be4 <_fflush_r+0x74>)
 8016bd4:	429c      	cmp	r4, r3
 8016bd6:	bf08      	it	eq
 8016bd8:	68ec      	ldreq	r4, [r5, #12]
 8016bda:	e7da      	b.n	8016b92 <_fflush_r+0x22>
 8016bdc:	0801ad64 	.word	0x0801ad64
 8016be0:	0801ad84 	.word	0x0801ad84
 8016be4:	0801ad44 	.word	0x0801ad44

08016be8 <fiprintf>:
 8016be8:	b40e      	push	{r1, r2, r3}
 8016bea:	b503      	push	{r0, r1, lr}
 8016bec:	4601      	mov	r1, r0
 8016bee:	ab03      	add	r3, sp, #12
 8016bf0:	4805      	ldr	r0, [pc, #20]	; (8016c08 <fiprintf+0x20>)
 8016bf2:	f853 2b04 	ldr.w	r2, [r3], #4
 8016bf6:	6800      	ldr	r0, [r0, #0]
 8016bf8:	9301      	str	r3, [sp, #4]
 8016bfa:	f000 f909 	bl	8016e10 <_vfiprintf_r>
 8016bfe:	b002      	add	sp, #8
 8016c00:	f85d eb04 	ldr.w	lr, [sp], #4
 8016c04:	b003      	add	sp, #12
 8016c06:	4770      	bx	lr
 8016c08:	20000030 	.word	0x20000030

08016c0c <_lseek_r>:
 8016c0c:	b538      	push	{r3, r4, r5, lr}
 8016c0e:	4d07      	ldr	r5, [pc, #28]	; (8016c2c <_lseek_r+0x20>)
 8016c10:	4604      	mov	r4, r0
 8016c12:	4608      	mov	r0, r1
 8016c14:	4611      	mov	r1, r2
 8016c16:	2200      	movs	r2, #0
 8016c18:	602a      	str	r2, [r5, #0]
 8016c1a:	461a      	mov	r2, r3
 8016c1c:	f7ea f93a 	bl	8000e94 <_lseek>
 8016c20:	1c43      	adds	r3, r0, #1
 8016c22:	d102      	bne.n	8016c2a <_lseek_r+0x1e>
 8016c24:	682b      	ldr	r3, [r5, #0]
 8016c26:	b103      	cbz	r3, 8016c2a <_lseek_r+0x1e>
 8016c28:	6023      	str	r3, [r4, #0]
 8016c2a:	bd38      	pop	{r3, r4, r5, pc}
 8016c2c:	2000d2a4 	.word	0x2000d2a4

08016c30 <__swhatbuf_r>:
 8016c30:	b570      	push	{r4, r5, r6, lr}
 8016c32:	460e      	mov	r6, r1
 8016c34:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016c38:	2900      	cmp	r1, #0
 8016c3a:	b096      	sub	sp, #88	; 0x58
 8016c3c:	4614      	mov	r4, r2
 8016c3e:	461d      	mov	r5, r3
 8016c40:	da08      	bge.n	8016c54 <__swhatbuf_r+0x24>
 8016c42:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8016c46:	2200      	movs	r2, #0
 8016c48:	602a      	str	r2, [r5, #0]
 8016c4a:	061a      	lsls	r2, r3, #24
 8016c4c:	d410      	bmi.n	8016c70 <__swhatbuf_r+0x40>
 8016c4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8016c52:	e00e      	b.n	8016c72 <__swhatbuf_r+0x42>
 8016c54:	466a      	mov	r2, sp
 8016c56:	f000 fbb9 	bl	80173cc <_fstat_r>
 8016c5a:	2800      	cmp	r0, #0
 8016c5c:	dbf1      	blt.n	8016c42 <__swhatbuf_r+0x12>
 8016c5e:	9a01      	ldr	r2, [sp, #4]
 8016c60:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8016c64:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8016c68:	425a      	negs	r2, r3
 8016c6a:	415a      	adcs	r2, r3
 8016c6c:	602a      	str	r2, [r5, #0]
 8016c6e:	e7ee      	b.n	8016c4e <__swhatbuf_r+0x1e>
 8016c70:	2340      	movs	r3, #64	; 0x40
 8016c72:	2000      	movs	r0, #0
 8016c74:	6023      	str	r3, [r4, #0]
 8016c76:	b016      	add	sp, #88	; 0x58
 8016c78:	bd70      	pop	{r4, r5, r6, pc}
	...

08016c7c <__smakebuf_r>:
 8016c7c:	898b      	ldrh	r3, [r1, #12]
 8016c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8016c80:	079d      	lsls	r5, r3, #30
 8016c82:	4606      	mov	r6, r0
 8016c84:	460c      	mov	r4, r1
 8016c86:	d507      	bpl.n	8016c98 <__smakebuf_r+0x1c>
 8016c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8016c8c:	6023      	str	r3, [r4, #0]
 8016c8e:	6123      	str	r3, [r4, #16]
 8016c90:	2301      	movs	r3, #1
 8016c92:	6163      	str	r3, [r4, #20]
 8016c94:	b002      	add	sp, #8
 8016c96:	bd70      	pop	{r4, r5, r6, pc}
 8016c98:	ab01      	add	r3, sp, #4
 8016c9a:	466a      	mov	r2, sp
 8016c9c:	f7ff ffc8 	bl	8016c30 <__swhatbuf_r>
 8016ca0:	9900      	ldr	r1, [sp, #0]
 8016ca2:	4605      	mov	r5, r0
 8016ca4:	4630      	mov	r0, r6
 8016ca6:	f7ff fbdf 	bl	8016468 <_malloc_r>
 8016caa:	b948      	cbnz	r0, 8016cc0 <__smakebuf_r+0x44>
 8016cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8016cb0:	059a      	lsls	r2, r3, #22
 8016cb2:	d4ef      	bmi.n	8016c94 <__smakebuf_r+0x18>
 8016cb4:	f023 0303 	bic.w	r3, r3, #3
 8016cb8:	f043 0302 	orr.w	r3, r3, #2
 8016cbc:	81a3      	strh	r3, [r4, #12]
 8016cbe:	e7e3      	b.n	8016c88 <__smakebuf_r+0xc>
 8016cc0:	4b0d      	ldr	r3, [pc, #52]	; (8016cf8 <__smakebuf_r+0x7c>)
 8016cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8016cc4:	89a3      	ldrh	r3, [r4, #12]
 8016cc6:	6020      	str	r0, [r4, #0]
 8016cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8016ccc:	81a3      	strh	r3, [r4, #12]
 8016cce:	9b00      	ldr	r3, [sp, #0]
 8016cd0:	6163      	str	r3, [r4, #20]
 8016cd2:	9b01      	ldr	r3, [sp, #4]
 8016cd4:	6120      	str	r0, [r4, #16]
 8016cd6:	b15b      	cbz	r3, 8016cf0 <__smakebuf_r+0x74>
 8016cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016cdc:	4630      	mov	r0, r6
 8016cde:	f000 fb87 	bl	80173f0 <_isatty_r>
 8016ce2:	b128      	cbz	r0, 8016cf0 <__smakebuf_r+0x74>
 8016ce4:	89a3      	ldrh	r3, [r4, #12]
 8016ce6:	f023 0303 	bic.w	r3, r3, #3
 8016cea:	f043 0301 	orr.w	r3, r3, #1
 8016cee:	81a3      	strh	r3, [r4, #12]
 8016cf0:	89a0      	ldrh	r0, [r4, #12]
 8016cf2:	4305      	orrs	r5, r0
 8016cf4:	81a5      	strh	r5, [r4, #12]
 8016cf6:	e7cd      	b.n	8016c94 <__smakebuf_r+0x18>
 8016cf8:	080161e9 	.word	0x080161e9

08016cfc <malloc>:
 8016cfc:	4b02      	ldr	r3, [pc, #8]	; (8016d08 <malloc+0xc>)
 8016cfe:	4601      	mov	r1, r0
 8016d00:	6818      	ldr	r0, [r3, #0]
 8016d02:	f7ff bbb1 	b.w	8016468 <_malloc_r>
 8016d06:	bf00      	nop
 8016d08:	20000030 	.word	0x20000030

08016d0c <__malloc_lock>:
 8016d0c:	4801      	ldr	r0, [pc, #4]	; (8016d14 <__malloc_lock+0x8>)
 8016d0e:	f7ff bb62 	b.w	80163d6 <__retarget_lock_acquire_recursive>
 8016d12:	bf00      	nop
 8016d14:	2000d298 	.word	0x2000d298

08016d18 <__malloc_unlock>:
 8016d18:	4801      	ldr	r0, [pc, #4]	; (8016d20 <__malloc_unlock+0x8>)
 8016d1a:	f7ff bb5d 	b.w	80163d8 <__retarget_lock_release_recursive>
 8016d1e:	bf00      	nop
 8016d20:	2000d298 	.word	0x2000d298

08016d24 <_free_r>:
 8016d24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8016d26:	2900      	cmp	r1, #0
 8016d28:	d044      	beq.n	8016db4 <_free_r+0x90>
 8016d2a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8016d2e:	9001      	str	r0, [sp, #4]
 8016d30:	2b00      	cmp	r3, #0
 8016d32:	f1a1 0404 	sub.w	r4, r1, #4
 8016d36:	bfb8      	it	lt
 8016d38:	18e4      	addlt	r4, r4, r3
 8016d3a:	f7ff ffe7 	bl	8016d0c <__malloc_lock>
 8016d3e:	4a1e      	ldr	r2, [pc, #120]	; (8016db8 <_free_r+0x94>)
 8016d40:	9801      	ldr	r0, [sp, #4]
 8016d42:	6813      	ldr	r3, [r2, #0]
 8016d44:	b933      	cbnz	r3, 8016d54 <_free_r+0x30>
 8016d46:	6063      	str	r3, [r4, #4]
 8016d48:	6014      	str	r4, [r2, #0]
 8016d4a:	b003      	add	sp, #12
 8016d4c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8016d50:	f7ff bfe2 	b.w	8016d18 <__malloc_unlock>
 8016d54:	42a3      	cmp	r3, r4
 8016d56:	d908      	bls.n	8016d6a <_free_r+0x46>
 8016d58:	6825      	ldr	r5, [r4, #0]
 8016d5a:	1961      	adds	r1, r4, r5
 8016d5c:	428b      	cmp	r3, r1
 8016d5e:	bf01      	itttt	eq
 8016d60:	6819      	ldreq	r1, [r3, #0]
 8016d62:	685b      	ldreq	r3, [r3, #4]
 8016d64:	1949      	addeq	r1, r1, r5
 8016d66:	6021      	streq	r1, [r4, #0]
 8016d68:	e7ed      	b.n	8016d46 <_free_r+0x22>
 8016d6a:	461a      	mov	r2, r3
 8016d6c:	685b      	ldr	r3, [r3, #4]
 8016d6e:	b10b      	cbz	r3, 8016d74 <_free_r+0x50>
 8016d70:	42a3      	cmp	r3, r4
 8016d72:	d9fa      	bls.n	8016d6a <_free_r+0x46>
 8016d74:	6811      	ldr	r1, [r2, #0]
 8016d76:	1855      	adds	r5, r2, r1
 8016d78:	42a5      	cmp	r5, r4
 8016d7a:	d10b      	bne.n	8016d94 <_free_r+0x70>
 8016d7c:	6824      	ldr	r4, [r4, #0]
 8016d7e:	4421      	add	r1, r4
 8016d80:	1854      	adds	r4, r2, r1
 8016d82:	42a3      	cmp	r3, r4
 8016d84:	6011      	str	r1, [r2, #0]
 8016d86:	d1e0      	bne.n	8016d4a <_free_r+0x26>
 8016d88:	681c      	ldr	r4, [r3, #0]
 8016d8a:	685b      	ldr	r3, [r3, #4]
 8016d8c:	6053      	str	r3, [r2, #4]
 8016d8e:	4421      	add	r1, r4
 8016d90:	6011      	str	r1, [r2, #0]
 8016d92:	e7da      	b.n	8016d4a <_free_r+0x26>
 8016d94:	d902      	bls.n	8016d9c <_free_r+0x78>
 8016d96:	230c      	movs	r3, #12
 8016d98:	6003      	str	r3, [r0, #0]
 8016d9a:	e7d6      	b.n	8016d4a <_free_r+0x26>
 8016d9c:	6825      	ldr	r5, [r4, #0]
 8016d9e:	1961      	adds	r1, r4, r5
 8016da0:	428b      	cmp	r3, r1
 8016da2:	bf04      	itt	eq
 8016da4:	6819      	ldreq	r1, [r3, #0]
 8016da6:	685b      	ldreq	r3, [r3, #4]
 8016da8:	6063      	str	r3, [r4, #4]
 8016daa:	bf04      	itt	eq
 8016dac:	1949      	addeq	r1, r1, r5
 8016dae:	6021      	streq	r1, [r4, #0]
 8016db0:	6054      	str	r4, [r2, #4]
 8016db2:	e7ca      	b.n	8016d4a <_free_r+0x26>
 8016db4:	b003      	add	sp, #12
 8016db6:	bd30      	pop	{r4, r5, pc}
 8016db8:	2000d29c 	.word	0x2000d29c

08016dbc <__sfputc_r>:
 8016dbc:	6893      	ldr	r3, [r2, #8]
 8016dbe:	3b01      	subs	r3, #1
 8016dc0:	2b00      	cmp	r3, #0
 8016dc2:	b410      	push	{r4}
 8016dc4:	6093      	str	r3, [r2, #8]
 8016dc6:	da08      	bge.n	8016dda <__sfputc_r+0x1e>
 8016dc8:	6994      	ldr	r4, [r2, #24]
 8016dca:	42a3      	cmp	r3, r4
 8016dcc:	db01      	blt.n	8016dd2 <__sfputc_r+0x16>
 8016dce:	290a      	cmp	r1, #10
 8016dd0:	d103      	bne.n	8016dda <__sfputc_r+0x1e>
 8016dd2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016dd6:	f7ff bd45 	b.w	8016864 <__swbuf_r>
 8016dda:	6813      	ldr	r3, [r2, #0]
 8016ddc:	1c58      	adds	r0, r3, #1
 8016dde:	6010      	str	r0, [r2, #0]
 8016de0:	7019      	strb	r1, [r3, #0]
 8016de2:	4608      	mov	r0, r1
 8016de4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8016de8:	4770      	bx	lr

08016dea <__sfputs_r>:
 8016dea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016dec:	4606      	mov	r6, r0
 8016dee:	460f      	mov	r7, r1
 8016df0:	4614      	mov	r4, r2
 8016df2:	18d5      	adds	r5, r2, r3
 8016df4:	42ac      	cmp	r4, r5
 8016df6:	d101      	bne.n	8016dfc <__sfputs_r+0x12>
 8016df8:	2000      	movs	r0, #0
 8016dfa:	e007      	b.n	8016e0c <__sfputs_r+0x22>
 8016dfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016e00:	463a      	mov	r2, r7
 8016e02:	4630      	mov	r0, r6
 8016e04:	f7ff ffda 	bl	8016dbc <__sfputc_r>
 8016e08:	1c43      	adds	r3, r0, #1
 8016e0a:	d1f3      	bne.n	8016df4 <__sfputs_r+0xa>
 8016e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08016e10 <_vfiprintf_r>:
 8016e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e14:	460d      	mov	r5, r1
 8016e16:	b09d      	sub	sp, #116	; 0x74
 8016e18:	4614      	mov	r4, r2
 8016e1a:	4698      	mov	r8, r3
 8016e1c:	4606      	mov	r6, r0
 8016e1e:	b118      	cbz	r0, 8016e28 <_vfiprintf_r+0x18>
 8016e20:	6983      	ldr	r3, [r0, #24]
 8016e22:	b90b      	cbnz	r3, 8016e28 <_vfiprintf_r+0x18>
 8016e24:	f7ff fa14 	bl	8016250 <__sinit>
 8016e28:	4b89      	ldr	r3, [pc, #548]	; (8017050 <_vfiprintf_r+0x240>)
 8016e2a:	429d      	cmp	r5, r3
 8016e2c:	d11b      	bne.n	8016e66 <_vfiprintf_r+0x56>
 8016e2e:	6875      	ldr	r5, [r6, #4]
 8016e30:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e32:	07d9      	lsls	r1, r3, #31
 8016e34:	d405      	bmi.n	8016e42 <_vfiprintf_r+0x32>
 8016e36:	89ab      	ldrh	r3, [r5, #12]
 8016e38:	059a      	lsls	r2, r3, #22
 8016e3a:	d402      	bmi.n	8016e42 <_vfiprintf_r+0x32>
 8016e3c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e3e:	f7ff faca 	bl	80163d6 <__retarget_lock_acquire_recursive>
 8016e42:	89ab      	ldrh	r3, [r5, #12]
 8016e44:	071b      	lsls	r3, r3, #28
 8016e46:	d501      	bpl.n	8016e4c <_vfiprintf_r+0x3c>
 8016e48:	692b      	ldr	r3, [r5, #16]
 8016e4a:	b9eb      	cbnz	r3, 8016e88 <_vfiprintf_r+0x78>
 8016e4c:	4629      	mov	r1, r5
 8016e4e:	4630      	mov	r0, r6
 8016e50:	f7ff fd6c 	bl	801692c <__swsetup_r>
 8016e54:	b1c0      	cbz	r0, 8016e88 <_vfiprintf_r+0x78>
 8016e56:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8016e58:	07dc      	lsls	r4, r3, #31
 8016e5a:	d50e      	bpl.n	8016e7a <_vfiprintf_r+0x6a>
 8016e5c:	f04f 30ff 	mov.w	r0, #4294967295
 8016e60:	b01d      	add	sp, #116	; 0x74
 8016e62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016e66:	4b7b      	ldr	r3, [pc, #492]	; (8017054 <_vfiprintf_r+0x244>)
 8016e68:	429d      	cmp	r5, r3
 8016e6a:	d101      	bne.n	8016e70 <_vfiprintf_r+0x60>
 8016e6c:	68b5      	ldr	r5, [r6, #8]
 8016e6e:	e7df      	b.n	8016e30 <_vfiprintf_r+0x20>
 8016e70:	4b79      	ldr	r3, [pc, #484]	; (8017058 <_vfiprintf_r+0x248>)
 8016e72:	429d      	cmp	r5, r3
 8016e74:	bf08      	it	eq
 8016e76:	68f5      	ldreq	r5, [r6, #12]
 8016e78:	e7da      	b.n	8016e30 <_vfiprintf_r+0x20>
 8016e7a:	89ab      	ldrh	r3, [r5, #12]
 8016e7c:	0598      	lsls	r0, r3, #22
 8016e7e:	d4ed      	bmi.n	8016e5c <_vfiprintf_r+0x4c>
 8016e80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8016e82:	f7ff faa9 	bl	80163d8 <__retarget_lock_release_recursive>
 8016e86:	e7e9      	b.n	8016e5c <_vfiprintf_r+0x4c>
 8016e88:	2300      	movs	r3, #0
 8016e8a:	9309      	str	r3, [sp, #36]	; 0x24
 8016e8c:	2320      	movs	r3, #32
 8016e8e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8016e92:	f8cd 800c 	str.w	r8, [sp, #12]
 8016e96:	2330      	movs	r3, #48	; 0x30
 8016e98:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801705c <_vfiprintf_r+0x24c>
 8016e9c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8016ea0:	f04f 0901 	mov.w	r9, #1
 8016ea4:	4623      	mov	r3, r4
 8016ea6:	469a      	mov	sl, r3
 8016ea8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8016eac:	b10a      	cbz	r2, 8016eb2 <_vfiprintf_r+0xa2>
 8016eae:	2a25      	cmp	r2, #37	; 0x25
 8016eb0:	d1f9      	bne.n	8016ea6 <_vfiprintf_r+0x96>
 8016eb2:	ebba 0b04 	subs.w	fp, sl, r4
 8016eb6:	d00b      	beq.n	8016ed0 <_vfiprintf_r+0xc0>
 8016eb8:	465b      	mov	r3, fp
 8016eba:	4622      	mov	r2, r4
 8016ebc:	4629      	mov	r1, r5
 8016ebe:	4630      	mov	r0, r6
 8016ec0:	f7ff ff93 	bl	8016dea <__sfputs_r>
 8016ec4:	3001      	adds	r0, #1
 8016ec6:	f000 80aa 	beq.w	801701e <_vfiprintf_r+0x20e>
 8016eca:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8016ecc:	445a      	add	r2, fp
 8016ece:	9209      	str	r2, [sp, #36]	; 0x24
 8016ed0:	f89a 3000 	ldrb.w	r3, [sl]
 8016ed4:	2b00      	cmp	r3, #0
 8016ed6:	f000 80a2 	beq.w	801701e <_vfiprintf_r+0x20e>
 8016eda:	2300      	movs	r3, #0
 8016edc:	f04f 32ff 	mov.w	r2, #4294967295
 8016ee0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8016ee4:	f10a 0a01 	add.w	sl, sl, #1
 8016ee8:	9304      	str	r3, [sp, #16]
 8016eea:	9307      	str	r3, [sp, #28]
 8016eec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8016ef0:	931a      	str	r3, [sp, #104]	; 0x68
 8016ef2:	4654      	mov	r4, sl
 8016ef4:	2205      	movs	r2, #5
 8016ef6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016efa:	4858      	ldr	r0, [pc, #352]	; (801705c <_vfiprintf_r+0x24c>)
 8016efc:	f7e9 f9a8 	bl	8000250 <memchr>
 8016f00:	9a04      	ldr	r2, [sp, #16]
 8016f02:	b9d8      	cbnz	r0, 8016f3c <_vfiprintf_r+0x12c>
 8016f04:	06d1      	lsls	r1, r2, #27
 8016f06:	bf44      	itt	mi
 8016f08:	2320      	movmi	r3, #32
 8016f0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f0e:	0713      	lsls	r3, r2, #28
 8016f10:	bf44      	itt	mi
 8016f12:	232b      	movmi	r3, #43	; 0x2b
 8016f14:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8016f18:	f89a 3000 	ldrb.w	r3, [sl]
 8016f1c:	2b2a      	cmp	r3, #42	; 0x2a
 8016f1e:	d015      	beq.n	8016f4c <_vfiprintf_r+0x13c>
 8016f20:	9a07      	ldr	r2, [sp, #28]
 8016f22:	4654      	mov	r4, sl
 8016f24:	2000      	movs	r0, #0
 8016f26:	f04f 0c0a 	mov.w	ip, #10
 8016f2a:	4621      	mov	r1, r4
 8016f2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8016f30:	3b30      	subs	r3, #48	; 0x30
 8016f32:	2b09      	cmp	r3, #9
 8016f34:	d94e      	bls.n	8016fd4 <_vfiprintf_r+0x1c4>
 8016f36:	b1b0      	cbz	r0, 8016f66 <_vfiprintf_r+0x156>
 8016f38:	9207      	str	r2, [sp, #28]
 8016f3a:	e014      	b.n	8016f66 <_vfiprintf_r+0x156>
 8016f3c:	eba0 0308 	sub.w	r3, r0, r8
 8016f40:	fa09 f303 	lsl.w	r3, r9, r3
 8016f44:	4313      	orrs	r3, r2
 8016f46:	9304      	str	r3, [sp, #16]
 8016f48:	46a2      	mov	sl, r4
 8016f4a:	e7d2      	b.n	8016ef2 <_vfiprintf_r+0xe2>
 8016f4c:	9b03      	ldr	r3, [sp, #12]
 8016f4e:	1d19      	adds	r1, r3, #4
 8016f50:	681b      	ldr	r3, [r3, #0]
 8016f52:	9103      	str	r1, [sp, #12]
 8016f54:	2b00      	cmp	r3, #0
 8016f56:	bfbb      	ittet	lt
 8016f58:	425b      	neglt	r3, r3
 8016f5a:	f042 0202 	orrlt.w	r2, r2, #2
 8016f5e:	9307      	strge	r3, [sp, #28]
 8016f60:	9307      	strlt	r3, [sp, #28]
 8016f62:	bfb8      	it	lt
 8016f64:	9204      	strlt	r2, [sp, #16]
 8016f66:	7823      	ldrb	r3, [r4, #0]
 8016f68:	2b2e      	cmp	r3, #46	; 0x2e
 8016f6a:	d10c      	bne.n	8016f86 <_vfiprintf_r+0x176>
 8016f6c:	7863      	ldrb	r3, [r4, #1]
 8016f6e:	2b2a      	cmp	r3, #42	; 0x2a
 8016f70:	d135      	bne.n	8016fde <_vfiprintf_r+0x1ce>
 8016f72:	9b03      	ldr	r3, [sp, #12]
 8016f74:	1d1a      	adds	r2, r3, #4
 8016f76:	681b      	ldr	r3, [r3, #0]
 8016f78:	9203      	str	r2, [sp, #12]
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	bfb8      	it	lt
 8016f7e:	f04f 33ff 	movlt.w	r3, #4294967295
 8016f82:	3402      	adds	r4, #2
 8016f84:	9305      	str	r3, [sp, #20]
 8016f86:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801706c <_vfiprintf_r+0x25c>
 8016f8a:	7821      	ldrb	r1, [r4, #0]
 8016f8c:	2203      	movs	r2, #3
 8016f8e:	4650      	mov	r0, sl
 8016f90:	f7e9 f95e 	bl	8000250 <memchr>
 8016f94:	b140      	cbz	r0, 8016fa8 <_vfiprintf_r+0x198>
 8016f96:	2340      	movs	r3, #64	; 0x40
 8016f98:	eba0 000a 	sub.w	r0, r0, sl
 8016f9c:	fa03 f000 	lsl.w	r0, r3, r0
 8016fa0:	9b04      	ldr	r3, [sp, #16]
 8016fa2:	4303      	orrs	r3, r0
 8016fa4:	3401      	adds	r4, #1
 8016fa6:	9304      	str	r3, [sp, #16]
 8016fa8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8016fac:	482c      	ldr	r0, [pc, #176]	; (8017060 <_vfiprintf_r+0x250>)
 8016fae:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8016fb2:	2206      	movs	r2, #6
 8016fb4:	f7e9 f94c 	bl	8000250 <memchr>
 8016fb8:	2800      	cmp	r0, #0
 8016fba:	d03f      	beq.n	801703c <_vfiprintf_r+0x22c>
 8016fbc:	4b29      	ldr	r3, [pc, #164]	; (8017064 <_vfiprintf_r+0x254>)
 8016fbe:	bb1b      	cbnz	r3, 8017008 <_vfiprintf_r+0x1f8>
 8016fc0:	9b03      	ldr	r3, [sp, #12]
 8016fc2:	3307      	adds	r3, #7
 8016fc4:	f023 0307 	bic.w	r3, r3, #7
 8016fc8:	3308      	adds	r3, #8
 8016fca:	9303      	str	r3, [sp, #12]
 8016fcc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8016fce:	443b      	add	r3, r7
 8016fd0:	9309      	str	r3, [sp, #36]	; 0x24
 8016fd2:	e767      	b.n	8016ea4 <_vfiprintf_r+0x94>
 8016fd4:	fb0c 3202 	mla	r2, ip, r2, r3
 8016fd8:	460c      	mov	r4, r1
 8016fda:	2001      	movs	r0, #1
 8016fdc:	e7a5      	b.n	8016f2a <_vfiprintf_r+0x11a>
 8016fde:	2300      	movs	r3, #0
 8016fe0:	3401      	adds	r4, #1
 8016fe2:	9305      	str	r3, [sp, #20]
 8016fe4:	4619      	mov	r1, r3
 8016fe6:	f04f 0c0a 	mov.w	ip, #10
 8016fea:	4620      	mov	r0, r4
 8016fec:	f810 2b01 	ldrb.w	r2, [r0], #1
 8016ff0:	3a30      	subs	r2, #48	; 0x30
 8016ff2:	2a09      	cmp	r2, #9
 8016ff4:	d903      	bls.n	8016ffe <_vfiprintf_r+0x1ee>
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d0c5      	beq.n	8016f86 <_vfiprintf_r+0x176>
 8016ffa:	9105      	str	r1, [sp, #20]
 8016ffc:	e7c3      	b.n	8016f86 <_vfiprintf_r+0x176>
 8016ffe:	fb0c 2101 	mla	r1, ip, r1, r2
 8017002:	4604      	mov	r4, r0
 8017004:	2301      	movs	r3, #1
 8017006:	e7f0      	b.n	8016fea <_vfiprintf_r+0x1da>
 8017008:	ab03      	add	r3, sp, #12
 801700a:	9300      	str	r3, [sp, #0]
 801700c:	462a      	mov	r2, r5
 801700e:	4b16      	ldr	r3, [pc, #88]	; (8017068 <_vfiprintf_r+0x258>)
 8017010:	a904      	add	r1, sp, #16
 8017012:	4630      	mov	r0, r6
 8017014:	f3af 8000 	nop.w
 8017018:	4607      	mov	r7, r0
 801701a:	1c78      	adds	r0, r7, #1
 801701c:	d1d6      	bne.n	8016fcc <_vfiprintf_r+0x1bc>
 801701e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017020:	07d9      	lsls	r1, r3, #31
 8017022:	d405      	bmi.n	8017030 <_vfiprintf_r+0x220>
 8017024:	89ab      	ldrh	r3, [r5, #12]
 8017026:	059a      	lsls	r2, r3, #22
 8017028:	d402      	bmi.n	8017030 <_vfiprintf_r+0x220>
 801702a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801702c:	f7ff f9d4 	bl	80163d8 <__retarget_lock_release_recursive>
 8017030:	89ab      	ldrh	r3, [r5, #12]
 8017032:	065b      	lsls	r3, r3, #25
 8017034:	f53f af12 	bmi.w	8016e5c <_vfiprintf_r+0x4c>
 8017038:	9809      	ldr	r0, [sp, #36]	; 0x24
 801703a:	e711      	b.n	8016e60 <_vfiprintf_r+0x50>
 801703c:	ab03      	add	r3, sp, #12
 801703e:	9300      	str	r3, [sp, #0]
 8017040:	462a      	mov	r2, r5
 8017042:	4b09      	ldr	r3, [pc, #36]	; (8017068 <_vfiprintf_r+0x258>)
 8017044:	a904      	add	r1, sp, #16
 8017046:	4630      	mov	r0, r6
 8017048:	f000 f880 	bl	801714c <_printf_i>
 801704c:	e7e4      	b.n	8017018 <_vfiprintf_r+0x208>
 801704e:	bf00      	nop
 8017050:	0801ad64 	.word	0x0801ad64
 8017054:	0801ad84 	.word	0x0801ad84
 8017058:	0801ad44 	.word	0x0801ad44
 801705c:	0801ae56 	.word	0x0801ae56
 8017060:	0801ae60 	.word	0x0801ae60
 8017064:	00000000 	.word	0x00000000
 8017068:	08016deb 	.word	0x08016deb
 801706c:	0801ae5c 	.word	0x0801ae5c

08017070 <_printf_common>:
 8017070:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017074:	4616      	mov	r6, r2
 8017076:	4699      	mov	r9, r3
 8017078:	688a      	ldr	r2, [r1, #8]
 801707a:	690b      	ldr	r3, [r1, #16]
 801707c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017080:	4293      	cmp	r3, r2
 8017082:	bfb8      	it	lt
 8017084:	4613      	movlt	r3, r2
 8017086:	6033      	str	r3, [r6, #0]
 8017088:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801708c:	4607      	mov	r7, r0
 801708e:	460c      	mov	r4, r1
 8017090:	b10a      	cbz	r2, 8017096 <_printf_common+0x26>
 8017092:	3301      	adds	r3, #1
 8017094:	6033      	str	r3, [r6, #0]
 8017096:	6823      	ldr	r3, [r4, #0]
 8017098:	0699      	lsls	r1, r3, #26
 801709a:	bf42      	ittt	mi
 801709c:	6833      	ldrmi	r3, [r6, #0]
 801709e:	3302      	addmi	r3, #2
 80170a0:	6033      	strmi	r3, [r6, #0]
 80170a2:	6825      	ldr	r5, [r4, #0]
 80170a4:	f015 0506 	ands.w	r5, r5, #6
 80170a8:	d106      	bne.n	80170b8 <_printf_common+0x48>
 80170aa:	f104 0a19 	add.w	sl, r4, #25
 80170ae:	68e3      	ldr	r3, [r4, #12]
 80170b0:	6832      	ldr	r2, [r6, #0]
 80170b2:	1a9b      	subs	r3, r3, r2
 80170b4:	42ab      	cmp	r3, r5
 80170b6:	dc26      	bgt.n	8017106 <_printf_common+0x96>
 80170b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80170bc:	1e13      	subs	r3, r2, #0
 80170be:	6822      	ldr	r2, [r4, #0]
 80170c0:	bf18      	it	ne
 80170c2:	2301      	movne	r3, #1
 80170c4:	0692      	lsls	r2, r2, #26
 80170c6:	d42b      	bmi.n	8017120 <_printf_common+0xb0>
 80170c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80170cc:	4649      	mov	r1, r9
 80170ce:	4638      	mov	r0, r7
 80170d0:	47c0      	blx	r8
 80170d2:	3001      	adds	r0, #1
 80170d4:	d01e      	beq.n	8017114 <_printf_common+0xa4>
 80170d6:	6823      	ldr	r3, [r4, #0]
 80170d8:	68e5      	ldr	r5, [r4, #12]
 80170da:	6832      	ldr	r2, [r6, #0]
 80170dc:	f003 0306 	and.w	r3, r3, #6
 80170e0:	2b04      	cmp	r3, #4
 80170e2:	bf08      	it	eq
 80170e4:	1aad      	subeq	r5, r5, r2
 80170e6:	68a3      	ldr	r3, [r4, #8]
 80170e8:	6922      	ldr	r2, [r4, #16]
 80170ea:	bf0c      	ite	eq
 80170ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80170f0:	2500      	movne	r5, #0
 80170f2:	4293      	cmp	r3, r2
 80170f4:	bfc4      	itt	gt
 80170f6:	1a9b      	subgt	r3, r3, r2
 80170f8:	18ed      	addgt	r5, r5, r3
 80170fa:	2600      	movs	r6, #0
 80170fc:	341a      	adds	r4, #26
 80170fe:	42b5      	cmp	r5, r6
 8017100:	d11a      	bne.n	8017138 <_printf_common+0xc8>
 8017102:	2000      	movs	r0, #0
 8017104:	e008      	b.n	8017118 <_printf_common+0xa8>
 8017106:	2301      	movs	r3, #1
 8017108:	4652      	mov	r2, sl
 801710a:	4649      	mov	r1, r9
 801710c:	4638      	mov	r0, r7
 801710e:	47c0      	blx	r8
 8017110:	3001      	adds	r0, #1
 8017112:	d103      	bne.n	801711c <_printf_common+0xac>
 8017114:	f04f 30ff 	mov.w	r0, #4294967295
 8017118:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801711c:	3501      	adds	r5, #1
 801711e:	e7c6      	b.n	80170ae <_printf_common+0x3e>
 8017120:	18e1      	adds	r1, r4, r3
 8017122:	1c5a      	adds	r2, r3, #1
 8017124:	2030      	movs	r0, #48	; 0x30
 8017126:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801712a:	4422      	add	r2, r4
 801712c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017130:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8017134:	3302      	adds	r3, #2
 8017136:	e7c7      	b.n	80170c8 <_printf_common+0x58>
 8017138:	2301      	movs	r3, #1
 801713a:	4622      	mov	r2, r4
 801713c:	4649      	mov	r1, r9
 801713e:	4638      	mov	r0, r7
 8017140:	47c0      	blx	r8
 8017142:	3001      	adds	r0, #1
 8017144:	d0e6      	beq.n	8017114 <_printf_common+0xa4>
 8017146:	3601      	adds	r6, #1
 8017148:	e7d9      	b.n	80170fe <_printf_common+0x8e>
	...

0801714c <_printf_i>:
 801714c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017150:	7e0f      	ldrb	r7, [r1, #24]
 8017152:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8017154:	2f78      	cmp	r7, #120	; 0x78
 8017156:	4691      	mov	r9, r2
 8017158:	4680      	mov	r8, r0
 801715a:	460c      	mov	r4, r1
 801715c:	469a      	mov	sl, r3
 801715e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8017162:	d807      	bhi.n	8017174 <_printf_i+0x28>
 8017164:	2f62      	cmp	r7, #98	; 0x62
 8017166:	d80a      	bhi.n	801717e <_printf_i+0x32>
 8017168:	2f00      	cmp	r7, #0
 801716a:	f000 80d8 	beq.w	801731e <_printf_i+0x1d2>
 801716e:	2f58      	cmp	r7, #88	; 0x58
 8017170:	f000 80a3 	beq.w	80172ba <_printf_i+0x16e>
 8017174:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017178:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801717c:	e03a      	b.n	80171f4 <_printf_i+0xa8>
 801717e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8017182:	2b15      	cmp	r3, #21
 8017184:	d8f6      	bhi.n	8017174 <_printf_i+0x28>
 8017186:	a101      	add	r1, pc, #4	; (adr r1, 801718c <_printf_i+0x40>)
 8017188:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801718c:	080171e5 	.word	0x080171e5
 8017190:	080171f9 	.word	0x080171f9
 8017194:	08017175 	.word	0x08017175
 8017198:	08017175 	.word	0x08017175
 801719c:	08017175 	.word	0x08017175
 80171a0:	08017175 	.word	0x08017175
 80171a4:	080171f9 	.word	0x080171f9
 80171a8:	08017175 	.word	0x08017175
 80171ac:	08017175 	.word	0x08017175
 80171b0:	08017175 	.word	0x08017175
 80171b4:	08017175 	.word	0x08017175
 80171b8:	08017305 	.word	0x08017305
 80171bc:	08017229 	.word	0x08017229
 80171c0:	080172e7 	.word	0x080172e7
 80171c4:	08017175 	.word	0x08017175
 80171c8:	08017175 	.word	0x08017175
 80171cc:	08017327 	.word	0x08017327
 80171d0:	08017175 	.word	0x08017175
 80171d4:	08017229 	.word	0x08017229
 80171d8:	08017175 	.word	0x08017175
 80171dc:	08017175 	.word	0x08017175
 80171e0:	080172ef 	.word	0x080172ef
 80171e4:	682b      	ldr	r3, [r5, #0]
 80171e6:	1d1a      	adds	r2, r3, #4
 80171e8:	681b      	ldr	r3, [r3, #0]
 80171ea:	602a      	str	r2, [r5, #0]
 80171ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80171f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80171f4:	2301      	movs	r3, #1
 80171f6:	e0a3      	b.n	8017340 <_printf_i+0x1f4>
 80171f8:	6820      	ldr	r0, [r4, #0]
 80171fa:	6829      	ldr	r1, [r5, #0]
 80171fc:	0606      	lsls	r6, r0, #24
 80171fe:	f101 0304 	add.w	r3, r1, #4
 8017202:	d50a      	bpl.n	801721a <_printf_i+0xce>
 8017204:	680e      	ldr	r6, [r1, #0]
 8017206:	602b      	str	r3, [r5, #0]
 8017208:	2e00      	cmp	r6, #0
 801720a:	da03      	bge.n	8017214 <_printf_i+0xc8>
 801720c:	232d      	movs	r3, #45	; 0x2d
 801720e:	4276      	negs	r6, r6
 8017210:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017214:	485e      	ldr	r0, [pc, #376]	; (8017390 <_printf_i+0x244>)
 8017216:	230a      	movs	r3, #10
 8017218:	e019      	b.n	801724e <_printf_i+0x102>
 801721a:	680e      	ldr	r6, [r1, #0]
 801721c:	602b      	str	r3, [r5, #0]
 801721e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8017222:	bf18      	it	ne
 8017224:	b236      	sxthne	r6, r6
 8017226:	e7ef      	b.n	8017208 <_printf_i+0xbc>
 8017228:	682b      	ldr	r3, [r5, #0]
 801722a:	6820      	ldr	r0, [r4, #0]
 801722c:	1d19      	adds	r1, r3, #4
 801722e:	6029      	str	r1, [r5, #0]
 8017230:	0601      	lsls	r1, r0, #24
 8017232:	d501      	bpl.n	8017238 <_printf_i+0xec>
 8017234:	681e      	ldr	r6, [r3, #0]
 8017236:	e002      	b.n	801723e <_printf_i+0xf2>
 8017238:	0646      	lsls	r6, r0, #25
 801723a:	d5fb      	bpl.n	8017234 <_printf_i+0xe8>
 801723c:	881e      	ldrh	r6, [r3, #0]
 801723e:	4854      	ldr	r0, [pc, #336]	; (8017390 <_printf_i+0x244>)
 8017240:	2f6f      	cmp	r7, #111	; 0x6f
 8017242:	bf0c      	ite	eq
 8017244:	2308      	moveq	r3, #8
 8017246:	230a      	movne	r3, #10
 8017248:	2100      	movs	r1, #0
 801724a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801724e:	6865      	ldr	r5, [r4, #4]
 8017250:	60a5      	str	r5, [r4, #8]
 8017252:	2d00      	cmp	r5, #0
 8017254:	bfa2      	ittt	ge
 8017256:	6821      	ldrge	r1, [r4, #0]
 8017258:	f021 0104 	bicge.w	r1, r1, #4
 801725c:	6021      	strge	r1, [r4, #0]
 801725e:	b90e      	cbnz	r6, 8017264 <_printf_i+0x118>
 8017260:	2d00      	cmp	r5, #0
 8017262:	d04d      	beq.n	8017300 <_printf_i+0x1b4>
 8017264:	4615      	mov	r5, r2
 8017266:	fbb6 f1f3 	udiv	r1, r6, r3
 801726a:	fb03 6711 	mls	r7, r3, r1, r6
 801726e:	5dc7      	ldrb	r7, [r0, r7]
 8017270:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017274:	4637      	mov	r7, r6
 8017276:	42bb      	cmp	r3, r7
 8017278:	460e      	mov	r6, r1
 801727a:	d9f4      	bls.n	8017266 <_printf_i+0x11a>
 801727c:	2b08      	cmp	r3, #8
 801727e:	d10b      	bne.n	8017298 <_printf_i+0x14c>
 8017280:	6823      	ldr	r3, [r4, #0]
 8017282:	07de      	lsls	r6, r3, #31
 8017284:	d508      	bpl.n	8017298 <_printf_i+0x14c>
 8017286:	6923      	ldr	r3, [r4, #16]
 8017288:	6861      	ldr	r1, [r4, #4]
 801728a:	4299      	cmp	r1, r3
 801728c:	bfde      	ittt	le
 801728e:	2330      	movle	r3, #48	; 0x30
 8017290:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017294:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017298:	1b52      	subs	r2, r2, r5
 801729a:	6122      	str	r2, [r4, #16]
 801729c:	f8cd a000 	str.w	sl, [sp]
 80172a0:	464b      	mov	r3, r9
 80172a2:	aa03      	add	r2, sp, #12
 80172a4:	4621      	mov	r1, r4
 80172a6:	4640      	mov	r0, r8
 80172a8:	f7ff fee2 	bl	8017070 <_printf_common>
 80172ac:	3001      	adds	r0, #1
 80172ae:	d14c      	bne.n	801734a <_printf_i+0x1fe>
 80172b0:	f04f 30ff 	mov.w	r0, #4294967295
 80172b4:	b004      	add	sp, #16
 80172b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80172ba:	4835      	ldr	r0, [pc, #212]	; (8017390 <_printf_i+0x244>)
 80172bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80172c0:	6829      	ldr	r1, [r5, #0]
 80172c2:	6823      	ldr	r3, [r4, #0]
 80172c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80172c8:	6029      	str	r1, [r5, #0]
 80172ca:	061d      	lsls	r5, r3, #24
 80172cc:	d514      	bpl.n	80172f8 <_printf_i+0x1ac>
 80172ce:	07df      	lsls	r7, r3, #31
 80172d0:	bf44      	itt	mi
 80172d2:	f043 0320 	orrmi.w	r3, r3, #32
 80172d6:	6023      	strmi	r3, [r4, #0]
 80172d8:	b91e      	cbnz	r6, 80172e2 <_printf_i+0x196>
 80172da:	6823      	ldr	r3, [r4, #0]
 80172dc:	f023 0320 	bic.w	r3, r3, #32
 80172e0:	6023      	str	r3, [r4, #0]
 80172e2:	2310      	movs	r3, #16
 80172e4:	e7b0      	b.n	8017248 <_printf_i+0xfc>
 80172e6:	6823      	ldr	r3, [r4, #0]
 80172e8:	f043 0320 	orr.w	r3, r3, #32
 80172ec:	6023      	str	r3, [r4, #0]
 80172ee:	2378      	movs	r3, #120	; 0x78
 80172f0:	4828      	ldr	r0, [pc, #160]	; (8017394 <_printf_i+0x248>)
 80172f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80172f6:	e7e3      	b.n	80172c0 <_printf_i+0x174>
 80172f8:	0659      	lsls	r1, r3, #25
 80172fa:	bf48      	it	mi
 80172fc:	b2b6      	uxthmi	r6, r6
 80172fe:	e7e6      	b.n	80172ce <_printf_i+0x182>
 8017300:	4615      	mov	r5, r2
 8017302:	e7bb      	b.n	801727c <_printf_i+0x130>
 8017304:	682b      	ldr	r3, [r5, #0]
 8017306:	6826      	ldr	r6, [r4, #0]
 8017308:	6961      	ldr	r1, [r4, #20]
 801730a:	1d18      	adds	r0, r3, #4
 801730c:	6028      	str	r0, [r5, #0]
 801730e:	0635      	lsls	r5, r6, #24
 8017310:	681b      	ldr	r3, [r3, #0]
 8017312:	d501      	bpl.n	8017318 <_printf_i+0x1cc>
 8017314:	6019      	str	r1, [r3, #0]
 8017316:	e002      	b.n	801731e <_printf_i+0x1d2>
 8017318:	0670      	lsls	r0, r6, #25
 801731a:	d5fb      	bpl.n	8017314 <_printf_i+0x1c8>
 801731c:	8019      	strh	r1, [r3, #0]
 801731e:	2300      	movs	r3, #0
 8017320:	6123      	str	r3, [r4, #16]
 8017322:	4615      	mov	r5, r2
 8017324:	e7ba      	b.n	801729c <_printf_i+0x150>
 8017326:	682b      	ldr	r3, [r5, #0]
 8017328:	1d1a      	adds	r2, r3, #4
 801732a:	602a      	str	r2, [r5, #0]
 801732c:	681d      	ldr	r5, [r3, #0]
 801732e:	6862      	ldr	r2, [r4, #4]
 8017330:	2100      	movs	r1, #0
 8017332:	4628      	mov	r0, r5
 8017334:	f7e8 ff8c 	bl	8000250 <memchr>
 8017338:	b108      	cbz	r0, 801733e <_printf_i+0x1f2>
 801733a:	1b40      	subs	r0, r0, r5
 801733c:	6060      	str	r0, [r4, #4]
 801733e:	6863      	ldr	r3, [r4, #4]
 8017340:	6123      	str	r3, [r4, #16]
 8017342:	2300      	movs	r3, #0
 8017344:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017348:	e7a8      	b.n	801729c <_printf_i+0x150>
 801734a:	6923      	ldr	r3, [r4, #16]
 801734c:	462a      	mov	r2, r5
 801734e:	4649      	mov	r1, r9
 8017350:	4640      	mov	r0, r8
 8017352:	47d0      	blx	sl
 8017354:	3001      	adds	r0, #1
 8017356:	d0ab      	beq.n	80172b0 <_printf_i+0x164>
 8017358:	6823      	ldr	r3, [r4, #0]
 801735a:	079b      	lsls	r3, r3, #30
 801735c:	d413      	bmi.n	8017386 <_printf_i+0x23a>
 801735e:	68e0      	ldr	r0, [r4, #12]
 8017360:	9b03      	ldr	r3, [sp, #12]
 8017362:	4298      	cmp	r0, r3
 8017364:	bfb8      	it	lt
 8017366:	4618      	movlt	r0, r3
 8017368:	e7a4      	b.n	80172b4 <_printf_i+0x168>
 801736a:	2301      	movs	r3, #1
 801736c:	4632      	mov	r2, r6
 801736e:	4649      	mov	r1, r9
 8017370:	4640      	mov	r0, r8
 8017372:	47d0      	blx	sl
 8017374:	3001      	adds	r0, #1
 8017376:	d09b      	beq.n	80172b0 <_printf_i+0x164>
 8017378:	3501      	adds	r5, #1
 801737a:	68e3      	ldr	r3, [r4, #12]
 801737c:	9903      	ldr	r1, [sp, #12]
 801737e:	1a5b      	subs	r3, r3, r1
 8017380:	42ab      	cmp	r3, r5
 8017382:	dcf2      	bgt.n	801736a <_printf_i+0x21e>
 8017384:	e7eb      	b.n	801735e <_printf_i+0x212>
 8017386:	2500      	movs	r5, #0
 8017388:	f104 0619 	add.w	r6, r4, #25
 801738c:	e7f5      	b.n	801737a <_printf_i+0x22e>
 801738e:	bf00      	nop
 8017390:	0801ae67 	.word	0x0801ae67
 8017394:	0801ae78 	.word	0x0801ae78

08017398 <_read_r>:
 8017398:	b538      	push	{r3, r4, r5, lr}
 801739a:	4d07      	ldr	r5, [pc, #28]	; (80173b8 <_read_r+0x20>)
 801739c:	4604      	mov	r4, r0
 801739e:	4608      	mov	r0, r1
 80173a0:	4611      	mov	r1, r2
 80173a2:	2200      	movs	r2, #0
 80173a4:	602a      	str	r2, [r5, #0]
 80173a6:	461a      	mov	r2, r3
 80173a8:	f7e9 fd14 	bl	8000dd4 <_read>
 80173ac:	1c43      	adds	r3, r0, #1
 80173ae:	d102      	bne.n	80173b6 <_read_r+0x1e>
 80173b0:	682b      	ldr	r3, [r5, #0]
 80173b2:	b103      	cbz	r3, 80173b6 <_read_r+0x1e>
 80173b4:	6023      	str	r3, [r4, #0]
 80173b6:	bd38      	pop	{r3, r4, r5, pc}
 80173b8:	2000d2a4 	.word	0x2000d2a4

080173bc <abort>:
 80173bc:	b508      	push	{r3, lr}
 80173be:	2006      	movs	r0, #6
 80173c0:	f000 f84e 	bl	8017460 <raise>
 80173c4:	2001      	movs	r0, #1
 80173c6:	f7e9 fcfb 	bl	8000dc0 <_exit>
	...

080173cc <_fstat_r>:
 80173cc:	b538      	push	{r3, r4, r5, lr}
 80173ce:	4d07      	ldr	r5, [pc, #28]	; (80173ec <_fstat_r+0x20>)
 80173d0:	2300      	movs	r3, #0
 80173d2:	4604      	mov	r4, r0
 80173d4:	4608      	mov	r0, r1
 80173d6:	4611      	mov	r1, r2
 80173d8:	602b      	str	r3, [r5, #0]
 80173da:	f7e9 fd40 	bl	8000e5e <_fstat>
 80173de:	1c43      	adds	r3, r0, #1
 80173e0:	d102      	bne.n	80173e8 <_fstat_r+0x1c>
 80173e2:	682b      	ldr	r3, [r5, #0]
 80173e4:	b103      	cbz	r3, 80173e8 <_fstat_r+0x1c>
 80173e6:	6023      	str	r3, [r4, #0]
 80173e8:	bd38      	pop	{r3, r4, r5, pc}
 80173ea:	bf00      	nop
 80173ec:	2000d2a4 	.word	0x2000d2a4

080173f0 <_isatty_r>:
 80173f0:	b538      	push	{r3, r4, r5, lr}
 80173f2:	4d06      	ldr	r5, [pc, #24]	; (801740c <_isatty_r+0x1c>)
 80173f4:	2300      	movs	r3, #0
 80173f6:	4604      	mov	r4, r0
 80173f8:	4608      	mov	r0, r1
 80173fa:	602b      	str	r3, [r5, #0]
 80173fc:	f7e9 fd3f 	bl	8000e7e <_isatty>
 8017400:	1c43      	adds	r3, r0, #1
 8017402:	d102      	bne.n	801740a <_isatty_r+0x1a>
 8017404:	682b      	ldr	r3, [r5, #0]
 8017406:	b103      	cbz	r3, 801740a <_isatty_r+0x1a>
 8017408:	6023      	str	r3, [r4, #0]
 801740a:	bd38      	pop	{r3, r4, r5, pc}
 801740c:	2000d2a4 	.word	0x2000d2a4

08017410 <_raise_r>:
 8017410:	291f      	cmp	r1, #31
 8017412:	b538      	push	{r3, r4, r5, lr}
 8017414:	4604      	mov	r4, r0
 8017416:	460d      	mov	r5, r1
 8017418:	d904      	bls.n	8017424 <_raise_r+0x14>
 801741a:	2316      	movs	r3, #22
 801741c:	6003      	str	r3, [r0, #0]
 801741e:	f04f 30ff 	mov.w	r0, #4294967295
 8017422:	bd38      	pop	{r3, r4, r5, pc}
 8017424:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8017426:	b112      	cbz	r2, 801742e <_raise_r+0x1e>
 8017428:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801742c:	b94b      	cbnz	r3, 8017442 <_raise_r+0x32>
 801742e:	4620      	mov	r0, r4
 8017430:	f000 f830 	bl	8017494 <_getpid_r>
 8017434:	462a      	mov	r2, r5
 8017436:	4601      	mov	r1, r0
 8017438:	4620      	mov	r0, r4
 801743a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801743e:	f000 b817 	b.w	8017470 <_kill_r>
 8017442:	2b01      	cmp	r3, #1
 8017444:	d00a      	beq.n	801745c <_raise_r+0x4c>
 8017446:	1c59      	adds	r1, r3, #1
 8017448:	d103      	bne.n	8017452 <_raise_r+0x42>
 801744a:	2316      	movs	r3, #22
 801744c:	6003      	str	r3, [r0, #0]
 801744e:	2001      	movs	r0, #1
 8017450:	e7e7      	b.n	8017422 <_raise_r+0x12>
 8017452:	2400      	movs	r4, #0
 8017454:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017458:	4628      	mov	r0, r5
 801745a:	4798      	blx	r3
 801745c:	2000      	movs	r0, #0
 801745e:	e7e0      	b.n	8017422 <_raise_r+0x12>

08017460 <raise>:
 8017460:	4b02      	ldr	r3, [pc, #8]	; (801746c <raise+0xc>)
 8017462:	4601      	mov	r1, r0
 8017464:	6818      	ldr	r0, [r3, #0]
 8017466:	f7ff bfd3 	b.w	8017410 <_raise_r>
 801746a:	bf00      	nop
 801746c:	20000030 	.word	0x20000030

08017470 <_kill_r>:
 8017470:	b538      	push	{r3, r4, r5, lr}
 8017472:	4d07      	ldr	r5, [pc, #28]	; (8017490 <_kill_r+0x20>)
 8017474:	2300      	movs	r3, #0
 8017476:	4604      	mov	r4, r0
 8017478:	4608      	mov	r0, r1
 801747a:	4611      	mov	r1, r2
 801747c:	602b      	str	r3, [r5, #0]
 801747e:	f7e9 fc8d 	bl	8000d9c <_kill>
 8017482:	1c43      	adds	r3, r0, #1
 8017484:	d102      	bne.n	801748c <_kill_r+0x1c>
 8017486:	682b      	ldr	r3, [r5, #0]
 8017488:	b103      	cbz	r3, 801748c <_kill_r+0x1c>
 801748a:	6023      	str	r3, [r4, #0]
 801748c:	bd38      	pop	{r3, r4, r5, pc}
 801748e:	bf00      	nop
 8017490:	2000d2a4 	.word	0x2000d2a4

08017494 <_getpid_r>:
 8017494:	f7e9 bc7a 	b.w	8000d8c <_getpid>

08017498 <_init>:
 8017498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801749a:	bf00      	nop
 801749c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801749e:	bc08      	pop	{r3}
 80174a0:	469e      	mov	lr, r3
 80174a2:	4770      	bx	lr

080174a4 <_fini>:
 80174a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80174a6:	bf00      	nop
 80174a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80174aa:	bc08      	pop	{r3}
 80174ac:	469e      	mov	lr, r3
 80174ae:	4770      	bx	lr
